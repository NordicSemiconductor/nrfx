/*

Copyright (c) 2010 - 2025, Nordic Semiconductor ASA All rights reserved.

SPDX-License-Identifier: BSD-3-Clause

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Neither the name of Nordic Semiconductor ASA nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef NRF54LS05B_ENGA_TYPES_H
#define NRF54LS05B_ENGA_TYPES_H

#ifdef __cplusplus
    extern "C" {
#endif

#include <stdint.h>
#include "compiler_abstraction.h"


/* ============================================ Include required type specifiers ============================================= */

#ifndef __I
  #ifdef __cplusplus
    #define __I     volatile                         /*!< Defines 'read only' permissions                                      */
  #else
    #define __I     volatile const                   /*!< Defines 'read only' permissions                                      */
  #endif
#endif
#ifndef __O
  #define __O     volatile                           /*!< Defines 'write only' permissions                                     */
#endif
#ifndef __IO
  #define __IO    volatile                           /*!< Defines 'read / write' permissions                                   */
#endif

/* The following defines should be used for structure members */
#ifndef __IM
  #define __IM     volatile const                    /*!< Defines 'read only' structure member permissions                     */
#endif
#ifndef __OM
  #define __OM     volatile                          /*!< Defines 'write only' structure member permissions                    */
#endif
#ifndef __IOM
  #define __IOM    volatile                          /*!< Defines 'read / write' structure member permissions                  */
#endif

/* ======================================================= Domain IDs ======================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_DOMAIN_NONE                            = 0,    /*!< No domain                                                            */
} NRF_DOMAINID_Type;

/* ====================================================== Processor IDs ====================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_PROCESSOR_CM33                         = 1,    /*!< (unspecified)                                                        */
  NRF_PROCESSOR_VPR                          = 2,    /*!< (unspecified)                                                        */
} NRF_PROCESSORID_Type;

/* ======================================================== Owner IDs ======================================================== */
/**
  * @brief (unspecified)
  */
typedef enum {
  NRF_OWNER_NONE                             = 0,    /*!< Used to denote that ownership is not enforced                        */
  NRF_OWNER_APPLICATION                      = 1,    /*!< Application Core                                                     */
  NRF_OWNER_KMU                              = 2,    /*!< KMU Accesses                                                         */
} NRF_OWNERID_Type;


/* ========================================= Start of section using anonymous unions ========================================= */

#include "compiler_abstraction.h"

#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Unsupported compiler type
#endif

/* =========================================================================================================================== */
/* ================                                    Peripherals Section                                    ================ */
/* =========================================================================================================================== */


/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ====================================================== Struct AAR_IN ====================================================== */
/**
  * @brief IN [AAR_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Input pointer                                         */
} NRF_AAR_IN_Type;                                   /*!< Size = 4 (0x004)                                                     */

/* AAR_IN_PTR: Input pointer */
  #define AAR_IN_PTR_ResetValue (0x00000000UL)       /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : Points to a job list containing AAR data structure */
  #define AAR_IN_PTR_PTR_Pos (0UL)                   /*!< Position of PTR field.                                               */
  #define AAR_IN_PTR_PTR_Msk (0xFFFFFFFFUL << AAR_IN_PTR_PTR_Pos) /*!< Bit mask of PTR field.                                  */



/* ===================================================== Struct AAR_OUT ====================================================== */
/**
  * @brief OUT [AAR_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer                                        */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x00000004) Number of bytes transferred in the last transaction   */
} NRF_AAR_OUT_Type;                                  /*!< Size = 8 (0x008)                                                     */

/* AAR_OUT_PTR: Output pointer */
  #define AAR_OUT_PTR_ResetValue (0x00000000UL)      /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : Output pointer */
  #define AAR_OUT_PTR_PTR_Pos (0UL)                  /*!< Position of PTR field.                                               */
  #define AAR_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << AAR_OUT_PTR_PTR_Pos) /*!< Bit mask of PTR field.                                */


/* AAR_OUT_AMOUNT: Number of bytes transferred in the last transaction */
  #define AAR_OUT_AMOUNT_ResetValue (0x00000000UL)   /*!< Reset value of AMOUNT register.                                      */

/* AMOUNT @Bits 0..7 : Number of bytes written to memory after triggering the START task. */
  #define AAR_OUT_AMOUNT_AMOUNT_Pos (0UL)            /*!< Position of AMOUNT field.                                            */
  #define AAR_OUT_AMOUNT_AMOUNT_Msk (0xFFUL << AAR_OUT_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.                       */
  #define AAR_OUT_AMOUNT_AMOUNT_Min (0x01UL)         /*!< Min value of AMOUNT field.                                           */
  #define AAR_OUT_AMOUNT_AMOUNT_Max (0xFFUL)         /*!< Max size of AMOUNT field.                                            */


/* ======================================================= Struct AAR ======================================================== */
/**
  * @brief Accelerated Address Resolver
  */
  typedef struct {                                   /*!< AAR Structure                                                        */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified in
                                                                         the IRK data structure*/
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop resolving addresses                              */
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000100) Address resolution procedure complete or ended due to
                                                                         an error*/
    __IOM uint32_t EVENTS_RESOLVED;                  /*!< (@ 0x00000104) Address resolved                                      */
    __IOM uint32_t EVENTS_NOTRESOLVED;               /*!< (@ 0x00000108) Address not resolved                                  */
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x0000010C) Operation aborted because of a STOP task or due to an
                                                                         error*/
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000180) Publish configuration for event END                   */
    __IOM uint32_t PUBLISH_RESOLVED;                 /*!< (@ 0x00000184) Publish configuration for event RESOLVED              */
    __IOM uint32_t PUBLISH_NOTRESOLVED;              /*!< (@ 0x00000188) Publish configuration for event NOTRESOLVED           */
    __IOM uint32_t PUBLISH_ERROR;                    /*!< (@ 0x0000018C) Publish configuration for event ERROR                 */
    __IM uint32_t RESERVED3[93];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED4[62];
    __IM uint32_t ERRORSTATUS;                       /*!< (@ 0x00000404) Error status                                          */
    __IM uint32_t RESERVED5[62];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable AAR                                            */
    __IM uint32_t RESERVED6;
    __IOM uint32_t MAXRESOLVED;                      /*!< (@ 0x00000508) Maximum number of IRKs to resolve                     */
    __IM uint32_t RESERVED7[9];
    __IOM NRF_AAR_IN_Type IN;                        /*!< (@ 0x00000530) IN EasyDMA channel                                    */
    __IM uint32_t RESERVED8;
    __IOM NRF_AAR_OUT_Type OUT;                      /*!< (@ 0x00000538) OUT EasyDMA channel                                   */
  } NRF_AAR_Type;                                    /*!< Size = 1344 (0x540)                                                  */

/* AAR_TASKS_START: Start resolving addresses based on IRKs specified in the IRK data structure */
  #define AAR_TASKS_START_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start resolving addresses based on IRKs specified in the IRK data structure */
  #define AAR_TASKS_START_TASKS_START_Pos (0UL)      /*!< Position of TASKS_START field.                                       */
  #define AAR_TASKS_START_TASKS_START_Msk (0x1UL << AAR_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.       */
  #define AAR_TASKS_START_TASKS_START_Min (0x1UL)    /*!< Min enumerator value of TASKS_START field.                           */
  #define AAR_TASKS_START_TASKS_START_Max (0x1UL)    /*!< Max enumerator value of TASKS_START field.                           */
  #define AAR_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                        */


/* AAR_TASKS_STOP: Stop resolving addresses */
  #define AAR_TASKS_STOP_ResetValue (0x00000000UL)   /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop resolving addresses */
  #define AAR_TASKS_STOP_TASKS_STOP_Pos (0UL)        /*!< Position of TASKS_STOP field.                                        */
  #define AAR_TASKS_STOP_TASKS_STOP_Msk (0x1UL << AAR_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.            */
  #define AAR_TASKS_STOP_TASKS_STOP_Min (0x1UL)      /*!< Min enumerator value of TASKS_STOP field.                            */
  #define AAR_TASKS_STOP_TASKS_STOP_Max (0x1UL)      /*!< Max enumerator value of TASKS_STOP field.                            */
  #define AAR_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)  /*!< Trigger task                                                         */


/* AAR_SUBSCRIBE_START: Subscribe configuration for task START */
  #define AAR_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define AAR_SUBSCRIBE_START_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define AAR_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << AAR_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define AAR_SUBSCRIBE_START_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define AAR_SUBSCRIBE_START_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define AAR_SUBSCRIBE_START_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define AAR_SUBSCRIBE_START_EN_Msk (0x1UL << AAR_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                          */
  #define AAR_SUBSCRIBE_START_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define AAR_SUBSCRIBE_START_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define AAR_SUBSCRIBE_START_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define AAR_SUBSCRIBE_START_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* AAR_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define AAR_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define AAR_SUBSCRIBE_STOP_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define AAR_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << AAR_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define AAR_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define AAR_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define AAR_SUBSCRIBE_STOP_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define AAR_SUBSCRIBE_STOP_EN_Msk (0x1UL << AAR_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                            */
  #define AAR_SUBSCRIBE_STOP_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define AAR_SUBSCRIBE_STOP_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define AAR_SUBSCRIBE_STOP_EN_Disabled (0x0UL)     /*!< Disable subscription                                                 */
  #define AAR_SUBSCRIBE_STOP_EN_Enabled (0x1UL)      /*!< Enable subscription                                                  */


/* AAR_EVENTS_END: Address resolution procedure complete or ended due to an error */
  #define AAR_EVENTS_END_ResetValue (0x00000000UL)   /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : Address resolution procedure complete or ended due to an error */
  #define AAR_EVENTS_END_EVENTS_END_Pos (0UL)        /*!< Position of EVENTS_END field.                                        */
  #define AAR_EVENTS_END_EVENTS_END_Msk (0x1UL << AAR_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.            */
  #define AAR_EVENTS_END_EVENTS_END_Min (0x0UL)      /*!< Min enumerator value of EVENTS_END field.                            */
  #define AAR_EVENTS_END_EVENTS_END_Max (0x1UL)      /*!< Max enumerator value of EVENTS_END field.                            */
  #define AAR_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                              */
  #define AAR_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                     */


/* AAR_EVENTS_RESOLVED: Address resolved */
  #define AAR_EVENTS_RESOLVED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RESOLVED register.                          */

/* EVENTS_RESOLVED @Bit 0 : Address resolved */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos (0UL) /*!< Position of EVENTS_RESOLVED field.                                */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Msk (0x1UL << AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos) /*!< Bit mask of
                                                                            EVENTS_RESOLVED field.*/
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Min (0x0UL) /*!< Min enumerator value of EVENTS_RESOLVED field.                  */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Max (0x1UL) /*!< Max enumerator value of EVENTS_RESOLVED field.                  */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Generated (0x1UL) /*!< Event generated                                           */


/* AAR_EVENTS_NOTRESOLVED: Address not resolved */
  #define AAR_EVENTS_NOTRESOLVED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_NOTRESOLVED register.                    */

/* EVENTS_NOTRESOLVED @Bit 0 : Address not resolved */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos (0UL) /*!< Position of EVENTS_NOTRESOLVED field.                       */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Msk (0x1UL << AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos) /*!< Bit mask
                                                                            of EVENTS_NOTRESOLVED field.*/
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Min (0x0UL) /*!< Min enumerator value of EVENTS_NOTRESOLVED field.         */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Max (0x1UL) /*!< Max enumerator value of EVENTS_NOTRESOLVED field.         */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Generated (0x1UL) /*!< Event generated                                     */


/* AAR_EVENTS_ERROR: Operation aborted because of a STOP task or due to an error */
  #define AAR_EVENTS_ERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ERROR register.                                */

/* EVENTS_ERROR @Bit 0 : Operation aborted because of a STOP task or due to an error */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)    /*!< Position of EVENTS_ERROR field.                                      */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << AAR_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field.  */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)  /*!< Min enumerator value of EVENTS_ERROR field.                          */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)  /*!< Max enumerator value of EVENTS_ERROR field.                          */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define AAR_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL) /*!< Event generated                                                 */


/* AAR_PUBLISH_END: Publish configuration for event END */
  #define AAR_PUBLISH_END_ResetValue (0x00000000UL)  /*!< Reset value of PUBLISH_END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define AAR_PUBLISH_END_CHIDX_Pos (0UL)            /*!< Position of CHIDX field.                                             */
  #define AAR_PUBLISH_END_CHIDX_Msk (0xFFUL << AAR_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                        */
  #define AAR_PUBLISH_END_CHIDX_Min (0x00UL)         /*!< Min value of CHIDX field.                                            */
  #define AAR_PUBLISH_END_CHIDX_Max (0xFFUL)         /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_END_EN_Pos (31UL)              /*!< Position of EN field.                                                */
  #define AAR_PUBLISH_END_EN_Msk (0x1UL << AAR_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                                  */
  #define AAR_PUBLISH_END_EN_Min (0x0UL)             /*!< Min enumerator value of EN field.                                    */
  #define AAR_PUBLISH_END_EN_Max (0x1UL)             /*!< Max enumerator value of EN field.                                    */
  #define AAR_PUBLISH_END_EN_Disabled (0x0UL)        /*!< Disable publishing                                                   */
  #define AAR_PUBLISH_END_EN_Enabled (0x1UL)         /*!< Enable publishing                                                    */


/* AAR_PUBLISH_RESOLVED: Publish configuration for event RESOLVED */
  #define AAR_PUBLISH_RESOLVED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RESOLVED register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event RESOLVED will publish to */
  #define AAR_PUBLISH_RESOLVED_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define AAR_PUBLISH_RESOLVED_CHIDX_Msk (0xFFUL << AAR_PUBLISH_RESOLVED_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define AAR_PUBLISH_RESOLVED_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define AAR_PUBLISH_RESOLVED_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_RESOLVED_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define AAR_PUBLISH_RESOLVED_EN_Msk (0x1UL << AAR_PUBLISH_RESOLVED_EN_Pos) /*!< Bit mask of EN field.                        */
  #define AAR_PUBLISH_RESOLVED_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define AAR_PUBLISH_RESOLVED_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define AAR_PUBLISH_RESOLVED_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define AAR_PUBLISH_RESOLVED_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* AAR_PUBLISH_NOTRESOLVED: Publish configuration for event NOTRESOLVED */
  #define AAR_PUBLISH_NOTRESOLVED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_NOTRESOLVED register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event NOTRESOLVED will publish to */
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Msk (0xFFUL << AAR_PUBLISH_NOTRESOLVED_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define AAR_PUBLISH_NOTRESOLVED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Msk (0x1UL << AAR_PUBLISH_NOTRESOLVED_EN_Pos) /*!< Bit mask of EN field.                  */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define AAR_PUBLISH_NOTRESOLVED_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* AAR_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define AAR_PUBLISH_ERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ERROR register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define AAR_PUBLISH_ERROR_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define AAR_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << AAR_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define AAR_PUBLISH_ERROR_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define AAR_PUBLISH_ERROR_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define AAR_PUBLISH_ERROR_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define AAR_PUBLISH_ERROR_EN_Msk (0x1UL << AAR_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field.                              */
  #define AAR_PUBLISH_ERROR_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define AAR_PUBLISH_ERROR_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define AAR_PUBLISH_ERROR_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define AAR_PUBLISH_ERROR_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* AAR_INTENSET: Enable interrupt */
  #define AAR_INTENSET_ResetValue (0x00000000UL)     /*!< Reset value of INTENSET register.                                    */

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define AAR_INTENSET_END_Pos (0UL)                 /*!< Position of END field.                                               */
  #define AAR_INTENSET_END_Msk (0x1UL << AAR_INTENSET_END_Pos) /*!< Bit mask of END field.                                     */
  #define AAR_INTENSET_END_Min (0x0UL)               /*!< Min enumerator value of END field.                                   */
  #define AAR_INTENSET_END_Max (0x1UL)               /*!< Max enumerator value of END field.                                   */
  #define AAR_INTENSET_END_Set (0x1UL)               /*!< Enable                                                               */
  #define AAR_INTENSET_END_Disabled (0x0UL)          /*!< Read: Disabled                                                       */
  #define AAR_INTENSET_END_Enabled (0x1UL)           /*!< Read: Enabled                                                        */

/* RESOLVED @Bit 1 : Write '1' to enable interrupt for event RESOLVED */
  #define AAR_INTENSET_RESOLVED_Pos (1UL)            /*!< Position of RESOLVED field.                                          */
  #define AAR_INTENSET_RESOLVED_Msk (0x1UL << AAR_INTENSET_RESOLVED_Pos) /*!< Bit mask of RESOLVED field.                      */
  #define AAR_INTENSET_RESOLVED_Min (0x0UL)          /*!< Min enumerator value of RESOLVED field.                              */
  #define AAR_INTENSET_RESOLVED_Max (0x1UL)          /*!< Max enumerator value of RESOLVED field.                              */
  #define AAR_INTENSET_RESOLVED_Set (0x1UL)          /*!< Enable                                                               */
  #define AAR_INTENSET_RESOLVED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define AAR_INTENSET_RESOLVED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* NOTRESOLVED @Bit 2 : Write '1' to enable interrupt for event NOTRESOLVED */
  #define AAR_INTENSET_NOTRESOLVED_Pos (2UL)         /*!< Position of NOTRESOLVED field.                                       */
  #define AAR_INTENSET_NOTRESOLVED_Msk (0x1UL << AAR_INTENSET_NOTRESOLVED_Pos) /*!< Bit mask of NOTRESOLVED field.             */
  #define AAR_INTENSET_NOTRESOLVED_Min (0x0UL)       /*!< Min enumerator value of NOTRESOLVED field.                           */
  #define AAR_INTENSET_NOTRESOLVED_Max (0x1UL)       /*!< Max enumerator value of NOTRESOLVED field.                           */
  #define AAR_INTENSET_NOTRESOLVED_Set (0x1UL)       /*!< Enable                                                               */
  #define AAR_INTENSET_NOTRESOLVED_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define AAR_INTENSET_NOTRESOLVED_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ERROR @Bit 3 : Write '1' to enable interrupt for event ERROR */
  #define AAR_INTENSET_ERROR_Pos (3UL)               /*!< Position of ERROR field.                                             */
  #define AAR_INTENSET_ERROR_Msk (0x1UL << AAR_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field.                               */
  #define AAR_INTENSET_ERROR_Min (0x0UL)             /*!< Min enumerator value of ERROR field.                                 */
  #define AAR_INTENSET_ERROR_Max (0x1UL)             /*!< Max enumerator value of ERROR field.                                 */
  #define AAR_INTENSET_ERROR_Set (0x1UL)             /*!< Enable                                                               */
  #define AAR_INTENSET_ERROR_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define AAR_INTENSET_ERROR_Enabled (0x1UL)         /*!< Read: Enabled                                                        */


/* AAR_INTENCLR: Disable interrupt */
  #define AAR_INTENCLR_ResetValue (0x00000000UL)     /*!< Reset value of INTENCLR register.                                    */

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define AAR_INTENCLR_END_Pos (0UL)                 /*!< Position of END field.                                               */
  #define AAR_INTENCLR_END_Msk (0x1UL << AAR_INTENCLR_END_Pos) /*!< Bit mask of END field.                                     */
  #define AAR_INTENCLR_END_Min (0x0UL)               /*!< Min enumerator value of END field.                                   */
  #define AAR_INTENCLR_END_Max (0x1UL)               /*!< Max enumerator value of END field.                                   */
  #define AAR_INTENCLR_END_Clear (0x1UL)             /*!< Disable                                                              */
  #define AAR_INTENCLR_END_Disabled (0x0UL)          /*!< Read: Disabled                                                       */
  #define AAR_INTENCLR_END_Enabled (0x1UL)           /*!< Read: Enabled                                                        */

/* RESOLVED @Bit 1 : Write '1' to disable interrupt for event RESOLVED */
  #define AAR_INTENCLR_RESOLVED_Pos (1UL)            /*!< Position of RESOLVED field.                                          */
  #define AAR_INTENCLR_RESOLVED_Msk (0x1UL << AAR_INTENCLR_RESOLVED_Pos) /*!< Bit mask of RESOLVED field.                      */
  #define AAR_INTENCLR_RESOLVED_Min (0x0UL)          /*!< Min enumerator value of RESOLVED field.                              */
  #define AAR_INTENCLR_RESOLVED_Max (0x1UL)          /*!< Max enumerator value of RESOLVED field.                              */
  #define AAR_INTENCLR_RESOLVED_Clear (0x1UL)        /*!< Disable                                                              */
  #define AAR_INTENCLR_RESOLVED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define AAR_INTENCLR_RESOLVED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* NOTRESOLVED @Bit 2 : Write '1' to disable interrupt for event NOTRESOLVED */
  #define AAR_INTENCLR_NOTRESOLVED_Pos (2UL)         /*!< Position of NOTRESOLVED field.                                       */
  #define AAR_INTENCLR_NOTRESOLVED_Msk (0x1UL << AAR_INTENCLR_NOTRESOLVED_Pos) /*!< Bit mask of NOTRESOLVED field.             */
  #define AAR_INTENCLR_NOTRESOLVED_Min (0x0UL)       /*!< Min enumerator value of NOTRESOLVED field.                           */
  #define AAR_INTENCLR_NOTRESOLVED_Max (0x1UL)       /*!< Max enumerator value of NOTRESOLVED field.                           */
  #define AAR_INTENCLR_NOTRESOLVED_Clear (0x1UL)     /*!< Disable                                                              */
  #define AAR_INTENCLR_NOTRESOLVED_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define AAR_INTENCLR_NOTRESOLVED_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ERROR @Bit 3 : Write '1' to disable interrupt for event ERROR */
  #define AAR_INTENCLR_ERROR_Pos (3UL)               /*!< Position of ERROR field.                                             */
  #define AAR_INTENCLR_ERROR_Msk (0x1UL << AAR_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field.                               */
  #define AAR_INTENCLR_ERROR_Min (0x0UL)             /*!< Min enumerator value of ERROR field.                                 */
  #define AAR_INTENCLR_ERROR_Max (0x1UL)             /*!< Max enumerator value of ERROR field.                                 */
  #define AAR_INTENCLR_ERROR_Clear (0x1UL)           /*!< Disable                                                              */
  #define AAR_INTENCLR_ERROR_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define AAR_INTENCLR_ERROR_Enabled (0x1UL)         /*!< Read: Enabled                                                        */


/* AAR_ERRORSTATUS: Error status */
  #define AAR_ERRORSTATUS_ResetValue (0x00000000UL)  /*!< Reset value of ERRORSTATUS register.                                 */

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define AAR_ERRORSTATUS_ERRORSTATUS_Pos (0UL)      /*!< Position of ERRORSTATUS field.                                       */
  #define AAR_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << AAR_ERRORSTATUS_ERRORSTATUS_Pos) /*!< Bit mask of ERRORSTATUS field.       */
  #define AAR_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)    /*!< Min enumerator value of ERRORSTATUS field.                           */
  #define AAR_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)    /*!< Max enumerator value of ERRORSTATUS field.                           */
  #define AAR_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL) /*!< No errors have occurred                                             */
  #define AAR_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL) /*!< End of INPTR job list before data structure was read.     */
  #define AAR_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL) /*!< End of OUTPTR job list before data structure was read.   */
  #define AAR_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL) /*!< Bus error during DMA access.                                       */


/* AAR_ENABLE: Enable AAR */
  #define AAR_ENABLE_ResetValue (0x00000000UL)       /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..1 : Enable or disable AAR */
  #define AAR_ENABLE_ENABLE_Pos (0UL)                /*!< Position of ENABLE field.                                            */
  #define AAR_ENABLE_ENABLE_Msk (0x3UL << AAR_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                                */
  #define AAR_ENABLE_ENABLE_Min (0x0UL)              /*!< Min enumerator value of ENABLE field.                                */
  #define AAR_ENABLE_ENABLE_Max (0x3UL)              /*!< Max enumerator value of ENABLE field.                                */
  #define AAR_ENABLE_ENABLE_Disabled (0x0UL)         /*!< Disable                                                              */
  #define AAR_ENABLE_ENABLE_Enabled (0x3UL)          /*!< Enable                                                               */


/* AAR_MAXRESOLVED: Maximum number of IRKs to resolve */
  #define AAR_MAXRESOLVED_ResetValue (0x00000001UL)  /*!< Reset value of MAXRESOLVED register.                                 */

/* MAXRESOLVED @Bits 0..11 : The maximum number of IRKs to resolve */
  #define AAR_MAXRESOLVED_MAXRESOLVED_Pos (0UL)      /*!< Position of MAXRESOLVED field.                                       */
  #define AAR_MAXRESOLVED_MAXRESOLVED_Msk (0xFFFUL << AAR_MAXRESOLVED_MAXRESOLVED_Pos) /*!< Bit mask of MAXRESOLVED field.     */
  #define AAR_MAXRESOLVED_MAXRESOLVED_Min (0x001UL)  /*!< Min value of MAXRESOLVED field.                                      */
  #define AAR_MAXRESOLVED_MAXRESOLVED_Max (0xFFFUL)  /*!< Max size of MAXRESOLVED field.                                       */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CACHE                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct CACHE_PROFILING ================================================== */
/**
  * @brief PROFILING [CACHE_PROFILING] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ENABLE;                            /*!< (@ 0x00000000) Enable the profiling counters.                        */
  __OM  uint32_t  CLEAR;                             /*!< (@ 0x00000004) Clear the profiling counters.                         */
  __IM  uint32_t  HIT;                               /*!< (@ 0x00000008) The cache hit counter for cache region.               */
  __IM  uint32_t  MISS;                              /*!< (@ 0x0000000C) The cache miss counter for cache region.              */
} NRF_CACHE_PROFILING_Type;                          /*!< Size = 16 (0x010)                                                    */

/* CACHE_PROFILING_ENABLE: Enable the profiling counters. */
  #define CACHE_PROFILING_ENABLE_ResetValue (0x00000000UL) /*!< Reset value of ENABLE register.                                */

/* ENABLE @Bit 0 : Enable the profiling counters */
  #define CACHE_PROFILING_ENABLE_ENABLE_Pos (0UL)    /*!< Position of ENABLE field.                                            */
  #define CACHE_PROFILING_ENABLE_ENABLE_Msk (0x1UL << CACHE_PROFILING_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.        */
  #define CACHE_PROFILING_ENABLE_ENABLE_Min (0x0UL)  /*!< Min enumerator value of ENABLE field.                                */
  #define CACHE_PROFILING_ENABLE_ENABLE_Max (0x1UL)  /*!< Max enumerator value of ENABLE field.                                */
  #define CACHE_PROFILING_ENABLE_ENABLE_Disable (0x0UL) /*!< Disable profiling                                                 */
  #define CACHE_PROFILING_ENABLE_ENABLE_Enable (0x1UL) /*!< Enable profiling                                                   */


/* CACHE_PROFILING_CLEAR: Clear the profiling counters. */
  #define CACHE_PROFILING_CLEAR_ResetValue (0x00000000UL) /*!< Reset value of CLEAR register.                                  */

/* CLEAR @Bit 0 : Clearing the profiling counters */
  #define CACHE_PROFILING_CLEAR_CLEAR_Pos (0UL)      /*!< Position of CLEAR field.                                             */
  #define CACHE_PROFILING_CLEAR_CLEAR_Msk (0x1UL << CACHE_PROFILING_CLEAR_CLEAR_Pos) /*!< Bit mask of CLEAR field.             */
  #define CACHE_PROFILING_CLEAR_CLEAR_Min (0x1UL)    /*!< Min enumerator value of CLEAR field.                                 */
  #define CACHE_PROFILING_CLEAR_CLEAR_Max (0x1UL)    /*!< Max enumerator value of CLEAR field.                                 */
  #define CACHE_PROFILING_CLEAR_CLEAR_Clear (0x1UL)  /*!< Clear the profiling counters                                         */


/* CACHE_PROFILING_HIT: The cache hit counter for cache region. */
  #define CACHE_PROFILING_HIT_ResetValue (0x00000000UL) /*!< Reset value of HIT register.                                      */

/* HITS @Bits 0..31 : Number of cache hits */
  #define CACHE_PROFILING_HIT_HITS_Pos (0UL)         /*!< Position of HITS field.                                              */
  #define CACHE_PROFILING_HIT_HITS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_HIT_HITS_Pos) /*!< Bit mask of HITS field.             */


/* CACHE_PROFILING_MISS: The cache miss counter for cache region. */
  #define CACHE_PROFILING_MISS_ResetValue (0x00000000UL) /*!< Reset value of MISS register.                                    */

/* MISSES @Bits 0..31 : Number of cache misses */
  #define CACHE_PROFILING_MISS_MISSES_Pos (0UL)      /*!< Position of MISSES field.                                            */
  #define CACHE_PROFILING_MISS_MISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_MISS_MISSES_Pos) /*!< Bit mask of MISSES field.     */


/* ====================================================== Struct CACHE ======================================================= */
/**
  * @brief Cache
  */
  typedef struct {                                   /*!< CACHE Structure                                                      */
    __IM uint32_t RESERVED[2];
    __OM uint32_t TASKS_INVALIDATECACHE;             /*!< (@ 0x00000008) Invalidate the cache.                                 */
    __IM uint32_t RESERVED1[253];
    __IM uint32_t STATUS;                            /*!< (@ 0x00000400) Status of the cache activities.                       */
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000404) Enable cache.                                         */
    __IM uint32_t RESERVED2[3];
    __IOM NRF_CACHE_PROFILING_Type PROFILING;        /*!< (@ 0x00000414) (unspecified)                                         */
  } NRF_CACHE_Type;                                  /*!< Size = 1060 (0x424)                                                  */

/* CACHE_TASKS_INVALIDATECACHE: Invalidate the cache. */
  #define CACHE_TASKS_INVALIDATECACHE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_INVALIDATECACHE register.            */

/* TASKS_INVALIDATECACHE @Bit 0 : Invalidate the cache. */
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Pos (0UL) /*!< Position of TASKS_INVALIDATECACHE field.            */
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Msk (0x1UL << CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Pos)
                                                                            /*!< Bit mask of TASKS_INVALIDATECACHE field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Min (0x1UL) /*!< Min enumerator value of TASKS_INVALIDATECACHE
                                                                            field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Max (0x1UL) /*!< Max enumerator value of TASKS_INVALIDATECACHE
                                                                            field.*/
  #define CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Trigger (0x1UL) /*!< Trigger task                                  */


/* CACHE_STATUS: Status of the cache activities. */
  #define CACHE_STATUS_ResetValue (0x00000000UL)     /*!< Reset value of STATUS register.                                      */

/* READY @Bit 0 : Ready status. */
  #define CACHE_STATUS_READY_Pos (0UL)               /*!< Position of READY field.                                             */
  #define CACHE_STATUS_READY_Msk (0x1UL << CACHE_STATUS_READY_Pos) /*!< Bit mask of READY field.                               */
  #define CACHE_STATUS_READY_Min (0x0UL)             /*!< Min enumerator value of READY field.                                 */
  #define CACHE_STATUS_READY_Max (0x1UL)             /*!< Max enumerator value of READY field.                                 */
  #define CACHE_STATUS_READY_Ready (0x0UL)           /*!< Activity is done and ready for the next activity.                    */
  #define CACHE_STATUS_READY_Busy (0x1UL)            /*!< Activity is in progress.                                             */


/* CACHE_ENABLE: Enable cache. */
  #define CACHE_ENABLE_ResetValue (0x00000000UL)     /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bit 0 : Enable cache */
  #define CACHE_ENABLE_ENABLE_Pos (0UL)              /*!< Position of ENABLE field.                                            */
  #define CACHE_ENABLE_ENABLE_Msk (0x1UL << CACHE_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                            */
  #define CACHE_ENABLE_ENABLE_Min (0x0UL)            /*!< Min enumerator value of ENABLE field.                                */
  #define CACHE_ENABLE_ENABLE_Max (0x1UL)            /*!< Max enumerator value of ENABLE field.                                */
  #define CACHE_ENABLE_ENABLE_Disabled (0x0UL)       /*!< Disable cache                                                        */
  #define CACHE_ENABLE_ENABLE_Enabled (0x1UL)        /*!< Enable cache                                                         */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct CCM_KEY ====================================================== */
/**
  * @brief KEY [CCM_KEY] (unspecified)
  */
typedef struct {
  __OM  uint32_t  VALUE[4];                          /*!< (@ 0x00000000) 128-bit AES key                                       */
} NRF_CCM_KEY_Type;                                  /*!< Size = 16 (0x010)                                                    */

/* CCM_KEY_VALUE: 128-bit AES key */
  #define CCM_KEY_VALUE_MaxCount (4UL)               /*!< Max size of VALUE[4] array.                                          */
  #define CCM_KEY_VALUE_MaxIndex (3UL)               /*!< Max index of VALUE[4] array.                                         */
  #define CCM_KEY_VALUE_MinIndex (0UL)               /*!< Min index of VALUE[4] array.                                         */
  #define CCM_KEY_VALUE_ResetValue (0x00000000UL)    /*!< Reset value of VALUE[4] register.                                    */

/* VALUE @Bits 0..31 : AES 128-bit key value, bits (32*(i+1))-1 : (32*i) */
  #define CCM_KEY_VALUE_VALUE_Pos (0UL)              /*!< Position of VALUE field.                                             */
  #define CCM_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << CCM_KEY_VALUE_VALUE_Pos) /*!< Bit mask of VALUE field.                      */



/* ==================================================== Struct CCM_NONCE ===================================================== */
/**
  * @brief NONCE [CCM_NONCE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  VALUE[4];                          /*!< (@ 0x00000000) 13-byte NONCE vector Only the lower 13 bytes are used */
} NRF_CCM_NONCE_Type;                                /*!< Size = 16 (0x010)                                                    */

/* CCM_NONCE_VALUE: 13-byte NONCE vector Only the lower 13 bytes are used */
  #define CCM_NONCE_VALUE_MaxCount (4UL)             /*!< Max size of VALUE[4] array.                                          */
  #define CCM_NONCE_VALUE_MaxIndex (3UL)             /*!< Max index of VALUE[4] array.                                         */
  #define CCM_NONCE_VALUE_MinIndex (0UL)             /*!< Min index of VALUE[4] array.                                         */
  #define CCM_NONCE_VALUE_ResetValue (0x00000000UL)  /*!< Reset value of VALUE[4] register.                                    */

/* VALUE @Bits 0..31 : NONCE value, bits (32*(n+1))-1 : (32*n) */
  #define CCM_NONCE_VALUE_VALUE_Pos (0UL)            /*!< Position of VALUE field.                                             */
  #define CCM_NONCE_VALUE_VALUE_Msk (0xFFFFFFFFUL << CCM_NONCE_VALUE_VALUE_Pos) /*!< Bit mask of VALUE field.                  */



/* ====================================================== Struct CCM_IN ====================================================== */
/**
  * @brief IN [CCM_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Input pointer Points to a job list containing
                                                                         unencrypted CCM data structure in Encryption mode
                                                                         Points to a job list containing encrypted CCM data
                                                                         structure in Decryption mode*/
} NRF_CCM_IN_Type;                                   /*!< Size = 4 (0x004)                                                     */

/* CCM_IN_PTR: Input pointer Points to a job list containing unencrypted CCM data structure in Encryption mode Points to a job
                list containing encrypted CCM data structure in Decryption mode */

  #define CCM_IN_PTR_ResetValue (0x00000000UL)       /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : Input pointer */
  #define CCM_IN_PTR_PTR_Pos (0UL)                   /*!< Position of PTR field.                                               */
  #define CCM_IN_PTR_PTR_Msk (0xFFFFFFFFUL << CCM_IN_PTR_PTR_Pos) /*!< Bit mask of PTR field.                                  */



/* ===================================================== Struct CCM_OUT ====================================================== */
/**
  * @brief OUT [CCM_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer Points to a job list containing
                                                                         encrypted CCM data structure in Encryption mode Points
                                                                         to a job list containing decrypted CCM data structure
                                                                         in Decryption mode*/
} NRF_CCM_OUT_Type;                                  /*!< Size = 4 (0x004)                                                     */

/* CCM_OUT_PTR: Output pointer Points to a job list containing encrypted CCM data structure in Encryption mode Points to a job
                 list containing decrypted CCM data structure in Decryption mode */

  #define CCM_OUT_PTR_ResetValue (0x00000000UL)      /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : Output pointer */
  #define CCM_OUT_PTR_PTR_Pos (0UL)                  /*!< Position of PTR field.                                               */
  #define CCM_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << CCM_OUT_PTR_PTR_Pos) /*!< Bit mask of PTR field.                                */


/* ======================================================= Struct CCM ======================================================== */
/**
  * @brief AES CCM Mode Encryption
  */
  typedef struct {                                   /*!< CCM Structure                                                        */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start encryption/decryption. This operation will stop
                                                                         by itself when completed.*/
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop encryption/decryption                            */
    __OM uint32_t TASKS_RATEOVERRIDE;                /*!< (@ 0x00000008) Override DATARATE setting in MODE register with the
                                                                         contents of the RATEOVERRIDE register for any ongoing
                                                                         encryption/decryption*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IOM uint32_t SUBSCRIBE_RATEOVERRIDE;           /*!< (@ 0x00000088) Subscribe configuration for task RATEOVERRIDE         */
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000104) Encrypt/decrypt complete or ended because of an error */
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000108) CCM error event                                       */
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000184) Publish configuration for event END                   */
    __IOM uint32_t PUBLISH_ERROR;                    /*!< (@ 0x00000188) Publish configuration for event ERROR                 */
    __IM uint32_t RESERVED3[94];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED4[61];
    __IM uint32_t MACSTATUS;                         /*!< (@ 0x00000400) MAC check result                                      */
    __IM uint32_t ERRORSTATUS;                       /*!< (@ 0x00000404) Error status                                          */
    __IM uint32_t RESERVED5[62];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable                                                */
    __IOM uint32_t MODE;                             /*!< (@ 0x00000504) Operation mode                                        */
    __IM uint32_t RESERVED6[2];
    __IOM NRF_CCM_KEY_Type KEY;                      /*!< (@ 0x00000510) (unspecified)                                         */
    __IOM NRF_CCM_NONCE_Type NONCE;                  /*!< (@ 0x00000520) (unspecified)                                         */
    __IOM NRF_CCM_IN_Type IN;                        /*!< (@ 0x00000530) IN EasyDMA channel                                    */
    __IM uint32_t RESERVED7;
    __IOM NRF_CCM_OUT_Type OUT;                      /*!< (@ 0x00000538) OUT EasyDMA channel                                   */
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t RATEOVERRIDE;                     /*!< (@ 0x00000544) Data rate override setting.                           */
    __IOM uint32_t ADATAMASK;                        /*!< (@ 0x00000548) CCM adata mask.                                       */
  } NRF_CCM_Type;                                    /*!< Size = 1356 (0x54C)                                                  */

/* CCM_TASKS_START: Start encryption/decryption. This operation will stop by itself when completed. */
  #define CCM_TASKS_START_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start encryption/decryption. This operation will stop by itself when completed. */
  #define CCM_TASKS_START_TASKS_START_Pos (0UL)      /*!< Position of TASKS_START field.                                       */
  #define CCM_TASKS_START_TASKS_START_Msk (0x1UL << CCM_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.       */
  #define CCM_TASKS_START_TASKS_START_Min (0x1UL)    /*!< Min enumerator value of TASKS_START field.                           */
  #define CCM_TASKS_START_TASKS_START_Max (0x1UL)    /*!< Max enumerator value of TASKS_START field.                           */
  #define CCM_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                        */


/* CCM_TASKS_STOP: Stop encryption/decryption */
  #define CCM_TASKS_STOP_ResetValue (0x00000000UL)   /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop encryption/decryption */
  #define CCM_TASKS_STOP_TASKS_STOP_Pos (0UL)        /*!< Position of TASKS_STOP field.                                        */
  #define CCM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << CCM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.            */
  #define CCM_TASKS_STOP_TASKS_STOP_Min (0x1UL)      /*!< Min enumerator value of TASKS_STOP field.                            */
  #define CCM_TASKS_STOP_TASKS_STOP_Max (0x1UL)      /*!< Max enumerator value of TASKS_STOP field.                            */
  #define CCM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)  /*!< Trigger task                                                         */


/* CCM_TASKS_RATEOVERRIDE: Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any
                            ongoing encryption/decryption */

  #define CCM_TASKS_RATEOVERRIDE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RATEOVERRIDE register.                    */

/* TASKS_RATEOVERRIDE @Bit 0 : Override DATARATE setting in MODE register with the contents of the RATEOVERRIDE register for any
                               ongoing encryption/decryption */

  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos (0UL) /*!< Position of TASKS_RATEOVERRIDE field.                       */
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Msk (0x1UL << CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos) /*!< Bit mask
                                                                            of TASKS_RATEOVERRIDE field.*/
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Min (0x1UL) /*!< Min enumerator value of TASKS_RATEOVERRIDE field.         */
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Max (0x1UL) /*!< Max enumerator value of TASKS_RATEOVERRIDE field.         */
  #define CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Trigger (0x1UL) /*!< Trigger task                                          */


/* CCM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define CCM_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define CCM_SUBSCRIBE_START_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define CCM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define CCM_SUBSCRIBE_START_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define CCM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_START_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define CCM_SUBSCRIBE_START_EN_Msk (0x1UL << CCM_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                          */
  #define CCM_SUBSCRIBE_START_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define CCM_SUBSCRIBE_START_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define CCM_SUBSCRIBE_START_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define CCM_SUBSCRIBE_START_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* CCM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define CCM_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define CCM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define CCM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define CCM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define CCM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_STOP_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define CCM_SUBSCRIBE_STOP_EN_Msk (0x1UL << CCM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                            */
  #define CCM_SUBSCRIBE_STOP_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define CCM_SUBSCRIBE_STOP_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define CCM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)     /*!< Disable subscription                                                 */
  #define CCM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)      /*!< Enable subscription                                                  */


/* CCM_SUBSCRIBE_RATEOVERRIDE: Subscribe configuration for task RATEOVERRIDE */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RATEOVERRIDE register.            */

/* CHIDX @Bits 0..7 : DPPI channel that task RATEOVERRIDE will subscribe to */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Msk (0xFFUL << CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Msk (0x1UL << CCM_SUBSCRIBE_RATEOVERRIDE_EN_Pos) /*!< Bit mask of EN field.            */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Disabled (0x0UL) /*!< Disable subscription                                             */
  #define CCM_SUBSCRIBE_RATEOVERRIDE_EN_Enabled (0x1UL) /*!< Enable subscription                                               */


/* CCM_EVENTS_END: Encrypt/decrypt complete or ended because of an error */
  #define CCM_EVENTS_END_ResetValue (0x00000000UL)   /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : Encrypt/decrypt complete or ended because of an error */
  #define CCM_EVENTS_END_EVENTS_END_Pos (0UL)        /*!< Position of EVENTS_END field.                                        */
  #define CCM_EVENTS_END_EVENTS_END_Msk (0x1UL << CCM_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.            */
  #define CCM_EVENTS_END_EVENTS_END_Min (0x0UL)      /*!< Min enumerator value of EVENTS_END field.                            */
  #define CCM_EVENTS_END_EVENTS_END_Max (0x1UL)      /*!< Max enumerator value of EVENTS_END field.                            */
  #define CCM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                              */
  #define CCM_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                     */


/* CCM_EVENTS_ERROR: CCM error event */
  #define CCM_EVENTS_ERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ERROR register.                                */

/* EVENTS_ERROR @Bit 0 : CCM error event */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)    /*!< Position of EVENTS_ERROR field.                                      */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << CCM_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field.  */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)  /*!< Min enumerator value of EVENTS_ERROR field.                          */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)  /*!< Max enumerator value of EVENTS_ERROR field.                          */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define CCM_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL) /*!< Event generated                                                 */


/* CCM_PUBLISH_END: Publish configuration for event END */
  #define CCM_PUBLISH_END_ResetValue (0x00000000UL)  /*!< Reset value of PUBLISH_END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define CCM_PUBLISH_END_CHIDX_Pos (0UL)            /*!< Position of CHIDX field.                                             */
  #define CCM_PUBLISH_END_CHIDX_Msk (0xFFUL << CCM_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                        */
  #define CCM_PUBLISH_END_CHIDX_Min (0x00UL)         /*!< Min value of CHIDX field.                                            */
  #define CCM_PUBLISH_END_CHIDX_Max (0xFFUL)         /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CCM_PUBLISH_END_EN_Pos (31UL)              /*!< Position of EN field.                                                */
  #define CCM_PUBLISH_END_EN_Msk (0x1UL << CCM_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                                  */
  #define CCM_PUBLISH_END_EN_Min (0x0UL)             /*!< Min enumerator value of EN field.                                    */
  #define CCM_PUBLISH_END_EN_Max (0x1UL)             /*!< Max enumerator value of EN field.                                    */
  #define CCM_PUBLISH_END_EN_Disabled (0x0UL)        /*!< Disable publishing                                                   */
  #define CCM_PUBLISH_END_EN_Enabled (0x1UL)         /*!< Enable publishing                                                    */


/* CCM_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define CCM_PUBLISH_ERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ERROR register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define CCM_PUBLISH_ERROR_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define CCM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << CCM_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define CCM_PUBLISH_ERROR_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define CCM_PUBLISH_ERROR_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CCM_PUBLISH_ERROR_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define CCM_PUBLISH_ERROR_EN_Msk (0x1UL << CCM_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field.                              */
  #define CCM_PUBLISH_ERROR_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define CCM_PUBLISH_ERROR_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define CCM_PUBLISH_ERROR_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define CCM_PUBLISH_ERROR_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* CCM_INTENSET: Enable interrupt */
  #define CCM_INTENSET_ResetValue (0x00000000UL)     /*!< Reset value of INTENSET register.                                    */

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define CCM_INTENSET_END_Pos (1UL)                 /*!< Position of END field.                                               */
  #define CCM_INTENSET_END_Msk (0x1UL << CCM_INTENSET_END_Pos) /*!< Bit mask of END field.                                     */
  #define CCM_INTENSET_END_Min (0x0UL)               /*!< Min enumerator value of END field.                                   */
  #define CCM_INTENSET_END_Max (0x1UL)               /*!< Max enumerator value of END field.                                   */
  #define CCM_INTENSET_END_Set (0x1UL)               /*!< Enable                                                               */
  #define CCM_INTENSET_END_Disabled (0x0UL)          /*!< Read: Disabled                                                       */
  #define CCM_INTENSET_END_Enabled (0x1UL)           /*!< Read: Enabled                                                        */

/* ERROR @Bit 2 : Write '1' to enable interrupt for event ERROR */
  #define CCM_INTENSET_ERROR_Pos (2UL)               /*!< Position of ERROR field.                                             */
  #define CCM_INTENSET_ERROR_Msk (0x1UL << CCM_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field.                               */
  #define CCM_INTENSET_ERROR_Min (0x0UL)             /*!< Min enumerator value of ERROR field.                                 */
  #define CCM_INTENSET_ERROR_Max (0x1UL)             /*!< Max enumerator value of ERROR field.                                 */
  #define CCM_INTENSET_ERROR_Set (0x1UL)             /*!< Enable                                                               */
  #define CCM_INTENSET_ERROR_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define CCM_INTENSET_ERROR_Enabled (0x1UL)         /*!< Read: Enabled                                                        */


/* CCM_INTENCLR: Disable interrupt */
  #define CCM_INTENCLR_ResetValue (0x00000000UL)     /*!< Reset value of INTENCLR register.                                    */

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define CCM_INTENCLR_END_Pos (1UL)                 /*!< Position of END field.                                               */
  #define CCM_INTENCLR_END_Msk (0x1UL << CCM_INTENCLR_END_Pos) /*!< Bit mask of END field.                                     */
  #define CCM_INTENCLR_END_Min (0x0UL)               /*!< Min enumerator value of END field.                                   */
  #define CCM_INTENCLR_END_Max (0x1UL)               /*!< Max enumerator value of END field.                                   */
  #define CCM_INTENCLR_END_Clear (0x1UL)             /*!< Disable                                                              */
  #define CCM_INTENCLR_END_Disabled (0x0UL)          /*!< Read: Disabled                                                       */
  #define CCM_INTENCLR_END_Enabled (0x1UL)           /*!< Read: Enabled                                                        */

/* ERROR @Bit 2 : Write '1' to disable interrupt for event ERROR */
  #define CCM_INTENCLR_ERROR_Pos (2UL)               /*!< Position of ERROR field.                                             */
  #define CCM_INTENCLR_ERROR_Msk (0x1UL << CCM_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field.                               */
  #define CCM_INTENCLR_ERROR_Min (0x0UL)             /*!< Min enumerator value of ERROR field.                                 */
  #define CCM_INTENCLR_ERROR_Max (0x1UL)             /*!< Max enumerator value of ERROR field.                                 */
  #define CCM_INTENCLR_ERROR_Clear (0x1UL)           /*!< Disable                                                              */
  #define CCM_INTENCLR_ERROR_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define CCM_INTENCLR_ERROR_Enabled (0x1UL)         /*!< Read: Enabled                                                        */


/* CCM_MACSTATUS: MAC check result */
  #define CCM_MACSTATUS_ResetValue (0x00000000UL)    /*!< Reset value of MACSTATUS register.                                   */

/* MACSTATUS @Bit 0 : The result of the MAC check performed during the previous decryption operation */
  #define CCM_MACSTATUS_MACSTATUS_Pos (0UL)          /*!< Position of MACSTATUS field.                                         */
  #define CCM_MACSTATUS_MACSTATUS_Msk (0x1UL << CCM_MACSTATUS_MACSTATUS_Pos) /*!< Bit mask of MACSTATUS field.                 */
  #define CCM_MACSTATUS_MACSTATUS_Min (0x0UL)        /*!< Min enumerator value of MACSTATUS field.                             */
  #define CCM_MACSTATUS_MACSTATUS_Max (0x1UL)        /*!< Max enumerator value of MACSTATUS field.                             */
  #define CCM_MACSTATUS_MACSTATUS_CheckFailed (0x0UL) /*!< MAC check failed                                                    */
  #define CCM_MACSTATUS_MACSTATUS_CheckPassed (0x1UL) /*!< MAC check passed                                                    */


/* CCM_ERRORSTATUS: Error status */
  #define CCM_ERRORSTATUS_ResetValue (0x00000000UL)  /*!< Reset value of ERRORSTATUS register.                                 */

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define CCM_ERRORSTATUS_ERRORSTATUS_Pos (0UL)      /*!< Position of ERRORSTATUS field.                                       */
  #define CCM_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << CCM_ERRORSTATUS_ERRORSTATUS_Pos) /*!< Bit mask of ERRORSTATUS field.       */
  #define CCM_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)    /*!< Min enumerator value of ERRORSTATUS field.                           */
  #define CCM_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)    /*!< Max enumerator value of ERRORSTATUS field.                           */
  #define CCM_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL) /*!< No errors have occurred                                             */
  #define CCM_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL) /*!< End of INPTR job list before CCM data structure was read. */
  #define CCM_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL) /*!< End of OUTPTR job list before CCM data structure was
                                                                      read.*/
  #define CCM_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow (0x3UL) /*!< Encryption of the unencrypted CCM data structure did not
                                                                     complete in time.*/
  #define CCM_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL) /*!< Bus error during DMA access.                                       */


/* CCM_ENABLE: Enable */
  #define CCM_ENABLE_ResetValue (0x00000000UL)       /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..1 : Enable or disable CCM */
  #define CCM_ENABLE_ENABLE_Pos (0UL)                /*!< Position of ENABLE field.                                            */
  #define CCM_ENABLE_ENABLE_Msk (0x3UL << CCM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                                */
  #define CCM_ENABLE_ENABLE_Min (0x0UL)              /*!< Min enumerator value of ENABLE field.                                */
  #define CCM_ENABLE_ENABLE_Max (0x2UL)              /*!< Max enumerator value of ENABLE field.                                */
  #define CCM_ENABLE_ENABLE_Disabled (0x0UL)         /*!< Disable                                                              */
  #define CCM_ENABLE_ENABLE_Enabled (0x2UL)          /*!< Enable                                                               */


/* CCM_MODE: Operation mode */
  #define CCM_MODE_ResetValue (0x00000001UL)         /*!< Reset value of MODE register.                                        */

/* MODE @Bits 0..1 : The mode of operation to be used. The settings in this register apply when the CRYPT task is triggered. */
  #define CCM_MODE_MODE_Pos (0UL)                    /*!< Position of MODE field.                                              */
  #define CCM_MODE_MODE_Msk (0x3UL << CCM_MODE_MODE_Pos) /*!< Bit mask of MODE field.                                          */
  #define CCM_MODE_MODE_Min (0x0UL)                  /*!< Min enumerator value of MODE field.                                  */
  #define CCM_MODE_MODE_Max (0x2UL)                  /*!< Max enumerator value of MODE field.                                  */
  #define CCM_MODE_MODE_Encryption (0x0UL)           /*!< AES CCM packet encryption mode                                       */
  #define CCM_MODE_MODE_Decryption (0x1UL)           /*!< This mode will run CCM decryption in the speed of the DATARATE field.*/
  #define CCM_MODE_MODE_FastDecryption (0x2UL)       /*!< AES CCM decryption mode.                                             */

/* PROTOCOL @Bits 8..9 : Protocol and packet format selection */
  #define CCM_MODE_PROTOCOL_Pos (8UL)                /*!< Position of PROTOCOL field.                                          */
  #define CCM_MODE_PROTOCOL_Msk (0x3UL << CCM_MODE_PROTOCOL_Pos) /*!< Bit mask of PROTOCOL field.                              */
  #define CCM_MODE_PROTOCOL_Min (0x0UL)              /*!< Min enumerator value of PROTOCOL field.                              */
  #define CCM_MODE_PROTOCOL_Max (0x1UL)              /*!< Max enumerator value of PROTOCOL field.                              */
  #define CCM_MODE_PROTOCOL_Ble (0x0UL)              /*!< Bluetooth Low Energy packet format                                   */
  #define CCM_MODE_PROTOCOL_Ieee802154 (0x1UL)       /*!< 802.15.4 packet format                                               */

/* DATARATE @Bits 16..18 : Radio data rate that the CCM shall run synchronous with */
  #define CCM_MODE_DATARATE_Pos (16UL)               /*!< Position of DATARATE field.                                          */
  #define CCM_MODE_DATARATE_Msk (0x7UL << CCM_MODE_DATARATE_Pos) /*!< Bit mask of DATARATE field.                              */
  #define CCM_MODE_DATARATE_Min (0x0UL)              /*!< Min enumerator value of DATARATE field.                              */
  #define CCM_MODE_DATARATE_Max (0x5UL)              /*!< Max enumerator value of DATARATE field.                              */
  #define CCM_MODE_DATARATE_125Kbit (0x0UL)          /*!< 125 Kbps                                                             */
  #define CCM_MODE_DATARATE_250Kbit (0x1UL)          /*!< 250 Kbps                                                             */
  #define CCM_MODE_DATARATE_500Kbit (0x2UL)          /*!< 500 Kbps                                                             */
  #define CCM_MODE_DATARATE_1Mbit (0x3UL)            /*!< 1 Mbps                                                               */
  #define CCM_MODE_DATARATE_2Mbit (0x4UL)            /*!< 2 Mbps                                                               */
  #define CCM_MODE_DATARATE_4Mbit (0x5UL)            /*!< 4 Mbps                                                               */

/* MACLEN @Bits 24..26 : CCM MAC length (bytes) */
  #define CCM_MODE_MACLEN_Pos (24UL)                 /*!< Position of MACLEN field.                                            */
  #define CCM_MODE_MACLEN_Msk (0x7UL << CCM_MODE_MACLEN_Pos) /*!< Bit mask of MACLEN field.                                    */
  #define CCM_MODE_MACLEN_Min (0x0UL)                /*!< Min enumerator value of MACLEN field.                                */
  #define CCM_MODE_MACLEN_Max (0x7UL)                /*!< Max enumerator value of MACLEN field.                                */
  #define CCM_MODE_MACLEN_M0 (0x0UL)                 /*!< M = 0 This is a special case for CCM* where encryption is required but
                                                          not authentication*/
  #define CCM_MODE_MACLEN_M4 (0x1UL)                 /*!< M = 4                                                                */
  #define CCM_MODE_MACLEN_M6 (0x2UL)                 /*!< M = 6                                                                */
  #define CCM_MODE_MACLEN_M8 (0x3UL)                 /*!< M = 8                                                                */
  #define CCM_MODE_MACLEN_M10 (0x4UL)                /*!< M = 10                                                               */
  #define CCM_MODE_MACLEN_M12 (0x5UL)                /*!< M = 12                                                               */
  #define CCM_MODE_MACLEN_M14 (0x6UL)                /*!< M = 14                                                               */
  #define CCM_MODE_MACLEN_M16 (0x7UL)                /*!< M = 16                                                               */


/* CCM_RATEOVERRIDE: Data rate override setting. */
  #define CCM_RATEOVERRIDE_ResetValue (0x00000002UL) /*!< Reset value of RATEOVERRIDE register.                                */

/* RATEOVERRIDE @Bits 0..2 : Data rate override setting. */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Pos (0UL)    /*!< Position of RATEOVERRIDE field.                                      */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Msk (0x7UL << CCM_RATEOVERRIDE_RATEOVERRIDE_Pos) /*!< Bit mask of RATEOVERRIDE field.  */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Min (0x0UL)  /*!< Min enumerator value of RATEOVERRIDE field.                          */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_Max (0x5UL)  /*!< Max enumerator value of RATEOVERRIDE field.                          */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_125Kbit (0x0UL) /*!< 125 Kbps                                                          */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_500Kbit (0x2UL) /*!< 500 Kbps                                                          */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_1Mbit (0x3UL) /*!< 1 Mbps                                                              */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_2Mbit (0x4UL) /*!< 2 Mbps                                                              */
  #define CCM_RATEOVERRIDE_RATEOVERRIDE_4Mbit (0x5UL) /*!< 4 Mbps                                                              */


/* CCM_ADATAMASK: CCM adata mask. */
  #define CCM_ADATAMASK_ResetValue (0x000000E3UL)    /*!< Reset value of ADATAMASK register.                                   */

/* ADATAMASK @Bits 0..7 : CCM adata mask. */
  #define CCM_ADATAMASK_ADATAMASK_Pos (0UL)          /*!< Position of ADATAMASK field.                                         */
  #define CCM_ADATAMASK_ADATAMASK_Msk (0xFFUL << CCM_ADATAMASK_ADATAMASK_Pos) /*!< Bit mask of ADATAMASK field.                */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CLOCK                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct CLOCK_XO ===================================================== */
/**
  * @brief XO [CLOCK_XO] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;                               /*!< (@ 0x00000008) Indicates that XOSTART task was triggered             */
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) XO status                                             */
} NRF_CLOCK_XO_Type;                                 /*!< Size = 16 (0x010)                                                    */

/* CLOCK_XO_RUN: Indicates that XOSTART task was triggered */
  #define CLOCK_XO_RUN_ResetValue (0x00000000UL)     /*!< Reset value of RUN register.                                         */

/* STATUS @Bit 0 : XOSTART task triggered or not */
  #define CLOCK_XO_RUN_STATUS_Pos (0UL)              /*!< Position of STATUS field.                                            */
  #define CLOCK_XO_RUN_STATUS_Msk (0x1UL << CLOCK_XO_RUN_STATUS_Pos) /*!< Bit mask of STATUS field.                            */
  #define CLOCK_XO_RUN_STATUS_Min (0x0UL)            /*!< Min enumerator value of STATUS field.                                */
  #define CLOCK_XO_RUN_STATUS_Max (0x1UL)            /*!< Max enumerator value of STATUS field.                                */
  #define CLOCK_XO_RUN_STATUS_NotTriggered (0x0UL)   /*!< Task not triggered                                                   */
  #define CLOCK_XO_RUN_STATUS_Triggered (0x1UL)      /*!< Task triggered                                                       */


/* CLOCK_XO_STAT: XO status */
  #define CLOCK_XO_STAT_ResetValue (0x00000000UL)    /*!< Reset value of STAT register.                                        */

/* STATE @Bit 16 : XO state (Running between START task and STOPPED event) */
  #define CLOCK_XO_STAT_STATE_Pos (16UL)             /*!< Position of STATE field.                                             */
  #define CLOCK_XO_STAT_STATE_Msk (0x1UL << CLOCK_XO_STAT_STATE_Pos) /*!< Bit mask of STATE field.                             */
  #define CLOCK_XO_STAT_STATE_Min (0x0UL)            /*!< Min enumerator value of STATE field.                                 */
  #define CLOCK_XO_STAT_STATE_Max (0x1UL)            /*!< Max enumerator value of STATE field.                                 */
  #define CLOCK_XO_STAT_STATE_NotRunning (0x0UL)     /*!< XO is not running                                                    */
  #define CLOCK_XO_STAT_STATE_Running (0x1UL)        /*!< XO is running                                                        */



/* ==================================================== Struct CLOCK_PLL ===================================================== */
/**
  * @brief PLL [CLOCK_PLL] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  RUN;                               /*!< (@ 0x00000008) Indicates that PLLSTART task was triggered            */
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Which PLL settings were selected when triggering START
                                                                         task*/
} NRF_CLOCK_PLL_Type;                                /*!< Size = 16 (0x010)                                                    */

/* CLOCK_PLL_RUN: Indicates that PLLSTART task was triggered */
  #define CLOCK_PLL_RUN_ResetValue (0x00000000UL)    /*!< Reset value of RUN register.                                         */

/* STATUS @Bit 0 : PLLSTART task triggered or not */
  #define CLOCK_PLL_RUN_STATUS_Pos (0UL)             /*!< Position of STATUS field.                                            */
  #define CLOCK_PLL_RUN_STATUS_Msk (0x1UL << CLOCK_PLL_RUN_STATUS_Pos) /*!< Bit mask of STATUS field.                          */
  #define CLOCK_PLL_RUN_STATUS_Min (0x0UL)           /*!< Min enumerator value of STATUS field.                                */
  #define CLOCK_PLL_RUN_STATUS_Max (0x1UL)           /*!< Max enumerator value of STATUS field.                                */
  #define CLOCK_PLL_RUN_STATUS_NotTriggered (0x0UL)  /*!< Task not triggered                                                   */
  #define CLOCK_PLL_RUN_STATUS_Triggered (0x1UL)     /*!< Task triggered                                                       */


/* CLOCK_PLL_STAT: Which PLL settings were selected when triggering START task */
  #define CLOCK_PLL_STAT_ResetValue (0x00000000UL)   /*!< Reset value of STAT register.                                        */

/* STATE @Bit 16 : PLL state (Running between START task and STOPPED event) */
  #define CLOCK_PLL_STAT_STATE_Pos (16UL)            /*!< Position of STATE field.                                             */
  #define CLOCK_PLL_STAT_STATE_Msk (0x1UL << CLOCK_PLL_STAT_STATE_Pos) /*!< Bit mask of STATE field.                           */
  #define CLOCK_PLL_STAT_STATE_Min (0x0UL)           /*!< Min enumerator value of STATE field.                                 */
  #define CLOCK_PLL_STAT_STATE_Max (0x1UL)           /*!< Max enumerator value of STATE field.                                 */
  #define CLOCK_PLL_STAT_STATE_NotRunning (0x0UL)    /*!< PLL is not running                                                   */
  #define CLOCK_PLL_STAT_STATE_Running (0x1UL)       /*!< PLL is running                                                       */



/* =================================================== Struct CLOCK_LFCLK ==================================================== */
/**
  * @brief LFCLK [CLOCK_LFCLK] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SRC;                               /*!< (@ 0x00000000) Clock source for LFCLK                                */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  RUN;                               /*!< (@ 0x00000008) Indicates that LFCLKSTART task was triggered          */
  __IM  uint32_t  STAT;                              /*!< (@ 0x0000000C) Copy of LFCLK.SRCCOPY register, set when LFCLKSTARTED
                                                                         event is triggered.*/
  __IOM uint32_t  SRCCOPY;                           /*!< (@ 0x00000010) Copy of LFCLK.SRC register, set when LFCLKSTART task is
                                                                         triggered*/
} NRF_CLOCK_LFCLK_Type;                              /*!< Size = 20 (0x014)                                                    */

/* CLOCK_LFCLK_SRC: Clock source for LFCLK */
  #define CLOCK_LFCLK_SRC_ResetValue (0x00000000UL)  /*!< Reset value of SRC register.                                         */

/* SRC @Bits 0..1 : Select which LFCLK source is started by the LFCLKSTART task */
  #define CLOCK_LFCLK_SRC_SRC_Pos (0UL)              /*!< Position of SRC field.                                               */
  #define CLOCK_LFCLK_SRC_SRC_Msk (0x3UL << CLOCK_LFCLK_SRC_SRC_Pos) /*!< Bit mask of SRC field.                               */
  #define CLOCK_LFCLK_SRC_SRC_Min (0x0UL)            /*!< Min enumerator value of SRC field.                                   */
  #define CLOCK_LFCLK_SRC_SRC_Max (0x2UL)            /*!< Max enumerator value of SRC field.                                   */
  #define CLOCK_LFCLK_SRC_SRC_LFRC (0x0UL)           /*!< 32.768 kHz RC oscillator                                             */
  #define CLOCK_LFCLK_SRC_SRC_LFXO (0x1UL)           /*!< 32.768 kHz crystal oscillator                                        */
  #define CLOCK_LFCLK_SRC_SRC_LFSYNT (0x2UL)         /*!< 32.768 kHz synthesized from HFCLK                                    */


/* CLOCK_LFCLK_RUN: Indicates that LFCLKSTART task was triggered */
  #define CLOCK_LFCLK_RUN_ResetValue (0x00000000UL)  /*!< Reset value of RUN register.                                         */

/* STATUS @Bit 0 : LFCLKSTART task triggered or not */
  #define CLOCK_LFCLK_RUN_STATUS_Pos (0UL)           /*!< Position of STATUS field.                                            */
  #define CLOCK_LFCLK_RUN_STATUS_Msk (0x1UL << CLOCK_LFCLK_RUN_STATUS_Pos) /*!< Bit mask of STATUS field.                      */
  #define CLOCK_LFCLK_RUN_STATUS_Min (0x0UL)         /*!< Min enumerator value of STATUS field.                                */
  #define CLOCK_LFCLK_RUN_STATUS_Max (0x1UL)         /*!< Max enumerator value of STATUS field.                                */
  #define CLOCK_LFCLK_RUN_STATUS_NotTriggered (0x0UL) /*!< Task not triggered                                                  */
  #define CLOCK_LFCLK_RUN_STATUS_Triggered (0x1UL)   /*!< Task triggered                                                       */


/* CLOCK_LFCLK_STAT: Copy of LFCLK.SRCCOPY register, set when LFCLKSTARTED event is triggered. */
  #define CLOCK_LFCLK_STAT_ResetValue (0x00000000UL) /*!< Reset value of STAT register.                                        */

/* SRC @Bits 0..1 : Value of LFCLK.SRCCOPY register when LFCLKSTARTED event was triggered */
  #define CLOCK_LFCLK_STAT_SRC_Pos (0UL)             /*!< Position of SRC field.                                               */
  #define CLOCK_LFCLK_STAT_SRC_Msk (0x3UL << CLOCK_LFCLK_STAT_SRC_Pos) /*!< Bit mask of SRC field.                             */
  #define CLOCK_LFCLK_STAT_SRC_Min (0x0UL)           /*!< Min enumerator value of SRC field.                                   */
  #define CLOCK_LFCLK_STAT_SRC_Max (0x2UL)           /*!< Max enumerator value of SRC field.                                   */
  #define CLOCK_LFCLK_STAT_SRC_LFRC (0x0UL)          /*!< 32.768 kHz RC oscillator                                             */
  #define CLOCK_LFCLK_STAT_SRC_LFXO (0x1UL)          /*!< 32.768 kHz crystal oscillator                                        */
  #define CLOCK_LFCLK_STAT_SRC_LFSYNT (0x2UL)        /*!< 32.768 kHz synthesized from HFCLK                                    */

/* STATE @Bit 16 : LFCLK state (Running between START task and STOPPED event) */
  #define CLOCK_LFCLK_STAT_STATE_Pos (16UL)          /*!< Position of STATE field.                                             */
  #define CLOCK_LFCLK_STAT_STATE_Msk (0x1UL << CLOCK_LFCLK_STAT_STATE_Pos) /*!< Bit mask of STATE field.                       */
  #define CLOCK_LFCLK_STAT_STATE_Min (0x0UL)         /*!< Min enumerator value of STATE field.                                 */
  #define CLOCK_LFCLK_STAT_STATE_Max (0x1UL)         /*!< Max enumerator value of STATE field.                                 */
  #define CLOCK_LFCLK_STAT_STATE_NotRunning (0x0UL)  /*!< LFCLK not running                                                    */
  #define CLOCK_LFCLK_STAT_STATE_Running (0x1UL)     /*!< LFCLK running                                                        */


/* CLOCK_LFCLK_SRCCOPY: Copy of LFCLK.SRC register, set when LFCLKSTART task is triggered */
  #define CLOCK_LFCLK_SRCCOPY_ResetValue (0x00000000UL) /*!< Reset value of SRCCOPY register.                                  */

/* SRC @Bits 0..1 : Value of LFCLK.SRC register when LFCLKSTART task was triggered */
  #define CLOCK_LFCLK_SRCCOPY_SRC_Pos (0UL)          /*!< Position of SRC field.                                               */
  #define CLOCK_LFCLK_SRCCOPY_SRC_Msk (0x3UL << CLOCK_LFCLK_SRCCOPY_SRC_Pos) /*!< Bit mask of SRC field.                       */
  #define CLOCK_LFCLK_SRCCOPY_SRC_Min (0x0UL)        /*!< Min enumerator value of SRC field.                                   */
  #define CLOCK_LFCLK_SRCCOPY_SRC_Max (0x2UL)        /*!< Max enumerator value of SRC field.                                   */
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFRC (0x0UL)       /*!< 32.768 kHz RC oscillator                                             */
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFXO (0x1UL)       /*!< 32.768 kHz crystal oscillator                                        */
  #define CLOCK_LFCLK_SRCCOPY_SRC_LFSYNT (0x2UL)     /*!< 32.768 kHz synthesized from HFCLK                                    */


/* ====================================================== Struct CLOCK ======================================================= */
/**
  * @brief Clock management
  */
  typedef struct {                                   /*!< CLOCK Structure                                                      */
    __OM uint32_t TASKS_XOSTART;                     /*!< (@ 0x00000000) Start crystal oscillator (HFXO)                       */
    __OM uint32_t TASKS_XOSTOP;                      /*!< (@ 0x00000004) Stop crystal oscillator (HFXO)                        */
    __OM uint32_t TASKS_PLLSTART;                    /*!< (@ 0x00000008) Start PLL and keep it running, regardless of the
                                                                         automatic clock requests*/
    __OM uint32_t TASKS_PLLSTOP;                     /*!< (@ 0x0000000C) Stop PLL                                              */
    __OM uint32_t TASKS_LFCLKSTART;                  /*!< (@ 0x00000010) Start LFCLK source as selected in LFCLK.SRC           */
    __OM uint32_t TASKS_LFCLKSTOP;                   /*!< (@ 0x00000014) Stop LFCLK source                                     */
    __OM uint32_t TASKS_CAL;                         /*!< (@ 0x00000018) Start calibration of LFRC oscillator                  */
    __OM uint32_t TASKS_XOTUNE;                      /*!< (@ 0x0000001C) Request tuning for HFXO                               */
    __OM uint32_t TASKS_XOTUNEABORT;                 /*!< (@ 0x00000020) Abort tuning for HFXO                                 */
    __IM uint32_t RESERVED[23];
    __IOM uint32_t SUBSCRIBE_XOSTART;                /*!< (@ 0x00000080) Subscribe configuration for task XOSTART              */
    __IOM uint32_t SUBSCRIBE_XOSTOP;                 /*!< (@ 0x00000084) Subscribe configuration for task XOSTOP               */
    __IOM uint32_t SUBSCRIBE_PLLSTART;               /*!< (@ 0x00000088) Subscribe configuration for task PLLSTART             */
    __IOM uint32_t SUBSCRIBE_PLLSTOP;                /*!< (@ 0x0000008C) Subscribe configuration for task PLLSTOP              */
    __IOM uint32_t SUBSCRIBE_LFCLKSTART;             /*!< (@ 0x00000090) Subscribe configuration for task LFCLKSTART           */
    __IOM uint32_t SUBSCRIBE_LFCLKSTOP;              /*!< (@ 0x00000094) Subscribe configuration for task LFCLKSTOP            */
    __IOM uint32_t SUBSCRIBE_CAL;                    /*!< (@ 0x00000098) Subscribe configuration for task CAL                  */
    __IOM uint32_t SUBSCRIBE_XOTUNE;                 /*!< (@ 0x0000009C) Subscribe configuration for task XOTUNE               */
    __IOM uint32_t SUBSCRIBE_XOTUNEABORT;            /*!< (@ 0x000000A0) Subscribe configuration for task XOTUNEABORT          */
    __IM uint32_t RESERVED1[23];
    __IOM uint32_t EVENTS_XOSTARTED;                 /*!< (@ 0x00000100) Crystal oscillator has started                        */
    __IOM uint32_t EVENTS_PLLSTARTED;                /*!< (@ 0x00000104) PLL started                                           */
    __IOM uint32_t EVENTS_LFCLKSTARTED;              /*!< (@ 0x00000108) LFCLK source started                                  */
    __IOM uint32_t EVENTS_DONE;                      /*!< (@ 0x0000010C) Calibration of LFRC oscillator complete event         */
    __IOM uint32_t EVENTS_XOTUNED;                   /*!< (@ 0x00000110) HFXO tuning is done. XOTUNED is generated after
                                                                         TASKS_XOSTART or after TASKS_XOTUNE has completed*/
    __IOM uint32_t EVENTS_XOTUNEERROR;               /*!< (@ 0x00000114) HFXO quality issue detected, XOTUNE is needed         */
    __IOM uint32_t EVENTS_XOTUNEFAILED;              /*!< (@ 0x00000118) HFXO tuning could not be completed                    */
    __IM uint32_t RESERVED2[25];
    __IOM uint32_t PUBLISH_XOSTARTED;                /*!< (@ 0x00000180) Publish configuration for event XOSTARTED             */
    __IOM uint32_t PUBLISH_PLLSTARTED;               /*!< (@ 0x00000184) Publish configuration for event PLLSTARTED            */
    __IOM uint32_t PUBLISH_LFCLKSTARTED;             /*!< (@ 0x00000188) Publish configuration for event LFCLKSTARTED          */
    __IOM uint32_t PUBLISH_DONE;                     /*!< (@ 0x0000018C) Publish configuration for event DONE                  */
    __IOM uint32_t PUBLISH_XOTUNED;                  /*!< (@ 0x00000190) Publish configuration for event XOTUNED               */
    __IOM uint32_t PUBLISH_XOTUNEERROR;              /*!< (@ 0x00000194) Publish configuration for event XOTUNEERROR           */
    __IOM uint32_t PUBLISH_XOTUNEFAILED;             /*!< (@ 0x00000198) Publish configuration for event XOTUNEFAILED          */
    __IM uint32_t RESERVED3[89];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND;                           /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IM uint32_t RESERVED4[60];
    __IOM NRF_CLOCK_XO_Type XO;                      /*!< (@ 0x00000400) (unspecified)                                         */
    __IM uint32_t RESERVED5[4];
    __IOM NRF_CLOCK_PLL_Type PLL;                    /*!< (@ 0x00000420) (unspecified)                                         */
    __IM uint32_t RESERVED6[4];
    __IOM NRF_CLOCK_LFCLK_Type LFCLK;                /*!< (@ 0x00000440) (unspecified)                                         */
  } NRF_CLOCK_Type;                                  /*!< Size = 1108 (0x454)                                                  */

/* CLOCK_TASKS_XOSTART: Start crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_XOSTART register.                            */

/* TASKS_XOSTART @Bit 0 : Start crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Pos (0UL) /*!< Position of TASKS_XOSTART field.                                    */
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Msk (0x1UL << CLOCK_TASKS_XOSTART_TASKS_XOSTART_Pos) /*!< Bit mask of TASKS_XOSTART
                                                                            field.*/
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Min (0x1UL) /*!< Min enumerator value of TASKS_XOSTART field.                      */
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Max (0x1UL) /*!< Max enumerator value of TASKS_XOSTART field.                      */
  #define CLOCK_TASKS_XOSTART_TASKS_XOSTART_Trigger (0x1UL) /*!< Trigger task                                                  */


/* CLOCK_TASKS_XOSTOP: Stop crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_XOSTOP register.                              */

/* TASKS_XOSTOP @Bit 0 : Stop crystal oscillator (HFXO) */
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Pos (0UL)  /*!< Position of TASKS_XOSTOP field.                                      */
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Msk (0x1UL << CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Pos) /*!< Bit mask of TASKS_XOSTOP
                                                                            field.*/
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_XOSTOP field.                         */
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_XOSTOP field.                         */
  #define CLOCK_TASKS_XOSTOP_TASKS_XOSTOP_Trigger (0x1UL) /*!< Trigger task                                                    */


/* CLOCK_TASKS_PLLSTART: Start PLL and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_PLLSTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_PLLSTART register.                          */

/* TASKS_PLLSTART @Bit 0 : Start PLL and keep it running, regardless of the automatic clock requests */
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Pos (0UL) /*!< Position of TASKS_PLLSTART field.                                 */
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Msk (0x1UL << CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Pos) /*!< Bit mask of
                                                                            TASKS_PLLSTART field.*/
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Min (0x1UL) /*!< Min enumerator value of TASKS_PLLSTART field.                   */
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Max (0x1UL) /*!< Max enumerator value of TASKS_PLLSTART field.                   */
  #define CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Trigger (0x1UL) /*!< Trigger task                                                */


/* CLOCK_TASKS_PLLSTOP: Stop PLL */
  #define CLOCK_TASKS_PLLSTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_PLLSTOP register.                            */

/* TASKS_PLLSTOP @Bit 0 : Stop PLL */
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Pos (0UL) /*!< Position of TASKS_PLLSTOP field.                                    */
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Msk (0x1UL << CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Pos) /*!< Bit mask of TASKS_PLLSTOP
                                                                            field.*/
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_PLLSTOP field.                      */
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_PLLSTOP field.                      */
  #define CLOCK_TASKS_PLLSTOP_TASKS_PLLSTOP_Trigger (0x1UL) /*!< Trigger task                                                  */


/* CLOCK_TASKS_LFCLKSTART: Start LFCLK source as selected in LFCLK.SRC */
  #define CLOCK_TASKS_LFCLKSTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_LFCLKSTART register.                      */

/* TASKS_LFCLKSTART @Bit 0 : Start LFCLK source as selected in LFCLK.SRC */
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos (0UL) /*!< Position of TASKS_LFCLKSTART field.                           */
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Msk (0x1UL << CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos) /*!< Bit mask of
                                                                            TASKS_LFCLKSTART field.*/
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Min (0x1UL) /*!< Min enumerator value of TASKS_LFCLKSTART field.             */
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Max (0x1UL) /*!< Max enumerator value of TASKS_LFCLKSTART field.             */
  #define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Trigger (0x1UL) /*!< Trigger task                                            */


/* CLOCK_TASKS_LFCLKSTOP: Stop LFCLK source */
  #define CLOCK_TASKS_LFCLKSTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_LFCLKSTOP register.                        */

/* TASKS_LFCLKSTOP @Bit 0 : Stop LFCLK source */
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos (0UL) /*!< Position of TASKS_LFCLKSTOP field.                              */
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Msk (0x1UL << CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos) /*!< Bit mask of
                                                                            TASKS_LFCLKSTOP field.*/
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_LFCLKSTOP field.                */
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_LFCLKSTOP field.                */
  #define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Trigger (0x1UL) /*!< Trigger task                                              */


/* CLOCK_TASKS_CAL: Start calibration of LFRC oscillator */
  #define CLOCK_TASKS_CAL_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_CAL register.                                   */

/* TASKS_CAL @Bit 0 : Start calibration of LFRC oscillator */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Pos (0UL)        /*!< Position of TASKS_CAL field.                                         */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Msk (0x1UL << CLOCK_TASKS_CAL_TASKS_CAL_Pos) /*!< Bit mask of TASKS_CAL field.             */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Min (0x1UL)      /*!< Min enumerator value of TASKS_CAL field.                             */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Max (0x1UL)      /*!< Max enumerator value of TASKS_CAL field.                             */
  #define CLOCK_TASKS_CAL_TASKS_CAL_Trigger (0x1UL)  /*!< Trigger task                                                         */


/* CLOCK_TASKS_XOTUNE: Request tuning for HFXO */
  #define CLOCK_TASKS_XOTUNE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_XOTUNE register.                              */

/* TASKS_XOTUNE @Bit 0 : Request tuning for HFXO */
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Pos (0UL)  /*!< Position of TASKS_XOTUNE field.                                      */
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Msk (0x1UL << CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Pos) /*!< Bit mask of TASKS_XOTUNE
                                                                            field.*/
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Min (0x1UL) /*!< Min enumerator value of TASKS_XOTUNE field.                         */
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Max (0x1UL) /*!< Max enumerator value of TASKS_XOTUNE field.                         */
  #define CLOCK_TASKS_XOTUNE_TASKS_XOTUNE_Trigger (0x1UL) /*!< Trigger task                                                    */


/* CLOCK_TASKS_XOTUNEABORT: Abort tuning for HFXO */
  #define CLOCK_TASKS_XOTUNEABORT_ResetValue (0x00000000UL) /*!< Reset value of TASKS_XOTUNEABORT register.                    */

/* TASKS_XOTUNEABORT @Bit 0 : Abort tuning for HFXO */
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Pos (0UL) /*!< Position of TASKS_XOTUNEABORT field.                        */
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Msk (0x1UL << CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Pos) /*!< Bit mask
                                                                            of TASKS_XOTUNEABORT field.*/
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Min (0x1UL) /*!< Min enumerator value of TASKS_XOTUNEABORT field.          */
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Max (0x1UL) /*!< Max enumerator value of TASKS_XOTUNEABORT field.          */
  #define CLOCK_TASKS_XOTUNEABORT_TASKS_XOTUNEABORT_Trigger (0x1UL) /*!< Trigger task                                          */


/* CLOCK_SUBSCRIBE_XOSTART: Subscribe configuration for task XOSTART */
  #define CLOCK_SUBSCRIBE_XOSTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_XOSTART register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task XOSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define CLOCK_SUBSCRIBE_XOSTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOSTART_EN_Pos) /*!< Bit mask of EN field.                  */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define CLOCK_SUBSCRIBE_XOSTART_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* CLOCK_SUBSCRIBE_XOSTOP: Subscribe configuration for task XOSTOP */
  #define CLOCK_SUBSCRIBE_XOSTOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_XOSTOP register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task XOSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define CLOCK_SUBSCRIBE_XOSTOP_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOSTOP_EN_Pos) /*!< Bit mask of EN field.                    */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define CLOCK_SUBSCRIBE_XOSTOP_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* CLOCK_SUBSCRIBE_PLLSTART: Subscribe configuration for task PLLSTART */
  #define CLOCK_SUBSCRIBE_PLLSTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_PLLSTART register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that task PLLSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define CLOCK_SUBSCRIBE_PLLSTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_PLLSTART_EN_Pos) /*!< Bit mask of EN field.                */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Disabled (0x0UL) /*!< Disable subscription                                               */
  #define CLOCK_SUBSCRIBE_PLLSTART_EN_Enabled (0x1UL) /*!< Enable subscription                                                 */


/* CLOCK_SUBSCRIBE_PLLSTOP: Subscribe configuration for task PLLSTOP */
  #define CLOCK_SUBSCRIBE_PLLSTOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_PLLSTOP register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task PLLSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define CLOCK_SUBSCRIBE_PLLSTOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_PLLSTOP_EN_Pos) /*!< Bit mask of EN field.                  */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define CLOCK_SUBSCRIBE_PLLSTOP_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* CLOCK_SUBSCRIBE_LFCLKSTART: Subscribe configuration for task LFCLKSTART */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_LFCLKSTART register.              */

/* CHIDX @Bits 0..7 : DPPI channel that task LFCLKSTART will subscribe to */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos) /*!< Bit mask of EN field.            */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Disabled (0x0UL) /*!< Disable subscription                                             */
  #define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Enabled (0x1UL) /*!< Enable subscription                                               */


/* CLOCK_SUBSCRIBE_LFCLKSTOP: Subscribe configuration for task LFCLKSTOP */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_LFCLKSTOP register.                */

/* CHIDX @Bits 0..7 : DPPI channel that task LFCLKSTOP will subscribe to */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos) /*!< Bit mask of EN field.              */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Disabled (0x0UL) /*!< Disable subscription                                              */
  #define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Enabled (0x1UL) /*!< Enable subscription                                                */


/* CLOCK_SUBSCRIBE_CAL: Subscribe configuration for task CAL */
  #define CLOCK_SUBSCRIBE_CAL_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CAL register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task CAL will subscribe to */
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_CAL_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define CLOCK_SUBSCRIBE_CAL_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_CAL_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_CAL_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_CAL_EN_Pos) /*!< Bit mask of EN field.                          */
  #define CLOCK_SUBSCRIBE_CAL_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_CAL_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_CAL_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define CLOCK_SUBSCRIBE_CAL_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* CLOCK_SUBSCRIBE_XOTUNE: Subscribe configuration for task XOTUNE */
  #define CLOCK_SUBSCRIBE_XOTUNE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_XOTUNE register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task XOTUNE will subscribe to */
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define CLOCK_SUBSCRIBE_XOTUNE_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOTUNE_EN_Pos) /*!< Bit mask of EN field.                    */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define CLOCK_SUBSCRIBE_XOTUNE_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* CLOCK_SUBSCRIBE_XOTUNEABORT: Subscribe configuration for task XOTUNEABORT */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_XOTUNEABORT register.            */

/* CHIDX @Bits 0..7 : DPPI channel that task XOTUNEABORT will subscribe to */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Pos) /*!< Bit mask of EN field.          */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define CLOCK_SUBSCRIBE_XOTUNEABORT_EN_Enabled (0x1UL) /*!< Enable subscription                                              */


/* CLOCK_EVENTS_XOSTARTED: Crystal oscillator has started */
  #define CLOCK_EVENTS_XOSTARTED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_XOSTARTED register.                      */

/* EVENTS_XOSTARTED @Bit 0 : Crystal oscillator has started */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Pos (0UL) /*!< Position of EVENTS_XOSTARTED field.                           */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Msk (0x1UL << CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_XOSTARTED field.*/
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_XOSTARTED field.             */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_XOSTARTED field.             */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define CLOCK_EVENTS_XOSTARTED_EVENTS_XOSTARTED_Generated (0x1UL) /*!< Event generated                                       */


/* CLOCK_EVENTS_PLLSTARTED: PLL started */
  #define CLOCK_EVENTS_PLLSTARTED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_PLLSTARTED register.                    */

/* EVENTS_PLLSTARTED @Bit 0 : PLL started */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Pos (0UL) /*!< Position of EVENTS_PLLSTARTED field.                        */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Msk (0x1UL << CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Pos) /*!< Bit mask
                                                                            of EVENTS_PLLSTARTED field.*/
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_PLLSTARTED field.          */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_PLLSTARTED field.          */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define CLOCK_EVENTS_PLLSTARTED_EVENTS_PLLSTARTED_Generated (0x1UL) /*!< Event generated                                     */


/* CLOCK_EVENTS_LFCLKSTARTED: LFCLK source started */
  #define CLOCK_EVENTS_LFCLKSTARTED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_LFCLKSTARTED register.                */

/* EVENTS_LFCLKSTARTED @Bit 0 : LFCLK source started */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos (0UL) /*!< Position of EVENTS_LFCLKSTARTED field.                  */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Msk (0x1UL << CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos) /*!<
                                                                            Bit mask of EVENTS_LFCLKSTARTED field.*/
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_LFCLKSTARTED field.    */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_LFCLKSTARTED field.    */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_NotGenerated (0x0UL) /*!< Event not generated                          */
  #define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Generated (0x1UL) /*!< Event generated                                 */


/* CLOCK_EVENTS_DONE: Calibration of LFRC oscillator complete event */
  #define CLOCK_EVENTS_DONE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DONE register.                                */

/* EVENTS_DONE @Bit 0 : Calibration of LFRC oscillator complete event */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Pos (0UL)    /*!< Position of EVENTS_DONE field.                                       */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << CLOCK_EVENTS_DONE_EVENTS_DONE_Pos) /*!< Bit mask of EVENTS_DONE field.   */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Min (0x0UL)  /*!< Min enumerator value of EVENTS_DONE field.                           */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Max (0x1UL)  /*!< Max enumerator value of EVENTS_DONE field.                           */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define CLOCK_EVENTS_DONE_EVENTS_DONE_Generated (0x1UL) /*!< Event generated                                                 */


/* CLOCK_EVENTS_XOTUNED: HFXO tuning is done. XOTUNED is generated after TASKS_XOSTART or after TASKS_XOTUNE has completed */
  #define CLOCK_EVENTS_XOTUNED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_XOTUNED register.                          */

/* EVENTS_XOTUNED @Bit 0 : HFXO tuning is done. XOTUNED is generated after TASKS_XOSTART or after TASKS_XOTUNE has completed */
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Pos (0UL) /*!< Position of EVENTS_XOTUNED field.                                 */
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Msk (0x1UL << CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Pos) /*!< Bit mask of
                                                                            EVENTS_XOTUNED field.*/
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Min (0x0UL) /*!< Min enumerator value of EVENTS_XOTUNED field.                   */
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Max (0x1UL) /*!< Max enumerator value of EVENTS_XOTUNED field.                   */
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define CLOCK_EVENTS_XOTUNED_EVENTS_XOTUNED_Generated (0x1UL) /*!< Event generated                                           */


/* CLOCK_EVENTS_XOTUNEERROR: HFXO quality issue detected, XOTUNE is needed */
  #define CLOCK_EVENTS_XOTUNEERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_XOTUNEERROR register.                  */

/* EVENTS_XOTUNEERROR @Bit 0 : HFXO quality issue detected, XOTUNE is needed */
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Pos (0UL) /*!< Position of EVENTS_XOTUNEERROR field.                     */
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Msk (0x1UL << CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Pos) /*!< Bit
                                                                            mask of EVENTS_XOTUNEERROR field.*/
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_XOTUNEERROR field.       */
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_XOTUNEERROR field.       */
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_NotGenerated (0x0UL) /*!< Event not generated                            */
  #define CLOCK_EVENTS_XOTUNEERROR_EVENTS_XOTUNEERROR_Generated (0x1UL) /*!< Event generated                                   */


/* CLOCK_EVENTS_XOTUNEFAILED: HFXO tuning could not be completed */
  #define CLOCK_EVENTS_XOTUNEFAILED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_XOTUNEFAILED register.                */

/* EVENTS_XOTUNEFAILED @Bit 0 : HFXO tuning could not be completed */
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Pos (0UL) /*!< Position of EVENTS_XOTUNEFAILED field.                  */
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Msk (0x1UL << CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Pos) /*!<
                                                                            Bit mask of EVENTS_XOTUNEFAILED field.*/
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Min (0x0UL) /*!< Min enumerator value of EVENTS_XOTUNEFAILED field.    */
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Max (0x1UL) /*!< Max enumerator value of EVENTS_XOTUNEFAILED field.    */
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_NotGenerated (0x0UL) /*!< Event not generated                          */
  #define CLOCK_EVENTS_XOTUNEFAILED_EVENTS_XOTUNEFAILED_Generated (0x1UL) /*!< Event generated                                 */


/* CLOCK_PUBLISH_XOSTARTED: Publish configuration for event XOSTARTED */
  #define CLOCK_PUBLISH_XOSTARTED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_XOSTARTED register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that event XOSTARTED will publish to */
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define CLOCK_PUBLISH_XOSTARTED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOSTARTED_EN_Pos) /*!< Bit mask of EN field.                  */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define CLOCK_PUBLISH_XOSTARTED_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* CLOCK_PUBLISH_PLLSTARTED: Publish configuration for event PLLSTARTED */
  #define CLOCK_PUBLISH_PLLSTARTED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_PLLSTARTED register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event PLLSTARTED will publish to */
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_PLLSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define CLOCK_PUBLISH_PLLSTARTED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_PLLSTARTED_EN_Pos) /*!< Bit mask of EN field.                */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define CLOCK_PUBLISH_PLLSTARTED_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* CLOCK_PUBLISH_LFCLKSTARTED: Publish configuration for event LFCLKSTARTED */
  #define CLOCK_PUBLISH_LFCLKSTARTED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_LFCLKSTARTED register.              */

/* CHIDX @Bits 0..7 : DPPI channel that event LFCLKSTARTED will publish to */
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos) /*!< Bit mask of EN field.            */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Disabled (0x0UL) /*!< Disable publishing                                               */
  #define CLOCK_PUBLISH_LFCLKSTARTED_EN_Enabled (0x1UL) /*!< Enable publishing                                                 */


/* CLOCK_PUBLISH_DONE: Publish configuration for event DONE */
  #define CLOCK_PUBLISH_DONE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DONE register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event DONE will publish to */
  #define CLOCK_PUBLISH_DONE_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_DONE_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_DONE_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define CLOCK_PUBLISH_DONE_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define CLOCK_PUBLISH_DONE_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_DONE_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_DONE_EN_Msk (0x1UL << CLOCK_PUBLISH_DONE_EN_Pos) /*!< Bit mask of EN field.                            */
  #define CLOCK_PUBLISH_DONE_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_DONE_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_DONE_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define CLOCK_PUBLISH_DONE_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* CLOCK_PUBLISH_XOTUNED: Publish configuration for event XOTUNED */
  #define CLOCK_PUBLISH_XOTUNED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_XOTUNED register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event XOTUNED will publish to */
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOTUNED_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define CLOCK_PUBLISH_XOTUNED_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOTUNED_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_XOTUNED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOTUNED_EN_Pos) /*!< Bit mask of EN field.                      */
  #define CLOCK_PUBLISH_XOTUNED_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOTUNED_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOTUNED_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define CLOCK_PUBLISH_XOTUNED_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* CLOCK_PUBLISH_XOTUNEERROR: Publish configuration for event XOTUNEERROR */
  #define CLOCK_PUBLISH_XOTUNEERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_XOTUNEERROR register.                */

/* CHIDX @Bits 0..7 : DPPI channel that event XOTUNEERROR will publish to */
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define CLOCK_PUBLISH_XOTUNEERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Msk (0x1UL << CLOCK_PUBLISH_XOTUNEERROR_EN_Pos) /*!< Bit mask of EN field.              */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define CLOCK_PUBLISH_XOTUNEERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* CLOCK_PUBLISH_XOTUNEFAILED: Publish configuration for event XOTUNEFAILED */
  #define CLOCK_PUBLISH_XOTUNEFAILED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_XOTUNEFAILED register.              */

/* CHIDX @Bits 0..7 : DPPI channel that event XOTUNEFAILED will publish to */
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define CLOCK_PUBLISH_XOTUNEFAILED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Msk (0x1UL << CLOCK_PUBLISH_XOTUNEFAILED_EN_Pos) /*!< Bit mask of EN field.            */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Disabled (0x0UL) /*!< Disable publishing                                               */
  #define CLOCK_PUBLISH_XOTUNEFAILED_EN_Enabled (0x1UL) /*!< Enable publishing                                                 */


/* CLOCK_INTEN: Enable or disable interrupt */
  #define CLOCK_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* XOSTARTED @Bit 0 : Enable or disable interrupt for event XOSTARTED */
  #define CLOCK_INTEN_XOSTARTED_Pos (0UL)            /*!< Position of XOSTARTED field.                                         */
  #define CLOCK_INTEN_XOSTARTED_Msk (0x1UL << CLOCK_INTEN_XOSTARTED_Pos) /*!< Bit mask of XOSTARTED field.                     */
  #define CLOCK_INTEN_XOSTARTED_Min (0x0UL)          /*!< Min enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTEN_XOSTARTED_Max (0x1UL)          /*!< Max enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTEN_XOSTARTED_Disabled (0x0UL)     /*!< Disable                                                              */
  #define CLOCK_INTEN_XOSTARTED_Enabled (0x1UL)      /*!< Enable                                                               */

/* PLLSTARTED @Bit 1 : Enable or disable interrupt for event PLLSTARTED */
  #define CLOCK_INTEN_PLLSTARTED_Pos (1UL)           /*!< Position of PLLSTARTED field.                                        */
  #define CLOCK_INTEN_PLLSTARTED_Msk (0x1UL << CLOCK_INTEN_PLLSTARTED_Pos) /*!< Bit mask of PLLSTARTED field.                  */
  #define CLOCK_INTEN_PLLSTARTED_Min (0x0UL)         /*!< Min enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTEN_PLLSTARTED_Max (0x1UL)         /*!< Max enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTEN_PLLSTARTED_Disabled (0x0UL)    /*!< Disable                                                              */
  #define CLOCK_INTEN_PLLSTARTED_Enabled (0x1UL)     /*!< Enable                                                               */

/* LFCLKSTARTED @Bit 2 : Enable or disable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTEN_LFCLKSTARTED_Pos (2UL)         /*!< Position of LFCLKSTARTED field.                                      */
  #define CLOCK_INTEN_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTEN_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field.            */
  #define CLOCK_INTEN_LFCLKSTARTED_Min (0x0UL)       /*!< Min enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTEN_LFCLKSTARTED_Max (0x1UL)       /*!< Max enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTEN_LFCLKSTARTED_Disabled (0x0UL)  /*!< Disable                                                              */
  #define CLOCK_INTEN_LFCLKSTARTED_Enabled (0x1UL)   /*!< Enable                                                               */

/* DONE @Bit 3 : Enable or disable interrupt for event DONE */
  #define CLOCK_INTEN_DONE_Pos (3UL)                 /*!< Position of DONE field.                                              */
  #define CLOCK_INTEN_DONE_Msk (0x1UL << CLOCK_INTEN_DONE_Pos) /*!< Bit mask of DONE field.                                    */
  #define CLOCK_INTEN_DONE_Min (0x0UL)               /*!< Min enumerator value of DONE field.                                  */
  #define CLOCK_INTEN_DONE_Max (0x1UL)               /*!< Max enumerator value of DONE field.                                  */
  #define CLOCK_INTEN_DONE_Disabled (0x0UL)          /*!< Disable                                                              */
  #define CLOCK_INTEN_DONE_Enabled (0x1UL)           /*!< Enable                                                               */

/* XOTUNED @Bit 4 : Enable or disable interrupt for event XOTUNED */
  #define CLOCK_INTEN_XOTUNED_Pos (4UL)              /*!< Position of XOTUNED field.                                           */
  #define CLOCK_INTEN_XOTUNED_Msk (0x1UL << CLOCK_INTEN_XOTUNED_Pos) /*!< Bit mask of XOTUNED field.                           */
  #define CLOCK_INTEN_XOTUNED_Min (0x0UL)            /*!< Min enumerator value of XOTUNED field.                               */
  #define CLOCK_INTEN_XOTUNED_Max (0x1UL)            /*!< Max enumerator value of XOTUNED field.                               */
  #define CLOCK_INTEN_XOTUNED_Disabled (0x0UL)       /*!< Disable                                                              */
  #define CLOCK_INTEN_XOTUNED_Enabled (0x1UL)        /*!< Enable                                                               */

/* XOTUNEERROR @Bit 5 : Enable or disable interrupt for event XOTUNEERROR */
  #define CLOCK_INTEN_XOTUNEERROR_Pos (5UL)          /*!< Position of XOTUNEERROR field.                                       */
  #define CLOCK_INTEN_XOTUNEERROR_Msk (0x1UL << CLOCK_INTEN_XOTUNEERROR_Pos) /*!< Bit mask of XOTUNEERROR field.               */
  #define CLOCK_INTEN_XOTUNEERROR_Min (0x0UL)        /*!< Min enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTEN_XOTUNEERROR_Max (0x1UL)        /*!< Max enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTEN_XOTUNEERROR_Disabled (0x0UL)   /*!< Disable                                                              */
  #define CLOCK_INTEN_XOTUNEERROR_Enabled (0x1UL)    /*!< Enable                                                               */

/* XOTUNEFAILED @Bit 6 : Enable or disable interrupt for event XOTUNEFAILED */
  #define CLOCK_INTEN_XOTUNEFAILED_Pos (6UL)         /*!< Position of XOTUNEFAILED field.                                      */
  #define CLOCK_INTEN_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTEN_XOTUNEFAILED_Pos) /*!< Bit mask of XOTUNEFAILED field.            */
  #define CLOCK_INTEN_XOTUNEFAILED_Min (0x0UL)       /*!< Min enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTEN_XOTUNEFAILED_Max (0x1UL)       /*!< Max enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTEN_XOTUNEFAILED_Disabled (0x0UL)  /*!< Disable                                                              */
  #define CLOCK_INTEN_XOTUNEFAILED_Enabled (0x1UL)   /*!< Enable                                                               */


/* CLOCK_INTENSET: Enable interrupt */
  #define CLOCK_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* XOSTARTED @Bit 0 : Write '1' to enable interrupt for event XOSTARTED */
  #define CLOCK_INTENSET_XOSTARTED_Pos (0UL)         /*!< Position of XOSTARTED field.                                         */
  #define CLOCK_INTENSET_XOSTARTED_Msk (0x1UL << CLOCK_INTENSET_XOSTARTED_Pos) /*!< Bit mask of XOSTARTED field.               */
  #define CLOCK_INTENSET_XOSTARTED_Min (0x0UL)       /*!< Min enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTENSET_XOSTARTED_Max (0x1UL)       /*!< Max enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTENSET_XOSTARTED_Set (0x1UL)       /*!< Enable                                                               */
  #define CLOCK_INTENSET_XOSTARTED_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define CLOCK_INTENSET_XOSTARTED_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* PLLSTARTED @Bit 1 : Write '1' to enable interrupt for event PLLSTARTED */
  #define CLOCK_INTENSET_PLLSTARTED_Pos (1UL)        /*!< Position of PLLSTARTED field.                                        */
  #define CLOCK_INTENSET_PLLSTARTED_Msk (0x1UL << CLOCK_INTENSET_PLLSTARTED_Pos) /*!< Bit mask of PLLSTARTED field.            */
  #define CLOCK_INTENSET_PLLSTARTED_Min (0x0UL)      /*!< Min enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTENSET_PLLSTARTED_Max (0x1UL)      /*!< Max enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTENSET_PLLSTARTED_Set (0x1UL)      /*!< Enable                                                               */
  #define CLOCK_INTENSET_PLLSTARTED_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define CLOCK_INTENSET_PLLSTARTED_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* LFCLKSTARTED @Bit 2 : Write '1' to enable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTENSET_LFCLKSTARTED_Pos (2UL)      /*!< Position of LFCLKSTARTED field.                                      */
  #define CLOCK_INTENSET_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field.      */
  #define CLOCK_INTENSET_LFCLKSTARTED_Min (0x0UL)    /*!< Min enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTENSET_LFCLKSTARTED_Max (0x1UL)    /*!< Max enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTENSET_LFCLKSTARTED_Set (0x1UL)    /*!< Enable                                                               */
  #define CLOCK_INTENSET_LFCLKSTARTED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define CLOCK_INTENSET_LFCLKSTARTED_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DONE @Bit 3 : Write '1' to enable interrupt for event DONE */
  #define CLOCK_INTENSET_DONE_Pos (3UL)              /*!< Position of DONE field.                                              */
  #define CLOCK_INTENSET_DONE_Msk (0x1UL << CLOCK_INTENSET_DONE_Pos) /*!< Bit mask of DONE field.                              */
  #define CLOCK_INTENSET_DONE_Min (0x0UL)            /*!< Min enumerator value of DONE field.                                  */
  #define CLOCK_INTENSET_DONE_Max (0x1UL)            /*!< Max enumerator value of DONE field.                                  */
  #define CLOCK_INTENSET_DONE_Set (0x1UL)            /*!< Enable                                                               */
  #define CLOCK_INTENSET_DONE_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define CLOCK_INTENSET_DONE_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* XOTUNED @Bit 4 : Write '1' to enable interrupt for event XOTUNED */
  #define CLOCK_INTENSET_XOTUNED_Pos (4UL)           /*!< Position of XOTUNED field.                                           */
  #define CLOCK_INTENSET_XOTUNED_Msk (0x1UL << CLOCK_INTENSET_XOTUNED_Pos) /*!< Bit mask of XOTUNED field.                     */
  #define CLOCK_INTENSET_XOTUNED_Min (0x0UL)         /*!< Min enumerator value of XOTUNED field.                               */
  #define CLOCK_INTENSET_XOTUNED_Max (0x1UL)         /*!< Max enumerator value of XOTUNED field.                               */
  #define CLOCK_INTENSET_XOTUNED_Set (0x1UL)         /*!< Enable                                                               */
  #define CLOCK_INTENSET_XOTUNED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define CLOCK_INTENSET_XOTUNED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* XOTUNEERROR @Bit 5 : Write '1' to enable interrupt for event XOTUNEERROR */
  #define CLOCK_INTENSET_XOTUNEERROR_Pos (5UL)       /*!< Position of XOTUNEERROR field.                                       */
  #define CLOCK_INTENSET_XOTUNEERROR_Msk (0x1UL << CLOCK_INTENSET_XOTUNEERROR_Pos) /*!< Bit mask of XOTUNEERROR field.         */
  #define CLOCK_INTENSET_XOTUNEERROR_Min (0x0UL)     /*!< Min enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTENSET_XOTUNEERROR_Max (0x1UL)     /*!< Max enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTENSET_XOTUNEERROR_Set (0x1UL)     /*!< Enable                                                               */
  #define CLOCK_INTENSET_XOTUNEERROR_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define CLOCK_INTENSET_XOTUNEERROR_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* XOTUNEFAILED @Bit 6 : Write '1' to enable interrupt for event XOTUNEFAILED */
  #define CLOCK_INTENSET_XOTUNEFAILED_Pos (6UL)      /*!< Position of XOTUNEFAILED field.                                      */
  #define CLOCK_INTENSET_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTENSET_XOTUNEFAILED_Pos) /*!< Bit mask of XOTUNEFAILED field.      */
  #define CLOCK_INTENSET_XOTUNEFAILED_Min (0x0UL)    /*!< Min enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTENSET_XOTUNEFAILED_Max (0x1UL)    /*!< Max enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTENSET_XOTUNEFAILED_Set (0x1UL)    /*!< Enable                                                               */
  #define CLOCK_INTENSET_XOTUNEFAILED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define CLOCK_INTENSET_XOTUNEFAILED_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* CLOCK_INTENCLR: Disable interrupt */
  #define CLOCK_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* XOSTARTED @Bit 0 : Write '1' to disable interrupt for event XOSTARTED */
  #define CLOCK_INTENCLR_XOSTARTED_Pos (0UL)         /*!< Position of XOSTARTED field.                                         */
  #define CLOCK_INTENCLR_XOSTARTED_Msk (0x1UL << CLOCK_INTENCLR_XOSTARTED_Pos) /*!< Bit mask of XOSTARTED field.               */
  #define CLOCK_INTENCLR_XOSTARTED_Min (0x0UL)       /*!< Min enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTENCLR_XOSTARTED_Max (0x1UL)       /*!< Max enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTENCLR_XOSTARTED_Clear (0x1UL)     /*!< Disable                                                              */
  #define CLOCK_INTENCLR_XOSTARTED_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define CLOCK_INTENCLR_XOSTARTED_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* PLLSTARTED @Bit 1 : Write '1' to disable interrupt for event PLLSTARTED */
  #define CLOCK_INTENCLR_PLLSTARTED_Pos (1UL)        /*!< Position of PLLSTARTED field.                                        */
  #define CLOCK_INTENCLR_PLLSTARTED_Msk (0x1UL << CLOCK_INTENCLR_PLLSTARTED_Pos) /*!< Bit mask of PLLSTARTED field.            */
  #define CLOCK_INTENCLR_PLLSTARTED_Min (0x0UL)      /*!< Min enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTENCLR_PLLSTARTED_Max (0x1UL)      /*!< Max enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTENCLR_PLLSTARTED_Clear (0x1UL)    /*!< Disable                                                              */
  #define CLOCK_INTENCLR_PLLSTARTED_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define CLOCK_INTENCLR_PLLSTARTED_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* LFCLKSTARTED @Bit 2 : Write '1' to disable interrupt for event LFCLKSTARTED */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Pos (2UL)      /*!< Position of LFCLKSTARTED field.                                      */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field.      */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Min (0x0UL)    /*!< Min enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Max (0x1UL)    /*!< Max enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Clear (0x1UL)  /*!< Disable                                                              */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define CLOCK_INTENCLR_LFCLKSTARTED_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DONE @Bit 3 : Write '1' to disable interrupt for event DONE */
  #define CLOCK_INTENCLR_DONE_Pos (3UL)              /*!< Position of DONE field.                                              */
  #define CLOCK_INTENCLR_DONE_Msk (0x1UL << CLOCK_INTENCLR_DONE_Pos) /*!< Bit mask of DONE field.                              */
  #define CLOCK_INTENCLR_DONE_Min (0x0UL)            /*!< Min enumerator value of DONE field.                                  */
  #define CLOCK_INTENCLR_DONE_Max (0x1UL)            /*!< Max enumerator value of DONE field.                                  */
  #define CLOCK_INTENCLR_DONE_Clear (0x1UL)          /*!< Disable                                                              */
  #define CLOCK_INTENCLR_DONE_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define CLOCK_INTENCLR_DONE_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* XOTUNED @Bit 4 : Write '1' to disable interrupt for event XOTUNED */
  #define CLOCK_INTENCLR_XOTUNED_Pos (4UL)           /*!< Position of XOTUNED field.                                           */
  #define CLOCK_INTENCLR_XOTUNED_Msk (0x1UL << CLOCK_INTENCLR_XOTUNED_Pos) /*!< Bit mask of XOTUNED field.                     */
  #define CLOCK_INTENCLR_XOTUNED_Min (0x0UL)         /*!< Min enumerator value of XOTUNED field.                               */
  #define CLOCK_INTENCLR_XOTUNED_Max (0x1UL)         /*!< Max enumerator value of XOTUNED field.                               */
  #define CLOCK_INTENCLR_XOTUNED_Clear (0x1UL)       /*!< Disable                                                              */
  #define CLOCK_INTENCLR_XOTUNED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define CLOCK_INTENCLR_XOTUNED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* XOTUNEERROR @Bit 5 : Write '1' to disable interrupt for event XOTUNEERROR */
  #define CLOCK_INTENCLR_XOTUNEERROR_Pos (5UL)       /*!< Position of XOTUNEERROR field.                                       */
  #define CLOCK_INTENCLR_XOTUNEERROR_Msk (0x1UL << CLOCK_INTENCLR_XOTUNEERROR_Pos) /*!< Bit mask of XOTUNEERROR field.         */
  #define CLOCK_INTENCLR_XOTUNEERROR_Min (0x0UL)     /*!< Min enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTENCLR_XOTUNEERROR_Max (0x1UL)     /*!< Max enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTENCLR_XOTUNEERROR_Clear (0x1UL)   /*!< Disable                                                              */
  #define CLOCK_INTENCLR_XOTUNEERROR_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define CLOCK_INTENCLR_XOTUNEERROR_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* XOTUNEFAILED @Bit 6 : Write '1' to disable interrupt for event XOTUNEFAILED */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Pos (6UL)      /*!< Position of XOTUNEFAILED field.                                      */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTENCLR_XOTUNEFAILED_Pos) /*!< Bit mask of XOTUNEFAILED field.      */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Min (0x0UL)    /*!< Min enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Max (0x1UL)    /*!< Max enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Clear (0x1UL)  /*!< Disable                                                              */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define CLOCK_INTENCLR_XOTUNEFAILED_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* CLOCK_INTPEND: Pending interrupts */
  #define CLOCK_INTPEND_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND register.                                     */

/* XOSTARTED @Bit 0 : Read pending status of interrupt for event XOSTARTED */
  #define CLOCK_INTPEND_XOSTARTED_Pos (0UL)          /*!< Position of XOSTARTED field.                                         */
  #define CLOCK_INTPEND_XOSTARTED_Msk (0x1UL << CLOCK_INTPEND_XOSTARTED_Pos) /*!< Bit mask of XOSTARTED field.                 */
  #define CLOCK_INTPEND_XOSTARTED_Min (0x0UL)        /*!< Min enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTPEND_XOSTARTED_Max (0x1UL)        /*!< Max enumerator value of XOSTARTED field.                             */
  #define CLOCK_INTPEND_XOSTARTED_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define CLOCK_INTPEND_XOSTARTED_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* PLLSTARTED @Bit 1 : Read pending status of interrupt for event PLLSTARTED */
  #define CLOCK_INTPEND_PLLSTARTED_Pos (1UL)         /*!< Position of PLLSTARTED field.                                        */
  #define CLOCK_INTPEND_PLLSTARTED_Msk (0x1UL << CLOCK_INTPEND_PLLSTARTED_Pos) /*!< Bit mask of PLLSTARTED field.              */
  #define CLOCK_INTPEND_PLLSTARTED_Min (0x0UL)       /*!< Min enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTPEND_PLLSTARTED_Max (0x1UL)       /*!< Max enumerator value of PLLSTARTED field.                            */
  #define CLOCK_INTPEND_PLLSTARTED_NotPending (0x0UL) /*!< Read: Not pending                                                   */
  #define CLOCK_INTPEND_PLLSTARTED_Pending (0x1UL)   /*!< Read: Pending                                                        */

/* LFCLKSTARTED @Bit 2 : Read pending status of interrupt for event LFCLKSTARTED */
  #define CLOCK_INTPEND_LFCLKSTARTED_Pos (2UL)       /*!< Position of LFCLKSTARTED field.                                      */
  #define CLOCK_INTPEND_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTPEND_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field.        */
  #define CLOCK_INTPEND_LFCLKSTARTED_Min (0x0UL)     /*!< Min enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTPEND_LFCLKSTARTED_Max (0x1UL)     /*!< Max enumerator value of LFCLKSTARTED field.                          */
  #define CLOCK_INTPEND_LFCLKSTARTED_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define CLOCK_INTPEND_LFCLKSTARTED_Pending (0x1UL) /*!< Read: Pending                                                        */

/* DONE @Bit 3 : Read pending status of interrupt for event DONE */
  #define CLOCK_INTPEND_DONE_Pos (3UL)               /*!< Position of DONE field.                                              */
  #define CLOCK_INTPEND_DONE_Msk (0x1UL << CLOCK_INTPEND_DONE_Pos) /*!< Bit mask of DONE field.                                */
  #define CLOCK_INTPEND_DONE_Min (0x0UL)             /*!< Min enumerator value of DONE field.                                  */
  #define CLOCK_INTPEND_DONE_Max (0x1UL)             /*!< Max enumerator value of DONE field.                                  */
  #define CLOCK_INTPEND_DONE_NotPending (0x0UL)      /*!< Read: Not pending                                                    */
  #define CLOCK_INTPEND_DONE_Pending (0x1UL)         /*!< Read: Pending                                                        */

/* XOTUNED @Bit 4 : Read pending status of interrupt for event XOTUNED */
  #define CLOCK_INTPEND_XOTUNED_Pos (4UL)            /*!< Position of XOTUNED field.                                           */
  #define CLOCK_INTPEND_XOTUNED_Msk (0x1UL << CLOCK_INTPEND_XOTUNED_Pos) /*!< Bit mask of XOTUNED field.                       */
  #define CLOCK_INTPEND_XOTUNED_Min (0x0UL)          /*!< Min enumerator value of XOTUNED field.                               */
  #define CLOCK_INTPEND_XOTUNED_Max (0x1UL)          /*!< Max enumerator value of XOTUNED field.                               */
  #define CLOCK_INTPEND_XOTUNED_NotPending (0x0UL)   /*!< Read: Not pending                                                    */
  #define CLOCK_INTPEND_XOTUNED_Pending (0x1UL)      /*!< Read: Pending                                                        */

/* XOTUNEERROR @Bit 5 : Read pending status of interrupt for event XOTUNEERROR */
  #define CLOCK_INTPEND_XOTUNEERROR_Pos (5UL)        /*!< Position of XOTUNEERROR field.                                       */
  #define CLOCK_INTPEND_XOTUNEERROR_Msk (0x1UL << CLOCK_INTPEND_XOTUNEERROR_Pos) /*!< Bit mask of XOTUNEERROR field.           */
  #define CLOCK_INTPEND_XOTUNEERROR_Min (0x0UL)      /*!< Min enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTPEND_XOTUNEERROR_Max (0x1UL)      /*!< Max enumerator value of XOTUNEERROR field.                           */
  #define CLOCK_INTPEND_XOTUNEERROR_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define CLOCK_INTPEND_XOTUNEERROR_Pending (0x1UL)  /*!< Read: Pending                                                        */

/* XOTUNEFAILED @Bit 6 : Read pending status of interrupt for event XOTUNEFAILED */
  #define CLOCK_INTPEND_XOTUNEFAILED_Pos (6UL)       /*!< Position of XOTUNEFAILED field.                                      */
  #define CLOCK_INTPEND_XOTUNEFAILED_Msk (0x1UL << CLOCK_INTPEND_XOTUNEFAILED_Pos) /*!< Bit mask of XOTUNEFAILED field.        */
  #define CLOCK_INTPEND_XOTUNEFAILED_Min (0x0UL)     /*!< Min enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTPEND_XOTUNEFAILED_Max (0x1UL)     /*!< Max enumerator value of XOTUNEFAILED field.                          */
  #define CLOCK_INTPEND_XOTUNEFAILED_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define CLOCK_INTPEND_XOTUNEFAILED_Pending (0x1UL) /*!< Read: Pending                                                        */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           CPUC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct CPUC ======================================================= */
/**
  * @brief CPU control
  */
  typedef struct {                                   /*!< CPUC Structure                                                       */
    __IM uint32_t RESERVED[320];
    __IOM uint32_t LOCK;                             /*!< (@ 0x00000500) Register to lock the certain parts of the CPU from
                                                                         being modified.*/
    __IM uint32_t CPUID;                             /*!< (@ 0x00000504) The identifier for the CPU in this subsystem.         */
  } NRF_CPUC_Type;                                   /*!< Size = 1288 (0x508)                                                  */

/* CPUC_LOCK: Register to lock the certain parts of the CPU from being modified. */
  #define CPUC_LOCK_ResetValue (0x00000000UL)        /*!< Reset value of LOCK register.                                        */

/* LOCKVTORAIRCRS @Bit 0 : Locks both the Vector table Offset Register (VTOR) and Application Interrupt and Reset Control
                           Register (AIRCR) for secure mode. */

  #define CPUC_LOCK_LOCKVTORAIRCRS_Pos (0UL)         /*!< Position of LOCKVTORAIRCRS field.                                    */
  #define CPUC_LOCK_LOCKVTORAIRCRS_Msk (0x1UL << CPUC_LOCK_LOCKVTORAIRCRS_Pos) /*!< Bit mask of LOCKVTORAIRCRS field.          */
  #define CPUC_LOCK_LOCKVTORAIRCRS_Min (0x0UL)       /*!< Min enumerator value of LOCKVTORAIRCRS field.                        */
  #define CPUC_LOCK_LOCKVTORAIRCRS_Max (0x1UL)       /*!< Max enumerator value of LOCKVTORAIRCRS field.                        */
  #define CPUC_LOCK_LOCKVTORAIRCRS_NotLocked (0x0UL) /*!< Both VTOR and AIRCR can be changed.                                  */
  #define CPUC_LOCK_LOCKVTORAIRCRS_Locked (0x1UL)    /*!< Prevents changes to both VTOR and AIRCR.                             */

/* LOCKVTORNS @Bit 1 : Locks the Vector table Offset Register (VTOR) for non-secure mode. */
  #define CPUC_LOCK_LOCKVTORNS_Pos (1UL)             /*!< Position of LOCKVTORNS field.                                        */
  #define CPUC_LOCK_LOCKVTORNS_Msk (0x1UL << CPUC_LOCK_LOCKVTORNS_Pos) /*!< Bit mask of LOCKVTORNS field.                      */
  #define CPUC_LOCK_LOCKVTORNS_Min (0x0UL)           /*!< Min enumerator value of LOCKVTORNS field.                            */
  #define CPUC_LOCK_LOCKVTORNS_Max (0x1UL)           /*!< Max enumerator value of LOCKVTORNS field.                            */
  #define CPUC_LOCK_LOCKVTORNS_NotLocked (0x0UL)     /*!< VTOR can be changed.                                                 */
  #define CPUC_LOCK_LOCKVTORNS_Locked (0x1UL)        /*!< Prevents changes to VTOR.                                            */

/* LOCKMPUS @Bit 2 : Locks the Memory Protection Unit (MPU) for secure mode. */
  #define CPUC_LOCK_LOCKMPUS_Pos (2UL)               /*!< Position of LOCKMPUS field.                                          */
  #define CPUC_LOCK_LOCKMPUS_Msk (0x1UL << CPUC_LOCK_LOCKMPUS_Pos) /*!< Bit mask of LOCKMPUS field.                            */
  #define CPUC_LOCK_LOCKMPUS_Min (0x0UL)             /*!< Min enumerator value of LOCKMPUS field.                              */
  #define CPUC_LOCK_LOCKMPUS_Max (0x1UL)             /*!< Max enumerator value of LOCKMPUS field.                              */
  #define CPUC_LOCK_LOCKMPUS_NotLocked (0x0UL)       /*!< MPU registers can be changed.                                        */
  #define CPUC_LOCK_LOCKMPUS_Locked (0x1UL)          /*!< Prevents changes to MPU registers.                                   */

/* LOCKMPUNS @Bit 3 : Locks the Memory Protection Unit (MPU) for non secure mode. */
  #define CPUC_LOCK_LOCKMPUNS_Pos (3UL)              /*!< Position of LOCKMPUNS field.                                         */
  #define CPUC_LOCK_LOCKMPUNS_Msk (0x1UL << CPUC_LOCK_LOCKMPUNS_Pos) /*!< Bit mask of LOCKMPUNS field.                         */
  #define CPUC_LOCK_LOCKMPUNS_Min (0x0UL)            /*!< Min enumerator value of LOCKMPUNS field.                             */
  #define CPUC_LOCK_LOCKMPUNS_Max (0x1UL)            /*!< Max enumerator value of LOCKMPUNS field.                             */
  #define CPUC_LOCK_LOCKMPUNS_NotLocked (0x0UL)      /*!< MPU registers can be changed.                                        */
  #define CPUC_LOCK_LOCKMPUNS_Locked (0x1UL)         /*!< Prevents changes to MPU registers.                                   */

/* LOCKSAU @Bit 4 : Locks the Security Attribution Unit (SAU) */
  #define CPUC_LOCK_LOCKSAU_Pos (4UL)                /*!< Position of LOCKSAU field.                                           */
  #define CPUC_LOCK_LOCKSAU_Msk (0x1UL << CPUC_LOCK_LOCKSAU_Pos) /*!< Bit mask of LOCKSAU field.                               */
  #define CPUC_LOCK_LOCKSAU_Min (0x0UL)              /*!< Min enumerator value of LOCKSAU field.                               */
  #define CPUC_LOCK_LOCKSAU_Max (0x1UL)              /*!< Max enumerator value of LOCKSAU field.                               */
  #define CPUC_LOCK_LOCKSAU_NotLocked (0x0UL)        /*!< SAU registers can be changed.                                        */
  #define CPUC_LOCK_LOCKSAU_Locked (0x1UL)           /*!< Prevents changes to SAU registers.                                   */


/* CPUC_CPUID: The identifier for the CPU in this subsystem. */
  #define CPUC_CPUID_ResetValue (0x00000000UL)       /*!< Reset value of CPUID register.                                       */

/* CPUID @Bits 0..31 : The CPU identifier. */
  #define CPUC_CPUID_CPUID_Pos (0UL)                 /*!< Position of CPUID field.                                             */
  #define CPUC_CPUID_CPUID_Msk (0xFFFFFFFFUL << CPUC_CPUID_CPUID_Pos) /*!< Bit mask of CPUID field.                            */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          CRACEN                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct CRACEN ====================================================== */
/**
  * @brief CRACEN TRNG
  */
  typedef struct {                                   /*!< CRACEN Structure                                                     */
    __IM uint32_t RESERVED[65];
    __IOM uint32_t EVENTS_RNG;                       /*!< (@ 0x00000104) Event indicating that interrupt triggered at RNG      */
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND;                           /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IM uint32_t RESERVED2[60];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000400) Enable RNG peripheral module.                         */
  } NRF_CRACEN_Type;                                 /*!< Size = 1028 (0x404)                                                  */

/* CRACEN_EVENTS_RNG: Event indicating that interrupt triggered at RNG */
  #define CRACEN_EVENTS_RNG_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RNG register.                                 */

/* EVENTS_RNG @Bit 0 : Event indicating that interrupt triggered at RNG */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Pos (0UL)     /*!< Position of EVENTS_RNG field.                                        */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Msk (0x1UL << CRACEN_EVENTS_RNG_EVENTS_RNG_Pos) /*!< Bit mask of EVENTS_RNG field.      */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Min (0x0UL)   /*!< Min enumerator value of EVENTS_RNG field.                            */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Max (0x1UL)   /*!< Max enumerator value of EVENTS_RNG field.                            */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_NotGenerated (0x0UL) /*!< Event not generated                                           */
  #define CRACEN_EVENTS_RNG_EVENTS_RNG_Generated (0x1UL) /*!< Event generated                                                  */


/* CRACEN_INTEN: Enable or disable interrupt */
  #define CRACEN_INTEN_ResetValue (0x00000000UL)     /*!< Reset value of INTEN register.                                       */

/* RNG @Bit 1 : Enable or disable interrupt for event RNG */
  #define CRACEN_INTEN_RNG_Pos (1UL)                 /*!< Position of RNG field.                                               */
  #define CRACEN_INTEN_RNG_Msk (0x1UL << CRACEN_INTEN_RNG_Pos) /*!< Bit mask of RNG field.                                     */
  #define CRACEN_INTEN_RNG_Min (0x0UL)               /*!< Min enumerator value of RNG field.                                   */
  #define CRACEN_INTEN_RNG_Max (0x1UL)               /*!< Max enumerator value of RNG field.                                   */
  #define CRACEN_INTEN_RNG_Disabled (0x0UL)          /*!< Disable                                                              */
  #define CRACEN_INTEN_RNG_Enabled (0x1UL)           /*!< Enable                                                               */


/* CRACEN_INTENSET: Enable interrupt */
  #define CRACEN_INTENSET_ResetValue (0x00000000UL)  /*!< Reset value of INTENSET register.                                    */

/* RNG @Bit 1 : Write '1' to enable interrupt for event RNG */
  #define CRACEN_INTENSET_RNG_Pos (1UL)              /*!< Position of RNG field.                                               */
  #define CRACEN_INTENSET_RNG_Msk (0x1UL << CRACEN_INTENSET_RNG_Pos) /*!< Bit mask of RNG field.                               */
  #define CRACEN_INTENSET_RNG_Min (0x0UL)            /*!< Min enumerator value of RNG field.                                   */
  #define CRACEN_INTENSET_RNG_Max (0x1UL)            /*!< Max enumerator value of RNG field.                                   */
  #define CRACEN_INTENSET_RNG_Set (0x1UL)            /*!< Enable                                                               */
  #define CRACEN_INTENSET_RNG_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define CRACEN_INTENSET_RNG_Enabled (0x1UL)        /*!< Read: Enabled                                                        */


/* CRACEN_INTENCLR: Disable interrupt */
  #define CRACEN_INTENCLR_ResetValue (0x00000000UL)  /*!< Reset value of INTENCLR register.                                    */

/* RNG @Bit 1 : Write '1' to disable interrupt for event RNG */
  #define CRACEN_INTENCLR_RNG_Pos (1UL)              /*!< Position of RNG field.                                               */
  #define CRACEN_INTENCLR_RNG_Msk (0x1UL << CRACEN_INTENCLR_RNG_Pos) /*!< Bit mask of RNG field.                               */
  #define CRACEN_INTENCLR_RNG_Min (0x0UL)            /*!< Min enumerator value of RNG field.                                   */
  #define CRACEN_INTENCLR_RNG_Max (0x1UL)            /*!< Max enumerator value of RNG field.                                   */
  #define CRACEN_INTENCLR_RNG_Clear (0x1UL)          /*!< Disable                                                              */
  #define CRACEN_INTENCLR_RNG_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define CRACEN_INTENCLR_RNG_Enabled (0x1UL)        /*!< Read: Enabled                                                        */


/* CRACEN_INTPEND: Pending interrupts */
  #define CRACEN_INTPEND_ResetValue (0x00000000UL)   /*!< Reset value of INTPEND register.                                     */

/* RNG @Bit 1 : Read pending status of interrupt for event RNG */
  #define CRACEN_INTPEND_RNG_Pos (1UL)               /*!< Position of RNG field.                                               */
  #define CRACEN_INTPEND_RNG_Msk (0x1UL << CRACEN_INTPEND_RNG_Pos) /*!< Bit mask of RNG field.                                 */
  #define CRACEN_INTPEND_RNG_Min (0x0UL)             /*!< Min enumerator value of RNG field.                                   */
  #define CRACEN_INTPEND_RNG_Max (0x1UL)             /*!< Max enumerator value of RNG field.                                   */
  #define CRACEN_INTPEND_RNG_NotPending (0x0UL)      /*!< Read: Not pending                                                    */
  #define CRACEN_INTPEND_RNG_Pending (0x1UL)         /*!< Read: Pending                                                        */


/* CRACEN_ENABLE: Enable RNG peripheral module. */
  #define CRACEN_ENABLE_ResetValue (0x00000000UL)    /*!< Reset value of ENABLE register.                                      */

/* RNG @Bit 1 : Enable RNG */
  #define CRACEN_ENABLE_RNG_Pos (1UL)                /*!< Position of RNG field.                                               */
  #define CRACEN_ENABLE_RNG_Msk (0x1UL << CRACEN_ENABLE_RNG_Pos) /*!< Bit mask of RNG field.                                   */
  #define CRACEN_ENABLE_RNG_Min (0x0UL)              /*!< Min enumerator value of RNG field.                                   */
  #define CRACEN_ENABLE_RNG_Max (0x1UL)              /*!< Max enumerator value of RNG field.                                   */
  #define CRACEN_ENABLE_RNG_Disabled (0x0UL)         /*!< RNG disabled.                                                        */
  #define CRACEN_ENABLE_RNG_Enabled (0x1UL)          /*!< RNG enabled.                                                         */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        CRACENCORE                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================== Struct CRACENCORE_RNGCONTROL =============================================== */
/**
  * @brief RNGCONTROL [CRACENCORE_RNGCONTROL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONTROL;                           /*!< (@ 0x00000000) Control register                                      */
  __IOM uint32_t  FIFOLEVEL;                         /*!< (@ 0x00000004) FIFO level register.                                  */
  __IOM uint32_t  FIFOTHRESHOLD;                     /*!< (@ 0x00000008) FIFO threshold register.                              */
  __IOM uint32_t  FIFODEPTH;                         /*!< (@ 0x0000000C) FIFO depth register.                                  */
  __IOM uint32_t  KEY[4];                            /*!< (@ 0x00000010) Key register.                                         */
  __IOM uint32_t  TESTDATA;                          /*!< (@ 0x00000020) Test data register.                                   */
  __IOM uint32_t  REPEATTHRESHOLD;                   /*!< (@ 0x00000024) Repetition test cut-off register.                     */
  __IOM uint32_t  PROPTESTCUTOFF;                    /*!< (@ 0x00000028) Proportion test cut-off register.                     */
  __IOM uint32_t  LFSRSEED;                          /*!< (@ 0x0000002C) LFSR seed register.                                   */
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000030) Status register.                                      */
  __IOM uint32_t  WARMUPPERIOD;                      /*!< (@ 0x00000034) Number of clock cycles in warm-up sequence.           */
  __IOM uint32_t  DISABLEOSC;                        /*!< (@ 0x00000038) DisableOsc register.                                  */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  SAMPLINGPERIOD;                    /*!< (@ 0x00000044) Number of clock cycles between sampling moments.      */
  __IM  uint32_t  RESERVED1[4];
  __IOM uint32_t  HWCONFIG;                          /*!< (@ 0x00000058) Hardware configuration register.                      */
  __IOM uint32_t  COOLDOWNPERIOD;                    /*!< (@ 0x0000005C) Number of clock cycles in cool-down sequence.         */
  __IOM uint32_t  AUTOCORRTESTCUTOFF0;               /*!< (@ 0x00000060) AutoCorrTestCutoff register 0                         */
  __IOM uint32_t  AUTOCORRTESTCUTOFF1;               /*!< (@ 0x00000064) AutoCorrTestCutoff register 1                         */
  __IOM uint32_t  CORRTESTCUTOFF0;                   /*!< (@ 0x00000068) CorrTestCutoff register 0                             */
  __IOM uint32_t  CORRTESTCUTOFF1;                   /*!< (@ 0x0000006C) CorrTestCutoff register 1                             */
  __IOM uint32_t  AUTOCORRTESTFAILED;                /*!< (@ 0x00000070) Auto-correlation test failing ring(s).                */
  __IOM uint32_t  CORRTESTFAILED;                    /*!< (@ 0x00000074) Correlation test failing ring.                        */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  HWVERSION;                         /*!< (@ 0x0000007C) Fixed to 1 for this version.                          */
  __IM  uint32_t  FIFO[32];                          /*!< (@ 0x00000080) FIFO data                                             */
} NRF_CRACENCORE_RNGCONTROL_Type;                    /*!< Size = 256 (0x100)                                                   */

/* CRACENCORE_RNGCONTROL_CONTROL: Control register */
  #define CRACENCORE_RNGCONTROL_CONTROL_ResetValue (0x00040000UL) /*!< Reset value of CONTROL register.                        */

/* ENABLE @Bit 0 : Start/enable the NDRNG. */
  #define CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                        */
  #define CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_ENABLE_Pos) /*!< Bit mask of ENABLE
                                                                            field.*/

/* LFSREN @Bit 1 : Select between the NDRNG with asynchronous free running oscillators (when 0) and the Pseudo-Random generator
                   with synchronous oscillators for simulation purpose (when 1). */

  #define CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Pos (1UL) /*!< Position of LFSREN field.                                        */
  #define CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_LFSREN_Pos) /*!< Bit mask of LFSREN
                                                                            field.*/

/* TESTEN @Bit 2 : Select input for conditioning function and continuous tests: */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Pos (2UL) /*!< Position of TESTEN field.                                        */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Pos) /*!< Bit mask of TESTEN
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Min (0x0UL) /*!< Min enumerator value of TESTEN field.                          */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_Max (0x1UL) /*!< Max enumerator value of TESTEN field.                          */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_NORMAL (0x0UL) /*!< Noise source (normal mode).                                 */
  #define CRACENCORE_RNGCONTROL_CONTROL_TESTEN_TEST (0x1UL) /*!< Test data register (test mode).                               */

/* CONDBYPASS @Bit 3 : Conditioning function bypass. */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Pos (3UL) /*!< Position of CONDBYPASS field.                                */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Pos) /*!< Bit mask of
                                                                            CONDBYPASS field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Min (0x0UL) /*!< Min enumerator value of CONDBYPASS field.                  */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_Max (0x1UL) /*!< Max enumerator value of CONDBYPASS field.                  */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_NORMAL (0x0UL) /*!< the conditioning function is used (normal mode).        */
  #define CRACENCORE_RNGCONTROL_CONTROL_CONDBYPASS_BYPASS (0x1UL) /*!< the conditioning function is bypassed (to observe entropy
                                                                       source directly).*/

/* INTENREP @Bit 4 : Enable interrupt if any of the health test fails. */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Pos (4UL) /*!< Position of INTENREP field.                                    */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_INTENREP_Pos) /*!< Bit mask of
                                                                            INTENREP field.*/

/* INTENFULL @Bit 7 : Enable interrupt if FIFO is full. */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Pos (7UL) /*!< Position of INTENFULL field.                                  */
  #define CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_INTENFULL_Pos) /*!< Bit mask of
                                                                            INTENFULL field.*/

/* SOFTRST @Bit 8 : Datapath content flush and control FSM */
  #define CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Pos (8UL) /*!< Position of SOFTRST field.                                      */
  #define CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_SOFTRST_Pos) /*!< Bit mask of
                                                                            SOFTRST field.*/

/* FORCEACTIVEROS @Bit 11 : Force oscillators to run when FIFO is full. */
  #define CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Pos (11UL) /*!< Position of FORCEACTIVEROS field.                       */
  #define CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_FORCEACTIVEROS_Pos) /*!< Bit
                                                                            mask of FORCEACTIVEROS field.*/

/* IGNOREHEALTHTESTSFAILFORFSM @Bit 12 : Results of the health tests during start-up and online test do not affect the control
                                         FSM state. */

  #define CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Pos (12UL) /*!< Position of IGNOREHEALTHTESTSFAILFORFSM
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_IGNOREHEALTHTESTSFAILFORFSM_Pos)
                                                                            /*!< Bit mask of IGNOREHEALTHTESTSFAILFORFSM field.*/

/* NB128BITBLOCKS @Bits 16..19 : Number of 128 bit blocks used in conditioning (AES-CBC-MAC) post-processing. */
  #define CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Pos (16UL) /*!< Position of NB128BITBLOCKS field.                       */
  #define CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Msk (0xFUL << CRACENCORE_RNGCONTROL_CONTROL_NB128BITBLOCKS_Pos) /*!< Bit
                                                                            mask of NB128BITBLOCKS field.*/

/* FIFOWRITESTARTUP @Bit 20 : Enable write of the samples in the FIFO during start-up. */
  #define CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Pos (20UL) /*!< Position of FIFOWRITESTARTUP field.                   */
  #define CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_FIFOWRITESTARTUP_Pos) /*!<
                                                                            Bit mask of FIFOWRITESTARTUP field.*/

/* DISREPETTESTS @Bit 21 : All repetition tests (each share) are disabled via this single bit. */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Pos (21UL) /*!< Position of DISREPETTESTS field.                         */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_DISREPETTESTS_Pos) /*!< Bit
                                                                            mask of DISREPETTESTS field.*/

/* DISPROPTESTS @Bit 22 : All proportion tests (each share) are disabled via this single bit. */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Pos (22UL) /*!< Position of DISPROPTESTS field.                           */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Msk (0x1UL << CRACENCORE_RNGCONTROL_CONTROL_DISPROPTESTS_Pos) /*!< Bit mask
                                                                            of DISPROPTESTS field.*/

/* DISAUTOCORRTESTS @Bits 23..24 : Disable specific delay(s) check in auto-correlation test - same RO: */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Pos (23UL) /*!< Position of DISAUTOCORRTESTS field.                   */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Msk (0x3UL << CRACENCORE_RNGCONTROL_CONTROL_DISAUTOCORRTESTS_Pos) /*!<
                                                                            Bit mask of DISAUTOCORRTESTS field.*/

/* DISCORRTESTS @Bits 27..29 : Disable specific delay(s) check in correlation test - different ROs: */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Pos (27UL) /*!< Position of DISCORRTESTS field.                           */
  #define CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Msk (0x7UL << CRACENCORE_RNGCONTROL_CONTROL_DISCORRTESTS_Pos) /*!< Bit mask
                                                                            of DISCORRTESTS field.*/

/* BLENDINGMETHOD @Bits 30..31 : Select blending method */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Pos (30UL) /*!< Position of BLENDINGMETHOD field.                       */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Msk (0x3UL << CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Pos) /*!< Bit
                                                                            mask of BLENDINGMETHOD field.*/
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Min (0x0UL) /*!< Min enumerator value of BLENDINGMETHOD field.          */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_Max (0x3UL) /*!< Max enumerator value of BLENDINGMETHOD field.          */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_CONCATENATION (0x0UL) /*!< Concatenation                                */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_XORLEVEL1 (0x1UL) /*!< XOR level 1                                      */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_XORLEVEL2 (0x2UL) /*!< XOR level 2                                      */
  #define CRACENCORE_RNGCONTROL_CONTROL_BLENDINGMETHOD_VONNEUMANN (0x3UL) /*!< VON-NEUMANN debiasing                           */


/* CRACENCORE_RNGCONTROL_FIFOLEVEL: FIFO level register. */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_ResetValue (0x00000000UL) /*!< Reset value of FIFOLEVEL register.                    */

/* FIFOLEVEL @Bits 0..31 : Number of 32 bits words of random values available in the FIFO. */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Pos (0UL) /*!< Position of FIFOLEVEL field.                                */
  #define CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFOLEVEL_FIFOLEVEL_Pos) /*!< Bit
                                                                            mask of FIFOLEVEL field.*/


/* CRACENCORE_RNGCONTROL_FIFOTHRESHOLD: FIFO threshold register. */
  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_ResetValue (0x00000003UL) /*!< Reset value of FIFOTHRESHOLD register.            */

/* FIFOTHRESHOLD @Bits 0..31 : FIFO level below which the module leaves the idle state to refill the FIFO, expressed in number
                               of 128bit blocks. */

  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Pos (0UL) /*!< Position of FIFOTHRESHOLD field.                    */
  #define CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFOTHRESHOLD_FIFOTHRESHOLD_Pos)
                                                                            /*!< Bit mask of FIFOTHRESHOLD field.*/


/* CRACENCORE_RNGCONTROL_FIFODEPTH: FIFO depth register. */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_ResetValue (0x00000010UL) /*!< Reset value of FIFODEPTH register.                    */

/* FIFODEPTH @Bits 0..31 : Maximum number of 32 bits words that can be stored in the FIFO. */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Pos (0UL) /*!< Position of FIFODEPTH field.                                */
  #define CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFODEPTH_FIFODEPTH_Pos) /*!< Bit
                                                                            mask of FIFODEPTH field.*/


/* CRACENCORE_RNGCONTROL_KEY: Key register. */
  #define CRACENCORE_RNGCONTROL_KEY_MaxCount (4UL)   /*!< Max size of KEY[4] array.                                            */
  #define CRACENCORE_RNGCONTROL_KEY_MaxIndex (3UL)   /*!< Max index of KEY[4] array.                                           */
  #define CRACENCORE_RNGCONTROL_KEY_MinIndex (0UL)   /*!< Min index of KEY[4] array.                                           */
  #define CRACENCORE_RNGCONTROL_KEY_ResetValue (0x00000000UL) /*!< Reset value of KEY[4] register.                             */

/* KEY @Bits 0..31 : Key register. */
  #define CRACENCORE_RNGCONTROL_KEY_KEY_Pos (0UL)    /*!< Position of KEY field.                                               */
  #define CRACENCORE_RNGCONTROL_KEY_KEY_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_KEY_KEY_Pos) /*!< Bit mask of KEY field.    */


/* CRACENCORE_RNGCONTROL_TESTDATA: Test data register. */
  #define CRACENCORE_RNGCONTROL_TESTDATA_ResetValue (0x00000000UL) /*!< Reset value of TESTDATA register.                      */

/* TESTDATA @Bits 0..31 : Test data register. */
  #define CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Pos (0UL) /*!< Position of TESTDATA field.                                   */
  #define CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_TESTDATA_TESTDATA_Pos) /*!< Bit
                                                                            mask of TESTDATA field.*/


/* CRACENCORE_RNGCONTROL_REPEATTHRESHOLD: Repetition test cut-off register. */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_ResetValue (0x00000004UL) /*!< Reset value of REPEATTHRESHOLD register.        */

/* REPEATTHRESHOLD @Bits 0..5 : Repetition Test cut-off value. */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Pos (0UL) /*!< Position of REPEATTHRESHOLD field.              */
  #define CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Msk (0x3FUL << CRACENCORE_RNGCONTROL_REPEATTHRESHOLD_REPEATTHRESHOLD_Pos)
                                                                            /*!< Bit mask of REPEATTHRESHOLD field.*/


/* CRACENCORE_RNGCONTROL_PROPTESTCUTOFF: Proportion test cut-off register. */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_ResetValue (0x0000000DUL) /*!< Reset value of PROPTESTCUTOFF register.          */

/* PROPTESTCUTOFF @Bits 0..8 : Proportion test cut-off value. */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Pos (0UL) /*!< Position of PROPTESTCUTOFF field.                 */
  #define CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Msk (0x1FFUL << CRACENCORE_RNGCONTROL_PROPTESTCUTOFF_PROPTESTCUTOFF_Pos)
                                                                            /*!< Bit mask of PROPTESTCUTOFF field.*/


/* CRACENCORE_RNGCONTROL_LFSRSEED: LFSR seed register. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_ResetValue (0x00FFFFFFUL) /*!< Reset value of LFSRSEED register.                      */

/* LFSRSEED @Bits 0..23 : LFSR initialization value. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Pos (0UL) /*!< Position of LFSRSEED field.                                   */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Msk (0xFFFFFFUL << CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSEED_Pos) /*!< Bit mask
                                                                            of LFSRSEED field.*/

/* LFSRSSELECTION @Bits 24..25 : Share index for which initialization value should be used. */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Pos (24UL) /*!< Position of LFSRSSELECTION field.                      */
  #define CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Msk (0x3UL << CRACENCORE_RNGCONTROL_LFSRSEED_LFSRSSELECTION_Pos) /*!<
                                                                            Bit mask of LFSRSSELECTION field.*/


/* CRACENCORE_RNGCONTROL_STATUS: Status register. */
  #define CRACENCORE_RNGCONTROL_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                          */

/* TESTDATABUSY @Bit 0 : High when data written to TestData register is being processed. */
  #define CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Pos (0UL) /*!< Position of TESTDATABUSY field.                             */
  #define CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_TESTDATABUSY_Pos) /*!< Bit mask
                                                                            of TESTDATABUSY field.*/

/* STATE @Bits 1..3 : State of the control FSM: */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Pos (1UL) /*!< Position of STATE field.                                           */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Msk (0x7UL << CRACENCORE_RNGCONTROL_STATUS_STATE_Pos) /*!< Bit mask of STATE
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Min (0x0UL) /*!< Min enumerator value of STATE field.                             */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_Max (0x5UL) /*!< Max enumerator value of STATE field.                             */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_RESET (0x0UL) /*!< Reset                                                          */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_STARTUP (0x1UL) /*!< Startup                                                      */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_IDLERON (0x2UL) /*!< Idle / FIFO full                                             */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_FILLFIFO (0x4UL) /*!< Fill FIFO                                                   */
  #define CRACENCORE_RNGCONTROL_STATUS_STATE_ERROR (0x5UL) /*!< Error                                                          */

/* REPFAIL @Bit 4 : NIST repetition test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Pos (4UL) /*!< Position of REPFAIL field.                                       */
  #define CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_REPFAIL_Pos) /*!< Bit mask of REPFAIL
                                                                            field.*/

/* PROPFAIL @Bit 5 : NIST proportion test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Pos (5UL) /*!< Position of PROPFAIL field.                                     */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_PROPFAIL_Pos) /*!< Bit mask of
                                                                            PROPFAIL field.*/

/* ANYHEALTHTESTFAIL @Bit 6 : Any of the enabled health tests is failing. */
  #define CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Pos (6UL) /*!< Position of ANYHEALTHTESTFAIL field.                   */
  #define CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_ANYHEALTHTESTFAIL_Pos) /*!<
                                                                            Bit mask of ANYHEALTHTESTFAIL field.*/

/* FULLINT @Bit 7 : FIFO full status. */
  #define CRACENCORE_RNGCONTROL_STATUS_FULLINT_Pos (7UL) /*!< Position of FULLINT field.                                       */
  #define CRACENCORE_RNGCONTROL_STATUS_FULLINT_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_FULLINT_Pos) /*!< Bit mask of FULLINT
                                                                            field.*/

/* STARTUPFAIL @Bit 10 : Start-up test(s) failure. */
  #define CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Pos (10UL) /*!< Position of STARTUPFAIL field.                              */
  #define CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_STARTUPFAIL_Pos) /*!< Bit mask of
                                                                            STARTUPFAIL field.*/

/* REPTESTFAILPERSHARE @Bits 12..15 : NIST Repetition test failure per share. */
  #define CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Pos (12UL) /*!< Position of REPTESTFAILPERSHARE field.              */
  #define CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_STATUS_REPTESTFAILPERSHARE_Pos)
                                                                            /*!< Bit mask of REPTESTFAILPERSHARE field.*/

/* PROPTESTFAILPERSHARE @Bits 16..19 : NIST Proportion test failure per share. */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Pos (16UL) /*!< Position of PROPTESTFAILPERSHARE field.            */
  #define CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_STATUS_PROPTESTFAILPERSHARE_Pos)
                                                                            /*!< Bit mask of PROPTESTFAILPERSHARE field.*/

/* CONDITIONINGISTOOSLOW @Bit 20 : Conditioning consumes data slower than they are provided to it. */
  #define CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Pos (20UL) /*!< Position of CONDITIONINGISTOOSLOW field.          */
  #define CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Msk (0x1UL << CRACENCORE_RNGCONTROL_STATUS_CONDITIONINGISTOOSLOW_Pos)
                                                                            /*!< Bit mask of CONDITIONINGISTOOSLOW field.*/


/* CRACENCORE_RNGCONTROL_WARMUPPERIOD: Number of clock cycles in warm-up sequence. */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_ResetValue (0x00000200UL) /*!< Reset value of WARMUPPERIOD register.              */

/* WARMUPPERIOD @Bits 0..11 : Number of clock cycles in warm-up sequence. */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Pos (0UL) /*!< Position of WARMUPPERIOD field.                       */
  #define CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_WARMUPPERIOD_WARMUPPERIOD_Pos)
                                                                            /*!< Bit mask of WARMUPPERIOD field.*/


/* CRACENCORE_RNGCONTROL_DISABLEOSC: DisableOsc register. */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_ResetValue (0x00000000UL) /*!< Reset value of DISABLEOSC register.                  */

/* DISABLEOSC @Bits 0..7 : Disable oscillator rings 0 to 7. */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Pos (0UL) /*!< Position of DISABLEOSC field.                             */
  #define CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Msk (0xFFUL << CRACENCORE_RNGCONTROL_DISABLEOSC_DISABLEOSC_Pos) /*!< Bit
                                                                            mask of DISABLEOSC field.*/


/* CRACENCORE_RNGCONTROL_SAMPLINGPERIOD: Number of clock cycles between sampling moments. */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_ResetValue (0x00000FFFUL) /*!< Reset value of SAMPLINGPERIOD register.          */

/* SAMPLINGPERIOD @Bits 0..11 : Number of clock cycles between sampling moments. */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Pos (0UL) /*!< Position of SAMPLINGPERIOD field.                 */
  #define CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_SAMPLINGPERIOD_SAMPLINGPERIOD_Pos)
                                                                            /*!< Bit mask of SAMPLINGPERIOD field.*/


/* CRACENCORE_RNGCONTROL_HWCONFIG: Hardware configuration register. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_ResetValue (0x0002410FUL) /*!< Reset value of HWCONFIG register.                      */

/* NBOFINV @Bits 0..7 : Generic g_NbOfInverters value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Pos (0UL) /*!< Position of NBOFINV field.                                     */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Msk (0xFFUL << CRACENCORE_RNGCONTROL_HWCONFIG_NBOFINV_Pos) /*!< Bit mask of
                                                                            NBOFINV field.*/

/* LOG2NBOFAUTOCORRTESTSPERSHARE @Bits 8..11 : Generic g_Log2NbOfAutoCorrTestsPerShare value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Pos (8UL) /*!< Position of LOG2NBOFAUTOCORRTESTSPERSHARE
                                                                            field.*/
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Msk (0xFUL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFAUTOCORRTESTSPERSHARE_Pos)
                                                                            /*!< Bit mask of LOG2NBOFAUTOCORRTESTSPERSHARE
                                                                            field.*/

/* LOG2FIFODEPTH @Bits 12..15 : Generic g_Log2FifoDepth value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Pos (12UL) /*!< Position of LOG2FIFODEPTH field.                        */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Msk (0xFUL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2FIFODEPTH_Pos) /*!< Bit
                                                                            mask of LOG2FIFODEPTH field.*/

/* LOG2NBOFSHARES @Bits 16..17 : Generic g_Log2NbOfShares value. */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Pos (16UL) /*!< Position of LOG2NBOFSHARES field.                      */
  #define CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Msk (0x3UL << CRACENCORE_RNGCONTROL_HWCONFIG_LOG2NBOFSHARES_Pos) /*!<
                                                                            Bit mask of LOG2NBOFSHARES field.*/


/* CRACENCORE_RNGCONTROL_COOLDOWNPERIOD: Number of clock cycles in cool-down sequence. */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_ResetValue (0x00000000UL) /*!< Reset value of COOLDOWNPERIOD register.          */

/* COOLDOWNPERIOD @Bits 0..11 : Number of clock cycles in cool-down sequence. */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Pos (0UL) /*!< Position of COOLDOWNPERIOD field.                 */
  #define CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Msk (0xFFFUL << CRACENCORE_RNGCONTROL_COOLDOWNPERIOD_COOLDOWNPERIOD_Pos)
                                                                            /*!< Bit mask of COOLDOWNPERIOD field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0: AutoCorrTestCutoff register 0 */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_ResetValue (0x007F007FUL) /*!< Reset value of AUTOCORRTESTCUTOFF0 register.*/

/* DLYZEROCUTOFF @Bits 0..15 : Auto-correlation test cut-off value for delay of 0 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Pos (0UL) /*!< Position of DLYZEROCUTOFF field.              */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYZEROCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYZEROCUTOFF field.*/

/* DLYONECUTOFF @Bits 16..31 : Auto-correlation test cut-off value for delay of +1 sample. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Pos (16UL) /*!< Position of DLYONECUTOFF field.               */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF0_DLYONECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYONECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1: AutoCorrTestCutoff register 1 */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_ResetValue (0x007F007FUL) /*!< Reset value of AUTOCORRTESTCUTOFF1 register.*/

/* DLYTWOCUTOFF @Bits 0..15 : Auto-correlation test cut-off value for delay of +2 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Pos (0UL) /*!< Position of DLYTWOCUTOFF field.                */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTWOCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTWOCUTOFF field.*/

/* DLYTHREECUTOFF @Bits 16..31 : Auto-correlation test cut-off value for delay of +3 samples. */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Pos (16UL) /*!< Position of DLYTHREECUTOFF field.           */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTCUTOFF1_DLYTHREECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTHREECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0: CorrTestCutoff register 0 */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_ResetValue (0x007F007FUL) /*!< Reset value of CORRTESTCUTOFF0 register.        */

/* DLYZEROCUTOFF @Bits 0..15 : Correlation test cut-off value for delay of 0 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Pos (0UL) /*!< Position of DLYZEROCUTOFF field.                  */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYZEROCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYZEROCUTOFF field.*/

/* DLYONECUTOFF @Bits 16..31 : Correlation test cut-off value for delay of +/-1 sample. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Pos (16UL) /*!< Position of DLYONECUTOFF field.                   */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF0_DLYONECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYONECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1: CorrTestCutoff register 1 */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_ResetValue (0x007F007FUL) /*!< Reset value of CORRTESTCUTOFF1 register.        */

/* DLYTWOCUTOFF @Bits 0..15 : Correlation test cut-off value for delay of +/- 2 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Pos (0UL) /*!< Position of DLYTWOCUTOFF field.                    */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTWOCUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTWOCUTOFF field.*/

/* DLYTHREECUTOFF @Bits 16..31 : Correlation test cut-off value for delay of +/- 3 samples. */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Pos (16UL) /*!< Position of DLYTHREECUTOFF field.               */
  #define CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Msk (0xFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTCUTOFF1_DLYTHREECUTOFF_Pos)
                                                                            /*!< Bit mask of DLYTHREECUTOFF field.*/


/* CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED: Auto-correlation test failing ring(s). */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_ResetValue (0x00000000UL) /*!< Reset value of AUTOCORRTESTFAILED register.  */

/* AUTOCORRTESTFAILED @Bits 0..31 : Auto-correlation test failing ring(s). */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Pos (0UL) /*!< Position of AUTOCORRTESTFAILED field.     */
  #define CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_AUTOCORRTESTFAILED_AUTOCORRTESTFAILED_Pos)
                                                                            /*!< Bit mask of AUTOCORRTESTFAILED field.*/


/* CRACENCORE_RNGCONTROL_CORRTESTFAILED: Correlation test failing ring. */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_ResetValue (0x00000000UL) /*!< Reset value of CORRTESTFAILED register.          */

/* CORRTESTFAILED @Bits 0..31 : Correlation test failing ring. */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Pos (0UL) /*!< Position of CORRTESTFAILED field.                 */
  #define CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_CORRTESTFAILED_CORRTESTFAILED_Pos)
                                                                            /*!< Bit mask of CORRTESTFAILED field.*/


/* CRACENCORE_RNGCONTROL_HWVERSION: Fixed to 1 for this version. */
  #define CRACENCORE_RNGCONTROL_HWVERSION_ResetValue (0x00000001UL) /*!< Reset value of HWVERSION register.                    */

/* HWVERSION @Bits 0..31 : Fixed to 1 for this version. */
  #define CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Pos (0UL) /*!< Position of HWVERSION field.                                */
  #define CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_HWVERSION_HWVERSION_Pos) /*!< Bit
                                                                            mask of HWVERSION field.*/


/* CRACENCORE_RNGCONTROL_FIFO: FIFO data */
  #define CRACENCORE_RNGCONTROL_FIFO_MaxCount (32UL) /*!< Max size of FIFO[32] array.                                          */
  #define CRACENCORE_RNGCONTROL_FIFO_MaxIndex (31UL) /*!< Max index of FIFO[32] array.                                         */
  #define CRACENCORE_RNGCONTROL_FIFO_MinIndex (0UL)  /*!< Min index of FIFO[32] array.                                         */
  #define CRACENCORE_RNGCONTROL_FIFO_ResetValue (0x00000000UL) /*!< Reset value of FIFO[32] register.                          */

/* DATA @Bits 0..31 : FIFO data */
  #define CRACENCORE_RNGCONTROL_FIFO_DATA_Pos (0UL)  /*!< Position of DATA field.                                              */
  #define CRACENCORE_RNGCONTROL_FIFO_DATA_Msk (0xFFFFFFFFUL << CRACENCORE_RNGCONTROL_FIFO_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/


/* ==================================================== Struct CRACENCORE ==================================================== */
/**
  * @brief CRACENCORE TRNG registers
  */
  typedef struct {                                   /*!< CRACENCORE Structure                                                 */
    __IM uint32_t RESERVED[320];
    __IOM NRF_CRACENCORE_RNGCONTROL_Type RNGCONTROL; /*!< (@ 0x00000500) (unspecified)                                         */
  } NRF_CRACENCORE_Type;                             /*!< Size = 1536 (0x600)                                                  */

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        CTRLAPPERI                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct CTRLAPPERI_MAILBOX ================================================ */
/**
  * @brief MAILBOX [CTRLAPPERI_MAILBOX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RXDATA;                            /*!< (@ 0x00000000) Data sent from the debugger to the CPU.               */
  __IM  uint32_t  RXSTATUS;                          /*!< (@ 0x00000004) Status to indicate if data sent from the debugger to
                                                                         the CPU has been read.*/
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  TXDATA;                            /*!< (@ 0x00000080) Data sent from the CPU to the debugger.               */
  __IM  uint32_t  TXSTATUS;                          /*!< (@ 0x00000084) Status to indicate if data sent from the CPU to the
                                                                         debugger has been read.*/
} NRF_CTRLAPPERI_MAILBOX_Type;                       /*!< Size = 136 (0x088)                                                   */

/* CTRLAPPERI_MAILBOX_RXDATA: Data sent from the debugger to the CPU. */
  #define CTRLAPPERI_MAILBOX_RXDATA_ResetValue (0x00000000UL) /*!< Reset value of RXDATA register.                             */

/* RXDATA @Bits 0..31 : Data received from debugger. */
  #define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos (0UL) /*!< Position of RXDATA field.                                            */
  #define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos) /*!< Bit mask of RXDATA
                                                                            field.*/


/* CTRLAPPERI_MAILBOX_RXSTATUS: Status to indicate if data sent from the debugger to the CPU has been read. */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_ResetValue (0x00000000UL) /*!< Reset value of RXSTATUS register.                         */

/* RXSTATUS @Bit 0 : Status of data in register RXDATA. */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos (0UL) /*!< Position of RXSTATUS field.                                      */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos) /*!< Bit mask of RXSTATUS
                                                                            field.*/
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Min (0x0UL) /*!< Min enumerator value of RXSTATUS field.                        */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Max (0x1UL) /*!< Max enumerator value of RXSTATUS field.                        */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_NoDataPending (0x0UL) /*!< No data is pending in register RXDATA.               */
  #define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_DataPending (0x1UL) /*!< Data is pending in register RXDATA.                    */


/* CTRLAPPERI_MAILBOX_TXDATA: Data sent from the CPU to the debugger. */
  #define CTRLAPPERI_MAILBOX_TXDATA_ResetValue (0x00000000UL) /*!< Reset value of TXDATA register.                             */

/* TXDATA @Bits 0..31 : Data sent to debugger. */
  #define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos (0UL) /*!< Position of TXDATA field.                                            */
  #define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos) /*!< Bit mask of TXDATA
                                                                            field.*/


/* CTRLAPPERI_MAILBOX_TXSTATUS: Status to indicate if data sent from the CPU to the debugger has been read. */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_ResetValue (0x00000000UL) /*!< Reset value of TXSTATUS register.                         */

/* TXSTATUS @Bit 0 : Status of data in register TXDATA. */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos (0UL) /*!< Position of TXSTATUS field.                                      */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos) /*!< Bit mask of TXSTATUS
                                                                            field.*/
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Min (0x0UL) /*!< Min enumerator value of TXSTATUS field.                        */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Max (0x1UL) /*!< Max enumerator value of TXSTATUS field.                        */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_NoDataPending (0x0UL) /*!< No data is pending in register TXDATA.               */
  #define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_DataPending (0x1UL) /*!< Data is pending in register TXDATA.                    */



/* ============================================= Struct CTRLAPPERI_ERASEPROTECT ============================================== */
/**
  * @brief ERASEPROTECT [CTRLAPPERI_ERASEPROTECT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LOCK;                              /*!< (@ 0x00000000) This register locks the ERASEPROTECT.DISABLE register
                                                                         from being written until next reset.*/
  __OM  uint32_t  DISABLE;                           /*!< (@ 0x00000004) This register disables the ERASEPROTECT register and
                                                                         performs an ERASEALL operation.*/
} NRF_CTRLAPPERI_ERASEPROTECT_Type;                  /*!< Size = 8 (0x008)                                                     */

/* CTRLAPPERI_ERASEPROTECT_LOCK: This register locks the ERASEPROTECT.DISABLE register from being written until next reset. */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_ResetValue (0x00000000UL) /*!< Reset value of LOCK register.                            */

/* LOCK @Bit 0 : Lock ERASEPROTECT.DISABLE register from being written until next reset. */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos (0UL) /*!< Position of LOCK field.                                             */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Msk (0x1UL << CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos) /*!< Bit mask of LOCK field.  */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                               */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                               */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Unlocked (0x0UL) /*!< Register ERASEPROTECT.DISABLE is writeable.                  */
  #define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Locked (0x1UL) /*!< Register ERASEPROTECT.DISABLE is read-only.                    */


/* CTRLAPPERI_ERASEPROTECT_DISABLE: This register disables the ERASEPROTECT register and performs an ERASEALL operation. */
  #define CTRLAPPERI_ERASEPROTECT_DISABLE_ResetValue (0x00000000UL) /*!< Reset value of DISABLE register.                      */

/* KEY @Bits 0..31 : The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on
                     both the CPU and debugger sides. */

  #define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos (0UL) /*!< Position of KEY field.                                            */
  #define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Msk (0xFFFFFFFFUL << CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/


/* ==================================================== Struct CTRLAPPERI ==================================================== */
/**
  * @brief Control access port
  */
  typedef struct {                                   /*!< CTRLAPPERI Structure                                                 */
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_RXREADY;                   /*!< (@ 0x00000100) RXSTATUS is changed to DataPending.                   */
    __IOM uint32_t EVENTS_TXDONE;                    /*!< (@ 0x00000104) TXSTATUS is changed to NoDataPending.                 */
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND;                           /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IM uint32_t RESERVED2[60];
    __IOM NRF_CTRLAPPERI_MAILBOX_Type MAILBOX;       /*!< (@ 0x00000400) (unspecified)                                         */
    __IM uint32_t RESERVED3[30];
    __IOM NRF_CTRLAPPERI_ERASEPROTECT_Type ERASEPROTECT; /*!< (@ 0x00000500) (unspecified)                                     */
    __IM uint32_t RESERVED4[6];
    __OM uint32_t RESET;                             /*!< (@ 0x00000520) System reset request.                                 */
  } NRF_CTRLAPPERI_Type;                             /*!< Size = 1316 (0x524)                                                  */

/* CTRLAPPERI_EVENTS_RXREADY: RXSTATUS is changed to DataPending. */
  #define CTRLAPPERI_EVENTS_RXREADY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RXREADY register.                     */

/* EVENTS_RXREADY @Bit 0 : RXSTATUS is changed to DataPending. */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Pos (0UL) /*!< Position of EVENTS_RXREADY field.                            */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Msk (0x1UL << CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_RXREADY field.*/
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Min (0x0UL) /*!< Min enumerator value of EVENTS_RXREADY field.              */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Max (0x1UL) /*!< Max enumerator value of EVENTS_RXREADY field.              */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated (0x0UL) /*!< Event not generated                               */
  #define CTRLAPPERI_EVENTS_RXREADY_EVENTS_RXREADY_Generated (0x1UL) /*!< Event generated                                      */


/* CTRLAPPERI_EVENTS_TXDONE: TXSTATUS is changed to NoDataPending. */
  #define CTRLAPPERI_EVENTS_TXDONE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TXDONE register.                       */

/* EVENTS_TXDONE @Bit 0 : TXSTATUS is changed to NoDataPending. */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Pos (0UL) /*!< Position of EVENTS_TXDONE field.                               */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Msk (0x1UL << CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_TXDONE field.*/
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Min (0x0UL) /*!< Min enumerator value of EVENTS_TXDONE field.                 */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Max (0x1UL) /*!< Max enumerator value of EVENTS_TXDONE field.                 */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_NotGenerated (0x0UL) /*!< Event not generated                                 */
  #define CTRLAPPERI_EVENTS_TXDONE_EVENTS_TXDONE_Generated (0x1UL) /*!< Event generated                                        */


/* CTRLAPPERI_INTEN: Enable or disable interrupt */
  #define CTRLAPPERI_INTEN_ResetValue (0x00000000UL) /*!< Reset value of INTEN register.                                       */

/* RXREADY @Bit 0 : Enable or disable interrupt for event RXREADY */
  #define CTRLAPPERI_INTEN_RXREADY_Pos (0UL)         /*!< Position of RXREADY field.                                           */
  #define CTRLAPPERI_INTEN_RXREADY_Msk (0x1UL << CTRLAPPERI_INTEN_RXREADY_Pos) /*!< Bit mask of RXREADY field.                 */
  #define CTRLAPPERI_INTEN_RXREADY_Min (0x0UL)       /*!< Min enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTEN_RXREADY_Max (0x1UL)       /*!< Max enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTEN_RXREADY_Disabled (0x0UL)  /*!< Disable                                                              */
  #define CTRLAPPERI_INTEN_RXREADY_Enabled (0x1UL)   /*!< Enable                                                               */

/* TXDONE @Bit 1 : Enable or disable interrupt for event TXDONE */
  #define CTRLAPPERI_INTEN_TXDONE_Pos (1UL)          /*!< Position of TXDONE field.                                            */
  #define CTRLAPPERI_INTEN_TXDONE_Msk (0x1UL << CTRLAPPERI_INTEN_TXDONE_Pos) /*!< Bit mask of TXDONE field.                    */
  #define CTRLAPPERI_INTEN_TXDONE_Min (0x0UL)        /*!< Min enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTEN_TXDONE_Max (0x1UL)        /*!< Max enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTEN_TXDONE_Disabled (0x0UL)   /*!< Disable                                                              */
  #define CTRLAPPERI_INTEN_TXDONE_Enabled (0x1UL)    /*!< Enable                                                               */


/* CTRLAPPERI_INTENSET: Enable interrupt */
  #define CTRLAPPERI_INTENSET_ResetValue (0x00000000UL) /*!< Reset value of INTENSET register.                                 */

/* RXREADY @Bit 0 : Write '1' to enable interrupt for event RXREADY */
  #define CTRLAPPERI_INTENSET_RXREADY_Pos (0UL)      /*!< Position of RXREADY field.                                           */
  #define CTRLAPPERI_INTENSET_RXREADY_Msk (0x1UL << CTRLAPPERI_INTENSET_RXREADY_Pos) /*!< Bit mask of RXREADY field.           */
  #define CTRLAPPERI_INTENSET_RXREADY_Min (0x0UL)    /*!< Min enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTENSET_RXREADY_Max (0x1UL)    /*!< Max enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTENSET_RXREADY_Set (0x1UL)    /*!< Enable                                                               */
  #define CTRLAPPERI_INTENSET_RXREADY_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define CTRLAPPERI_INTENSET_RXREADY_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* TXDONE @Bit 1 : Write '1' to enable interrupt for event TXDONE */
  #define CTRLAPPERI_INTENSET_TXDONE_Pos (1UL)       /*!< Position of TXDONE field.                                            */
  #define CTRLAPPERI_INTENSET_TXDONE_Msk (0x1UL << CTRLAPPERI_INTENSET_TXDONE_Pos) /*!< Bit mask of TXDONE field.              */
  #define CTRLAPPERI_INTENSET_TXDONE_Min (0x0UL)     /*!< Min enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTENSET_TXDONE_Max (0x1UL)     /*!< Max enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTENSET_TXDONE_Set (0x1UL)     /*!< Enable                                                               */
  #define CTRLAPPERI_INTENSET_TXDONE_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define CTRLAPPERI_INTENSET_TXDONE_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* CTRLAPPERI_INTENCLR: Disable interrupt */
  #define CTRLAPPERI_INTENCLR_ResetValue (0x00000000UL) /*!< Reset value of INTENCLR register.                                 */

/* RXREADY @Bit 0 : Write '1' to disable interrupt for event RXREADY */
  #define CTRLAPPERI_INTENCLR_RXREADY_Pos (0UL)      /*!< Position of RXREADY field.                                           */
  #define CTRLAPPERI_INTENCLR_RXREADY_Msk (0x1UL << CTRLAPPERI_INTENCLR_RXREADY_Pos) /*!< Bit mask of RXREADY field.           */
  #define CTRLAPPERI_INTENCLR_RXREADY_Min (0x0UL)    /*!< Min enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTENCLR_RXREADY_Max (0x1UL)    /*!< Max enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTENCLR_RXREADY_Clear (0x1UL)  /*!< Disable                                                              */
  #define CTRLAPPERI_INTENCLR_RXREADY_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define CTRLAPPERI_INTENCLR_RXREADY_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* TXDONE @Bit 1 : Write '1' to disable interrupt for event TXDONE */
  #define CTRLAPPERI_INTENCLR_TXDONE_Pos (1UL)       /*!< Position of TXDONE field.                                            */
  #define CTRLAPPERI_INTENCLR_TXDONE_Msk (0x1UL << CTRLAPPERI_INTENCLR_TXDONE_Pos) /*!< Bit mask of TXDONE field.              */
  #define CTRLAPPERI_INTENCLR_TXDONE_Min (0x0UL)     /*!< Min enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTENCLR_TXDONE_Max (0x1UL)     /*!< Max enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTENCLR_TXDONE_Clear (0x1UL)   /*!< Disable                                                              */
  #define CTRLAPPERI_INTENCLR_TXDONE_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define CTRLAPPERI_INTENCLR_TXDONE_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* CTRLAPPERI_INTPEND: Pending interrupts */
  #define CTRLAPPERI_INTPEND_ResetValue (0x00000000UL) /*!< Reset value of INTPEND register.                                   */

/* RXREADY @Bit 0 : Read pending status of interrupt for event RXREADY */
  #define CTRLAPPERI_INTPEND_RXREADY_Pos (0UL)       /*!< Position of RXREADY field.                                           */
  #define CTRLAPPERI_INTPEND_RXREADY_Msk (0x1UL << CTRLAPPERI_INTPEND_RXREADY_Pos) /*!< Bit mask of RXREADY field.             */
  #define CTRLAPPERI_INTPEND_RXREADY_Min (0x0UL)     /*!< Min enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTPEND_RXREADY_Max (0x1UL)     /*!< Max enumerator value of RXREADY field.                               */
  #define CTRLAPPERI_INTPEND_RXREADY_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define CTRLAPPERI_INTPEND_RXREADY_Pending (0x1UL) /*!< Read: Pending                                                        */

/* TXDONE @Bit 1 : Read pending status of interrupt for event TXDONE */
  #define CTRLAPPERI_INTPEND_TXDONE_Pos (1UL)        /*!< Position of TXDONE field.                                            */
  #define CTRLAPPERI_INTPEND_TXDONE_Msk (0x1UL << CTRLAPPERI_INTPEND_TXDONE_Pos) /*!< Bit mask of TXDONE field.                */
  #define CTRLAPPERI_INTPEND_TXDONE_Min (0x0UL)      /*!< Min enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTPEND_TXDONE_Max (0x1UL)      /*!< Max enumerator value of TXDONE field.                                */
  #define CTRLAPPERI_INTPEND_TXDONE_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define CTRLAPPERI_INTPEND_TXDONE_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* CTRLAPPERI_RESET: System reset request. */
  #define CTRLAPPERI_RESET_ResetValue (0x00000000UL) /*!< Reset value of RESET register.                                       */

/* RESET @Bits 0..2 : Reset request */
  #define CTRLAPPERI_RESET_RESET_Pos (0UL)           /*!< Position of RESET field.                                             */
  #define CTRLAPPERI_RESET_RESET_Msk (0x7UL << CTRLAPPERI_RESET_RESET_Pos) /*!< Bit mask of RESET field.                       */
  #define CTRLAPPERI_RESET_RESET_Min (0x0UL)         /*!< Min enumerator value of RESET field.                                 */
  #define CTRLAPPERI_RESET_RESET_Max (0x4UL)         /*!< Max enumerator value of RESET field.                                 */
  #define CTRLAPPERI_RESET_RESET_NoReset (0x0UL)     /*!< No reset is generated                                                */
  #define CTRLAPPERI_RESET_RESET_SoftReset (0x1UL)   /*!< Perform a device soft reset                                          */
  #define CTRLAPPERI_RESET_RESET_HardReset (0x2UL)   /*!< Perform a device hard reset                                          */
  #define CTRLAPPERI_RESET_RESET_PinReset (0x4UL)    /*!< Perform a device pin reset                                           */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           DPPIC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct DPPIC_TASKS_CHG ================================================== */
/**
  * @brief TASKS_CHG [DPPIC_TASKS_CHG] Channel group tasks
  */
typedef struct {
  __OM  uint32_t  EN;                                /*!< (@ 0x00000000) Enable channel group n                                */
  __OM  uint32_t  DIS;                               /*!< (@ 0x00000004) Disable channel group n                               */
} NRF_DPPIC_TASKS_CHG_Type;                          /*!< Size = 8 (0x008)                                                     */
  #define DPPIC_TASKS_CHG_MaxCount (6UL)             /*!< Size of TASKS_CHG[6] array.                                          */
  #define DPPIC_TASKS_CHG_MaxIndex (5UL)             /*!< Max index of TASKS_CHG[6] array.                                     */
  #define DPPIC_TASKS_CHG_MinIndex (0UL)             /*!< Min index of TASKS_CHG[6] array.                                     */

/* DPPIC_TASKS_CHG_EN: Enable channel group n */
  #define DPPIC_TASKS_CHG_EN_ResetValue (0x00000000UL) /*!< Reset value of EN register.                                        */

/* EN @Bit 0 : Enable channel group n */
  #define DPPIC_TASKS_CHG_EN_EN_Pos (0UL)            /*!< Position of EN field.                                                */
  #define DPPIC_TASKS_CHG_EN_EN_Msk (0x1UL << DPPIC_TASKS_CHG_EN_EN_Pos) /*!< Bit mask of EN field.                            */
  #define DPPIC_TASKS_CHG_EN_EN_Min (0x1UL)          /*!< Min enumerator value of EN field.                                    */
  #define DPPIC_TASKS_CHG_EN_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define DPPIC_TASKS_CHG_EN_EN_Trigger (0x1UL)      /*!< Trigger task                                                         */


/* DPPIC_TASKS_CHG_DIS: Disable channel group n */
  #define DPPIC_TASKS_CHG_DIS_ResetValue (0x00000000UL) /*!< Reset value of DIS register.                                      */

/* DIS @Bit 0 : Disable channel group n */
  #define DPPIC_TASKS_CHG_DIS_DIS_Pos (0UL)          /*!< Position of DIS field.                                               */
  #define DPPIC_TASKS_CHG_DIS_DIS_Msk (0x1UL << DPPIC_TASKS_CHG_DIS_DIS_Pos) /*!< Bit mask of DIS field.                       */
  #define DPPIC_TASKS_CHG_DIS_DIS_Min (0x1UL)        /*!< Min enumerator value of DIS field.                                   */
  #define DPPIC_TASKS_CHG_DIS_DIS_Max (0x1UL)        /*!< Max enumerator value of DIS field.                                   */
  #define DPPIC_TASKS_CHG_DIS_DIS_Trigger (0x1UL)    /*!< Trigger task                                                         */



/* =============================================== Struct DPPIC_SUBSCRIBE_CHG ================================================ */
/**
  * @brief SUBSCRIBE_CHG [DPPIC_SUBSCRIBE_CHG] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  EN;                                /*!< (@ 0x00000000) Subscribe configuration for task CHG[n].EN            */
  __IOM uint32_t  DIS;                               /*!< (@ 0x00000004) Subscribe configuration for task CHG[n].DIS           */
} NRF_DPPIC_SUBSCRIBE_CHG_Type;                      /*!< Size = 8 (0x008)                                                     */
  #define DPPIC_SUBSCRIBE_CHG_MaxCount (6UL)         /*!< Size of SUBSCRIBE_CHG[6] array.                                      */
  #define DPPIC_SUBSCRIBE_CHG_MaxIndex (5UL)         /*!< Max index of SUBSCRIBE_CHG[6] array.                                 */
  #define DPPIC_SUBSCRIBE_CHG_MinIndex (0UL)         /*!< Min index of SUBSCRIBE_CHG[6] array.                                 */

/* DPPIC_SUBSCRIBE_CHG_EN: Subscribe configuration for task CHG[n].EN */
  #define DPPIC_SUBSCRIBE_CHG_EN_ResetValue (0x00000000UL) /*!< Reset value of EN register.                                    */

/* CHIDX @Bits 0..7 : DPPI channel that task CHG[n].EN will subscribe to */
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_EN_EN_Pos) /*!< Bit mask of EN field.                    */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define DPPIC_SUBSCRIBE_CHG_EN_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* DPPIC_SUBSCRIBE_CHG_DIS: Subscribe configuration for task CHG[n].DIS */
  #define DPPIC_SUBSCRIBE_CHG_DIS_ResetValue (0x00000000UL) /*!< Reset value of DIS register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that task CHG[n].DIS will subscribe to */
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos) /*!< Bit mask of EN field.                  */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define DPPIC_SUBSCRIBE_CHG_DIS_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* ====================================================== Struct DPPIC ======================================================= */
/**
  * @brief Distributed programmable peripheral interconnect controller
  */
  typedef struct {                                   /*!< DPPIC Structure                                                      */
    __OM NRF_DPPIC_TASKS_CHG_Type TASKS_CHG[6];      /*!< (@ 0x00000000) Channel group tasks                                   */
    __IM uint32_t RESERVED[20];
    __IOM NRF_DPPIC_SUBSCRIBE_CHG_Type SUBSCRIBE_CHG[6]; /*!< (@ 0x00000080) Subscribe configuration for tasks                 */
    __IM uint32_t RESERVED1[276];
    __IOM uint32_t CHEN;                             /*!< (@ 0x00000500) Channel enable register                               */
    __IOM uint32_t CHENSET;                          /*!< (@ 0x00000504) Channel enable set register                           */
    __IOM uint32_t CHENCLR;                          /*!< (@ 0x00000508) Channel enable clear register                         */
    __IM uint32_t RESERVED2[189];
    __IOM uint32_t CHG[6];                           /*!< (@ 0x00000800) Channel group n Note: Writes to this register are
                                                                         ignored if either SUBSCRIBE_CHG[n].EN or
                                                                         SUBSCRIBE_CHG[n].DIS is enabled*/
  } NRF_DPPIC_Type;                                  /*!< Size = 2072 (0x818)                                                  */

/* DPPIC_CHEN: Channel enable register */
  #define DPPIC_CHEN_ResetValue (0x00000000UL)       /*!< Reset value of CHEN register.                                        */

/* CH0 @Bit 0 : Enable or disable channel 0 */
  #define DPPIC_CHEN_CH0_Pos (0UL)                   /*!< Position of CH0 field.                                               */
  #define DPPIC_CHEN_CH0_Msk (0x1UL << DPPIC_CHEN_CH0_Pos) /*!< Bit mask of CH0 field.                                         */
  #define DPPIC_CHEN_CH0_Min (0x0UL)                 /*!< Min enumerator value of CH0 field.                                   */
  #define DPPIC_CHEN_CH0_Max (0x1UL)                 /*!< Max enumerator value of CH0 field.                                   */
  #define DPPIC_CHEN_CH0_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH0_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH1 @Bit 1 : Enable or disable channel 1 */
  #define DPPIC_CHEN_CH1_Pos (1UL)                   /*!< Position of CH1 field.                                               */
  #define DPPIC_CHEN_CH1_Msk (0x1UL << DPPIC_CHEN_CH1_Pos) /*!< Bit mask of CH1 field.                                         */
  #define DPPIC_CHEN_CH1_Min (0x0UL)                 /*!< Min enumerator value of CH1 field.                                   */
  #define DPPIC_CHEN_CH1_Max (0x1UL)                 /*!< Max enumerator value of CH1 field.                                   */
  #define DPPIC_CHEN_CH1_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH1_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH2 @Bit 2 : Enable or disable channel 2 */
  #define DPPIC_CHEN_CH2_Pos (2UL)                   /*!< Position of CH2 field.                                               */
  #define DPPIC_CHEN_CH2_Msk (0x1UL << DPPIC_CHEN_CH2_Pos) /*!< Bit mask of CH2 field.                                         */
  #define DPPIC_CHEN_CH2_Min (0x0UL)                 /*!< Min enumerator value of CH2 field.                                   */
  #define DPPIC_CHEN_CH2_Max (0x1UL)                 /*!< Max enumerator value of CH2 field.                                   */
  #define DPPIC_CHEN_CH2_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH2_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH3 @Bit 3 : Enable or disable channel 3 */
  #define DPPIC_CHEN_CH3_Pos (3UL)                   /*!< Position of CH3 field.                                               */
  #define DPPIC_CHEN_CH3_Msk (0x1UL << DPPIC_CHEN_CH3_Pos) /*!< Bit mask of CH3 field.                                         */
  #define DPPIC_CHEN_CH3_Min (0x0UL)                 /*!< Min enumerator value of CH3 field.                                   */
  #define DPPIC_CHEN_CH3_Max (0x1UL)                 /*!< Max enumerator value of CH3 field.                                   */
  #define DPPIC_CHEN_CH3_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH3_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH4 @Bit 4 : Enable or disable channel 4 */
  #define DPPIC_CHEN_CH4_Pos (4UL)                   /*!< Position of CH4 field.                                               */
  #define DPPIC_CHEN_CH4_Msk (0x1UL << DPPIC_CHEN_CH4_Pos) /*!< Bit mask of CH4 field.                                         */
  #define DPPIC_CHEN_CH4_Min (0x0UL)                 /*!< Min enumerator value of CH4 field.                                   */
  #define DPPIC_CHEN_CH4_Max (0x1UL)                 /*!< Max enumerator value of CH4 field.                                   */
  #define DPPIC_CHEN_CH4_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH4_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH5 @Bit 5 : Enable or disable channel 5 */
  #define DPPIC_CHEN_CH5_Pos (5UL)                   /*!< Position of CH5 field.                                               */
  #define DPPIC_CHEN_CH5_Msk (0x1UL << DPPIC_CHEN_CH5_Pos) /*!< Bit mask of CH5 field.                                         */
  #define DPPIC_CHEN_CH5_Min (0x0UL)                 /*!< Min enumerator value of CH5 field.                                   */
  #define DPPIC_CHEN_CH5_Max (0x1UL)                 /*!< Max enumerator value of CH5 field.                                   */
  #define DPPIC_CHEN_CH5_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH5_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH6 @Bit 6 : Enable or disable channel 6 */
  #define DPPIC_CHEN_CH6_Pos (6UL)                   /*!< Position of CH6 field.                                               */
  #define DPPIC_CHEN_CH6_Msk (0x1UL << DPPIC_CHEN_CH6_Pos) /*!< Bit mask of CH6 field.                                         */
  #define DPPIC_CHEN_CH6_Min (0x0UL)                 /*!< Min enumerator value of CH6 field.                                   */
  #define DPPIC_CHEN_CH6_Max (0x1UL)                 /*!< Max enumerator value of CH6 field.                                   */
  #define DPPIC_CHEN_CH6_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH6_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH7 @Bit 7 : Enable or disable channel 7 */
  #define DPPIC_CHEN_CH7_Pos (7UL)                   /*!< Position of CH7 field.                                               */
  #define DPPIC_CHEN_CH7_Msk (0x1UL << DPPIC_CHEN_CH7_Pos) /*!< Bit mask of CH7 field.                                         */
  #define DPPIC_CHEN_CH7_Min (0x0UL)                 /*!< Min enumerator value of CH7 field.                                   */
  #define DPPIC_CHEN_CH7_Max (0x1UL)                 /*!< Max enumerator value of CH7 field.                                   */
  #define DPPIC_CHEN_CH7_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH7_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH8 @Bit 8 : Enable or disable channel 8 */
  #define DPPIC_CHEN_CH8_Pos (8UL)                   /*!< Position of CH8 field.                                               */
  #define DPPIC_CHEN_CH8_Msk (0x1UL << DPPIC_CHEN_CH8_Pos) /*!< Bit mask of CH8 field.                                         */
  #define DPPIC_CHEN_CH8_Min (0x0UL)                 /*!< Min enumerator value of CH8 field.                                   */
  #define DPPIC_CHEN_CH8_Max (0x1UL)                 /*!< Max enumerator value of CH8 field.                                   */
  #define DPPIC_CHEN_CH8_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH8_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH9 @Bit 9 : Enable or disable channel 9 */
  #define DPPIC_CHEN_CH9_Pos (9UL)                   /*!< Position of CH9 field.                                               */
  #define DPPIC_CHEN_CH9_Msk (0x1UL << DPPIC_CHEN_CH9_Pos) /*!< Bit mask of CH9 field.                                         */
  #define DPPIC_CHEN_CH9_Min (0x0UL)                 /*!< Min enumerator value of CH9 field.                                   */
  #define DPPIC_CHEN_CH9_Max (0x1UL)                 /*!< Max enumerator value of CH9 field.                                   */
  #define DPPIC_CHEN_CH9_Disabled (0x0UL)            /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH9_Enabled (0x1UL)             /*!< Enable channel                                                       */

/* CH10 @Bit 10 : Enable or disable channel 10 */
  #define DPPIC_CHEN_CH10_Pos (10UL)                 /*!< Position of CH10 field.                                              */
  #define DPPIC_CHEN_CH10_Msk (0x1UL << DPPIC_CHEN_CH10_Pos) /*!< Bit mask of CH10 field.                                      */
  #define DPPIC_CHEN_CH10_Min (0x0UL)                /*!< Min enumerator value of CH10 field.                                  */
  #define DPPIC_CHEN_CH10_Max (0x1UL)                /*!< Max enumerator value of CH10 field.                                  */
  #define DPPIC_CHEN_CH10_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH10_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH11 @Bit 11 : Enable or disable channel 11 */
  #define DPPIC_CHEN_CH11_Pos (11UL)                 /*!< Position of CH11 field.                                              */
  #define DPPIC_CHEN_CH11_Msk (0x1UL << DPPIC_CHEN_CH11_Pos) /*!< Bit mask of CH11 field.                                      */
  #define DPPIC_CHEN_CH11_Min (0x0UL)                /*!< Min enumerator value of CH11 field.                                  */
  #define DPPIC_CHEN_CH11_Max (0x1UL)                /*!< Max enumerator value of CH11 field.                                  */
  #define DPPIC_CHEN_CH11_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH11_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH12 @Bit 12 : Enable or disable channel 12 */
  #define DPPIC_CHEN_CH12_Pos (12UL)                 /*!< Position of CH12 field.                                              */
  #define DPPIC_CHEN_CH12_Msk (0x1UL << DPPIC_CHEN_CH12_Pos) /*!< Bit mask of CH12 field.                                      */
  #define DPPIC_CHEN_CH12_Min (0x0UL)                /*!< Min enumerator value of CH12 field.                                  */
  #define DPPIC_CHEN_CH12_Max (0x1UL)                /*!< Max enumerator value of CH12 field.                                  */
  #define DPPIC_CHEN_CH12_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH12_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH13 @Bit 13 : Enable or disable channel 13 */
  #define DPPIC_CHEN_CH13_Pos (13UL)                 /*!< Position of CH13 field.                                              */
  #define DPPIC_CHEN_CH13_Msk (0x1UL << DPPIC_CHEN_CH13_Pos) /*!< Bit mask of CH13 field.                                      */
  #define DPPIC_CHEN_CH13_Min (0x0UL)                /*!< Min enumerator value of CH13 field.                                  */
  #define DPPIC_CHEN_CH13_Max (0x1UL)                /*!< Max enumerator value of CH13 field.                                  */
  #define DPPIC_CHEN_CH13_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH13_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH14 @Bit 14 : Enable or disable channel 14 */
  #define DPPIC_CHEN_CH14_Pos (14UL)                 /*!< Position of CH14 field.                                              */
  #define DPPIC_CHEN_CH14_Msk (0x1UL << DPPIC_CHEN_CH14_Pos) /*!< Bit mask of CH14 field.                                      */
  #define DPPIC_CHEN_CH14_Min (0x0UL)                /*!< Min enumerator value of CH14 field.                                  */
  #define DPPIC_CHEN_CH14_Max (0x1UL)                /*!< Max enumerator value of CH14 field.                                  */
  #define DPPIC_CHEN_CH14_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH14_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH15 @Bit 15 : Enable or disable channel 15 */
  #define DPPIC_CHEN_CH15_Pos (15UL)                 /*!< Position of CH15 field.                                              */
  #define DPPIC_CHEN_CH15_Msk (0x1UL << DPPIC_CHEN_CH15_Pos) /*!< Bit mask of CH15 field.                                      */
  #define DPPIC_CHEN_CH15_Min (0x0UL)                /*!< Min enumerator value of CH15 field.                                  */
  #define DPPIC_CHEN_CH15_Max (0x1UL)                /*!< Max enumerator value of CH15 field.                                  */
  #define DPPIC_CHEN_CH15_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH15_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH16 @Bit 16 : Enable or disable channel 16 */
  #define DPPIC_CHEN_CH16_Pos (16UL)                 /*!< Position of CH16 field.                                              */
  #define DPPIC_CHEN_CH16_Msk (0x1UL << DPPIC_CHEN_CH16_Pos) /*!< Bit mask of CH16 field.                                      */
  #define DPPIC_CHEN_CH16_Min (0x0UL)                /*!< Min enumerator value of CH16 field.                                  */
  #define DPPIC_CHEN_CH16_Max (0x1UL)                /*!< Max enumerator value of CH16 field.                                  */
  #define DPPIC_CHEN_CH16_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH16_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH17 @Bit 17 : Enable or disable channel 17 */
  #define DPPIC_CHEN_CH17_Pos (17UL)                 /*!< Position of CH17 field.                                              */
  #define DPPIC_CHEN_CH17_Msk (0x1UL << DPPIC_CHEN_CH17_Pos) /*!< Bit mask of CH17 field.                                      */
  #define DPPIC_CHEN_CH17_Min (0x0UL)                /*!< Min enumerator value of CH17 field.                                  */
  #define DPPIC_CHEN_CH17_Max (0x1UL)                /*!< Max enumerator value of CH17 field.                                  */
  #define DPPIC_CHEN_CH17_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH17_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH18 @Bit 18 : Enable or disable channel 18 */
  #define DPPIC_CHEN_CH18_Pos (18UL)                 /*!< Position of CH18 field.                                              */
  #define DPPIC_CHEN_CH18_Msk (0x1UL << DPPIC_CHEN_CH18_Pos) /*!< Bit mask of CH18 field.                                      */
  #define DPPIC_CHEN_CH18_Min (0x0UL)                /*!< Min enumerator value of CH18 field.                                  */
  #define DPPIC_CHEN_CH18_Max (0x1UL)                /*!< Max enumerator value of CH18 field.                                  */
  #define DPPIC_CHEN_CH18_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH18_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH19 @Bit 19 : Enable or disable channel 19 */
  #define DPPIC_CHEN_CH19_Pos (19UL)                 /*!< Position of CH19 field.                                              */
  #define DPPIC_CHEN_CH19_Msk (0x1UL << DPPIC_CHEN_CH19_Pos) /*!< Bit mask of CH19 field.                                      */
  #define DPPIC_CHEN_CH19_Min (0x0UL)                /*!< Min enumerator value of CH19 field.                                  */
  #define DPPIC_CHEN_CH19_Max (0x1UL)                /*!< Max enumerator value of CH19 field.                                  */
  #define DPPIC_CHEN_CH19_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH19_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH20 @Bit 20 : Enable or disable channel 20 */
  #define DPPIC_CHEN_CH20_Pos (20UL)                 /*!< Position of CH20 field.                                              */
  #define DPPIC_CHEN_CH20_Msk (0x1UL << DPPIC_CHEN_CH20_Pos) /*!< Bit mask of CH20 field.                                      */
  #define DPPIC_CHEN_CH20_Min (0x0UL)                /*!< Min enumerator value of CH20 field.                                  */
  #define DPPIC_CHEN_CH20_Max (0x1UL)                /*!< Max enumerator value of CH20 field.                                  */
  #define DPPIC_CHEN_CH20_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH20_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH21 @Bit 21 : Enable or disable channel 21 */
  #define DPPIC_CHEN_CH21_Pos (21UL)                 /*!< Position of CH21 field.                                              */
  #define DPPIC_CHEN_CH21_Msk (0x1UL << DPPIC_CHEN_CH21_Pos) /*!< Bit mask of CH21 field.                                      */
  #define DPPIC_CHEN_CH21_Min (0x0UL)                /*!< Min enumerator value of CH21 field.                                  */
  #define DPPIC_CHEN_CH21_Max (0x1UL)                /*!< Max enumerator value of CH21 field.                                  */
  #define DPPIC_CHEN_CH21_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH21_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH22 @Bit 22 : Enable or disable channel 22 */
  #define DPPIC_CHEN_CH22_Pos (22UL)                 /*!< Position of CH22 field.                                              */
  #define DPPIC_CHEN_CH22_Msk (0x1UL << DPPIC_CHEN_CH22_Pos) /*!< Bit mask of CH22 field.                                      */
  #define DPPIC_CHEN_CH22_Min (0x0UL)                /*!< Min enumerator value of CH22 field.                                  */
  #define DPPIC_CHEN_CH22_Max (0x1UL)                /*!< Max enumerator value of CH22 field.                                  */
  #define DPPIC_CHEN_CH22_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH22_Enabled (0x1UL)            /*!< Enable channel                                                       */

/* CH23 @Bit 23 : Enable or disable channel 23 */
  #define DPPIC_CHEN_CH23_Pos (23UL)                 /*!< Position of CH23 field.                                              */
  #define DPPIC_CHEN_CH23_Msk (0x1UL << DPPIC_CHEN_CH23_Pos) /*!< Bit mask of CH23 field.                                      */
  #define DPPIC_CHEN_CH23_Min (0x0UL)                /*!< Min enumerator value of CH23 field.                                  */
  #define DPPIC_CHEN_CH23_Max (0x1UL)                /*!< Max enumerator value of CH23 field.                                  */
  #define DPPIC_CHEN_CH23_Disabled (0x0UL)           /*!< Disable channel                                                      */
  #define DPPIC_CHEN_CH23_Enabled (0x1UL)            /*!< Enable channel                                                       */


/* DPPIC_CHENSET: Channel enable set register */
  #define DPPIC_CHENSET_ResetValue (0x00000000UL)    /*!< Reset value of CHENSET register.                                     */

/* CH0 @Bit 0 : Channel 0 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH0_Pos (0UL)                /*!< Position of CH0 field.                                               */
  #define DPPIC_CHENSET_CH0_Msk (0x1UL << DPPIC_CHENSET_CH0_Pos) /*!< Bit mask of CH0 field.                                   */
  #define DPPIC_CHENSET_CH0_Min (0x0UL)              /*!< Min enumerator value of CH0 field.                                   */
  #define DPPIC_CHENSET_CH0_Max (0x1UL)              /*!< Max enumerator value of CH0 field.                                   */
  #define DPPIC_CHENSET_CH0_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH0_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH0_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH1 @Bit 1 : Channel 1 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH1_Pos (1UL)                /*!< Position of CH1 field.                                               */
  #define DPPIC_CHENSET_CH1_Msk (0x1UL << DPPIC_CHENSET_CH1_Pos) /*!< Bit mask of CH1 field.                                   */
  #define DPPIC_CHENSET_CH1_Min (0x0UL)              /*!< Min enumerator value of CH1 field.                                   */
  #define DPPIC_CHENSET_CH1_Max (0x1UL)              /*!< Max enumerator value of CH1 field.                                   */
  #define DPPIC_CHENSET_CH1_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH1_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH1_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH2 @Bit 2 : Channel 2 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH2_Pos (2UL)                /*!< Position of CH2 field.                                               */
  #define DPPIC_CHENSET_CH2_Msk (0x1UL << DPPIC_CHENSET_CH2_Pos) /*!< Bit mask of CH2 field.                                   */
  #define DPPIC_CHENSET_CH2_Min (0x0UL)              /*!< Min enumerator value of CH2 field.                                   */
  #define DPPIC_CHENSET_CH2_Max (0x1UL)              /*!< Max enumerator value of CH2 field.                                   */
  #define DPPIC_CHENSET_CH2_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH2_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH2_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH3 @Bit 3 : Channel 3 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH3_Pos (3UL)                /*!< Position of CH3 field.                                               */
  #define DPPIC_CHENSET_CH3_Msk (0x1UL << DPPIC_CHENSET_CH3_Pos) /*!< Bit mask of CH3 field.                                   */
  #define DPPIC_CHENSET_CH3_Min (0x0UL)              /*!< Min enumerator value of CH3 field.                                   */
  #define DPPIC_CHENSET_CH3_Max (0x1UL)              /*!< Max enumerator value of CH3 field.                                   */
  #define DPPIC_CHENSET_CH3_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH3_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH3_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH4 @Bit 4 : Channel 4 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH4_Pos (4UL)                /*!< Position of CH4 field.                                               */
  #define DPPIC_CHENSET_CH4_Msk (0x1UL << DPPIC_CHENSET_CH4_Pos) /*!< Bit mask of CH4 field.                                   */
  #define DPPIC_CHENSET_CH4_Min (0x0UL)              /*!< Min enumerator value of CH4 field.                                   */
  #define DPPIC_CHENSET_CH4_Max (0x1UL)              /*!< Max enumerator value of CH4 field.                                   */
  #define DPPIC_CHENSET_CH4_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH4_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH4_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH5 @Bit 5 : Channel 5 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH5_Pos (5UL)                /*!< Position of CH5 field.                                               */
  #define DPPIC_CHENSET_CH5_Msk (0x1UL << DPPIC_CHENSET_CH5_Pos) /*!< Bit mask of CH5 field.                                   */
  #define DPPIC_CHENSET_CH5_Min (0x0UL)              /*!< Min enumerator value of CH5 field.                                   */
  #define DPPIC_CHENSET_CH5_Max (0x1UL)              /*!< Max enumerator value of CH5 field.                                   */
  #define DPPIC_CHENSET_CH5_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH5_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH5_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH6 @Bit 6 : Channel 6 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH6_Pos (6UL)                /*!< Position of CH6 field.                                               */
  #define DPPIC_CHENSET_CH6_Msk (0x1UL << DPPIC_CHENSET_CH6_Pos) /*!< Bit mask of CH6 field.                                   */
  #define DPPIC_CHENSET_CH6_Min (0x0UL)              /*!< Min enumerator value of CH6 field.                                   */
  #define DPPIC_CHENSET_CH6_Max (0x1UL)              /*!< Max enumerator value of CH6 field.                                   */
  #define DPPIC_CHENSET_CH6_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH6_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH6_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH7 @Bit 7 : Channel 7 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH7_Pos (7UL)                /*!< Position of CH7 field.                                               */
  #define DPPIC_CHENSET_CH7_Msk (0x1UL << DPPIC_CHENSET_CH7_Pos) /*!< Bit mask of CH7 field.                                   */
  #define DPPIC_CHENSET_CH7_Min (0x0UL)              /*!< Min enumerator value of CH7 field.                                   */
  #define DPPIC_CHENSET_CH7_Max (0x1UL)              /*!< Max enumerator value of CH7 field.                                   */
  #define DPPIC_CHENSET_CH7_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH7_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH7_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH8 @Bit 8 : Channel 8 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH8_Pos (8UL)                /*!< Position of CH8 field.                                               */
  #define DPPIC_CHENSET_CH8_Msk (0x1UL << DPPIC_CHENSET_CH8_Pos) /*!< Bit mask of CH8 field.                                   */
  #define DPPIC_CHENSET_CH8_Min (0x0UL)              /*!< Min enumerator value of CH8 field.                                   */
  #define DPPIC_CHENSET_CH8_Max (0x1UL)              /*!< Max enumerator value of CH8 field.                                   */
  #define DPPIC_CHENSET_CH8_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH8_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH8_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH9 @Bit 9 : Channel 9 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH9_Pos (9UL)                /*!< Position of CH9 field.                                               */
  #define DPPIC_CHENSET_CH9_Msk (0x1UL << DPPIC_CHENSET_CH9_Pos) /*!< Bit mask of CH9 field.                                   */
  #define DPPIC_CHENSET_CH9_Min (0x0UL)              /*!< Min enumerator value of CH9 field.                                   */
  #define DPPIC_CHENSET_CH9_Max (0x1UL)              /*!< Max enumerator value of CH9 field.                                   */
  #define DPPIC_CHENSET_CH9_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH9_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH9_Set (0x1UL)              /*!< Write: Enable channel                                                */

/* CH10 @Bit 10 : Channel 10 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH10_Pos (10UL)              /*!< Position of CH10 field.                                              */
  #define DPPIC_CHENSET_CH10_Msk (0x1UL << DPPIC_CHENSET_CH10_Pos) /*!< Bit mask of CH10 field.                                */
  #define DPPIC_CHENSET_CH10_Min (0x0UL)             /*!< Min enumerator value of CH10 field.                                  */
  #define DPPIC_CHENSET_CH10_Max (0x1UL)             /*!< Max enumerator value of CH10 field.                                  */
  #define DPPIC_CHENSET_CH10_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH10_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH10_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH11 @Bit 11 : Channel 11 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH11_Pos (11UL)              /*!< Position of CH11 field.                                              */
  #define DPPIC_CHENSET_CH11_Msk (0x1UL << DPPIC_CHENSET_CH11_Pos) /*!< Bit mask of CH11 field.                                */
  #define DPPIC_CHENSET_CH11_Min (0x0UL)             /*!< Min enumerator value of CH11 field.                                  */
  #define DPPIC_CHENSET_CH11_Max (0x1UL)             /*!< Max enumerator value of CH11 field.                                  */
  #define DPPIC_CHENSET_CH11_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH11_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH11_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH12 @Bit 12 : Channel 12 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH12_Pos (12UL)              /*!< Position of CH12 field.                                              */
  #define DPPIC_CHENSET_CH12_Msk (0x1UL << DPPIC_CHENSET_CH12_Pos) /*!< Bit mask of CH12 field.                                */
  #define DPPIC_CHENSET_CH12_Min (0x0UL)             /*!< Min enumerator value of CH12 field.                                  */
  #define DPPIC_CHENSET_CH12_Max (0x1UL)             /*!< Max enumerator value of CH12 field.                                  */
  #define DPPIC_CHENSET_CH12_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH12_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH12_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH13 @Bit 13 : Channel 13 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH13_Pos (13UL)              /*!< Position of CH13 field.                                              */
  #define DPPIC_CHENSET_CH13_Msk (0x1UL << DPPIC_CHENSET_CH13_Pos) /*!< Bit mask of CH13 field.                                */
  #define DPPIC_CHENSET_CH13_Min (0x0UL)             /*!< Min enumerator value of CH13 field.                                  */
  #define DPPIC_CHENSET_CH13_Max (0x1UL)             /*!< Max enumerator value of CH13 field.                                  */
  #define DPPIC_CHENSET_CH13_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH13_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH13_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH14 @Bit 14 : Channel 14 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH14_Pos (14UL)              /*!< Position of CH14 field.                                              */
  #define DPPIC_CHENSET_CH14_Msk (0x1UL << DPPIC_CHENSET_CH14_Pos) /*!< Bit mask of CH14 field.                                */
  #define DPPIC_CHENSET_CH14_Min (0x0UL)             /*!< Min enumerator value of CH14 field.                                  */
  #define DPPIC_CHENSET_CH14_Max (0x1UL)             /*!< Max enumerator value of CH14 field.                                  */
  #define DPPIC_CHENSET_CH14_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH14_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH14_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH15 @Bit 15 : Channel 15 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH15_Pos (15UL)              /*!< Position of CH15 field.                                              */
  #define DPPIC_CHENSET_CH15_Msk (0x1UL << DPPIC_CHENSET_CH15_Pos) /*!< Bit mask of CH15 field.                                */
  #define DPPIC_CHENSET_CH15_Min (0x0UL)             /*!< Min enumerator value of CH15 field.                                  */
  #define DPPIC_CHENSET_CH15_Max (0x1UL)             /*!< Max enumerator value of CH15 field.                                  */
  #define DPPIC_CHENSET_CH15_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH15_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH15_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH16 @Bit 16 : Channel 16 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH16_Pos (16UL)              /*!< Position of CH16 field.                                              */
  #define DPPIC_CHENSET_CH16_Msk (0x1UL << DPPIC_CHENSET_CH16_Pos) /*!< Bit mask of CH16 field.                                */
  #define DPPIC_CHENSET_CH16_Min (0x0UL)             /*!< Min enumerator value of CH16 field.                                  */
  #define DPPIC_CHENSET_CH16_Max (0x1UL)             /*!< Max enumerator value of CH16 field.                                  */
  #define DPPIC_CHENSET_CH16_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH16_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH16_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH17 @Bit 17 : Channel 17 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH17_Pos (17UL)              /*!< Position of CH17 field.                                              */
  #define DPPIC_CHENSET_CH17_Msk (0x1UL << DPPIC_CHENSET_CH17_Pos) /*!< Bit mask of CH17 field.                                */
  #define DPPIC_CHENSET_CH17_Min (0x0UL)             /*!< Min enumerator value of CH17 field.                                  */
  #define DPPIC_CHENSET_CH17_Max (0x1UL)             /*!< Max enumerator value of CH17 field.                                  */
  #define DPPIC_CHENSET_CH17_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH17_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH17_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH18 @Bit 18 : Channel 18 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH18_Pos (18UL)              /*!< Position of CH18 field.                                              */
  #define DPPIC_CHENSET_CH18_Msk (0x1UL << DPPIC_CHENSET_CH18_Pos) /*!< Bit mask of CH18 field.                                */
  #define DPPIC_CHENSET_CH18_Min (0x0UL)             /*!< Min enumerator value of CH18 field.                                  */
  #define DPPIC_CHENSET_CH18_Max (0x1UL)             /*!< Max enumerator value of CH18 field.                                  */
  #define DPPIC_CHENSET_CH18_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH18_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH18_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH19 @Bit 19 : Channel 19 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH19_Pos (19UL)              /*!< Position of CH19 field.                                              */
  #define DPPIC_CHENSET_CH19_Msk (0x1UL << DPPIC_CHENSET_CH19_Pos) /*!< Bit mask of CH19 field.                                */
  #define DPPIC_CHENSET_CH19_Min (0x0UL)             /*!< Min enumerator value of CH19 field.                                  */
  #define DPPIC_CHENSET_CH19_Max (0x1UL)             /*!< Max enumerator value of CH19 field.                                  */
  #define DPPIC_CHENSET_CH19_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH19_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH19_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH20 @Bit 20 : Channel 20 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH20_Pos (20UL)              /*!< Position of CH20 field.                                              */
  #define DPPIC_CHENSET_CH20_Msk (0x1UL << DPPIC_CHENSET_CH20_Pos) /*!< Bit mask of CH20 field.                                */
  #define DPPIC_CHENSET_CH20_Min (0x0UL)             /*!< Min enumerator value of CH20 field.                                  */
  #define DPPIC_CHENSET_CH20_Max (0x1UL)             /*!< Max enumerator value of CH20 field.                                  */
  #define DPPIC_CHENSET_CH20_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH20_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH20_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH21 @Bit 21 : Channel 21 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH21_Pos (21UL)              /*!< Position of CH21 field.                                              */
  #define DPPIC_CHENSET_CH21_Msk (0x1UL << DPPIC_CHENSET_CH21_Pos) /*!< Bit mask of CH21 field.                                */
  #define DPPIC_CHENSET_CH21_Min (0x0UL)             /*!< Min enumerator value of CH21 field.                                  */
  #define DPPIC_CHENSET_CH21_Max (0x1UL)             /*!< Max enumerator value of CH21 field.                                  */
  #define DPPIC_CHENSET_CH21_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH21_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH21_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH22 @Bit 22 : Channel 22 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH22_Pos (22UL)              /*!< Position of CH22 field.                                              */
  #define DPPIC_CHENSET_CH22_Msk (0x1UL << DPPIC_CHENSET_CH22_Pos) /*!< Bit mask of CH22 field.                                */
  #define DPPIC_CHENSET_CH22_Min (0x0UL)             /*!< Min enumerator value of CH22 field.                                  */
  #define DPPIC_CHENSET_CH22_Max (0x1UL)             /*!< Max enumerator value of CH22 field.                                  */
  #define DPPIC_CHENSET_CH22_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH22_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH22_Set (0x1UL)             /*!< Write: Enable channel                                                */

/* CH23 @Bit 23 : Channel 23 enable set register. Writing 0 has no effect. */
  #define DPPIC_CHENSET_CH23_Pos (23UL)              /*!< Position of CH23 field.                                              */
  #define DPPIC_CHENSET_CH23_Msk (0x1UL << DPPIC_CHENSET_CH23_Pos) /*!< Bit mask of CH23 field.                                */
  #define DPPIC_CHENSET_CH23_Min (0x0UL)             /*!< Min enumerator value of CH23 field.                                  */
  #define DPPIC_CHENSET_CH23_Max (0x1UL)             /*!< Max enumerator value of CH23 field.                                  */
  #define DPPIC_CHENSET_CH23_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENSET_CH23_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENSET_CH23_Set (0x1UL)             /*!< Write: Enable channel                                                */


/* DPPIC_CHENCLR: Channel enable clear register */
  #define DPPIC_CHENCLR_ResetValue (0x00000000UL)    /*!< Reset value of CHENCLR register.                                     */

/* CH0 @Bit 0 : Channel 0 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH0_Pos (0UL)                /*!< Position of CH0 field.                                               */
  #define DPPIC_CHENCLR_CH0_Msk (0x1UL << DPPIC_CHENCLR_CH0_Pos) /*!< Bit mask of CH0 field.                                   */
  #define DPPIC_CHENCLR_CH0_Min (0x0UL)              /*!< Min enumerator value of CH0 field.                                   */
  #define DPPIC_CHENCLR_CH0_Max (0x1UL)              /*!< Max enumerator value of CH0 field.                                   */
  #define DPPIC_CHENCLR_CH0_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH0_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH0_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH1 @Bit 1 : Channel 1 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH1_Pos (1UL)                /*!< Position of CH1 field.                                               */
  #define DPPIC_CHENCLR_CH1_Msk (0x1UL << DPPIC_CHENCLR_CH1_Pos) /*!< Bit mask of CH1 field.                                   */
  #define DPPIC_CHENCLR_CH1_Min (0x0UL)              /*!< Min enumerator value of CH1 field.                                   */
  #define DPPIC_CHENCLR_CH1_Max (0x1UL)              /*!< Max enumerator value of CH1 field.                                   */
  #define DPPIC_CHENCLR_CH1_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH1_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH1_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH2 @Bit 2 : Channel 2 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH2_Pos (2UL)                /*!< Position of CH2 field.                                               */
  #define DPPIC_CHENCLR_CH2_Msk (0x1UL << DPPIC_CHENCLR_CH2_Pos) /*!< Bit mask of CH2 field.                                   */
  #define DPPIC_CHENCLR_CH2_Min (0x0UL)              /*!< Min enumerator value of CH2 field.                                   */
  #define DPPIC_CHENCLR_CH2_Max (0x1UL)              /*!< Max enumerator value of CH2 field.                                   */
  #define DPPIC_CHENCLR_CH2_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH2_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH2_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH3 @Bit 3 : Channel 3 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH3_Pos (3UL)                /*!< Position of CH3 field.                                               */
  #define DPPIC_CHENCLR_CH3_Msk (0x1UL << DPPIC_CHENCLR_CH3_Pos) /*!< Bit mask of CH3 field.                                   */
  #define DPPIC_CHENCLR_CH3_Min (0x0UL)              /*!< Min enumerator value of CH3 field.                                   */
  #define DPPIC_CHENCLR_CH3_Max (0x1UL)              /*!< Max enumerator value of CH3 field.                                   */
  #define DPPIC_CHENCLR_CH3_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH3_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH3_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH4 @Bit 4 : Channel 4 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH4_Pos (4UL)                /*!< Position of CH4 field.                                               */
  #define DPPIC_CHENCLR_CH4_Msk (0x1UL << DPPIC_CHENCLR_CH4_Pos) /*!< Bit mask of CH4 field.                                   */
  #define DPPIC_CHENCLR_CH4_Min (0x0UL)              /*!< Min enumerator value of CH4 field.                                   */
  #define DPPIC_CHENCLR_CH4_Max (0x1UL)              /*!< Max enumerator value of CH4 field.                                   */
  #define DPPIC_CHENCLR_CH4_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH4_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH4_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH5 @Bit 5 : Channel 5 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH5_Pos (5UL)                /*!< Position of CH5 field.                                               */
  #define DPPIC_CHENCLR_CH5_Msk (0x1UL << DPPIC_CHENCLR_CH5_Pos) /*!< Bit mask of CH5 field.                                   */
  #define DPPIC_CHENCLR_CH5_Min (0x0UL)              /*!< Min enumerator value of CH5 field.                                   */
  #define DPPIC_CHENCLR_CH5_Max (0x1UL)              /*!< Max enumerator value of CH5 field.                                   */
  #define DPPIC_CHENCLR_CH5_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH5_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH5_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH6 @Bit 6 : Channel 6 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH6_Pos (6UL)                /*!< Position of CH6 field.                                               */
  #define DPPIC_CHENCLR_CH6_Msk (0x1UL << DPPIC_CHENCLR_CH6_Pos) /*!< Bit mask of CH6 field.                                   */
  #define DPPIC_CHENCLR_CH6_Min (0x0UL)              /*!< Min enumerator value of CH6 field.                                   */
  #define DPPIC_CHENCLR_CH6_Max (0x1UL)              /*!< Max enumerator value of CH6 field.                                   */
  #define DPPIC_CHENCLR_CH6_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH6_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH6_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH7 @Bit 7 : Channel 7 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH7_Pos (7UL)                /*!< Position of CH7 field.                                               */
  #define DPPIC_CHENCLR_CH7_Msk (0x1UL << DPPIC_CHENCLR_CH7_Pos) /*!< Bit mask of CH7 field.                                   */
  #define DPPIC_CHENCLR_CH7_Min (0x0UL)              /*!< Min enumerator value of CH7 field.                                   */
  #define DPPIC_CHENCLR_CH7_Max (0x1UL)              /*!< Max enumerator value of CH7 field.                                   */
  #define DPPIC_CHENCLR_CH7_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH7_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH7_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH8 @Bit 8 : Channel 8 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH8_Pos (8UL)                /*!< Position of CH8 field.                                               */
  #define DPPIC_CHENCLR_CH8_Msk (0x1UL << DPPIC_CHENCLR_CH8_Pos) /*!< Bit mask of CH8 field.                                   */
  #define DPPIC_CHENCLR_CH8_Min (0x0UL)              /*!< Min enumerator value of CH8 field.                                   */
  #define DPPIC_CHENCLR_CH8_Max (0x1UL)              /*!< Max enumerator value of CH8 field.                                   */
  #define DPPIC_CHENCLR_CH8_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH8_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH8_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH9 @Bit 9 : Channel 9 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH9_Pos (9UL)                /*!< Position of CH9 field.                                               */
  #define DPPIC_CHENCLR_CH9_Msk (0x1UL << DPPIC_CHENCLR_CH9_Pos) /*!< Bit mask of CH9 field.                                   */
  #define DPPIC_CHENCLR_CH9_Min (0x0UL)              /*!< Min enumerator value of CH9 field.                                   */
  #define DPPIC_CHENCLR_CH9_Max (0x1UL)              /*!< Max enumerator value of CH9 field.                                   */
  #define DPPIC_CHENCLR_CH9_Disabled (0x0UL)         /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH9_Enabled (0x1UL)          /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH9_Clear (0x1UL)            /*!< Write: Disable channel                                               */

/* CH10 @Bit 10 : Channel 10 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH10_Pos (10UL)              /*!< Position of CH10 field.                                              */
  #define DPPIC_CHENCLR_CH10_Msk (0x1UL << DPPIC_CHENCLR_CH10_Pos) /*!< Bit mask of CH10 field.                                */
  #define DPPIC_CHENCLR_CH10_Min (0x0UL)             /*!< Min enumerator value of CH10 field.                                  */
  #define DPPIC_CHENCLR_CH10_Max (0x1UL)             /*!< Max enumerator value of CH10 field.                                  */
  #define DPPIC_CHENCLR_CH10_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH10_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH10_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH11 @Bit 11 : Channel 11 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH11_Pos (11UL)              /*!< Position of CH11 field.                                              */
  #define DPPIC_CHENCLR_CH11_Msk (0x1UL << DPPIC_CHENCLR_CH11_Pos) /*!< Bit mask of CH11 field.                                */
  #define DPPIC_CHENCLR_CH11_Min (0x0UL)             /*!< Min enumerator value of CH11 field.                                  */
  #define DPPIC_CHENCLR_CH11_Max (0x1UL)             /*!< Max enumerator value of CH11 field.                                  */
  #define DPPIC_CHENCLR_CH11_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH11_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH11_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH12 @Bit 12 : Channel 12 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH12_Pos (12UL)              /*!< Position of CH12 field.                                              */
  #define DPPIC_CHENCLR_CH12_Msk (0x1UL << DPPIC_CHENCLR_CH12_Pos) /*!< Bit mask of CH12 field.                                */
  #define DPPIC_CHENCLR_CH12_Min (0x0UL)             /*!< Min enumerator value of CH12 field.                                  */
  #define DPPIC_CHENCLR_CH12_Max (0x1UL)             /*!< Max enumerator value of CH12 field.                                  */
  #define DPPIC_CHENCLR_CH12_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH12_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH12_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH13 @Bit 13 : Channel 13 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH13_Pos (13UL)              /*!< Position of CH13 field.                                              */
  #define DPPIC_CHENCLR_CH13_Msk (0x1UL << DPPIC_CHENCLR_CH13_Pos) /*!< Bit mask of CH13 field.                                */
  #define DPPIC_CHENCLR_CH13_Min (0x0UL)             /*!< Min enumerator value of CH13 field.                                  */
  #define DPPIC_CHENCLR_CH13_Max (0x1UL)             /*!< Max enumerator value of CH13 field.                                  */
  #define DPPIC_CHENCLR_CH13_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH13_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH13_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH14 @Bit 14 : Channel 14 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH14_Pos (14UL)              /*!< Position of CH14 field.                                              */
  #define DPPIC_CHENCLR_CH14_Msk (0x1UL << DPPIC_CHENCLR_CH14_Pos) /*!< Bit mask of CH14 field.                                */
  #define DPPIC_CHENCLR_CH14_Min (0x0UL)             /*!< Min enumerator value of CH14 field.                                  */
  #define DPPIC_CHENCLR_CH14_Max (0x1UL)             /*!< Max enumerator value of CH14 field.                                  */
  #define DPPIC_CHENCLR_CH14_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH14_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH14_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH15 @Bit 15 : Channel 15 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH15_Pos (15UL)              /*!< Position of CH15 field.                                              */
  #define DPPIC_CHENCLR_CH15_Msk (0x1UL << DPPIC_CHENCLR_CH15_Pos) /*!< Bit mask of CH15 field.                                */
  #define DPPIC_CHENCLR_CH15_Min (0x0UL)             /*!< Min enumerator value of CH15 field.                                  */
  #define DPPIC_CHENCLR_CH15_Max (0x1UL)             /*!< Max enumerator value of CH15 field.                                  */
  #define DPPIC_CHENCLR_CH15_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH15_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH15_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH16 @Bit 16 : Channel 16 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH16_Pos (16UL)              /*!< Position of CH16 field.                                              */
  #define DPPIC_CHENCLR_CH16_Msk (0x1UL << DPPIC_CHENCLR_CH16_Pos) /*!< Bit mask of CH16 field.                                */
  #define DPPIC_CHENCLR_CH16_Min (0x0UL)             /*!< Min enumerator value of CH16 field.                                  */
  #define DPPIC_CHENCLR_CH16_Max (0x1UL)             /*!< Max enumerator value of CH16 field.                                  */
  #define DPPIC_CHENCLR_CH16_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH16_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH16_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH17 @Bit 17 : Channel 17 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH17_Pos (17UL)              /*!< Position of CH17 field.                                              */
  #define DPPIC_CHENCLR_CH17_Msk (0x1UL << DPPIC_CHENCLR_CH17_Pos) /*!< Bit mask of CH17 field.                                */
  #define DPPIC_CHENCLR_CH17_Min (0x0UL)             /*!< Min enumerator value of CH17 field.                                  */
  #define DPPIC_CHENCLR_CH17_Max (0x1UL)             /*!< Max enumerator value of CH17 field.                                  */
  #define DPPIC_CHENCLR_CH17_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH17_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH17_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH18 @Bit 18 : Channel 18 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH18_Pos (18UL)              /*!< Position of CH18 field.                                              */
  #define DPPIC_CHENCLR_CH18_Msk (0x1UL << DPPIC_CHENCLR_CH18_Pos) /*!< Bit mask of CH18 field.                                */
  #define DPPIC_CHENCLR_CH18_Min (0x0UL)             /*!< Min enumerator value of CH18 field.                                  */
  #define DPPIC_CHENCLR_CH18_Max (0x1UL)             /*!< Max enumerator value of CH18 field.                                  */
  #define DPPIC_CHENCLR_CH18_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH18_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH18_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH19 @Bit 19 : Channel 19 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH19_Pos (19UL)              /*!< Position of CH19 field.                                              */
  #define DPPIC_CHENCLR_CH19_Msk (0x1UL << DPPIC_CHENCLR_CH19_Pos) /*!< Bit mask of CH19 field.                                */
  #define DPPIC_CHENCLR_CH19_Min (0x0UL)             /*!< Min enumerator value of CH19 field.                                  */
  #define DPPIC_CHENCLR_CH19_Max (0x1UL)             /*!< Max enumerator value of CH19 field.                                  */
  #define DPPIC_CHENCLR_CH19_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH19_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH19_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH20 @Bit 20 : Channel 20 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH20_Pos (20UL)              /*!< Position of CH20 field.                                              */
  #define DPPIC_CHENCLR_CH20_Msk (0x1UL << DPPIC_CHENCLR_CH20_Pos) /*!< Bit mask of CH20 field.                                */
  #define DPPIC_CHENCLR_CH20_Min (0x0UL)             /*!< Min enumerator value of CH20 field.                                  */
  #define DPPIC_CHENCLR_CH20_Max (0x1UL)             /*!< Max enumerator value of CH20 field.                                  */
  #define DPPIC_CHENCLR_CH20_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH20_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH20_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH21 @Bit 21 : Channel 21 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH21_Pos (21UL)              /*!< Position of CH21 field.                                              */
  #define DPPIC_CHENCLR_CH21_Msk (0x1UL << DPPIC_CHENCLR_CH21_Pos) /*!< Bit mask of CH21 field.                                */
  #define DPPIC_CHENCLR_CH21_Min (0x0UL)             /*!< Min enumerator value of CH21 field.                                  */
  #define DPPIC_CHENCLR_CH21_Max (0x1UL)             /*!< Max enumerator value of CH21 field.                                  */
  #define DPPIC_CHENCLR_CH21_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH21_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH21_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH22 @Bit 22 : Channel 22 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH22_Pos (22UL)              /*!< Position of CH22 field.                                              */
  #define DPPIC_CHENCLR_CH22_Msk (0x1UL << DPPIC_CHENCLR_CH22_Pos) /*!< Bit mask of CH22 field.                                */
  #define DPPIC_CHENCLR_CH22_Min (0x0UL)             /*!< Min enumerator value of CH22 field.                                  */
  #define DPPIC_CHENCLR_CH22_Max (0x1UL)             /*!< Max enumerator value of CH22 field.                                  */
  #define DPPIC_CHENCLR_CH22_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH22_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH22_Clear (0x1UL)           /*!< Write: Disable channel                                               */

/* CH23 @Bit 23 : Channel 23 enable clear register. Writing 0 has no effect. */
  #define DPPIC_CHENCLR_CH23_Pos (23UL)              /*!< Position of CH23 field.                                              */
  #define DPPIC_CHENCLR_CH23_Msk (0x1UL << DPPIC_CHENCLR_CH23_Pos) /*!< Bit mask of CH23 field.                                */
  #define DPPIC_CHENCLR_CH23_Min (0x0UL)             /*!< Min enumerator value of CH23 field.                                  */
  #define DPPIC_CHENCLR_CH23_Max (0x1UL)             /*!< Max enumerator value of CH23 field.                                  */
  #define DPPIC_CHENCLR_CH23_Disabled (0x0UL)        /*!< Read: Channel disabled                                               */
  #define DPPIC_CHENCLR_CH23_Enabled (0x1UL)         /*!< Read: Channel enabled                                                */
  #define DPPIC_CHENCLR_CH23_Clear (0x1UL)           /*!< Write: Disable channel                                               */


/* DPPIC_CHG: Channel group n Note: Writes to this register are ignored if either SUBSCRIBE_CHG[n].EN or SUBSCRIBE_CHG[n].DIS is
               enabled */

  #define DPPIC_CHG_MaxCount (6UL)                   /*!< Max size of CHG[6] array.                                            */
  #define DPPIC_CHG_MaxIndex (5UL)                   /*!< Max index of CHG[6] array.                                           */
  #define DPPIC_CHG_MinIndex (0UL)                   /*!< Min index of CHG[6] array.                                           */
  #define DPPIC_CHG_ResetValue (0x00000000UL)        /*!< Reset value of CHG[6] register.                                      */

/* CH0 @Bit 0 : Include or exclude channel 0 */
  #define DPPIC_CHG_CH0_Pos (0UL)                    /*!< Position of CH0 field.                                               */
  #define DPPIC_CHG_CH0_Msk (0x1UL << DPPIC_CHG_CH0_Pos) /*!< Bit mask of CH0 field.                                           */
  #define DPPIC_CHG_CH0_Min (0x0UL)                  /*!< Min enumerator value of CH0 field.                                   */
  #define DPPIC_CHG_CH0_Max (0x1UL)                  /*!< Max enumerator value of CH0 field.                                   */
  #define DPPIC_CHG_CH0_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH0_Included (0x1UL)             /*!< Include                                                              */

/* CH1 @Bit 1 : Include or exclude channel 1 */
  #define DPPIC_CHG_CH1_Pos (1UL)                    /*!< Position of CH1 field.                                               */
  #define DPPIC_CHG_CH1_Msk (0x1UL << DPPIC_CHG_CH1_Pos) /*!< Bit mask of CH1 field.                                           */
  #define DPPIC_CHG_CH1_Min (0x0UL)                  /*!< Min enumerator value of CH1 field.                                   */
  #define DPPIC_CHG_CH1_Max (0x1UL)                  /*!< Max enumerator value of CH1 field.                                   */
  #define DPPIC_CHG_CH1_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH1_Included (0x1UL)             /*!< Include                                                              */

/* CH2 @Bit 2 : Include or exclude channel 2 */
  #define DPPIC_CHG_CH2_Pos (2UL)                    /*!< Position of CH2 field.                                               */
  #define DPPIC_CHG_CH2_Msk (0x1UL << DPPIC_CHG_CH2_Pos) /*!< Bit mask of CH2 field.                                           */
  #define DPPIC_CHG_CH2_Min (0x0UL)                  /*!< Min enumerator value of CH2 field.                                   */
  #define DPPIC_CHG_CH2_Max (0x1UL)                  /*!< Max enumerator value of CH2 field.                                   */
  #define DPPIC_CHG_CH2_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH2_Included (0x1UL)             /*!< Include                                                              */

/* CH3 @Bit 3 : Include or exclude channel 3 */
  #define DPPIC_CHG_CH3_Pos (3UL)                    /*!< Position of CH3 field.                                               */
  #define DPPIC_CHG_CH3_Msk (0x1UL << DPPIC_CHG_CH3_Pos) /*!< Bit mask of CH3 field.                                           */
  #define DPPIC_CHG_CH3_Min (0x0UL)                  /*!< Min enumerator value of CH3 field.                                   */
  #define DPPIC_CHG_CH3_Max (0x1UL)                  /*!< Max enumerator value of CH3 field.                                   */
  #define DPPIC_CHG_CH3_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH3_Included (0x1UL)             /*!< Include                                                              */

/* CH4 @Bit 4 : Include or exclude channel 4 */
  #define DPPIC_CHG_CH4_Pos (4UL)                    /*!< Position of CH4 field.                                               */
  #define DPPIC_CHG_CH4_Msk (0x1UL << DPPIC_CHG_CH4_Pos) /*!< Bit mask of CH4 field.                                           */
  #define DPPIC_CHG_CH4_Min (0x0UL)                  /*!< Min enumerator value of CH4 field.                                   */
  #define DPPIC_CHG_CH4_Max (0x1UL)                  /*!< Max enumerator value of CH4 field.                                   */
  #define DPPIC_CHG_CH4_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH4_Included (0x1UL)             /*!< Include                                                              */

/* CH5 @Bit 5 : Include or exclude channel 5 */
  #define DPPIC_CHG_CH5_Pos (5UL)                    /*!< Position of CH5 field.                                               */
  #define DPPIC_CHG_CH5_Msk (0x1UL << DPPIC_CHG_CH5_Pos) /*!< Bit mask of CH5 field.                                           */
  #define DPPIC_CHG_CH5_Min (0x0UL)                  /*!< Min enumerator value of CH5 field.                                   */
  #define DPPIC_CHG_CH5_Max (0x1UL)                  /*!< Max enumerator value of CH5 field.                                   */
  #define DPPIC_CHG_CH5_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH5_Included (0x1UL)             /*!< Include                                                              */

/* CH6 @Bit 6 : Include or exclude channel 6 */
  #define DPPIC_CHG_CH6_Pos (6UL)                    /*!< Position of CH6 field.                                               */
  #define DPPIC_CHG_CH6_Msk (0x1UL << DPPIC_CHG_CH6_Pos) /*!< Bit mask of CH6 field.                                           */
  #define DPPIC_CHG_CH6_Min (0x0UL)                  /*!< Min enumerator value of CH6 field.                                   */
  #define DPPIC_CHG_CH6_Max (0x1UL)                  /*!< Max enumerator value of CH6 field.                                   */
  #define DPPIC_CHG_CH6_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH6_Included (0x1UL)             /*!< Include                                                              */

/* CH7 @Bit 7 : Include or exclude channel 7 */
  #define DPPIC_CHG_CH7_Pos (7UL)                    /*!< Position of CH7 field.                                               */
  #define DPPIC_CHG_CH7_Msk (0x1UL << DPPIC_CHG_CH7_Pos) /*!< Bit mask of CH7 field.                                           */
  #define DPPIC_CHG_CH7_Min (0x0UL)                  /*!< Min enumerator value of CH7 field.                                   */
  #define DPPIC_CHG_CH7_Max (0x1UL)                  /*!< Max enumerator value of CH7 field.                                   */
  #define DPPIC_CHG_CH7_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH7_Included (0x1UL)             /*!< Include                                                              */

/* CH8 @Bit 8 : Include or exclude channel 8 */
  #define DPPIC_CHG_CH8_Pos (8UL)                    /*!< Position of CH8 field.                                               */
  #define DPPIC_CHG_CH8_Msk (0x1UL << DPPIC_CHG_CH8_Pos) /*!< Bit mask of CH8 field.                                           */
  #define DPPIC_CHG_CH8_Min (0x0UL)                  /*!< Min enumerator value of CH8 field.                                   */
  #define DPPIC_CHG_CH8_Max (0x1UL)                  /*!< Max enumerator value of CH8 field.                                   */
  #define DPPIC_CHG_CH8_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH8_Included (0x1UL)             /*!< Include                                                              */

/* CH9 @Bit 9 : Include or exclude channel 9 */
  #define DPPIC_CHG_CH9_Pos (9UL)                    /*!< Position of CH9 field.                                               */
  #define DPPIC_CHG_CH9_Msk (0x1UL << DPPIC_CHG_CH9_Pos) /*!< Bit mask of CH9 field.                                           */
  #define DPPIC_CHG_CH9_Min (0x0UL)                  /*!< Min enumerator value of CH9 field.                                   */
  #define DPPIC_CHG_CH9_Max (0x1UL)                  /*!< Max enumerator value of CH9 field.                                   */
  #define DPPIC_CHG_CH9_Excluded (0x0UL)             /*!< Exclude                                                              */
  #define DPPIC_CHG_CH9_Included (0x1UL)             /*!< Include                                                              */

/* CH10 @Bit 10 : Include or exclude channel 10 */
  #define DPPIC_CHG_CH10_Pos (10UL)                  /*!< Position of CH10 field.                                              */
  #define DPPIC_CHG_CH10_Msk (0x1UL << DPPIC_CHG_CH10_Pos) /*!< Bit mask of CH10 field.                                        */
  #define DPPIC_CHG_CH10_Min (0x0UL)                 /*!< Min enumerator value of CH10 field.                                  */
  #define DPPIC_CHG_CH10_Max (0x1UL)                 /*!< Max enumerator value of CH10 field.                                  */
  #define DPPIC_CHG_CH10_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH10_Included (0x1UL)            /*!< Include                                                              */

/* CH11 @Bit 11 : Include or exclude channel 11 */
  #define DPPIC_CHG_CH11_Pos (11UL)                  /*!< Position of CH11 field.                                              */
  #define DPPIC_CHG_CH11_Msk (0x1UL << DPPIC_CHG_CH11_Pos) /*!< Bit mask of CH11 field.                                        */
  #define DPPIC_CHG_CH11_Min (0x0UL)                 /*!< Min enumerator value of CH11 field.                                  */
  #define DPPIC_CHG_CH11_Max (0x1UL)                 /*!< Max enumerator value of CH11 field.                                  */
  #define DPPIC_CHG_CH11_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH11_Included (0x1UL)            /*!< Include                                                              */

/* CH12 @Bit 12 : Include or exclude channel 12 */
  #define DPPIC_CHG_CH12_Pos (12UL)                  /*!< Position of CH12 field.                                              */
  #define DPPIC_CHG_CH12_Msk (0x1UL << DPPIC_CHG_CH12_Pos) /*!< Bit mask of CH12 field.                                        */
  #define DPPIC_CHG_CH12_Min (0x0UL)                 /*!< Min enumerator value of CH12 field.                                  */
  #define DPPIC_CHG_CH12_Max (0x1UL)                 /*!< Max enumerator value of CH12 field.                                  */
  #define DPPIC_CHG_CH12_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH12_Included (0x1UL)            /*!< Include                                                              */

/* CH13 @Bit 13 : Include or exclude channel 13 */
  #define DPPIC_CHG_CH13_Pos (13UL)                  /*!< Position of CH13 field.                                              */
  #define DPPIC_CHG_CH13_Msk (0x1UL << DPPIC_CHG_CH13_Pos) /*!< Bit mask of CH13 field.                                        */
  #define DPPIC_CHG_CH13_Min (0x0UL)                 /*!< Min enumerator value of CH13 field.                                  */
  #define DPPIC_CHG_CH13_Max (0x1UL)                 /*!< Max enumerator value of CH13 field.                                  */
  #define DPPIC_CHG_CH13_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH13_Included (0x1UL)            /*!< Include                                                              */

/* CH14 @Bit 14 : Include or exclude channel 14 */
  #define DPPIC_CHG_CH14_Pos (14UL)                  /*!< Position of CH14 field.                                              */
  #define DPPIC_CHG_CH14_Msk (0x1UL << DPPIC_CHG_CH14_Pos) /*!< Bit mask of CH14 field.                                        */
  #define DPPIC_CHG_CH14_Min (0x0UL)                 /*!< Min enumerator value of CH14 field.                                  */
  #define DPPIC_CHG_CH14_Max (0x1UL)                 /*!< Max enumerator value of CH14 field.                                  */
  #define DPPIC_CHG_CH14_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH14_Included (0x1UL)            /*!< Include                                                              */

/* CH15 @Bit 15 : Include or exclude channel 15 */
  #define DPPIC_CHG_CH15_Pos (15UL)                  /*!< Position of CH15 field.                                              */
  #define DPPIC_CHG_CH15_Msk (0x1UL << DPPIC_CHG_CH15_Pos) /*!< Bit mask of CH15 field.                                        */
  #define DPPIC_CHG_CH15_Min (0x0UL)                 /*!< Min enumerator value of CH15 field.                                  */
  #define DPPIC_CHG_CH15_Max (0x1UL)                 /*!< Max enumerator value of CH15 field.                                  */
  #define DPPIC_CHG_CH15_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH15_Included (0x1UL)            /*!< Include                                                              */

/* CH16 @Bit 16 : Include or exclude channel 16 */
  #define DPPIC_CHG_CH16_Pos (16UL)                  /*!< Position of CH16 field.                                              */
  #define DPPIC_CHG_CH16_Msk (0x1UL << DPPIC_CHG_CH16_Pos) /*!< Bit mask of CH16 field.                                        */
  #define DPPIC_CHG_CH16_Min (0x0UL)                 /*!< Min enumerator value of CH16 field.                                  */
  #define DPPIC_CHG_CH16_Max (0x1UL)                 /*!< Max enumerator value of CH16 field.                                  */
  #define DPPIC_CHG_CH16_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH16_Included (0x1UL)            /*!< Include                                                              */

/* CH17 @Bit 17 : Include or exclude channel 17 */
  #define DPPIC_CHG_CH17_Pos (17UL)                  /*!< Position of CH17 field.                                              */
  #define DPPIC_CHG_CH17_Msk (0x1UL << DPPIC_CHG_CH17_Pos) /*!< Bit mask of CH17 field.                                        */
  #define DPPIC_CHG_CH17_Min (0x0UL)                 /*!< Min enumerator value of CH17 field.                                  */
  #define DPPIC_CHG_CH17_Max (0x1UL)                 /*!< Max enumerator value of CH17 field.                                  */
  #define DPPIC_CHG_CH17_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH17_Included (0x1UL)            /*!< Include                                                              */

/* CH18 @Bit 18 : Include or exclude channel 18 */
  #define DPPIC_CHG_CH18_Pos (18UL)                  /*!< Position of CH18 field.                                              */
  #define DPPIC_CHG_CH18_Msk (0x1UL << DPPIC_CHG_CH18_Pos) /*!< Bit mask of CH18 field.                                        */
  #define DPPIC_CHG_CH18_Min (0x0UL)                 /*!< Min enumerator value of CH18 field.                                  */
  #define DPPIC_CHG_CH18_Max (0x1UL)                 /*!< Max enumerator value of CH18 field.                                  */
  #define DPPIC_CHG_CH18_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH18_Included (0x1UL)            /*!< Include                                                              */

/* CH19 @Bit 19 : Include or exclude channel 19 */
  #define DPPIC_CHG_CH19_Pos (19UL)                  /*!< Position of CH19 field.                                              */
  #define DPPIC_CHG_CH19_Msk (0x1UL << DPPIC_CHG_CH19_Pos) /*!< Bit mask of CH19 field.                                        */
  #define DPPIC_CHG_CH19_Min (0x0UL)                 /*!< Min enumerator value of CH19 field.                                  */
  #define DPPIC_CHG_CH19_Max (0x1UL)                 /*!< Max enumerator value of CH19 field.                                  */
  #define DPPIC_CHG_CH19_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH19_Included (0x1UL)            /*!< Include                                                              */

/* CH20 @Bit 20 : Include or exclude channel 20 */
  #define DPPIC_CHG_CH20_Pos (20UL)                  /*!< Position of CH20 field.                                              */
  #define DPPIC_CHG_CH20_Msk (0x1UL << DPPIC_CHG_CH20_Pos) /*!< Bit mask of CH20 field.                                        */
  #define DPPIC_CHG_CH20_Min (0x0UL)                 /*!< Min enumerator value of CH20 field.                                  */
  #define DPPIC_CHG_CH20_Max (0x1UL)                 /*!< Max enumerator value of CH20 field.                                  */
  #define DPPIC_CHG_CH20_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH20_Included (0x1UL)            /*!< Include                                                              */

/* CH21 @Bit 21 : Include or exclude channel 21 */
  #define DPPIC_CHG_CH21_Pos (21UL)                  /*!< Position of CH21 field.                                              */
  #define DPPIC_CHG_CH21_Msk (0x1UL << DPPIC_CHG_CH21_Pos) /*!< Bit mask of CH21 field.                                        */
  #define DPPIC_CHG_CH21_Min (0x0UL)                 /*!< Min enumerator value of CH21 field.                                  */
  #define DPPIC_CHG_CH21_Max (0x1UL)                 /*!< Max enumerator value of CH21 field.                                  */
  #define DPPIC_CHG_CH21_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH21_Included (0x1UL)            /*!< Include                                                              */

/* CH22 @Bit 22 : Include or exclude channel 22 */
  #define DPPIC_CHG_CH22_Pos (22UL)                  /*!< Position of CH22 field.                                              */
  #define DPPIC_CHG_CH22_Msk (0x1UL << DPPIC_CHG_CH22_Pos) /*!< Bit mask of CH22 field.                                        */
  #define DPPIC_CHG_CH22_Min (0x0UL)                 /*!< Min enumerator value of CH22 field.                                  */
  #define DPPIC_CHG_CH22_Max (0x1UL)                 /*!< Max enumerator value of CH22 field.                                  */
  #define DPPIC_CHG_CH22_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH22_Included (0x1UL)            /*!< Include                                                              */

/* CH23 @Bit 23 : Include or exclude channel 23 */
  #define DPPIC_CHG_CH23_Pos (23UL)                  /*!< Position of CH23 field.                                              */
  #define DPPIC_CHG_CH23_Msk (0x1UL << DPPIC_CHG_CH23_Pos) /*!< Bit mask of CH23 field.                                        */
  #define DPPIC_CHG_CH23_Min (0x0UL)                 /*!< Min enumerator value of CH23 field.                                  */
  #define DPPIC_CHG_CH23_Max (0x1UL)                 /*!< Max enumerator value of CH23 field.                                  */
  #define DPPIC_CHG_CH23_Excluded (0x0UL)            /*!< Exclude                                                              */
  #define DPPIC_CHG_CH23_Included (0x1UL)            /*!< Include                                                              */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct ECB_KEY ====================================================== */
/**
  * @brief KEY [ECB_KEY] (unspecified)
  */
typedef struct {
  __OM  uint32_t  VALUE[4];                          /*!< (@ 0x00000000) 128-bit AES key                                       */
} NRF_ECB_KEY_Type;                                  /*!< Size = 16 (0x010)                                                    */

/* ECB_KEY_VALUE: 128-bit AES key */
  #define ECB_KEY_VALUE_MaxCount (4UL)               /*!< Max size of VALUE[4] array.                                          */
  #define ECB_KEY_VALUE_MaxIndex (3UL)               /*!< Max index of VALUE[4] array.                                         */
  #define ECB_KEY_VALUE_MinIndex (0UL)               /*!< Min index of VALUE[4] array.                                         */
  #define ECB_KEY_VALUE_ResetValue (0x00000000UL)    /*!< Reset value of VALUE[4] register.                                    */

/* VALUE @Bits 0..31 : AES 128-bit key value, bits (32*(n+1))-1 : (32*n) */
  #define ECB_KEY_VALUE_VALUE_Pos (0UL)              /*!< Position of VALUE field.                                             */
  #define ECB_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << ECB_KEY_VALUE_VALUE_Pos) /*!< Bit mask of VALUE field.                      */



/* ====================================================== Struct ECB_IN ====================================================== */
/**
  * @brief IN [ECB_IN] IN EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Input pointer                                         */
} NRF_ECB_IN_Type;                                   /*!< Size = 4 (0x004)                                                     */

/* ECB_IN_PTR: Input pointer */
  #define ECB_IN_PTR_ResetValue (0x00000000UL)       /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : Points to a job list containing unencrypted ECB data structure */
  #define ECB_IN_PTR_PTR_Pos (0UL)                   /*!< Position of PTR field.                                               */
  #define ECB_IN_PTR_PTR_Msk (0xFFFFFFFFUL << ECB_IN_PTR_PTR_Pos) /*!< Bit mask of PTR field.                                  */



/* ===================================================== Struct ECB_OUT ====================================================== */
/**
  * @brief OUT [ECB_OUT] OUT EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Output pointer Points to a job list containing
                                                                         encrypted ECB data structure*/
} NRF_ECB_OUT_Type;                                  /*!< Size = 4 (0x004)                                                     */

/* ECB_OUT_PTR: Output pointer Points to a job list containing encrypted ECB data structure */
  #define ECB_OUT_PTR_ResetValue (0x00000000UL)      /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : Output pointer */
  #define ECB_OUT_PTR_PTR_Pos (0UL)                  /*!< Position of PTR field.                                               */
  #define ECB_OUT_PTR_PTR_Msk (0xFFFFFFFFUL << ECB_OUT_PTR_PTR_Pos) /*!< Bit mask of PTR field.                                */



/* ===================================================== Struct ECB_CSAA ===================================================== */
/**
  * @brief CSAA [ECB_CSAA] Channel sounding access address scoring algorithm
  */
typedef struct {
  __IM  uint32_t  REFLECTOR;                         /*!< (@ 0x00000000) Selected Channel Sounding Access Address used in the CS
                                                                         SYNC from Reflector to Initiator*/
  __IM  uint32_t  INITIATOR;                         /*!< (@ 0x00000004) Selected Channel Sounding Access Address used in the CS
                                                                         SYNC from Initiator to Reflector*/
  __IOM uint32_t  MODE;                              /*!< (@ 0x00000008) Operation modes                                       */
} NRF_ECB_CSAA_Type;                                 /*!< Size = 12 (0x00C)                                                    */

/* ECB_CSAA_REFLECTOR: Selected Channel Sounding Access Address used in the CS SYNC from Reflector to Initiator */
  #define ECB_CSAA_REFLECTOR_ResetValue (0x00000000UL) /*!< Reset value of REFLECTOR register.                                 */

/* PN @Bits 0..31 : (unspecified) */
  #define ECB_CSAA_REFLECTOR_PN_Pos (0UL)            /*!< Position of PN field.                                                */
  #define ECB_CSAA_REFLECTOR_PN_Msk (0xFFFFFFFFUL << ECB_CSAA_REFLECTOR_PN_Pos) /*!< Bit mask of PN field.                     */


/* ECB_CSAA_INITIATOR: Selected Channel Sounding Access Address used in the CS SYNC from Initiator to Reflector */
  #define ECB_CSAA_INITIATOR_ResetValue (0x00000000UL) /*!< Reset value of INITIATOR register.                                 */

/* PN @Bits 0..31 : (unspecified) */
  #define ECB_CSAA_INITIATOR_PN_Pos (0UL)            /*!< Position of PN field.                                                */
  #define ECB_CSAA_INITIATOR_PN_Msk (0xFFFFFFFFUL << ECB_CSAA_INITIATOR_PN_Pos) /*!< Bit mask of PN field.                     */


/* ECB_CSAA_MODE: Operation modes */
  #define ECB_CSAA_MODE_ResetValue (0x00000000UL)    /*!< Reset value of MODE register.                                        */

/* BITREVERSE @Bit 0 : Reverse the endianness on bit level for the ECB output, INITIATOR, and REFLECTOR registers */
  #define ECB_CSAA_MODE_BITREVERSE_Pos (0UL)         /*!< Position of BITREVERSE field.                                        */
  #define ECB_CSAA_MODE_BITREVERSE_Msk (0x1UL << ECB_CSAA_MODE_BITREVERSE_Pos) /*!< Bit mask of BITREVERSE field.              */
  #define ECB_CSAA_MODE_BITREVERSE_Min (0x0UL)       /*!< Min enumerator value of BITREVERSE field.                            */
  #define ECB_CSAA_MODE_BITREVERSE_Max (0x1UL)       /*!< Max enumerator value of BITREVERSE field.                            */
  #define ECB_CSAA_MODE_BITREVERSE_Default (0x0UL)   /*!< Default endianness                                                   */
  #define ECB_CSAA_MODE_BITREVERSE_Reversed (0x1UL)  /*!< Reversed endianness                                                  */


/* ======================================================= Struct ECB ======================================================== */
/**
  * @brief AES ECB Mode Encryption
  */
  typedef struct {                                   /*!< ECB Structure                                                        */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start ECB block encrypt                               */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Abort a possible executing ECB operation              */
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000100) ECB block encrypt complete                            */
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000104) ECB block encrypt aborted because of a STOP task or due
                                                                         to an error*/
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000180) Publish configuration for event END                   */
    __IOM uint32_t PUBLISH_ERROR;                    /*!< (@ 0x00000184) Publish configuration for event ERROR                 */
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED4[61];
    __IM uint32_t ERRORSTATUS;                       /*!< (@ 0x00000400) Error status                                          */
    __IM uint32_t RESERVED5[67];
    __IOM NRF_ECB_KEY_Type KEY;                      /*!< (@ 0x00000510) (unspecified)                                         */
    __IM uint32_t RESERVED6[4];
    __IOM NRF_ECB_IN_Type IN;                        /*!< (@ 0x00000530) IN EasyDMA channel                                    */
    __IM uint32_t RESERVED7;
    __IOM NRF_ECB_OUT_Type OUT;                      /*!< (@ 0x00000538) OUT EasyDMA channel                                   */
    __IOM NRF_ECB_CSAA_Type CSAA;                    /*!< (@ 0x0000053C) Channel sounding access address scoring algorithm     */
  } NRF_ECB_Type;                                    /*!< Size = 1352 (0x548)                                                  */

/* ECB_TASKS_START: Start ECB block encrypt */
  #define ECB_TASKS_START_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start ECB block encrypt */
  #define ECB_TASKS_START_TASKS_START_Pos (0UL)      /*!< Position of TASKS_START field.                                       */
  #define ECB_TASKS_START_TASKS_START_Msk (0x1UL << ECB_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.       */
  #define ECB_TASKS_START_TASKS_START_Min (0x1UL)    /*!< Min enumerator value of TASKS_START field.                           */
  #define ECB_TASKS_START_TASKS_START_Max (0x1UL)    /*!< Max enumerator value of TASKS_START field.                           */
  #define ECB_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                        */


/* ECB_TASKS_STOP: Abort a possible executing ECB operation */
  #define ECB_TASKS_STOP_ResetValue (0x00000000UL)   /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Abort a possible executing ECB operation */
  #define ECB_TASKS_STOP_TASKS_STOP_Pos (0UL)        /*!< Position of TASKS_STOP field.                                        */
  #define ECB_TASKS_STOP_TASKS_STOP_Msk (0x1UL << ECB_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.            */
  #define ECB_TASKS_STOP_TASKS_STOP_Min (0x1UL)      /*!< Min enumerator value of TASKS_STOP field.                            */
  #define ECB_TASKS_STOP_TASKS_STOP_Max (0x1UL)      /*!< Max enumerator value of TASKS_STOP field.                            */
  #define ECB_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)  /*!< Trigger task                                                         */


/* ECB_SUBSCRIBE_START: Subscribe configuration for task START */
  #define ECB_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define ECB_SUBSCRIBE_START_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define ECB_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << ECB_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define ECB_SUBSCRIBE_START_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define ECB_SUBSCRIBE_START_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define ECB_SUBSCRIBE_START_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define ECB_SUBSCRIBE_START_EN_Msk (0x1UL << ECB_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                          */
  #define ECB_SUBSCRIBE_START_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define ECB_SUBSCRIBE_START_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define ECB_SUBSCRIBE_START_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define ECB_SUBSCRIBE_START_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* ECB_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define ECB_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define ECB_SUBSCRIBE_STOP_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define ECB_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << ECB_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define ECB_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define ECB_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define ECB_SUBSCRIBE_STOP_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define ECB_SUBSCRIBE_STOP_EN_Msk (0x1UL << ECB_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                            */
  #define ECB_SUBSCRIBE_STOP_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define ECB_SUBSCRIBE_STOP_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define ECB_SUBSCRIBE_STOP_EN_Disabled (0x0UL)     /*!< Disable subscription                                                 */
  #define ECB_SUBSCRIBE_STOP_EN_Enabled (0x1UL)      /*!< Enable subscription                                                  */


/* ECB_EVENTS_END: ECB block encrypt complete */
  #define ECB_EVENTS_END_ResetValue (0x00000000UL)   /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : ECB block encrypt complete */
  #define ECB_EVENTS_END_EVENTS_END_Pos (0UL)        /*!< Position of EVENTS_END field.                                        */
  #define ECB_EVENTS_END_EVENTS_END_Msk (0x1UL << ECB_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.            */
  #define ECB_EVENTS_END_EVENTS_END_Min (0x0UL)      /*!< Min enumerator value of EVENTS_END field.                            */
  #define ECB_EVENTS_END_EVENTS_END_Max (0x1UL)      /*!< Max enumerator value of EVENTS_END field.                            */
  #define ECB_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                              */
  #define ECB_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                     */


/* ECB_EVENTS_ERROR: ECB block encrypt aborted because of a STOP task or due to an error */
  #define ECB_EVENTS_ERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ERROR register.                                */

/* EVENTS_ERROR @Bit 0 : ECB block encrypt aborted because of a STOP task or due to an error */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)    /*!< Position of EVENTS_ERROR field.                                      */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << ECB_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field.  */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL)  /*!< Min enumerator value of EVENTS_ERROR field.                          */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL)  /*!< Max enumerator value of EVENTS_ERROR field.                          */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define ECB_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL) /*!< Event generated                                                 */


/* ECB_PUBLISH_END: Publish configuration for event END */
  #define ECB_PUBLISH_END_ResetValue (0x00000000UL)  /*!< Reset value of PUBLISH_END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define ECB_PUBLISH_END_CHIDX_Pos (0UL)            /*!< Position of CHIDX field.                                             */
  #define ECB_PUBLISH_END_CHIDX_Msk (0xFFUL << ECB_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                        */
  #define ECB_PUBLISH_END_CHIDX_Min (0x00UL)         /*!< Min value of CHIDX field.                                            */
  #define ECB_PUBLISH_END_CHIDX_Max (0xFFUL)         /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define ECB_PUBLISH_END_EN_Pos (31UL)              /*!< Position of EN field.                                                */
  #define ECB_PUBLISH_END_EN_Msk (0x1UL << ECB_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                                  */
  #define ECB_PUBLISH_END_EN_Min (0x0UL)             /*!< Min enumerator value of EN field.                                    */
  #define ECB_PUBLISH_END_EN_Max (0x1UL)             /*!< Max enumerator value of EN field.                                    */
  #define ECB_PUBLISH_END_EN_Disabled (0x0UL)        /*!< Disable publishing                                                   */
  #define ECB_PUBLISH_END_EN_Enabled (0x1UL)         /*!< Enable publishing                                                    */


/* ECB_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define ECB_PUBLISH_ERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ERROR register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define ECB_PUBLISH_ERROR_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define ECB_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << ECB_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define ECB_PUBLISH_ERROR_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define ECB_PUBLISH_ERROR_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define ECB_PUBLISH_ERROR_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define ECB_PUBLISH_ERROR_EN_Msk (0x1UL << ECB_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field.                              */
  #define ECB_PUBLISH_ERROR_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define ECB_PUBLISH_ERROR_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define ECB_PUBLISH_ERROR_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define ECB_PUBLISH_ERROR_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* ECB_INTENSET: Enable interrupt */
  #define ECB_INTENSET_ResetValue (0x00000000UL)     /*!< Reset value of INTENSET register.                                    */

/* END @Bit 0 : Write '1' to enable interrupt for event END */
  #define ECB_INTENSET_END_Pos (0UL)                 /*!< Position of END field.                                               */
  #define ECB_INTENSET_END_Msk (0x1UL << ECB_INTENSET_END_Pos) /*!< Bit mask of END field.                                     */
  #define ECB_INTENSET_END_Min (0x0UL)               /*!< Min enumerator value of END field.                                   */
  #define ECB_INTENSET_END_Max (0x1UL)               /*!< Max enumerator value of END field.                                   */
  #define ECB_INTENSET_END_Set (0x1UL)               /*!< Enable                                                               */
  #define ECB_INTENSET_END_Disabled (0x0UL)          /*!< Read: Disabled                                                       */
  #define ECB_INTENSET_END_Enabled (0x1UL)           /*!< Read: Enabled                                                        */

/* ERROR @Bit 1 : Write '1' to enable interrupt for event ERROR */
  #define ECB_INTENSET_ERROR_Pos (1UL)               /*!< Position of ERROR field.                                             */
  #define ECB_INTENSET_ERROR_Msk (0x1UL << ECB_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field.                               */
  #define ECB_INTENSET_ERROR_Min (0x0UL)             /*!< Min enumerator value of ERROR field.                                 */
  #define ECB_INTENSET_ERROR_Max (0x1UL)             /*!< Max enumerator value of ERROR field.                                 */
  #define ECB_INTENSET_ERROR_Set (0x1UL)             /*!< Enable                                                               */
  #define ECB_INTENSET_ERROR_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define ECB_INTENSET_ERROR_Enabled (0x1UL)         /*!< Read: Enabled                                                        */


/* ECB_INTENCLR: Disable interrupt */
  #define ECB_INTENCLR_ResetValue (0x00000000UL)     /*!< Reset value of INTENCLR register.                                    */

/* END @Bit 0 : Write '1' to disable interrupt for event END */
  #define ECB_INTENCLR_END_Pos (0UL)                 /*!< Position of END field.                                               */
  #define ECB_INTENCLR_END_Msk (0x1UL << ECB_INTENCLR_END_Pos) /*!< Bit mask of END field.                                     */
  #define ECB_INTENCLR_END_Min (0x0UL)               /*!< Min enumerator value of END field.                                   */
  #define ECB_INTENCLR_END_Max (0x1UL)               /*!< Max enumerator value of END field.                                   */
  #define ECB_INTENCLR_END_Clear (0x1UL)             /*!< Disable                                                              */
  #define ECB_INTENCLR_END_Disabled (0x0UL)          /*!< Read: Disabled                                                       */
  #define ECB_INTENCLR_END_Enabled (0x1UL)           /*!< Read: Enabled                                                        */

/* ERROR @Bit 1 : Write '1' to disable interrupt for event ERROR */
  #define ECB_INTENCLR_ERROR_Pos (1UL)               /*!< Position of ERROR field.                                             */
  #define ECB_INTENCLR_ERROR_Msk (0x1UL << ECB_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field.                               */
  #define ECB_INTENCLR_ERROR_Min (0x0UL)             /*!< Min enumerator value of ERROR field.                                 */
  #define ECB_INTENCLR_ERROR_Max (0x1UL)             /*!< Max enumerator value of ERROR field.                                 */
  #define ECB_INTENCLR_ERROR_Clear (0x1UL)           /*!< Disable                                                              */
  #define ECB_INTENCLR_ERROR_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define ECB_INTENCLR_ERROR_Enabled (0x1UL)         /*!< Read: Enabled                                                        */


/* ECB_ERRORSTATUS: Error status */
  #define ECB_ERRORSTATUS_ResetValue (0x00000000UL)  /*!< Reset value of ERRORSTATUS register.                                 */

/* ERRORSTATUS @Bits 0..2 : Error status when the ERROR event is generated */
  #define ECB_ERRORSTATUS_ERRORSTATUS_Pos (0UL)      /*!< Position of ERRORSTATUS field.                                       */
  #define ECB_ERRORSTATUS_ERRORSTATUS_Msk (0x7UL << ECB_ERRORSTATUS_ERRORSTATUS_Pos) /*!< Bit mask of ERRORSTATUS field.       */
  #define ECB_ERRORSTATUS_ERRORSTATUS_Min (0x0UL)    /*!< Min enumerator value of ERRORSTATUS field.                           */
  #define ECB_ERRORSTATUS_ERRORSTATUS_Max (0x4UL)    /*!< Max enumerator value of ERRORSTATUS field.                           */
  #define ECB_ERRORSTATUS_ERRORSTATUS_NoError (0x0UL) /*!< No errors have occurred                                             */
  #define ECB_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd (0x1UL) /*!< End of INPTR job list before data structure was read.     */
  #define ECB_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd (0x2UL) /*!< End of OUTPTR job list before data structure was read.   */
  #define ECB_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow (0x3UL) /*!< Encryption aborted due to higher priority peripheral
                                                                     requesting or using the AES module.*/
  #define ECB_ERRORSTATUS_ERRORSTATUS_Aborted (0x3UL) /*!< Encryption aborted due to higher priority peripheral requesting or
                                                           using the AES module.*/
  #define ECB_ERRORSTATUS_ERRORSTATUS_DmaError (0x4UL) /*!< Bus error during DMA access.                                       */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            EGU                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct EGU ======================================================== */
/**
  * @brief Event generator unit
  */
  typedef struct {                                   /*!< EGU Structure                                                        */
    __OM uint32_t TASKS_TRIGGER[16];                 /*!< (@ 0x00000000) Trigger n for triggering the corresponding TRIGGERED[n]
                                                                         event*/
    __IM uint32_t RESERVED[16];
    __IOM uint32_t SUBSCRIBE_TRIGGER[16];            /*!< (@ 0x00000080) Subscribe configuration for task TRIGGER[n]           */
    __IM uint32_t RESERVED1[16];
    __IOM uint32_t EVENTS_TRIGGERED[16];             /*!< (@ 0x00000100) Event number n generated by triggering the
                                                                         corresponding TRIGGER[n] task*/
    __IM uint32_t RESERVED2[16];
    __IOM uint32_t PUBLISH_TRIGGERED[16];            /*!< (@ 0x00000180) Publish configuration for event TRIGGERED[n]          */
    __IM uint32_t RESERVED3[80];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
  } NRF_EGU_Type;                                    /*!< Size = 780 (0x30C)                                                   */

/* EGU_TASKS_TRIGGER: Trigger n for triggering the corresponding TRIGGERED[n] event */
  #define EGU_TASKS_TRIGGER_MaxCount (16UL)          /*!< Max size of TASKS_TRIGGER[16] array.                                 */
  #define EGU_TASKS_TRIGGER_MaxIndex (15UL)          /*!< Max index of TASKS_TRIGGER[16] array.                                */
  #define EGU_TASKS_TRIGGER_MinIndex (0UL)           /*!< Min index of TASKS_TRIGGER[16] array.                                */
  #define EGU_TASKS_TRIGGER_ResetValue (0x00000000UL) /*!< Reset value of TASKS_TRIGGER[16] register.                          */

/* TASKS_TRIGGER @Bit 0 : Trigger n for triggering the corresponding TRIGGERED[n] event */
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL)  /*!< Position of TASKS_TRIGGER field.                                     */
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of TASKS_TRIGGER
                                                                            field.*/
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Min (0x1UL) /*!< Min enumerator value of TASKS_TRIGGER field.                        */
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Max (0x1UL) /*!< Max enumerator value of TASKS_TRIGGER field.                        */
  #define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (0x1UL) /*!< Trigger task                                                    */


/* EGU_SUBSCRIBE_TRIGGER: Subscribe configuration for task TRIGGER[n] */
  #define EGU_SUBSCRIBE_TRIGGER_MaxCount (16UL)      /*!< Max size of SUBSCRIBE_TRIGGER[16] array.                             */
  #define EGU_SUBSCRIBE_TRIGGER_MaxIndex (15UL)      /*!< Max index of SUBSCRIBE_TRIGGER[16] array.                            */
  #define EGU_SUBSCRIBE_TRIGGER_MinIndex (0UL)       /*!< Min index of SUBSCRIBE_TRIGGER[16] array.                            */
  #define EGU_SUBSCRIBE_TRIGGER_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_TRIGGER[16] register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that task TRIGGER[n] will subscribe to */
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Msk (0xFFUL << EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define EGU_SUBSCRIBE_TRIGGER_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Msk (0x1UL << EGU_SUBSCRIBE_TRIGGER_EN_Pos) /*!< Bit mask of EN field.                      */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define EGU_SUBSCRIBE_TRIGGER_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* EGU_EVENTS_TRIGGERED: Event number n generated by triggering the corresponding TRIGGER[n] task */
  #define EGU_EVENTS_TRIGGERED_MaxCount (16UL)       /*!< Max size of EVENTS_TRIGGERED[16] array.                              */
  #define EGU_EVENTS_TRIGGERED_MaxIndex (15UL)       /*!< Max index of EVENTS_TRIGGERED[16] array.                             */
  #define EGU_EVENTS_TRIGGERED_MinIndex (0UL)        /*!< Min index of EVENTS_TRIGGERED[16] array.                             */
  #define EGU_EVENTS_TRIGGERED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TRIGGERED[16] register.                    */

/* EVENTS_TRIGGERED @Bit 0 : Event number n generated by triggering the corresponding TRIGGER[n] task */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL) /*!< Position of EVENTS_TRIGGERED field.                             */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit mask of
                                                                            EVENTS_TRIGGERED field.*/
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Min (0x0UL) /*!< Min enumerator value of EVENTS_TRIGGERED field.               */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Max (0x1UL) /*!< Max enumerator value of EVENTS_TRIGGERED field.               */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (0x1UL) /*!< Event generated                                         */


/* EGU_PUBLISH_TRIGGERED: Publish configuration for event TRIGGERED[n] */
  #define EGU_PUBLISH_TRIGGERED_MaxCount (16UL)      /*!< Max size of PUBLISH_TRIGGERED[16] array.                             */
  #define EGU_PUBLISH_TRIGGERED_MaxIndex (15UL)      /*!< Max index of PUBLISH_TRIGGERED[16] array.                            */
  #define EGU_PUBLISH_TRIGGERED_MinIndex (0UL)       /*!< Min index of PUBLISH_TRIGGERED[16] array.                            */
  #define EGU_PUBLISH_TRIGGERED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_TRIGGERED[16] register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event TRIGGERED[n] will publish to */
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Msk (0xFFUL << EGU_PUBLISH_TRIGGERED_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define EGU_PUBLISH_TRIGGERED_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define EGU_PUBLISH_TRIGGERED_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define EGU_PUBLISH_TRIGGERED_EN_Msk (0x1UL << EGU_PUBLISH_TRIGGERED_EN_Pos) /*!< Bit mask of EN field.                      */
  #define EGU_PUBLISH_TRIGGERED_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define EGU_PUBLISH_TRIGGERED_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define EGU_PUBLISH_TRIGGERED_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define EGU_PUBLISH_TRIGGERED_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* EGU_INTEN: Enable or disable interrupt */
  #define EGU_INTEN_ResetValue (0x00000000UL)        /*!< Reset value of INTEN register.                                       */

/* TRIGGERED0 @Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
  #define EGU_INTEN_TRIGGERED0_Pos (0UL)             /*!< Position of TRIGGERED0 field.                                        */
  #define EGU_INTEN_TRIGGERED0_Msk (0x1UL << EGU_INTEN_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field.                      */
  #define EGU_INTEN_TRIGGERED0_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED0 field.                            */
  #define EGU_INTEN_TRIGGERED0_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED0 field.                            */
  #define EGU_INTEN_TRIGGERED0_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED0_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED1 @Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
  #define EGU_INTEN_TRIGGERED1_Pos (1UL)             /*!< Position of TRIGGERED1 field.                                        */
  #define EGU_INTEN_TRIGGERED1_Msk (0x1UL << EGU_INTEN_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field.                      */
  #define EGU_INTEN_TRIGGERED1_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED1 field.                            */
  #define EGU_INTEN_TRIGGERED1_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED1 field.                            */
  #define EGU_INTEN_TRIGGERED1_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED1_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED2 @Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
  #define EGU_INTEN_TRIGGERED2_Pos (2UL)             /*!< Position of TRIGGERED2 field.                                        */
  #define EGU_INTEN_TRIGGERED2_Msk (0x1UL << EGU_INTEN_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field.                      */
  #define EGU_INTEN_TRIGGERED2_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED2 field.                            */
  #define EGU_INTEN_TRIGGERED2_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED2 field.                            */
  #define EGU_INTEN_TRIGGERED2_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED2_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED3 @Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
  #define EGU_INTEN_TRIGGERED3_Pos (3UL)             /*!< Position of TRIGGERED3 field.                                        */
  #define EGU_INTEN_TRIGGERED3_Msk (0x1UL << EGU_INTEN_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field.                      */
  #define EGU_INTEN_TRIGGERED3_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED3 field.                            */
  #define EGU_INTEN_TRIGGERED3_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED3 field.                            */
  #define EGU_INTEN_TRIGGERED3_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED3_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED4 @Bit 4 : Enable or disable interrupt for event TRIGGERED[4] */
  #define EGU_INTEN_TRIGGERED4_Pos (4UL)             /*!< Position of TRIGGERED4 field.                                        */
  #define EGU_INTEN_TRIGGERED4_Msk (0x1UL << EGU_INTEN_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field.                      */
  #define EGU_INTEN_TRIGGERED4_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED4 field.                            */
  #define EGU_INTEN_TRIGGERED4_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED4 field.                            */
  #define EGU_INTEN_TRIGGERED4_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED4_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED5 @Bit 5 : Enable or disable interrupt for event TRIGGERED[5] */
  #define EGU_INTEN_TRIGGERED5_Pos (5UL)             /*!< Position of TRIGGERED5 field.                                        */
  #define EGU_INTEN_TRIGGERED5_Msk (0x1UL << EGU_INTEN_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field.                      */
  #define EGU_INTEN_TRIGGERED5_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED5 field.                            */
  #define EGU_INTEN_TRIGGERED5_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED5 field.                            */
  #define EGU_INTEN_TRIGGERED5_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED5_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED6 @Bit 6 : Enable or disable interrupt for event TRIGGERED[6] */
  #define EGU_INTEN_TRIGGERED6_Pos (6UL)             /*!< Position of TRIGGERED6 field.                                        */
  #define EGU_INTEN_TRIGGERED6_Msk (0x1UL << EGU_INTEN_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field.                      */
  #define EGU_INTEN_TRIGGERED6_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED6 field.                            */
  #define EGU_INTEN_TRIGGERED6_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED6 field.                            */
  #define EGU_INTEN_TRIGGERED6_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED6_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED7 @Bit 7 : Enable or disable interrupt for event TRIGGERED[7] */
  #define EGU_INTEN_TRIGGERED7_Pos (7UL)             /*!< Position of TRIGGERED7 field.                                        */
  #define EGU_INTEN_TRIGGERED7_Msk (0x1UL << EGU_INTEN_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field.                      */
  #define EGU_INTEN_TRIGGERED7_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED7 field.                            */
  #define EGU_INTEN_TRIGGERED7_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED7 field.                            */
  #define EGU_INTEN_TRIGGERED7_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED7_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED8 @Bit 8 : Enable or disable interrupt for event TRIGGERED[8] */
  #define EGU_INTEN_TRIGGERED8_Pos (8UL)             /*!< Position of TRIGGERED8 field.                                        */
  #define EGU_INTEN_TRIGGERED8_Msk (0x1UL << EGU_INTEN_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field.                      */
  #define EGU_INTEN_TRIGGERED8_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED8 field.                            */
  #define EGU_INTEN_TRIGGERED8_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED8 field.                            */
  #define EGU_INTEN_TRIGGERED8_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED8_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED9 @Bit 9 : Enable or disable interrupt for event TRIGGERED[9] */
  #define EGU_INTEN_TRIGGERED9_Pos (9UL)             /*!< Position of TRIGGERED9 field.                                        */
  #define EGU_INTEN_TRIGGERED9_Msk (0x1UL << EGU_INTEN_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field.                      */
  #define EGU_INTEN_TRIGGERED9_Min (0x0UL)           /*!< Min enumerator value of TRIGGERED9 field.                            */
  #define EGU_INTEN_TRIGGERED9_Max (0x1UL)           /*!< Max enumerator value of TRIGGERED9 field.                            */
  #define EGU_INTEN_TRIGGERED9_Disabled (0x0UL)      /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED9_Enabled (0x1UL)       /*!< Enable                                                               */

/* TRIGGERED10 @Bit 10 : Enable or disable interrupt for event TRIGGERED[10] */
  #define EGU_INTEN_TRIGGERED10_Pos (10UL)           /*!< Position of TRIGGERED10 field.                                       */
  #define EGU_INTEN_TRIGGERED10_Msk (0x1UL << EGU_INTEN_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field.                   */
  #define EGU_INTEN_TRIGGERED10_Min (0x0UL)          /*!< Min enumerator value of TRIGGERED10 field.                           */
  #define EGU_INTEN_TRIGGERED10_Max (0x1UL)          /*!< Max enumerator value of TRIGGERED10 field.                           */
  #define EGU_INTEN_TRIGGERED10_Disabled (0x0UL)     /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED10_Enabled (0x1UL)      /*!< Enable                                                               */

/* TRIGGERED11 @Bit 11 : Enable or disable interrupt for event TRIGGERED[11] */
  #define EGU_INTEN_TRIGGERED11_Pos (11UL)           /*!< Position of TRIGGERED11 field.                                       */
  #define EGU_INTEN_TRIGGERED11_Msk (0x1UL << EGU_INTEN_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field.                   */
  #define EGU_INTEN_TRIGGERED11_Min (0x0UL)          /*!< Min enumerator value of TRIGGERED11 field.                           */
  #define EGU_INTEN_TRIGGERED11_Max (0x1UL)          /*!< Max enumerator value of TRIGGERED11 field.                           */
  #define EGU_INTEN_TRIGGERED11_Disabled (0x0UL)     /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED11_Enabled (0x1UL)      /*!< Enable                                                               */

/* TRIGGERED12 @Bit 12 : Enable or disable interrupt for event TRIGGERED[12] */
  #define EGU_INTEN_TRIGGERED12_Pos (12UL)           /*!< Position of TRIGGERED12 field.                                       */
  #define EGU_INTEN_TRIGGERED12_Msk (0x1UL << EGU_INTEN_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field.                   */
  #define EGU_INTEN_TRIGGERED12_Min (0x0UL)          /*!< Min enumerator value of TRIGGERED12 field.                           */
  #define EGU_INTEN_TRIGGERED12_Max (0x1UL)          /*!< Max enumerator value of TRIGGERED12 field.                           */
  #define EGU_INTEN_TRIGGERED12_Disabled (0x0UL)     /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED12_Enabled (0x1UL)      /*!< Enable                                                               */

/* TRIGGERED13 @Bit 13 : Enable or disable interrupt for event TRIGGERED[13] */
  #define EGU_INTEN_TRIGGERED13_Pos (13UL)           /*!< Position of TRIGGERED13 field.                                       */
  #define EGU_INTEN_TRIGGERED13_Msk (0x1UL << EGU_INTEN_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field.                   */
  #define EGU_INTEN_TRIGGERED13_Min (0x0UL)          /*!< Min enumerator value of TRIGGERED13 field.                           */
  #define EGU_INTEN_TRIGGERED13_Max (0x1UL)          /*!< Max enumerator value of TRIGGERED13 field.                           */
  #define EGU_INTEN_TRIGGERED13_Disabled (0x0UL)     /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED13_Enabled (0x1UL)      /*!< Enable                                                               */

/* TRIGGERED14 @Bit 14 : Enable or disable interrupt for event TRIGGERED[14] */
  #define EGU_INTEN_TRIGGERED14_Pos (14UL)           /*!< Position of TRIGGERED14 field.                                       */
  #define EGU_INTEN_TRIGGERED14_Msk (0x1UL << EGU_INTEN_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field.                   */
  #define EGU_INTEN_TRIGGERED14_Min (0x0UL)          /*!< Min enumerator value of TRIGGERED14 field.                           */
  #define EGU_INTEN_TRIGGERED14_Max (0x1UL)          /*!< Max enumerator value of TRIGGERED14 field.                           */
  #define EGU_INTEN_TRIGGERED14_Disabled (0x0UL)     /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED14_Enabled (0x1UL)      /*!< Enable                                                               */

/* TRIGGERED15 @Bit 15 : Enable or disable interrupt for event TRIGGERED[15] */
  #define EGU_INTEN_TRIGGERED15_Pos (15UL)           /*!< Position of TRIGGERED15 field.                                       */
  #define EGU_INTEN_TRIGGERED15_Msk (0x1UL << EGU_INTEN_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field.                   */
  #define EGU_INTEN_TRIGGERED15_Min (0x0UL)          /*!< Min enumerator value of TRIGGERED15 field.                           */
  #define EGU_INTEN_TRIGGERED15_Max (0x1UL)          /*!< Max enumerator value of TRIGGERED15 field.                           */
  #define EGU_INTEN_TRIGGERED15_Disabled (0x0UL)     /*!< Disable                                                              */
  #define EGU_INTEN_TRIGGERED15_Enabled (0x1UL)      /*!< Enable                                                               */


/* EGU_INTENSET: Enable interrupt */
  #define EGU_INTENSET_ResetValue (0x00000000UL)     /*!< Reset value of INTENSET register.                                    */

/* TRIGGERED0 @Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
  #define EGU_INTENSET_TRIGGERED0_Pos (0UL)          /*!< Position of TRIGGERED0 field.                                        */
  #define EGU_INTENSET_TRIGGERED0_Msk (0x1UL << EGU_INTENSET_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field.                */
  #define EGU_INTENSET_TRIGGERED0_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED0 field.                            */
  #define EGU_INTENSET_TRIGGERED0_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED0 field.                            */
  #define EGU_INTENSET_TRIGGERED0_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED1 @Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
  #define EGU_INTENSET_TRIGGERED1_Pos (1UL)          /*!< Position of TRIGGERED1 field.                                        */
  #define EGU_INTENSET_TRIGGERED1_Msk (0x1UL << EGU_INTENSET_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field.                */
  #define EGU_INTENSET_TRIGGERED1_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED1 field.                            */
  #define EGU_INTENSET_TRIGGERED1_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED1 field.                            */
  #define EGU_INTENSET_TRIGGERED1_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED2 @Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
  #define EGU_INTENSET_TRIGGERED2_Pos (2UL)          /*!< Position of TRIGGERED2 field.                                        */
  #define EGU_INTENSET_TRIGGERED2_Msk (0x1UL << EGU_INTENSET_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field.                */
  #define EGU_INTENSET_TRIGGERED2_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED2 field.                            */
  #define EGU_INTENSET_TRIGGERED2_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED2 field.                            */
  #define EGU_INTENSET_TRIGGERED2_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED3 @Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
  #define EGU_INTENSET_TRIGGERED3_Pos (3UL)          /*!< Position of TRIGGERED3 field.                                        */
  #define EGU_INTENSET_TRIGGERED3_Msk (0x1UL << EGU_INTENSET_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field.                */
  #define EGU_INTENSET_TRIGGERED3_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED3 field.                            */
  #define EGU_INTENSET_TRIGGERED3_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED3 field.                            */
  #define EGU_INTENSET_TRIGGERED3_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED4 @Bit 4 : Write '1' to enable interrupt for event TRIGGERED[4] */
  #define EGU_INTENSET_TRIGGERED4_Pos (4UL)          /*!< Position of TRIGGERED4 field.                                        */
  #define EGU_INTENSET_TRIGGERED4_Msk (0x1UL << EGU_INTENSET_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field.                */
  #define EGU_INTENSET_TRIGGERED4_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED4 field.                            */
  #define EGU_INTENSET_TRIGGERED4_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED4 field.                            */
  #define EGU_INTENSET_TRIGGERED4_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED5 @Bit 5 : Write '1' to enable interrupt for event TRIGGERED[5] */
  #define EGU_INTENSET_TRIGGERED5_Pos (5UL)          /*!< Position of TRIGGERED5 field.                                        */
  #define EGU_INTENSET_TRIGGERED5_Msk (0x1UL << EGU_INTENSET_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field.                */
  #define EGU_INTENSET_TRIGGERED5_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED5 field.                            */
  #define EGU_INTENSET_TRIGGERED5_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED5 field.                            */
  #define EGU_INTENSET_TRIGGERED5_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED6 @Bit 6 : Write '1' to enable interrupt for event TRIGGERED[6] */
  #define EGU_INTENSET_TRIGGERED6_Pos (6UL)          /*!< Position of TRIGGERED6 field.                                        */
  #define EGU_INTENSET_TRIGGERED6_Msk (0x1UL << EGU_INTENSET_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field.                */
  #define EGU_INTENSET_TRIGGERED6_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED6 field.                            */
  #define EGU_INTENSET_TRIGGERED6_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED6 field.                            */
  #define EGU_INTENSET_TRIGGERED6_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED7 @Bit 7 : Write '1' to enable interrupt for event TRIGGERED[7] */
  #define EGU_INTENSET_TRIGGERED7_Pos (7UL)          /*!< Position of TRIGGERED7 field.                                        */
  #define EGU_INTENSET_TRIGGERED7_Msk (0x1UL << EGU_INTENSET_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field.                */
  #define EGU_INTENSET_TRIGGERED7_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED7 field.                            */
  #define EGU_INTENSET_TRIGGERED7_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED7 field.                            */
  #define EGU_INTENSET_TRIGGERED7_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED8 @Bit 8 : Write '1' to enable interrupt for event TRIGGERED[8] */
  #define EGU_INTENSET_TRIGGERED8_Pos (8UL)          /*!< Position of TRIGGERED8 field.                                        */
  #define EGU_INTENSET_TRIGGERED8_Msk (0x1UL << EGU_INTENSET_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field.                */
  #define EGU_INTENSET_TRIGGERED8_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED8 field.                            */
  #define EGU_INTENSET_TRIGGERED8_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED8 field.                            */
  #define EGU_INTENSET_TRIGGERED8_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED9 @Bit 9 : Write '1' to enable interrupt for event TRIGGERED[9] */
  #define EGU_INTENSET_TRIGGERED9_Pos (9UL)          /*!< Position of TRIGGERED9 field.                                        */
  #define EGU_INTENSET_TRIGGERED9_Msk (0x1UL << EGU_INTENSET_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field.                */
  #define EGU_INTENSET_TRIGGERED9_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED9 field.                            */
  #define EGU_INTENSET_TRIGGERED9_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED9 field.                            */
  #define EGU_INTENSET_TRIGGERED9_Set (0x1UL)        /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED10 @Bit 10 : Write '1' to enable interrupt for event TRIGGERED[10] */
  #define EGU_INTENSET_TRIGGERED10_Pos (10UL)        /*!< Position of TRIGGERED10 field.                                       */
  #define EGU_INTENSET_TRIGGERED10_Msk (0x1UL << EGU_INTENSET_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field.             */
  #define EGU_INTENSET_TRIGGERED10_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED10 field.                           */
  #define EGU_INTENSET_TRIGGERED10_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED10 field.                           */
  #define EGU_INTENSET_TRIGGERED10_Set (0x1UL)       /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED11 @Bit 11 : Write '1' to enable interrupt for event TRIGGERED[11] */
  #define EGU_INTENSET_TRIGGERED11_Pos (11UL)        /*!< Position of TRIGGERED11 field.                                       */
  #define EGU_INTENSET_TRIGGERED11_Msk (0x1UL << EGU_INTENSET_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field.             */
  #define EGU_INTENSET_TRIGGERED11_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED11 field.                           */
  #define EGU_INTENSET_TRIGGERED11_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED11 field.                           */
  #define EGU_INTENSET_TRIGGERED11_Set (0x1UL)       /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED12 @Bit 12 : Write '1' to enable interrupt for event TRIGGERED[12] */
  #define EGU_INTENSET_TRIGGERED12_Pos (12UL)        /*!< Position of TRIGGERED12 field.                                       */
  #define EGU_INTENSET_TRIGGERED12_Msk (0x1UL << EGU_INTENSET_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field.             */
  #define EGU_INTENSET_TRIGGERED12_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED12 field.                           */
  #define EGU_INTENSET_TRIGGERED12_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED12 field.                           */
  #define EGU_INTENSET_TRIGGERED12_Set (0x1UL)       /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED12_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED12_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED13 @Bit 13 : Write '1' to enable interrupt for event TRIGGERED[13] */
  #define EGU_INTENSET_TRIGGERED13_Pos (13UL)        /*!< Position of TRIGGERED13 field.                                       */
  #define EGU_INTENSET_TRIGGERED13_Msk (0x1UL << EGU_INTENSET_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field.             */
  #define EGU_INTENSET_TRIGGERED13_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED13 field.                           */
  #define EGU_INTENSET_TRIGGERED13_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED13 field.                           */
  #define EGU_INTENSET_TRIGGERED13_Set (0x1UL)       /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED13_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED13_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED14 @Bit 14 : Write '1' to enable interrupt for event TRIGGERED[14] */
  #define EGU_INTENSET_TRIGGERED14_Pos (14UL)        /*!< Position of TRIGGERED14 field.                                       */
  #define EGU_INTENSET_TRIGGERED14_Msk (0x1UL << EGU_INTENSET_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field.             */
  #define EGU_INTENSET_TRIGGERED14_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED14 field.                           */
  #define EGU_INTENSET_TRIGGERED14_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED14 field.                           */
  #define EGU_INTENSET_TRIGGERED14_Set (0x1UL)       /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED14_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED14_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED15 @Bit 15 : Write '1' to enable interrupt for event TRIGGERED[15] */
  #define EGU_INTENSET_TRIGGERED15_Pos (15UL)        /*!< Position of TRIGGERED15 field.                                       */
  #define EGU_INTENSET_TRIGGERED15_Msk (0x1UL << EGU_INTENSET_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field.             */
  #define EGU_INTENSET_TRIGGERED15_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED15 field.                           */
  #define EGU_INTENSET_TRIGGERED15_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED15 field.                           */
  #define EGU_INTENSET_TRIGGERED15_Set (0x1UL)       /*!< Enable                                                               */
  #define EGU_INTENSET_TRIGGERED15_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENSET_TRIGGERED15_Enabled (0x1UL)   /*!< Read: Enabled                                                        */


/* EGU_INTENCLR: Disable interrupt */
  #define EGU_INTENCLR_ResetValue (0x00000000UL)     /*!< Reset value of INTENCLR register.                                    */

/* TRIGGERED0 @Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
  #define EGU_INTENCLR_TRIGGERED0_Pos (0UL)          /*!< Position of TRIGGERED0 field.                                        */
  #define EGU_INTENCLR_TRIGGERED0_Msk (0x1UL << EGU_INTENCLR_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field.                */
  #define EGU_INTENCLR_TRIGGERED0_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED0 field.                            */
  #define EGU_INTENCLR_TRIGGERED0_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED0 field.                            */
  #define EGU_INTENCLR_TRIGGERED0_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED1 @Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
  #define EGU_INTENCLR_TRIGGERED1_Pos (1UL)          /*!< Position of TRIGGERED1 field.                                        */
  #define EGU_INTENCLR_TRIGGERED1_Msk (0x1UL << EGU_INTENCLR_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field.                */
  #define EGU_INTENCLR_TRIGGERED1_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED1 field.                            */
  #define EGU_INTENCLR_TRIGGERED1_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED1 field.                            */
  #define EGU_INTENCLR_TRIGGERED1_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED2 @Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
  #define EGU_INTENCLR_TRIGGERED2_Pos (2UL)          /*!< Position of TRIGGERED2 field.                                        */
  #define EGU_INTENCLR_TRIGGERED2_Msk (0x1UL << EGU_INTENCLR_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field.                */
  #define EGU_INTENCLR_TRIGGERED2_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED2 field.                            */
  #define EGU_INTENCLR_TRIGGERED2_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED2 field.                            */
  #define EGU_INTENCLR_TRIGGERED2_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED3 @Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
  #define EGU_INTENCLR_TRIGGERED3_Pos (3UL)          /*!< Position of TRIGGERED3 field.                                        */
  #define EGU_INTENCLR_TRIGGERED3_Msk (0x1UL << EGU_INTENCLR_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field.                */
  #define EGU_INTENCLR_TRIGGERED3_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED3 field.                            */
  #define EGU_INTENCLR_TRIGGERED3_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED3 field.                            */
  #define EGU_INTENCLR_TRIGGERED3_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED4 @Bit 4 : Write '1' to disable interrupt for event TRIGGERED[4] */
  #define EGU_INTENCLR_TRIGGERED4_Pos (4UL)          /*!< Position of TRIGGERED4 field.                                        */
  #define EGU_INTENCLR_TRIGGERED4_Msk (0x1UL << EGU_INTENCLR_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field.                */
  #define EGU_INTENCLR_TRIGGERED4_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED4 field.                            */
  #define EGU_INTENCLR_TRIGGERED4_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED4 field.                            */
  #define EGU_INTENCLR_TRIGGERED4_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED5 @Bit 5 : Write '1' to disable interrupt for event TRIGGERED[5] */
  #define EGU_INTENCLR_TRIGGERED5_Pos (5UL)          /*!< Position of TRIGGERED5 field.                                        */
  #define EGU_INTENCLR_TRIGGERED5_Msk (0x1UL << EGU_INTENCLR_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field.                */
  #define EGU_INTENCLR_TRIGGERED5_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED5 field.                            */
  #define EGU_INTENCLR_TRIGGERED5_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED5 field.                            */
  #define EGU_INTENCLR_TRIGGERED5_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED6 @Bit 6 : Write '1' to disable interrupt for event TRIGGERED[6] */
  #define EGU_INTENCLR_TRIGGERED6_Pos (6UL)          /*!< Position of TRIGGERED6 field.                                        */
  #define EGU_INTENCLR_TRIGGERED6_Msk (0x1UL << EGU_INTENCLR_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field.                */
  #define EGU_INTENCLR_TRIGGERED6_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED6 field.                            */
  #define EGU_INTENCLR_TRIGGERED6_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED6 field.                            */
  #define EGU_INTENCLR_TRIGGERED6_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED7 @Bit 7 : Write '1' to disable interrupt for event TRIGGERED[7] */
  #define EGU_INTENCLR_TRIGGERED7_Pos (7UL)          /*!< Position of TRIGGERED7 field.                                        */
  #define EGU_INTENCLR_TRIGGERED7_Msk (0x1UL << EGU_INTENCLR_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field.                */
  #define EGU_INTENCLR_TRIGGERED7_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED7 field.                            */
  #define EGU_INTENCLR_TRIGGERED7_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED7 field.                            */
  #define EGU_INTENCLR_TRIGGERED7_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED8 @Bit 8 : Write '1' to disable interrupt for event TRIGGERED[8] */
  #define EGU_INTENCLR_TRIGGERED8_Pos (8UL)          /*!< Position of TRIGGERED8 field.                                        */
  #define EGU_INTENCLR_TRIGGERED8_Msk (0x1UL << EGU_INTENCLR_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field.                */
  #define EGU_INTENCLR_TRIGGERED8_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED8 field.                            */
  #define EGU_INTENCLR_TRIGGERED8_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED8 field.                            */
  #define EGU_INTENCLR_TRIGGERED8_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED9 @Bit 9 : Write '1' to disable interrupt for event TRIGGERED[9] */
  #define EGU_INTENCLR_TRIGGERED9_Pos (9UL)          /*!< Position of TRIGGERED9 field.                                        */
  #define EGU_INTENCLR_TRIGGERED9_Msk (0x1UL << EGU_INTENCLR_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field.                */
  #define EGU_INTENCLR_TRIGGERED9_Min (0x0UL)        /*!< Min enumerator value of TRIGGERED9 field.                            */
  #define EGU_INTENCLR_TRIGGERED9_Max (0x1UL)        /*!< Max enumerator value of TRIGGERED9 field.                            */
  #define EGU_INTENCLR_TRIGGERED9_Clear (0x1UL)      /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* TRIGGERED10 @Bit 10 : Write '1' to disable interrupt for event TRIGGERED[10] */
  #define EGU_INTENCLR_TRIGGERED10_Pos (10UL)        /*!< Position of TRIGGERED10 field.                                       */
  #define EGU_INTENCLR_TRIGGERED10_Msk (0x1UL << EGU_INTENCLR_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field.             */
  #define EGU_INTENCLR_TRIGGERED10_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED10 field.                           */
  #define EGU_INTENCLR_TRIGGERED10_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED10 field.                           */
  #define EGU_INTENCLR_TRIGGERED10_Clear (0x1UL)     /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED11 @Bit 11 : Write '1' to disable interrupt for event TRIGGERED[11] */
  #define EGU_INTENCLR_TRIGGERED11_Pos (11UL)        /*!< Position of TRIGGERED11 field.                                       */
  #define EGU_INTENCLR_TRIGGERED11_Msk (0x1UL << EGU_INTENCLR_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field.             */
  #define EGU_INTENCLR_TRIGGERED11_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED11 field.                           */
  #define EGU_INTENCLR_TRIGGERED11_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED11 field.                           */
  #define EGU_INTENCLR_TRIGGERED11_Clear (0x1UL)     /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED12 @Bit 12 : Write '1' to disable interrupt for event TRIGGERED[12] */
  #define EGU_INTENCLR_TRIGGERED12_Pos (12UL)        /*!< Position of TRIGGERED12 field.                                       */
  #define EGU_INTENCLR_TRIGGERED12_Msk (0x1UL << EGU_INTENCLR_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field.             */
  #define EGU_INTENCLR_TRIGGERED12_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED12 field.                           */
  #define EGU_INTENCLR_TRIGGERED12_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED12 field.                           */
  #define EGU_INTENCLR_TRIGGERED12_Clear (0x1UL)     /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED12_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED12_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED13 @Bit 13 : Write '1' to disable interrupt for event TRIGGERED[13] */
  #define EGU_INTENCLR_TRIGGERED13_Pos (13UL)        /*!< Position of TRIGGERED13 field.                                       */
  #define EGU_INTENCLR_TRIGGERED13_Msk (0x1UL << EGU_INTENCLR_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field.             */
  #define EGU_INTENCLR_TRIGGERED13_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED13 field.                           */
  #define EGU_INTENCLR_TRIGGERED13_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED13 field.                           */
  #define EGU_INTENCLR_TRIGGERED13_Clear (0x1UL)     /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED13_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED13_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED14 @Bit 14 : Write '1' to disable interrupt for event TRIGGERED[14] */
  #define EGU_INTENCLR_TRIGGERED14_Pos (14UL)        /*!< Position of TRIGGERED14 field.                                       */
  #define EGU_INTENCLR_TRIGGERED14_Msk (0x1UL << EGU_INTENCLR_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field.             */
  #define EGU_INTENCLR_TRIGGERED14_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED14 field.                           */
  #define EGU_INTENCLR_TRIGGERED14_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED14 field.                           */
  #define EGU_INTENCLR_TRIGGERED14_Clear (0x1UL)     /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED14_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED14_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* TRIGGERED15 @Bit 15 : Write '1' to disable interrupt for event TRIGGERED[15] */
  #define EGU_INTENCLR_TRIGGERED15_Pos (15UL)        /*!< Position of TRIGGERED15 field.                                       */
  #define EGU_INTENCLR_TRIGGERED15_Msk (0x1UL << EGU_INTENCLR_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field.             */
  #define EGU_INTENCLR_TRIGGERED15_Min (0x0UL)       /*!< Min enumerator value of TRIGGERED15 field.                           */
  #define EGU_INTENCLR_TRIGGERED15_Max (0x1UL)       /*!< Max enumerator value of TRIGGERED15 field.                           */
  #define EGU_INTENCLR_TRIGGERED15_Clear (0x1UL)     /*!< Disable                                                              */
  #define EGU_INTENCLR_TRIGGERED15_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define EGU_INTENCLR_TRIGGERED15_Enabled (0x1UL)   /*!< Read: Enabled                                                        */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           FICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct FICR_INFO ===================================================== */
/**
  * @brief INFO [FICR_INFO] Device info
  */
typedef struct {
  __IM  uint32_t  CONFIGID;                          /*!< (@ 0x00000000) Configuration identifier                              */
  __IM  uint32_t  DEVICEID[2];                       /*!< (@ 0x00000004) Device identifier                                     */
  __IM  uint32_t  UUID[4];                           /*!< (@ 0x0000000C) 128-bit Universally Unique IDentifier (UUID).         */
  __IM  uint32_t  PART;                              /*!< (@ 0x0000001C) Part code                                             */
  __IM  uint32_t  VARIANT;                           /*!< (@ 0x00000020) Part Variant, Hardware version and Production
                                                                         configuration*/
  __IM  uint32_t  PACKAGE;                           /*!< (@ 0x00000024) Package option                                        */
  __IM  uint32_t  RAM;                               /*!< (@ 0x00000028) RAM size (KB)                                         */
  __IM  uint32_t  RRAM;                              /*!< (@ 0x0000002C) RRAM size (KB)                                        */
} NRF_FICR_INFO_Type;                                /*!< Size = 48 (0x030)                                                    */

/* FICR_INFO_CONFIGID: Configuration identifier */
  #define FICR_INFO_CONFIGID_ResetValue (0xFFFFFFFFUL) /*!< Reset value of CONFIGID register.                                  */

/* HWID @Bits 0..15 : Identification number for the HW */
  #define FICR_INFO_CONFIGID_HWID_Pos (0UL)          /*!< Position of HWID field.                                              */
  #define FICR_INFO_CONFIGID_HWID_Msk (0xFFFFUL << FICR_INFO_CONFIGID_HWID_Pos) /*!< Bit mask of HWID field.                   */


/* FICR_INFO_DEVICEID: Device identifier */
  #define FICR_INFO_DEVICEID_MaxCount (2UL)          /*!< Max size of DEVICEID[2] array.                                       */
  #define FICR_INFO_DEVICEID_MaxIndex (1UL)          /*!< Max index of DEVICEID[2] array.                                      */
  #define FICR_INFO_DEVICEID_MinIndex (0UL)          /*!< Min index of DEVICEID[2] array.                                      */
  #define FICR_INFO_DEVICEID_ResetValue (0xFFFFFFFFUL) /*!< Reset value of DEVICEID[2] register.                               */

/* DEVICEID @Bits 0..31 : 64 bit unique device identifier */
  #define FICR_INFO_DEVICEID_DEVICEID_Pos (0UL)      /*!< Position of DEVICEID field.                                          */
  #define FICR_INFO_DEVICEID_DEVICEID_Msk (0xFFFFFFFFUL << FICR_INFO_DEVICEID_DEVICEID_Pos) /*!< Bit mask of DEVICEID field.   */


/* FICR_INFO_UUID: 128-bit Universally Unique IDentifier (UUID). */
  #define FICR_INFO_UUID_MaxCount (4UL)              /*!< Max size of UUID[4] array.                                           */
  #define FICR_INFO_UUID_MaxIndex (3UL)              /*!< Max index of UUID[4] array.                                          */
  #define FICR_INFO_UUID_MinIndex (0UL)              /*!< Min index of UUID[4] array.                                          */
  #define FICR_INFO_UUID_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of UUID[4] register.                                     */

/* UUID @Bits 0..31 : Device UUID [n]. */
  #define FICR_INFO_UUID_UUID_Pos (0UL)              /*!< Position of UUID field.                                              */
  #define FICR_INFO_UUID_UUID_Msk (0xFFFFFFFFUL << FICR_INFO_UUID_UUID_Pos) /*!< Bit mask of UUID field.                       */


/* FICR_INFO_PART: Part code */
  #define FICR_INFO_PART_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of PART register.                                        */

/* PART @Bits 0..31 : Part code */
  #define FICR_INFO_PART_PART_Pos (0UL)              /*!< Position of PART field.                                              */
  #define FICR_INFO_PART_PART_Msk (0xFFFFFFFFUL << FICR_INFO_PART_PART_Pos) /*!< Bit mask of PART field.                       */
  #define FICR_INFO_PART_PART_Min (0xFFFFFFFFUL)     /*!< Min enumerator value of PART field.                                  */
  #define FICR_INFO_PART_PART_Max (0xFFFFFFFFUL)     /*!< Max enumerator value of PART field.                                  */
  #define FICR_INFO_PART_PART_Unspecified (0xFFFFFFFFUL) /*!< Unspecified                                                      */


/* FICR_INFO_VARIANT: Part Variant, Hardware version and Production configuration */
  #define FICR_INFO_VARIANT_ResetValue (0xFFFFFFFFUL) /*!< Reset value of VARIANT register.                                    */

/* VARIANT @Bits 0..31 : Part Variant, Hardware version and Production configuration, encoded as ASCII */
  #define FICR_INFO_VARIANT_VARIANT_Pos (0UL)        /*!< Position of VARIANT field.                                           */
  #define FICR_INFO_VARIANT_VARIANT_Msk (0xFFFFFFFFUL << FICR_INFO_VARIANT_VARIANT_Pos) /*!< Bit mask of VARIANT field.        */
  #define FICR_INFO_VARIANT_VARIANT_Min (0xFFFFFFFFUL) /*!< Min enumerator value of VARIANT field.                             */
  #define FICR_INFO_VARIANT_VARIANT_Max (0xFFFFFFFFUL) /*!< Max enumerator value of VARIANT field.                             */
  #define FICR_INFO_VARIANT_VARIANT_Unspecified (0xFFFFFFFFUL) /*!< Unspecified                                                */


/* FICR_INFO_PACKAGE: Package option */
  #define FICR_INFO_PACKAGE_ResetValue (0xFFFFFFFFUL) /*!< Reset value of PACKAGE register.                                    */

/* PACKAGE @Bits 0..31 : Package option */
  #define FICR_INFO_PACKAGE_PACKAGE_Pos (0UL)        /*!< Position of PACKAGE field.                                           */
  #define FICR_INFO_PACKAGE_PACKAGE_Msk (0xFFFFFFFFUL << FICR_INFO_PACKAGE_PACKAGE_Pos) /*!< Bit mask of PACKAGE field.        */
  #define FICR_INFO_PACKAGE_PACKAGE_Min (0xFFFFFFFFUL) /*!< Min enumerator value of PACKAGE field.                             */
  #define FICR_INFO_PACKAGE_PACKAGE_Max (0xFFFFFFFFUL) /*!< Max enumerator value of PACKAGE field.                             */
  #define FICR_INFO_PACKAGE_PACKAGE_Unspecified (0xFFFFFFFFUL) /*!< Unspecified                                                */


/* FICR_INFO_RAM: RAM size (KB) */
  #define FICR_INFO_RAM_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of RAM register.                                         */

/* RAM @Bits 0..31 : RAM size (KB) */
  #define FICR_INFO_RAM_RAM_Pos (0UL)                /*!< Position of RAM field.                                               */
  #define FICR_INFO_RAM_RAM_Msk (0xFFFFFFFFUL << FICR_INFO_RAM_RAM_Pos) /*!< Bit mask of RAM field.                            */
  #define FICR_INFO_RAM_RAM_Min (0xFFFFFFFFUL)       /*!< Min enumerator value of RAM field.                                   */
  #define FICR_INFO_RAM_RAM_Max (0xFFFFFFFFUL)       /*!< Max enumerator value of RAM field.                                   */
  #define FICR_INFO_RAM_RAM_Unspecified (0xFFFFFFFFUL) /*!< Unspecified                                                        */


/* FICR_INFO_RRAM: RRAM size (KB) */
  #define FICR_INFO_RRAM_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of RRAM register.                                        */

/* RRAM @Bits 0..31 : RRAM size (KB) */
  #define FICR_INFO_RRAM_RRAM_Pos (0UL)              /*!< Position of RRAM field.                                              */
  #define FICR_INFO_RRAM_RRAM_Msk (0xFFFFFFFFUL << FICR_INFO_RRAM_RRAM_Pos) /*!< Bit mask of RRAM field.                       */
  #define FICR_INFO_RRAM_RRAM_Min (0xFFFFFFFFUL)     /*!< Min enumerator value of RRAM field.                                  */
  #define FICR_INFO_RRAM_RRAM_Max (0xFFFFFFFFUL)     /*!< Max enumerator value of RRAM field.                                  */
  #define FICR_INFO_RRAM_RRAM_Unspecified (0xFFFFFFFFUL) /*!< Unspecified                                                      */



/* =================================================== Struct FICR_TRIMCNF =================================================== */
/**
  * @brief TRIMCNF [FICR_TRIMCNF] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ADDR;                              /*!< (@ 0x00000000) Address of the register which will be written         */
  __IM  uint32_t  DATA;                              /*!< (@ 0x00000004) Data to be written into the register                  */
} NRF_FICR_TRIMCNF_Type;                             /*!< Size = 8 (0x008)                                                     */
  #define FICR_TRIMCNF_MaxCount (64UL)               /*!< Size of TRIMCNF[64] array.                                           */
  #define FICR_TRIMCNF_MaxIndex (63UL)               /*!< Max index of TRIMCNF[64] array.                                      */
  #define FICR_TRIMCNF_MinIndex (0UL)                /*!< Min index of TRIMCNF[64] array.                                      */

/* FICR_TRIMCNF_ADDR: Address of the register which will be written */
  #define FICR_TRIMCNF_ADDR_ResetValue (0xFFFFFFFFUL) /*!< Reset value of ADDR register.                                       */

/* Address @Bits 0..31 : Address */
  #define FICR_TRIMCNF_ADDR_Address_Pos (0UL)        /*!< Position of Address field.                                           */
  #define FICR_TRIMCNF_ADDR_Address_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_ADDR_Address_Pos) /*!< Bit mask of Address field.        */


/* FICR_TRIMCNF_DATA: Data to be written into the register */
  #define FICR_TRIMCNF_DATA_ResetValue (0xFFFFFFFFUL) /*!< Reset value of DATA register.                                       */

/* Data @Bits 0..31 : Data */
  #define FICR_TRIMCNF_DATA_Data_Pos (0UL)           /*!< Position of Data field.                                              */
  #define FICR_TRIMCNF_DATA_Data_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_DATA_Data_Pos) /*!< Bit mask of Data field.                 */



/* ===================================================== Struct FICR_NFC ===================================================== */
/**
  * @brief NFC [FICR_NFC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  TAGHEADER0;                        /*!< (@ 0x00000000) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER1;                        /*!< (@ 0x00000004) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER2;                        /*!< (@ 0x00000008) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
  __IM  uint32_t  TAGHEADER3;                        /*!< (@ 0x0000000C) Default header for NFC Tag. Software can read these
                                                                         values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and
                                                                         NFCID1_LAST.*/
} NRF_FICR_NFC_Type;                                 /*!< Size = 16 (0x010)                                                    */

/* FICR_NFC_TAGHEADER0: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER0_ResetValue (0xFFFFFF5FUL) /*!< Reset value of TAGHEADER0 register.                               */

/* MFGID @Bits 0..7 : Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F */
  #define FICR_NFC_TAGHEADER0_MFGID_Pos (0UL)        /*!< Position of MFGID field.                                             */
  #define FICR_NFC_TAGHEADER0_MFGID_Msk (0xFFUL << FICR_NFC_TAGHEADER0_MFGID_Pos) /*!< Bit mask of MFGID field.                */

/* UD1 @Bits 8..15 : Unique identifier byte 1 */
  #define FICR_NFC_TAGHEADER0_UD1_Pos (8UL)          /*!< Position of UD1 field.                                               */
  #define FICR_NFC_TAGHEADER0_UD1_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD1_Pos) /*!< Bit mask of UD1 field.                      */

/* UD2 @Bits 16..23 : Unique identifier byte 2 */
  #define FICR_NFC_TAGHEADER0_UD2_Pos (16UL)         /*!< Position of UD2 field.                                               */
  #define FICR_NFC_TAGHEADER0_UD2_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD2_Pos) /*!< Bit mask of UD2 field.                      */

/* UD3 @Bits 24..31 : Unique identifier byte 3 */
  #define FICR_NFC_TAGHEADER0_UD3_Pos (24UL)         /*!< Position of UD3 field.                                               */
  #define FICR_NFC_TAGHEADER0_UD3_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD3_Pos) /*!< Bit mask of UD3 field.                      */


/* FICR_NFC_TAGHEADER1: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER1_ResetValue (0xFFFFFFFFUL) /*!< Reset value of TAGHEADER1 register.                               */

/* UD4 @Bits 0..7 : Unique identifier byte 4 */
  #define FICR_NFC_TAGHEADER1_UD4_Pos (0UL)          /*!< Position of UD4 field.                                               */
  #define FICR_NFC_TAGHEADER1_UD4_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD4_Pos) /*!< Bit mask of UD4 field.                      */

/* UD5 @Bits 8..15 : Unique identifier byte 5 */
  #define FICR_NFC_TAGHEADER1_UD5_Pos (8UL)          /*!< Position of UD5 field.                                               */
  #define FICR_NFC_TAGHEADER1_UD5_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD5_Pos) /*!< Bit mask of UD5 field.                      */

/* UD6 @Bits 16..23 : Unique identifier byte 6 */
  #define FICR_NFC_TAGHEADER1_UD6_Pos (16UL)         /*!< Position of UD6 field.                                               */
  #define FICR_NFC_TAGHEADER1_UD6_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD6_Pos) /*!< Bit mask of UD6 field.                      */

/* UD7 @Bits 24..31 : Unique identifier byte 7 */
  #define FICR_NFC_TAGHEADER1_UD7_Pos (24UL)         /*!< Position of UD7 field.                                               */
  #define FICR_NFC_TAGHEADER1_UD7_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD7_Pos) /*!< Bit mask of UD7 field.                      */


/* FICR_NFC_TAGHEADER2: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER2_ResetValue (0xFFFFFFFFUL) /*!< Reset value of TAGHEADER2 register.                               */

/* UD8 @Bits 0..7 : Unique identifier byte 8 */
  #define FICR_NFC_TAGHEADER2_UD8_Pos (0UL)          /*!< Position of UD8 field.                                               */
  #define FICR_NFC_TAGHEADER2_UD8_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD8_Pos) /*!< Bit mask of UD8 field.                      */

/* UD9 @Bits 8..15 : Unique identifier byte 9 */
  #define FICR_NFC_TAGHEADER2_UD9_Pos (8UL)          /*!< Position of UD9 field.                                               */
  #define FICR_NFC_TAGHEADER2_UD9_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD9_Pos) /*!< Bit mask of UD9 field.                      */

/* UD10 @Bits 16..23 : Unique identifier byte 10 */
  #define FICR_NFC_TAGHEADER2_UD10_Pos (16UL)        /*!< Position of UD10 field.                                              */
  #define FICR_NFC_TAGHEADER2_UD10_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD10_Pos) /*!< Bit mask of UD10 field.                   */

/* UD11 @Bits 24..31 : Unique identifier byte 11 */
  #define FICR_NFC_TAGHEADER2_UD11_Pos (24UL)        /*!< Position of UD11 field.                                              */
  #define FICR_NFC_TAGHEADER2_UD11_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD11_Pos) /*!< Bit mask of UD11 field.                   */


/* FICR_NFC_TAGHEADER3: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST
                         and NFCID1_LAST. */

  #define FICR_NFC_TAGHEADER3_ResetValue (0xFFFFFFFFUL) /*!< Reset value of TAGHEADER3 register.                               */

/* UD12 @Bits 0..7 : Unique identifier byte 12 */
  #define FICR_NFC_TAGHEADER3_UD12_Pos (0UL)         /*!< Position of UD12 field.                                              */
  #define FICR_NFC_TAGHEADER3_UD12_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD12_Pos) /*!< Bit mask of UD12 field.                   */

/* UD13 @Bits 8..15 : Unique identifier byte 13 */
  #define FICR_NFC_TAGHEADER3_UD13_Pos (8UL)         /*!< Position of UD13 field.                                              */
  #define FICR_NFC_TAGHEADER3_UD13_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD13_Pos) /*!< Bit mask of UD13 field.                   */

/* UD14 @Bits 16..23 : Unique identifier byte 14 */
  #define FICR_NFC_TAGHEADER3_UD14_Pos (16UL)        /*!< Position of UD14 field.                                              */
  #define FICR_NFC_TAGHEADER3_UD14_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD14_Pos) /*!< Bit mask of UD14 field.                   */

/* UD15 @Bits 24..31 : Unique identifier byte 15 */
  #define FICR_NFC_TAGHEADER3_UD15_Pos (24UL)        /*!< Position of UD15 field.                                              */
  #define FICR_NFC_TAGHEADER3_UD15_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD15_Pos) /*!< Bit mask of UD15 field.                   */


/* ======================================================= Struct FICR ======================================================= */
/**
  * @brief Factory Information Configuration Registers
  */
  typedef struct {                                   /*!< FICR Structure                                                       */
    __IM uint32_t RESERVED[192];
    __IOM NRF_FICR_INFO_Type INFO;                   /*!< (@ 0x00000300) Device info                                           */
    __IM uint32_t RESERVED1[20];
    __IM uint32_t ER[4];                             /*!< (@ 0x00000380) Common encryption root key, word n                    */
    __IM uint32_t IR[4];                             /*!< (@ 0x00000390) Common identity root key, word n                      */
    __IM uint32_t DEVICEADDRTYPE;                    /*!< (@ 0x000003A0) Device address type                                   */
    __IM uint32_t DEVICEADDR[2];                     /*!< (@ 0x000003A4) Device address n                                      */
    __IM uint32_t RESERVED2[21];
    __IOM NRF_FICR_TRIMCNF_Type TRIMCNF[64];         /*!< (@ 0x00000400) (unspecified)                                         */
    __IOM NRF_FICR_NFC_Type NFC;                     /*!< (@ 0x00000600) (unspecified)                                         */
    __IM uint32_t RESERVED3[4];
    __IM uint32_t XOSC32MTRIM;                       /*!< (@ 0x00000620) XOSC32M capacitor selection trim values               */
    __IM uint32_t XOSC32KTRIM;                       /*!< (@ 0x00000624) XOSC32K capacitor selection trim values               */
  } NRF_FICR_Type;                                   /*!< Size = 1576 (0x628)                                                  */

/* FICR_ER: Common encryption root key, word n */
  #define FICR_ER_MaxCount (4UL)                     /*!< Max size of ER[4] array.                                             */
  #define FICR_ER_MaxIndex (3UL)                     /*!< Max index of ER[4] array.                                            */
  #define FICR_ER_MinIndex (0UL)                     /*!< Min index of ER[4] array.                                            */
  #define FICR_ER_ResetValue (0xFFFFFFFFUL)          /*!< Reset value of ER[4] register.                                       */

/* ER @Bits 0..31 : Encryption Root, word n */
  #define FICR_ER_ER_Pos (0UL)                       /*!< Position of ER field.                                                */
  #define FICR_ER_ER_Msk (0xFFFFFFFFUL << FICR_ER_ER_Pos) /*!< Bit mask of ER field.                                           */


/* FICR_IR: Common identity root key, word n */
  #define FICR_IR_MaxCount (4UL)                     /*!< Max size of IR[4] array.                                             */
  #define FICR_IR_MaxIndex (3UL)                     /*!< Max index of IR[4] array.                                            */
  #define FICR_IR_MinIndex (0UL)                     /*!< Min index of IR[4] array.                                            */
  #define FICR_IR_ResetValue (0xFFFFFFFFUL)          /*!< Reset value of IR[4] register.                                       */

/* IR @Bits 0..31 : Identity Root, word n */
  #define FICR_IR_IR_Pos (0UL)                       /*!< Position of IR field.                                                */
  #define FICR_IR_IR_Msk (0xFFFFFFFFUL << FICR_IR_IR_Pos) /*!< Bit mask of IR field.                                           */


/* FICR_DEVICEADDRTYPE: Device address type */
  #define FICR_DEVICEADDRTYPE_ResetValue (0xFFFFFFFFUL) /*!< Reset value of DEVICEADDRTYPE register.                           */

/* DEVICEADDRTYPE @Bit 0 : Device address type */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos (0UL) /*!< Position of DEVICEADDRTYPE field.                                  */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk (0x1UL << FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos) /*!< Bit mask of
                                                                            DEVICEADDRTYPE field.*/
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Min (0x0UL) /*!< Min enumerator value of DEVICEADDRTYPE field.                    */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Max (0x1UL) /*!< Max enumerator value of DEVICEADDRTYPE field.                    */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public (0x0UL) /*!< Public address                                                */
  #define FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random (0x1UL) /*!< Random address                                                */


/* FICR_DEVICEADDR: Device address n */
  #define FICR_DEVICEADDR_MaxCount (2UL)             /*!< Max size of DEVICEADDR[2] array.                                     */
  #define FICR_DEVICEADDR_MaxIndex (1UL)             /*!< Max index of DEVICEADDR[2] array.                                    */
  #define FICR_DEVICEADDR_MinIndex (0UL)             /*!< Min index of DEVICEADDR[2] array.                                    */
  #define FICR_DEVICEADDR_ResetValue (0xFFFFFFFFUL)  /*!< Reset value of DEVICEADDR[2] register.                               */

/* DEVICEADDR @Bits 0..31 : 48 bit device address */
  #define FICR_DEVICEADDR_DEVICEADDR_Pos (0UL)       /*!< Position of DEVICEADDR field.                                        */
  #define FICR_DEVICEADDR_DEVICEADDR_Msk (0xFFFFFFFFUL << FICR_DEVICEADDR_DEVICEADDR_Pos) /*!< Bit mask of DEVICEADDR field.   */


/* FICR_XOSC32MTRIM: XOSC32M capacitor selection trim values */
  #define FICR_XOSC32MTRIM_ResetValue (0xFFFFFFFFUL) /*!< Reset value of XOSC32MTRIM register.                                 */

/* SLOPE @Bits 0..8 : Slope trim factor on twos complement form */
  #define FICR_XOSC32MTRIM_SLOPE_Pos (0UL)           /*!< Position of SLOPE field.                                             */
  #define FICR_XOSC32MTRIM_SLOPE_Msk (0x1FFUL << FICR_XOSC32MTRIM_SLOPE_Pos) /*!< Bit mask of SLOPE field.                     */

/* OFFSET @Bits 16..25 : Offset trim factor on integer form */
  #define FICR_XOSC32MTRIM_OFFSET_Pos (16UL)         /*!< Position of OFFSET field.                                            */
  #define FICR_XOSC32MTRIM_OFFSET_Msk (0x3FFUL << FICR_XOSC32MTRIM_OFFSET_Pos) /*!< Bit mask of OFFSET field.                  */


/* FICR_XOSC32KTRIM: XOSC32K capacitor selection trim values */
  #define FICR_XOSC32KTRIM_ResetValue (0xFFFFFFFFUL) /*!< Reset value of XOSC32KTRIM register.                                 */

/* SLOPE @Bits 0..8 : Slope trim factor on twos complement form */
  #define FICR_XOSC32KTRIM_SLOPE_Pos (0UL)           /*!< Position of SLOPE field.                                             */
  #define FICR_XOSC32KTRIM_SLOPE_Msk (0x1FFUL << FICR_XOSC32KTRIM_SLOPE_Pos) /*!< Bit mask of SLOPE field.                     */

/* OFFSET @Bits 16..25 : Offset trim factor on integer form */
  #define FICR_XOSC32KTRIM_OFFSET_Pos (16UL)         /*!< Position of OFFSET field.                                            */
  #define FICR_XOSC32KTRIM_OFFSET_Msk (0x3FFUL << FICR_XOSC32KTRIM_OFFSET_Pos) /*!< Bit mask of OFFSET field.                  */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           GPIO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct GPIO ======================================================= */
/**
  * @brief GPIO Port
  */
  typedef struct {                                   /*!< GPIO Structure                                                       */
    __IOM uint32_t OUT;                              /*!< (@ 0x00000000) Write GPIO port                                       */
    __IOM uint32_t OUTSET;                           /*!< (@ 0x00000004) Set individual bits in GPIO port                      */
    __IOM uint32_t OUTCLR;                           /*!< (@ 0x00000008) Clear individual bits in GPIO port                    */
    __IM uint32_t IN;                                /*!< (@ 0x0000000C) Read GPIO port                                        */
    __IOM uint32_t DIR;                              /*!< (@ 0x00000010) Direction of GPIO pins                                */
    __IOM uint32_t DIRSET;                           /*!< (@ 0x00000014) DIR set register                                      */
    __IOM uint32_t DIRCLR;                           /*!< (@ 0x00000018) DIR clear register                                    */
    __IM uint32_t RESERVED;
    __IOM uint32_t LATCH;                            /*!< (@ 0x00000020) Latch register indicating what GPIO pins that have met
                                                                         the criteria set in the PIN_CNF[n].SENSE registers*/
    __IOM uint32_t DETECTMODE;                       /*!< (@ 0x00000024) Select between default DETECT signal behavior and
                                                                         LDETECT mode*/
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t PIN_CNF[32];                      /*!< (@ 0x00000080) Pin n configuration of GPIO pin                       */
  } NRF_GPIO_Type;                                   /*!< Size = 256 (0x100)                                                   */

/* GPIO_OUT: Write GPIO port */
  #define GPIO_OUT_ResetValue (0x00000000UL)         /*!< Reset value of OUT register.                                         */

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUT_PIN0_Pos (0UL)                    /*!< Position of PIN0 field.                                              */
  #define GPIO_OUT_PIN0_Msk (0x1UL << GPIO_OUT_PIN0_Pos) /*!< Bit mask of PIN0 field.                                          */
  #define GPIO_OUT_PIN0_Min (0x0UL)                  /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_OUT_PIN0_Max (0x1UL)                  /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_OUT_PIN0_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN0_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUT_PIN1_Pos (1UL)                    /*!< Position of PIN1 field.                                              */
  #define GPIO_OUT_PIN1_Msk (0x1UL << GPIO_OUT_PIN1_Pos) /*!< Bit mask of PIN1 field.                                          */
  #define GPIO_OUT_PIN1_Min (0x0UL)                  /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_OUT_PIN1_Max (0x1UL)                  /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_OUT_PIN1_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN1_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUT_PIN2_Pos (2UL)                    /*!< Position of PIN2 field.                                              */
  #define GPIO_OUT_PIN2_Msk (0x1UL << GPIO_OUT_PIN2_Pos) /*!< Bit mask of PIN2 field.                                          */
  #define GPIO_OUT_PIN2_Min (0x0UL)                  /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_OUT_PIN2_Max (0x1UL)                  /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_OUT_PIN2_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN2_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUT_PIN3_Pos (3UL)                    /*!< Position of PIN3 field.                                              */
  #define GPIO_OUT_PIN3_Msk (0x1UL << GPIO_OUT_PIN3_Pos) /*!< Bit mask of PIN3 field.                                          */
  #define GPIO_OUT_PIN3_Min (0x0UL)                  /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_OUT_PIN3_Max (0x1UL)                  /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_OUT_PIN3_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN3_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUT_PIN4_Pos (4UL)                    /*!< Position of PIN4 field.                                              */
  #define GPIO_OUT_PIN4_Msk (0x1UL << GPIO_OUT_PIN4_Pos) /*!< Bit mask of PIN4 field.                                          */
  #define GPIO_OUT_PIN4_Min (0x0UL)                  /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_OUT_PIN4_Max (0x1UL)                  /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_OUT_PIN4_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN4_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUT_PIN5_Pos (5UL)                    /*!< Position of PIN5 field.                                              */
  #define GPIO_OUT_PIN5_Msk (0x1UL << GPIO_OUT_PIN5_Pos) /*!< Bit mask of PIN5 field.                                          */
  #define GPIO_OUT_PIN5_Min (0x0UL)                  /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_OUT_PIN5_Max (0x1UL)                  /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_OUT_PIN5_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN5_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUT_PIN6_Pos (6UL)                    /*!< Position of PIN6 field.                                              */
  #define GPIO_OUT_PIN6_Msk (0x1UL << GPIO_OUT_PIN6_Pos) /*!< Bit mask of PIN6 field.                                          */
  #define GPIO_OUT_PIN6_Min (0x0UL)                  /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_OUT_PIN6_Max (0x1UL)                  /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_OUT_PIN6_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN6_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUT_PIN7_Pos (7UL)                    /*!< Position of PIN7 field.                                              */
  #define GPIO_OUT_PIN7_Msk (0x1UL << GPIO_OUT_PIN7_Pos) /*!< Bit mask of PIN7 field.                                          */
  #define GPIO_OUT_PIN7_Min (0x0UL)                  /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_OUT_PIN7_Max (0x1UL)                  /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_OUT_PIN7_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN7_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUT_PIN8_Pos (8UL)                    /*!< Position of PIN8 field.                                              */
  #define GPIO_OUT_PIN8_Msk (0x1UL << GPIO_OUT_PIN8_Pos) /*!< Bit mask of PIN8 field.                                          */
  #define GPIO_OUT_PIN8_Min (0x0UL)                  /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_OUT_PIN8_Max (0x1UL)                  /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_OUT_PIN8_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN8_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUT_PIN9_Pos (9UL)                    /*!< Position of PIN9 field.                                              */
  #define GPIO_OUT_PIN9_Msk (0x1UL << GPIO_OUT_PIN9_Pos) /*!< Bit mask of PIN9 field.                                          */
  #define GPIO_OUT_PIN9_Min (0x0UL)                  /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_OUT_PIN9_Max (0x1UL)                  /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_OUT_PIN9_Low (0x0UL)                  /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN9_High (0x1UL)                 /*!< Pin driver is high                                                   */

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUT_PIN10_Pos (10UL)                  /*!< Position of PIN10 field.                                             */
  #define GPIO_OUT_PIN10_Msk (0x1UL << GPIO_OUT_PIN10_Pos) /*!< Bit mask of PIN10 field.                                       */
  #define GPIO_OUT_PIN10_Min (0x0UL)                 /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_OUT_PIN10_Max (0x1UL)                 /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_OUT_PIN10_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN10_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUT_PIN11_Pos (11UL)                  /*!< Position of PIN11 field.                                             */
  #define GPIO_OUT_PIN11_Msk (0x1UL << GPIO_OUT_PIN11_Pos) /*!< Bit mask of PIN11 field.                                       */
  #define GPIO_OUT_PIN11_Min (0x0UL)                 /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_OUT_PIN11_Max (0x1UL)                 /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_OUT_PIN11_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN11_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUT_PIN12_Pos (12UL)                  /*!< Position of PIN12 field.                                             */
  #define GPIO_OUT_PIN12_Msk (0x1UL << GPIO_OUT_PIN12_Pos) /*!< Bit mask of PIN12 field.                                       */
  #define GPIO_OUT_PIN12_Min (0x0UL)                 /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_OUT_PIN12_Max (0x1UL)                 /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_OUT_PIN12_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN12_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUT_PIN13_Pos (13UL)                  /*!< Position of PIN13 field.                                             */
  #define GPIO_OUT_PIN13_Msk (0x1UL << GPIO_OUT_PIN13_Pos) /*!< Bit mask of PIN13 field.                                       */
  #define GPIO_OUT_PIN13_Min (0x0UL)                 /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_OUT_PIN13_Max (0x1UL)                 /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_OUT_PIN13_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN13_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUT_PIN14_Pos (14UL)                  /*!< Position of PIN14 field.                                             */
  #define GPIO_OUT_PIN14_Msk (0x1UL << GPIO_OUT_PIN14_Pos) /*!< Bit mask of PIN14 field.                                       */
  #define GPIO_OUT_PIN14_Min (0x0UL)                 /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_OUT_PIN14_Max (0x1UL)                 /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_OUT_PIN14_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN14_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUT_PIN15_Pos (15UL)                  /*!< Position of PIN15 field.                                             */
  #define GPIO_OUT_PIN15_Msk (0x1UL << GPIO_OUT_PIN15_Pos) /*!< Bit mask of PIN15 field.                                       */
  #define GPIO_OUT_PIN15_Min (0x0UL)                 /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_OUT_PIN15_Max (0x1UL)                 /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_OUT_PIN15_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN15_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUT_PIN16_Pos (16UL)                  /*!< Position of PIN16 field.                                             */
  #define GPIO_OUT_PIN16_Msk (0x1UL << GPIO_OUT_PIN16_Pos) /*!< Bit mask of PIN16 field.                                       */
  #define GPIO_OUT_PIN16_Min (0x0UL)                 /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_OUT_PIN16_Max (0x1UL)                 /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_OUT_PIN16_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN16_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUT_PIN17_Pos (17UL)                  /*!< Position of PIN17 field.                                             */
  #define GPIO_OUT_PIN17_Msk (0x1UL << GPIO_OUT_PIN17_Pos) /*!< Bit mask of PIN17 field.                                       */
  #define GPIO_OUT_PIN17_Min (0x0UL)                 /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_OUT_PIN17_Max (0x1UL)                 /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_OUT_PIN17_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN17_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUT_PIN18_Pos (18UL)                  /*!< Position of PIN18 field.                                             */
  #define GPIO_OUT_PIN18_Msk (0x1UL << GPIO_OUT_PIN18_Pos) /*!< Bit mask of PIN18 field.                                       */
  #define GPIO_OUT_PIN18_Min (0x0UL)                 /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_OUT_PIN18_Max (0x1UL)                 /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_OUT_PIN18_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN18_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUT_PIN19_Pos (19UL)                  /*!< Position of PIN19 field.                                             */
  #define GPIO_OUT_PIN19_Msk (0x1UL << GPIO_OUT_PIN19_Pos) /*!< Bit mask of PIN19 field.                                       */
  #define GPIO_OUT_PIN19_Min (0x0UL)                 /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_OUT_PIN19_Max (0x1UL)                 /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_OUT_PIN19_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN19_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUT_PIN20_Pos (20UL)                  /*!< Position of PIN20 field.                                             */
  #define GPIO_OUT_PIN20_Msk (0x1UL << GPIO_OUT_PIN20_Pos) /*!< Bit mask of PIN20 field.                                       */
  #define GPIO_OUT_PIN20_Min (0x0UL)                 /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_OUT_PIN20_Max (0x1UL)                 /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_OUT_PIN20_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN20_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUT_PIN21_Pos (21UL)                  /*!< Position of PIN21 field.                                             */
  #define GPIO_OUT_PIN21_Msk (0x1UL << GPIO_OUT_PIN21_Pos) /*!< Bit mask of PIN21 field.                                       */
  #define GPIO_OUT_PIN21_Min (0x0UL)                 /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_OUT_PIN21_Max (0x1UL)                 /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_OUT_PIN21_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN21_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUT_PIN22_Pos (22UL)                  /*!< Position of PIN22 field.                                             */
  #define GPIO_OUT_PIN22_Msk (0x1UL << GPIO_OUT_PIN22_Pos) /*!< Bit mask of PIN22 field.                                       */
  #define GPIO_OUT_PIN22_Min (0x0UL)                 /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_OUT_PIN22_Max (0x1UL)                 /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_OUT_PIN22_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN22_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUT_PIN23_Pos (23UL)                  /*!< Position of PIN23 field.                                             */
  #define GPIO_OUT_PIN23_Msk (0x1UL << GPIO_OUT_PIN23_Pos) /*!< Bit mask of PIN23 field.                                       */
  #define GPIO_OUT_PIN23_Min (0x0UL)                 /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_OUT_PIN23_Max (0x1UL)                 /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_OUT_PIN23_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN23_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUT_PIN24_Pos (24UL)                  /*!< Position of PIN24 field.                                             */
  #define GPIO_OUT_PIN24_Msk (0x1UL << GPIO_OUT_PIN24_Pos) /*!< Bit mask of PIN24 field.                                       */
  #define GPIO_OUT_PIN24_Min (0x0UL)                 /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_OUT_PIN24_Max (0x1UL)                 /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_OUT_PIN24_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN24_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUT_PIN25_Pos (25UL)                  /*!< Position of PIN25 field.                                             */
  #define GPIO_OUT_PIN25_Msk (0x1UL << GPIO_OUT_PIN25_Pos) /*!< Bit mask of PIN25 field.                                       */
  #define GPIO_OUT_PIN25_Min (0x0UL)                 /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_OUT_PIN25_Max (0x1UL)                 /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_OUT_PIN25_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN25_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUT_PIN26_Pos (26UL)                  /*!< Position of PIN26 field.                                             */
  #define GPIO_OUT_PIN26_Msk (0x1UL << GPIO_OUT_PIN26_Pos) /*!< Bit mask of PIN26 field.                                       */
  #define GPIO_OUT_PIN26_Min (0x0UL)                 /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_OUT_PIN26_Max (0x1UL)                 /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_OUT_PIN26_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN26_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUT_PIN27_Pos (27UL)                  /*!< Position of PIN27 field.                                             */
  #define GPIO_OUT_PIN27_Msk (0x1UL << GPIO_OUT_PIN27_Pos) /*!< Bit mask of PIN27 field.                                       */
  #define GPIO_OUT_PIN27_Min (0x0UL)                 /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_OUT_PIN27_Max (0x1UL)                 /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_OUT_PIN27_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN27_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUT_PIN28_Pos (28UL)                  /*!< Position of PIN28 field.                                             */
  #define GPIO_OUT_PIN28_Msk (0x1UL << GPIO_OUT_PIN28_Pos) /*!< Bit mask of PIN28 field.                                       */
  #define GPIO_OUT_PIN28_Min (0x0UL)                 /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_OUT_PIN28_Max (0x1UL)                 /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_OUT_PIN28_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN28_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUT_PIN29_Pos (29UL)                  /*!< Position of PIN29 field.                                             */
  #define GPIO_OUT_PIN29_Msk (0x1UL << GPIO_OUT_PIN29_Pos) /*!< Bit mask of PIN29 field.                                       */
  #define GPIO_OUT_PIN29_Min (0x0UL)                 /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_OUT_PIN29_Max (0x1UL)                 /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_OUT_PIN29_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN29_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUT_PIN30_Pos (30UL)                  /*!< Position of PIN30 field.                                             */
  #define GPIO_OUT_PIN30_Msk (0x1UL << GPIO_OUT_PIN30_Pos) /*!< Bit mask of PIN30 field.                                       */
  #define GPIO_OUT_PIN30_Min (0x0UL)                 /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_OUT_PIN30_Max (0x1UL)                 /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_OUT_PIN30_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN30_High (0x1UL)                /*!< Pin driver is high                                                   */

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUT_PIN31_Pos (31UL)                  /*!< Position of PIN31 field.                                             */
  #define GPIO_OUT_PIN31_Msk (0x1UL << GPIO_OUT_PIN31_Pos) /*!< Bit mask of PIN31 field.                                       */
  #define GPIO_OUT_PIN31_Min (0x0UL)                 /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_OUT_PIN31_Max (0x1UL)                 /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_OUT_PIN31_Low (0x0UL)                 /*!< Pin driver is low                                                    */
  #define GPIO_OUT_PIN31_High (0x1UL)                /*!< Pin driver is high                                                   */


/* GPIO_OUTSET: Set individual bits in GPIO port */
  #define GPIO_OUTSET_ResetValue (0x00000000UL)      /*!< Reset value of OUTSET register.                                      */

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUTSET_PIN0_Pos (0UL)                 /*!< Position of PIN0 field.                                              */
  #define GPIO_OUTSET_PIN0_Msk (0x1UL << GPIO_OUTSET_PIN0_Pos) /*!< Bit mask of PIN0 field.                                    */
  #define GPIO_OUTSET_PIN0_Min (0x0UL)               /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_OUTSET_PIN0_Max (0x1UL)               /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_OUTSET_PIN0_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN0_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN0_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUTSET_PIN1_Pos (1UL)                 /*!< Position of PIN1 field.                                              */
  #define GPIO_OUTSET_PIN1_Msk (0x1UL << GPIO_OUTSET_PIN1_Pos) /*!< Bit mask of PIN1 field.                                    */
  #define GPIO_OUTSET_PIN1_Min (0x0UL)               /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_OUTSET_PIN1_Max (0x1UL)               /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_OUTSET_PIN1_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN1_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN1_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUTSET_PIN2_Pos (2UL)                 /*!< Position of PIN2 field.                                              */
  #define GPIO_OUTSET_PIN2_Msk (0x1UL << GPIO_OUTSET_PIN2_Pos) /*!< Bit mask of PIN2 field.                                    */
  #define GPIO_OUTSET_PIN2_Min (0x0UL)               /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_OUTSET_PIN2_Max (0x1UL)               /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_OUTSET_PIN2_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN2_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN2_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUTSET_PIN3_Pos (3UL)                 /*!< Position of PIN3 field.                                              */
  #define GPIO_OUTSET_PIN3_Msk (0x1UL << GPIO_OUTSET_PIN3_Pos) /*!< Bit mask of PIN3 field.                                    */
  #define GPIO_OUTSET_PIN3_Min (0x0UL)               /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_OUTSET_PIN3_Max (0x1UL)               /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_OUTSET_PIN3_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN3_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN3_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUTSET_PIN4_Pos (4UL)                 /*!< Position of PIN4 field.                                              */
  #define GPIO_OUTSET_PIN4_Msk (0x1UL << GPIO_OUTSET_PIN4_Pos) /*!< Bit mask of PIN4 field.                                    */
  #define GPIO_OUTSET_PIN4_Min (0x0UL)               /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_OUTSET_PIN4_Max (0x1UL)               /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_OUTSET_PIN4_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN4_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN4_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUTSET_PIN5_Pos (5UL)                 /*!< Position of PIN5 field.                                              */
  #define GPIO_OUTSET_PIN5_Msk (0x1UL << GPIO_OUTSET_PIN5_Pos) /*!< Bit mask of PIN5 field.                                    */
  #define GPIO_OUTSET_PIN5_Min (0x0UL)               /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_OUTSET_PIN5_Max (0x1UL)               /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_OUTSET_PIN5_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN5_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN5_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUTSET_PIN6_Pos (6UL)                 /*!< Position of PIN6 field.                                              */
  #define GPIO_OUTSET_PIN6_Msk (0x1UL << GPIO_OUTSET_PIN6_Pos) /*!< Bit mask of PIN6 field.                                    */
  #define GPIO_OUTSET_PIN6_Min (0x0UL)               /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_OUTSET_PIN6_Max (0x1UL)               /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_OUTSET_PIN6_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN6_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN6_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUTSET_PIN7_Pos (7UL)                 /*!< Position of PIN7 field.                                              */
  #define GPIO_OUTSET_PIN7_Msk (0x1UL << GPIO_OUTSET_PIN7_Pos) /*!< Bit mask of PIN7 field.                                    */
  #define GPIO_OUTSET_PIN7_Min (0x0UL)               /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_OUTSET_PIN7_Max (0x1UL)               /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_OUTSET_PIN7_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN7_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN7_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUTSET_PIN8_Pos (8UL)                 /*!< Position of PIN8 field.                                              */
  #define GPIO_OUTSET_PIN8_Msk (0x1UL << GPIO_OUTSET_PIN8_Pos) /*!< Bit mask of PIN8 field.                                    */
  #define GPIO_OUTSET_PIN8_Min (0x0UL)               /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_OUTSET_PIN8_Max (0x1UL)               /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_OUTSET_PIN8_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN8_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN8_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUTSET_PIN9_Pos (9UL)                 /*!< Position of PIN9 field.                                              */
  #define GPIO_OUTSET_PIN9_Msk (0x1UL << GPIO_OUTSET_PIN9_Pos) /*!< Bit mask of PIN9 field.                                    */
  #define GPIO_OUTSET_PIN9_Min (0x0UL)               /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_OUTSET_PIN9_Max (0x1UL)               /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_OUTSET_PIN9_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN9_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN9_Set (0x1UL)               /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUTSET_PIN10_Pos (10UL)               /*!< Position of PIN10 field.                                             */
  #define GPIO_OUTSET_PIN10_Msk (0x1UL << GPIO_OUTSET_PIN10_Pos) /*!< Bit mask of PIN10 field.                                 */
  #define GPIO_OUTSET_PIN10_Min (0x0UL)              /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_OUTSET_PIN10_Max (0x1UL)              /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_OUTSET_PIN10_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN10_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN10_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUTSET_PIN11_Pos (11UL)               /*!< Position of PIN11 field.                                             */
  #define GPIO_OUTSET_PIN11_Msk (0x1UL << GPIO_OUTSET_PIN11_Pos) /*!< Bit mask of PIN11 field.                                 */
  #define GPIO_OUTSET_PIN11_Min (0x0UL)              /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_OUTSET_PIN11_Max (0x1UL)              /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_OUTSET_PIN11_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN11_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN11_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUTSET_PIN12_Pos (12UL)               /*!< Position of PIN12 field.                                             */
  #define GPIO_OUTSET_PIN12_Msk (0x1UL << GPIO_OUTSET_PIN12_Pos) /*!< Bit mask of PIN12 field.                                 */
  #define GPIO_OUTSET_PIN12_Min (0x0UL)              /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_OUTSET_PIN12_Max (0x1UL)              /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_OUTSET_PIN12_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN12_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN12_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUTSET_PIN13_Pos (13UL)               /*!< Position of PIN13 field.                                             */
  #define GPIO_OUTSET_PIN13_Msk (0x1UL << GPIO_OUTSET_PIN13_Pos) /*!< Bit mask of PIN13 field.                                 */
  #define GPIO_OUTSET_PIN13_Min (0x0UL)              /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_OUTSET_PIN13_Max (0x1UL)              /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_OUTSET_PIN13_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN13_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN13_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUTSET_PIN14_Pos (14UL)               /*!< Position of PIN14 field.                                             */
  #define GPIO_OUTSET_PIN14_Msk (0x1UL << GPIO_OUTSET_PIN14_Pos) /*!< Bit mask of PIN14 field.                                 */
  #define GPIO_OUTSET_PIN14_Min (0x0UL)              /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_OUTSET_PIN14_Max (0x1UL)              /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_OUTSET_PIN14_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN14_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN14_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUTSET_PIN15_Pos (15UL)               /*!< Position of PIN15 field.                                             */
  #define GPIO_OUTSET_PIN15_Msk (0x1UL << GPIO_OUTSET_PIN15_Pos) /*!< Bit mask of PIN15 field.                                 */
  #define GPIO_OUTSET_PIN15_Min (0x0UL)              /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_OUTSET_PIN15_Max (0x1UL)              /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_OUTSET_PIN15_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN15_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN15_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUTSET_PIN16_Pos (16UL)               /*!< Position of PIN16 field.                                             */
  #define GPIO_OUTSET_PIN16_Msk (0x1UL << GPIO_OUTSET_PIN16_Pos) /*!< Bit mask of PIN16 field.                                 */
  #define GPIO_OUTSET_PIN16_Min (0x0UL)              /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_OUTSET_PIN16_Max (0x1UL)              /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_OUTSET_PIN16_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN16_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN16_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUTSET_PIN17_Pos (17UL)               /*!< Position of PIN17 field.                                             */
  #define GPIO_OUTSET_PIN17_Msk (0x1UL << GPIO_OUTSET_PIN17_Pos) /*!< Bit mask of PIN17 field.                                 */
  #define GPIO_OUTSET_PIN17_Min (0x0UL)              /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_OUTSET_PIN17_Max (0x1UL)              /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_OUTSET_PIN17_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN17_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN17_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUTSET_PIN18_Pos (18UL)               /*!< Position of PIN18 field.                                             */
  #define GPIO_OUTSET_PIN18_Msk (0x1UL << GPIO_OUTSET_PIN18_Pos) /*!< Bit mask of PIN18 field.                                 */
  #define GPIO_OUTSET_PIN18_Min (0x0UL)              /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_OUTSET_PIN18_Max (0x1UL)              /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_OUTSET_PIN18_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN18_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN18_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUTSET_PIN19_Pos (19UL)               /*!< Position of PIN19 field.                                             */
  #define GPIO_OUTSET_PIN19_Msk (0x1UL << GPIO_OUTSET_PIN19_Pos) /*!< Bit mask of PIN19 field.                                 */
  #define GPIO_OUTSET_PIN19_Min (0x0UL)              /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_OUTSET_PIN19_Max (0x1UL)              /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_OUTSET_PIN19_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN19_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN19_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUTSET_PIN20_Pos (20UL)               /*!< Position of PIN20 field.                                             */
  #define GPIO_OUTSET_PIN20_Msk (0x1UL << GPIO_OUTSET_PIN20_Pos) /*!< Bit mask of PIN20 field.                                 */
  #define GPIO_OUTSET_PIN20_Min (0x0UL)              /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_OUTSET_PIN20_Max (0x1UL)              /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_OUTSET_PIN20_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN20_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN20_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUTSET_PIN21_Pos (21UL)               /*!< Position of PIN21 field.                                             */
  #define GPIO_OUTSET_PIN21_Msk (0x1UL << GPIO_OUTSET_PIN21_Pos) /*!< Bit mask of PIN21 field.                                 */
  #define GPIO_OUTSET_PIN21_Min (0x0UL)              /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_OUTSET_PIN21_Max (0x1UL)              /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_OUTSET_PIN21_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN21_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN21_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUTSET_PIN22_Pos (22UL)               /*!< Position of PIN22 field.                                             */
  #define GPIO_OUTSET_PIN22_Msk (0x1UL << GPIO_OUTSET_PIN22_Pos) /*!< Bit mask of PIN22 field.                                 */
  #define GPIO_OUTSET_PIN22_Min (0x0UL)              /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_OUTSET_PIN22_Max (0x1UL)              /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_OUTSET_PIN22_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN22_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN22_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUTSET_PIN23_Pos (23UL)               /*!< Position of PIN23 field.                                             */
  #define GPIO_OUTSET_PIN23_Msk (0x1UL << GPIO_OUTSET_PIN23_Pos) /*!< Bit mask of PIN23 field.                                 */
  #define GPIO_OUTSET_PIN23_Min (0x0UL)              /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_OUTSET_PIN23_Max (0x1UL)              /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_OUTSET_PIN23_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN23_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN23_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUTSET_PIN24_Pos (24UL)               /*!< Position of PIN24 field.                                             */
  #define GPIO_OUTSET_PIN24_Msk (0x1UL << GPIO_OUTSET_PIN24_Pos) /*!< Bit mask of PIN24 field.                                 */
  #define GPIO_OUTSET_PIN24_Min (0x0UL)              /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_OUTSET_PIN24_Max (0x1UL)              /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_OUTSET_PIN24_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN24_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN24_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUTSET_PIN25_Pos (25UL)               /*!< Position of PIN25 field.                                             */
  #define GPIO_OUTSET_PIN25_Msk (0x1UL << GPIO_OUTSET_PIN25_Pos) /*!< Bit mask of PIN25 field.                                 */
  #define GPIO_OUTSET_PIN25_Min (0x0UL)              /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_OUTSET_PIN25_Max (0x1UL)              /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_OUTSET_PIN25_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN25_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN25_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUTSET_PIN26_Pos (26UL)               /*!< Position of PIN26 field.                                             */
  #define GPIO_OUTSET_PIN26_Msk (0x1UL << GPIO_OUTSET_PIN26_Pos) /*!< Bit mask of PIN26 field.                                 */
  #define GPIO_OUTSET_PIN26_Min (0x0UL)              /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_OUTSET_PIN26_Max (0x1UL)              /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_OUTSET_PIN26_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN26_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN26_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUTSET_PIN27_Pos (27UL)               /*!< Position of PIN27 field.                                             */
  #define GPIO_OUTSET_PIN27_Msk (0x1UL << GPIO_OUTSET_PIN27_Pos) /*!< Bit mask of PIN27 field.                                 */
  #define GPIO_OUTSET_PIN27_Min (0x0UL)              /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_OUTSET_PIN27_Max (0x1UL)              /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_OUTSET_PIN27_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN27_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN27_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUTSET_PIN28_Pos (28UL)               /*!< Position of PIN28 field.                                             */
  #define GPIO_OUTSET_PIN28_Msk (0x1UL << GPIO_OUTSET_PIN28_Pos) /*!< Bit mask of PIN28 field.                                 */
  #define GPIO_OUTSET_PIN28_Min (0x0UL)              /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_OUTSET_PIN28_Max (0x1UL)              /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_OUTSET_PIN28_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN28_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN28_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUTSET_PIN29_Pos (29UL)               /*!< Position of PIN29 field.                                             */
  #define GPIO_OUTSET_PIN29_Msk (0x1UL << GPIO_OUTSET_PIN29_Pos) /*!< Bit mask of PIN29 field.                                 */
  #define GPIO_OUTSET_PIN29_Min (0x0UL)              /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_OUTSET_PIN29_Max (0x1UL)              /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_OUTSET_PIN29_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN29_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN29_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUTSET_PIN30_Pos (30UL)               /*!< Position of PIN30 field.                                             */
  #define GPIO_OUTSET_PIN30_Msk (0x1UL << GPIO_OUTSET_PIN30_Pos) /*!< Bit mask of PIN30 field.                                 */
  #define GPIO_OUTSET_PIN30_Min (0x0UL)              /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_OUTSET_PIN30_Max (0x1UL)              /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_OUTSET_PIN30_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN30_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN30_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUTSET_PIN31_Pos (31UL)               /*!< Position of PIN31 field.                                             */
  #define GPIO_OUTSET_PIN31_Msk (0x1UL << GPIO_OUTSET_PIN31_Pos) /*!< Bit mask of PIN31 field.                                 */
  #define GPIO_OUTSET_PIN31_Min (0x0UL)              /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_OUTSET_PIN31_Max (0x1UL)              /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_OUTSET_PIN31_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTSET_PIN31_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTSET_PIN31_Set (0x1UL)              /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect  */


/* GPIO_OUTCLR: Clear individual bits in GPIO port */
  #define GPIO_OUTCLR_ResetValue (0x00000000UL)      /*!< Reset value of OUTCLR register.                                      */

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_OUTCLR_PIN0_Pos (0UL)                 /*!< Position of PIN0 field.                                              */
  #define GPIO_OUTCLR_PIN0_Msk (0x1UL << GPIO_OUTCLR_PIN0_Pos) /*!< Bit mask of PIN0 field.                                    */
  #define GPIO_OUTCLR_PIN0_Min (0x0UL)               /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_OUTCLR_PIN0_Max (0x1UL)               /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_OUTCLR_PIN0_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN0_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN0_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_OUTCLR_PIN1_Pos (1UL)                 /*!< Position of PIN1 field.                                              */
  #define GPIO_OUTCLR_PIN1_Msk (0x1UL << GPIO_OUTCLR_PIN1_Pos) /*!< Bit mask of PIN1 field.                                    */
  #define GPIO_OUTCLR_PIN1_Min (0x0UL)               /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_OUTCLR_PIN1_Max (0x1UL)               /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_OUTCLR_PIN1_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN1_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN1_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_OUTCLR_PIN2_Pos (2UL)                 /*!< Position of PIN2 field.                                              */
  #define GPIO_OUTCLR_PIN2_Msk (0x1UL << GPIO_OUTCLR_PIN2_Pos) /*!< Bit mask of PIN2 field.                                    */
  #define GPIO_OUTCLR_PIN2_Min (0x0UL)               /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_OUTCLR_PIN2_Max (0x1UL)               /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_OUTCLR_PIN2_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN2_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN2_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_OUTCLR_PIN3_Pos (3UL)                 /*!< Position of PIN3 field.                                              */
  #define GPIO_OUTCLR_PIN3_Msk (0x1UL << GPIO_OUTCLR_PIN3_Pos) /*!< Bit mask of PIN3 field.                                    */
  #define GPIO_OUTCLR_PIN3_Min (0x0UL)               /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_OUTCLR_PIN3_Max (0x1UL)               /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_OUTCLR_PIN3_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN3_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN3_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_OUTCLR_PIN4_Pos (4UL)                 /*!< Position of PIN4 field.                                              */
  #define GPIO_OUTCLR_PIN4_Msk (0x1UL << GPIO_OUTCLR_PIN4_Pos) /*!< Bit mask of PIN4 field.                                    */
  #define GPIO_OUTCLR_PIN4_Min (0x0UL)               /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_OUTCLR_PIN4_Max (0x1UL)               /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_OUTCLR_PIN4_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN4_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN4_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_OUTCLR_PIN5_Pos (5UL)                 /*!< Position of PIN5 field.                                              */
  #define GPIO_OUTCLR_PIN5_Msk (0x1UL << GPIO_OUTCLR_PIN5_Pos) /*!< Bit mask of PIN5 field.                                    */
  #define GPIO_OUTCLR_PIN5_Min (0x0UL)               /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_OUTCLR_PIN5_Max (0x1UL)               /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_OUTCLR_PIN5_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN5_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN5_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_OUTCLR_PIN6_Pos (6UL)                 /*!< Position of PIN6 field.                                              */
  #define GPIO_OUTCLR_PIN6_Msk (0x1UL << GPIO_OUTCLR_PIN6_Pos) /*!< Bit mask of PIN6 field.                                    */
  #define GPIO_OUTCLR_PIN6_Min (0x0UL)               /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_OUTCLR_PIN6_Max (0x1UL)               /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_OUTCLR_PIN6_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN6_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN6_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_OUTCLR_PIN7_Pos (7UL)                 /*!< Position of PIN7 field.                                              */
  #define GPIO_OUTCLR_PIN7_Msk (0x1UL << GPIO_OUTCLR_PIN7_Pos) /*!< Bit mask of PIN7 field.                                    */
  #define GPIO_OUTCLR_PIN7_Min (0x0UL)               /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_OUTCLR_PIN7_Max (0x1UL)               /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_OUTCLR_PIN7_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN7_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN7_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_OUTCLR_PIN8_Pos (8UL)                 /*!< Position of PIN8 field.                                              */
  #define GPIO_OUTCLR_PIN8_Msk (0x1UL << GPIO_OUTCLR_PIN8_Pos) /*!< Bit mask of PIN8 field.                                    */
  #define GPIO_OUTCLR_PIN8_Min (0x0UL)               /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_OUTCLR_PIN8_Max (0x1UL)               /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_OUTCLR_PIN8_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN8_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN8_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_OUTCLR_PIN9_Pos (9UL)                 /*!< Position of PIN9 field.                                              */
  #define GPIO_OUTCLR_PIN9_Msk (0x1UL << GPIO_OUTCLR_PIN9_Pos) /*!< Bit mask of PIN9 field.                                    */
  #define GPIO_OUTCLR_PIN9_Min (0x0UL)               /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_OUTCLR_PIN9_Max (0x1UL)               /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_OUTCLR_PIN9_Low (0x0UL)               /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN9_High (0x1UL)              /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN9_Clear (0x1UL)             /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_OUTCLR_PIN10_Pos (10UL)               /*!< Position of PIN10 field.                                             */
  #define GPIO_OUTCLR_PIN10_Msk (0x1UL << GPIO_OUTCLR_PIN10_Pos) /*!< Bit mask of PIN10 field.                                 */
  #define GPIO_OUTCLR_PIN10_Min (0x0UL)              /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_OUTCLR_PIN10_Max (0x1UL)              /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_OUTCLR_PIN10_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN10_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN10_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_OUTCLR_PIN11_Pos (11UL)               /*!< Position of PIN11 field.                                             */
  #define GPIO_OUTCLR_PIN11_Msk (0x1UL << GPIO_OUTCLR_PIN11_Pos) /*!< Bit mask of PIN11 field.                                 */
  #define GPIO_OUTCLR_PIN11_Min (0x0UL)              /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_OUTCLR_PIN11_Max (0x1UL)              /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_OUTCLR_PIN11_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN11_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN11_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_OUTCLR_PIN12_Pos (12UL)               /*!< Position of PIN12 field.                                             */
  #define GPIO_OUTCLR_PIN12_Msk (0x1UL << GPIO_OUTCLR_PIN12_Pos) /*!< Bit mask of PIN12 field.                                 */
  #define GPIO_OUTCLR_PIN12_Min (0x0UL)              /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_OUTCLR_PIN12_Max (0x1UL)              /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_OUTCLR_PIN12_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN12_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN12_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_OUTCLR_PIN13_Pos (13UL)               /*!< Position of PIN13 field.                                             */
  #define GPIO_OUTCLR_PIN13_Msk (0x1UL << GPIO_OUTCLR_PIN13_Pos) /*!< Bit mask of PIN13 field.                                 */
  #define GPIO_OUTCLR_PIN13_Min (0x0UL)              /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_OUTCLR_PIN13_Max (0x1UL)              /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_OUTCLR_PIN13_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN13_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN13_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_OUTCLR_PIN14_Pos (14UL)               /*!< Position of PIN14 field.                                             */
  #define GPIO_OUTCLR_PIN14_Msk (0x1UL << GPIO_OUTCLR_PIN14_Pos) /*!< Bit mask of PIN14 field.                                 */
  #define GPIO_OUTCLR_PIN14_Min (0x0UL)              /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_OUTCLR_PIN14_Max (0x1UL)              /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_OUTCLR_PIN14_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN14_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN14_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_OUTCLR_PIN15_Pos (15UL)               /*!< Position of PIN15 field.                                             */
  #define GPIO_OUTCLR_PIN15_Msk (0x1UL << GPIO_OUTCLR_PIN15_Pos) /*!< Bit mask of PIN15 field.                                 */
  #define GPIO_OUTCLR_PIN15_Min (0x0UL)              /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_OUTCLR_PIN15_Max (0x1UL)              /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_OUTCLR_PIN15_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN15_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN15_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_OUTCLR_PIN16_Pos (16UL)               /*!< Position of PIN16 field.                                             */
  #define GPIO_OUTCLR_PIN16_Msk (0x1UL << GPIO_OUTCLR_PIN16_Pos) /*!< Bit mask of PIN16 field.                                 */
  #define GPIO_OUTCLR_PIN16_Min (0x0UL)              /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_OUTCLR_PIN16_Max (0x1UL)              /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_OUTCLR_PIN16_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN16_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN16_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_OUTCLR_PIN17_Pos (17UL)               /*!< Position of PIN17 field.                                             */
  #define GPIO_OUTCLR_PIN17_Msk (0x1UL << GPIO_OUTCLR_PIN17_Pos) /*!< Bit mask of PIN17 field.                                 */
  #define GPIO_OUTCLR_PIN17_Min (0x0UL)              /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_OUTCLR_PIN17_Max (0x1UL)              /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_OUTCLR_PIN17_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN17_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN17_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_OUTCLR_PIN18_Pos (18UL)               /*!< Position of PIN18 field.                                             */
  #define GPIO_OUTCLR_PIN18_Msk (0x1UL << GPIO_OUTCLR_PIN18_Pos) /*!< Bit mask of PIN18 field.                                 */
  #define GPIO_OUTCLR_PIN18_Min (0x0UL)              /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_OUTCLR_PIN18_Max (0x1UL)              /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_OUTCLR_PIN18_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN18_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN18_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_OUTCLR_PIN19_Pos (19UL)               /*!< Position of PIN19 field.                                             */
  #define GPIO_OUTCLR_PIN19_Msk (0x1UL << GPIO_OUTCLR_PIN19_Pos) /*!< Bit mask of PIN19 field.                                 */
  #define GPIO_OUTCLR_PIN19_Min (0x0UL)              /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_OUTCLR_PIN19_Max (0x1UL)              /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_OUTCLR_PIN19_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN19_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN19_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_OUTCLR_PIN20_Pos (20UL)               /*!< Position of PIN20 field.                                             */
  #define GPIO_OUTCLR_PIN20_Msk (0x1UL << GPIO_OUTCLR_PIN20_Pos) /*!< Bit mask of PIN20 field.                                 */
  #define GPIO_OUTCLR_PIN20_Min (0x0UL)              /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_OUTCLR_PIN20_Max (0x1UL)              /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_OUTCLR_PIN20_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN20_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN20_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_OUTCLR_PIN21_Pos (21UL)               /*!< Position of PIN21 field.                                             */
  #define GPIO_OUTCLR_PIN21_Msk (0x1UL << GPIO_OUTCLR_PIN21_Pos) /*!< Bit mask of PIN21 field.                                 */
  #define GPIO_OUTCLR_PIN21_Min (0x0UL)              /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_OUTCLR_PIN21_Max (0x1UL)              /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_OUTCLR_PIN21_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN21_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN21_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_OUTCLR_PIN22_Pos (22UL)               /*!< Position of PIN22 field.                                             */
  #define GPIO_OUTCLR_PIN22_Msk (0x1UL << GPIO_OUTCLR_PIN22_Pos) /*!< Bit mask of PIN22 field.                                 */
  #define GPIO_OUTCLR_PIN22_Min (0x0UL)              /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_OUTCLR_PIN22_Max (0x1UL)              /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_OUTCLR_PIN22_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN22_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN22_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_OUTCLR_PIN23_Pos (23UL)               /*!< Position of PIN23 field.                                             */
  #define GPIO_OUTCLR_PIN23_Msk (0x1UL << GPIO_OUTCLR_PIN23_Pos) /*!< Bit mask of PIN23 field.                                 */
  #define GPIO_OUTCLR_PIN23_Min (0x0UL)              /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_OUTCLR_PIN23_Max (0x1UL)              /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_OUTCLR_PIN23_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN23_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN23_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_OUTCLR_PIN24_Pos (24UL)               /*!< Position of PIN24 field.                                             */
  #define GPIO_OUTCLR_PIN24_Msk (0x1UL << GPIO_OUTCLR_PIN24_Pos) /*!< Bit mask of PIN24 field.                                 */
  #define GPIO_OUTCLR_PIN24_Min (0x0UL)              /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_OUTCLR_PIN24_Max (0x1UL)              /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_OUTCLR_PIN24_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN24_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN24_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_OUTCLR_PIN25_Pos (25UL)               /*!< Position of PIN25 field.                                             */
  #define GPIO_OUTCLR_PIN25_Msk (0x1UL << GPIO_OUTCLR_PIN25_Pos) /*!< Bit mask of PIN25 field.                                 */
  #define GPIO_OUTCLR_PIN25_Min (0x0UL)              /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_OUTCLR_PIN25_Max (0x1UL)              /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_OUTCLR_PIN25_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN25_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN25_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_OUTCLR_PIN26_Pos (26UL)               /*!< Position of PIN26 field.                                             */
  #define GPIO_OUTCLR_PIN26_Msk (0x1UL << GPIO_OUTCLR_PIN26_Pos) /*!< Bit mask of PIN26 field.                                 */
  #define GPIO_OUTCLR_PIN26_Min (0x0UL)              /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_OUTCLR_PIN26_Max (0x1UL)              /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_OUTCLR_PIN26_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN26_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN26_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_OUTCLR_PIN27_Pos (27UL)               /*!< Position of PIN27 field.                                             */
  #define GPIO_OUTCLR_PIN27_Msk (0x1UL << GPIO_OUTCLR_PIN27_Pos) /*!< Bit mask of PIN27 field.                                 */
  #define GPIO_OUTCLR_PIN27_Min (0x0UL)              /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_OUTCLR_PIN27_Max (0x1UL)              /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_OUTCLR_PIN27_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN27_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN27_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_OUTCLR_PIN28_Pos (28UL)               /*!< Position of PIN28 field.                                             */
  #define GPIO_OUTCLR_PIN28_Msk (0x1UL << GPIO_OUTCLR_PIN28_Pos) /*!< Bit mask of PIN28 field.                                 */
  #define GPIO_OUTCLR_PIN28_Min (0x0UL)              /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_OUTCLR_PIN28_Max (0x1UL)              /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_OUTCLR_PIN28_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN28_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN28_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_OUTCLR_PIN29_Pos (29UL)               /*!< Position of PIN29 field.                                             */
  #define GPIO_OUTCLR_PIN29_Msk (0x1UL << GPIO_OUTCLR_PIN29_Pos) /*!< Bit mask of PIN29 field.                                 */
  #define GPIO_OUTCLR_PIN29_Min (0x0UL)              /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_OUTCLR_PIN29_Max (0x1UL)              /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_OUTCLR_PIN29_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN29_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN29_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_OUTCLR_PIN30_Pos (30UL)               /*!< Position of PIN30 field.                                             */
  #define GPIO_OUTCLR_PIN30_Msk (0x1UL << GPIO_OUTCLR_PIN30_Pos) /*!< Bit mask of PIN30 field.                                 */
  #define GPIO_OUTCLR_PIN30_Min (0x0UL)              /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_OUTCLR_PIN30_Max (0x1UL)              /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_OUTCLR_PIN30_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN30_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN30_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_OUTCLR_PIN31_Pos (31UL)               /*!< Position of PIN31 field.                                             */
  #define GPIO_OUTCLR_PIN31_Msk (0x1UL << GPIO_OUTCLR_PIN31_Pos) /*!< Bit mask of PIN31 field.                                 */
  #define GPIO_OUTCLR_PIN31_Min (0x0UL)              /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_OUTCLR_PIN31_Max (0x1UL)              /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_OUTCLR_PIN31_Low (0x0UL)              /*!< Read: pin driver is low                                              */
  #define GPIO_OUTCLR_PIN31_High (0x1UL)             /*!< Read: pin driver is high                                             */
  #define GPIO_OUTCLR_PIN31_Clear (0x1UL)            /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect   */


/* GPIO_IN: Read GPIO port */
  #define GPIO_IN_ResetValue (0x00000000UL)          /*!< Reset value of IN register.                                          */

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_IN_PIN0_Pos (0UL)                     /*!< Position of PIN0 field.                                              */
  #define GPIO_IN_PIN0_Msk (0x1UL << GPIO_IN_PIN0_Pos) /*!< Bit mask of PIN0 field.                                            */
  #define GPIO_IN_PIN0_Min (0x0UL)                   /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_IN_PIN0_Max (0x1UL)                   /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_IN_PIN0_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN0_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_IN_PIN1_Pos (1UL)                     /*!< Position of PIN1 field.                                              */
  #define GPIO_IN_PIN1_Msk (0x1UL << GPIO_IN_PIN1_Pos) /*!< Bit mask of PIN1 field.                                            */
  #define GPIO_IN_PIN1_Min (0x0UL)                   /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_IN_PIN1_Max (0x1UL)                   /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_IN_PIN1_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN1_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_IN_PIN2_Pos (2UL)                     /*!< Position of PIN2 field.                                              */
  #define GPIO_IN_PIN2_Msk (0x1UL << GPIO_IN_PIN2_Pos) /*!< Bit mask of PIN2 field.                                            */
  #define GPIO_IN_PIN2_Min (0x0UL)                   /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_IN_PIN2_Max (0x1UL)                   /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_IN_PIN2_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN2_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_IN_PIN3_Pos (3UL)                     /*!< Position of PIN3 field.                                              */
  #define GPIO_IN_PIN3_Msk (0x1UL << GPIO_IN_PIN3_Pos) /*!< Bit mask of PIN3 field.                                            */
  #define GPIO_IN_PIN3_Min (0x0UL)                   /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_IN_PIN3_Max (0x1UL)                   /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_IN_PIN3_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN3_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_IN_PIN4_Pos (4UL)                     /*!< Position of PIN4 field.                                              */
  #define GPIO_IN_PIN4_Msk (0x1UL << GPIO_IN_PIN4_Pos) /*!< Bit mask of PIN4 field.                                            */
  #define GPIO_IN_PIN4_Min (0x0UL)                   /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_IN_PIN4_Max (0x1UL)                   /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_IN_PIN4_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN4_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_IN_PIN5_Pos (5UL)                     /*!< Position of PIN5 field.                                              */
  #define GPIO_IN_PIN5_Msk (0x1UL << GPIO_IN_PIN5_Pos) /*!< Bit mask of PIN5 field.                                            */
  #define GPIO_IN_PIN5_Min (0x0UL)                   /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_IN_PIN5_Max (0x1UL)                   /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_IN_PIN5_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN5_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_IN_PIN6_Pos (6UL)                     /*!< Position of PIN6 field.                                              */
  #define GPIO_IN_PIN6_Msk (0x1UL << GPIO_IN_PIN6_Pos) /*!< Bit mask of PIN6 field.                                            */
  #define GPIO_IN_PIN6_Min (0x0UL)                   /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_IN_PIN6_Max (0x1UL)                   /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_IN_PIN6_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN6_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_IN_PIN7_Pos (7UL)                     /*!< Position of PIN7 field.                                              */
  #define GPIO_IN_PIN7_Msk (0x1UL << GPIO_IN_PIN7_Pos) /*!< Bit mask of PIN7 field.                                            */
  #define GPIO_IN_PIN7_Min (0x0UL)                   /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_IN_PIN7_Max (0x1UL)                   /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_IN_PIN7_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN7_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_IN_PIN8_Pos (8UL)                     /*!< Position of PIN8 field.                                              */
  #define GPIO_IN_PIN8_Msk (0x1UL << GPIO_IN_PIN8_Pos) /*!< Bit mask of PIN8 field.                                            */
  #define GPIO_IN_PIN8_Min (0x0UL)                   /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_IN_PIN8_Max (0x1UL)                   /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_IN_PIN8_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN8_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_IN_PIN9_Pos (9UL)                     /*!< Position of PIN9 field.                                              */
  #define GPIO_IN_PIN9_Msk (0x1UL << GPIO_IN_PIN9_Pos) /*!< Bit mask of PIN9 field.                                            */
  #define GPIO_IN_PIN9_Min (0x0UL)                   /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_IN_PIN9_Max (0x1UL)                   /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_IN_PIN9_Low (0x0UL)                   /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN9_High (0x1UL)                  /*!< Pin input is high                                                    */

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_IN_PIN10_Pos (10UL)                   /*!< Position of PIN10 field.                                             */
  #define GPIO_IN_PIN10_Msk (0x1UL << GPIO_IN_PIN10_Pos) /*!< Bit mask of PIN10 field.                                         */
  #define GPIO_IN_PIN10_Min (0x0UL)                  /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_IN_PIN10_Max (0x1UL)                  /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_IN_PIN10_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN10_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_IN_PIN11_Pos (11UL)                   /*!< Position of PIN11 field.                                             */
  #define GPIO_IN_PIN11_Msk (0x1UL << GPIO_IN_PIN11_Pos) /*!< Bit mask of PIN11 field.                                         */
  #define GPIO_IN_PIN11_Min (0x0UL)                  /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_IN_PIN11_Max (0x1UL)                  /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_IN_PIN11_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN11_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_IN_PIN12_Pos (12UL)                   /*!< Position of PIN12 field.                                             */
  #define GPIO_IN_PIN12_Msk (0x1UL << GPIO_IN_PIN12_Pos) /*!< Bit mask of PIN12 field.                                         */
  #define GPIO_IN_PIN12_Min (0x0UL)                  /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_IN_PIN12_Max (0x1UL)                  /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_IN_PIN12_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN12_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_IN_PIN13_Pos (13UL)                   /*!< Position of PIN13 field.                                             */
  #define GPIO_IN_PIN13_Msk (0x1UL << GPIO_IN_PIN13_Pos) /*!< Bit mask of PIN13 field.                                         */
  #define GPIO_IN_PIN13_Min (0x0UL)                  /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_IN_PIN13_Max (0x1UL)                  /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_IN_PIN13_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN13_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_IN_PIN14_Pos (14UL)                   /*!< Position of PIN14 field.                                             */
  #define GPIO_IN_PIN14_Msk (0x1UL << GPIO_IN_PIN14_Pos) /*!< Bit mask of PIN14 field.                                         */
  #define GPIO_IN_PIN14_Min (0x0UL)                  /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_IN_PIN14_Max (0x1UL)                  /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_IN_PIN14_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN14_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_IN_PIN15_Pos (15UL)                   /*!< Position of PIN15 field.                                             */
  #define GPIO_IN_PIN15_Msk (0x1UL << GPIO_IN_PIN15_Pos) /*!< Bit mask of PIN15 field.                                         */
  #define GPIO_IN_PIN15_Min (0x0UL)                  /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_IN_PIN15_Max (0x1UL)                  /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_IN_PIN15_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN15_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_IN_PIN16_Pos (16UL)                   /*!< Position of PIN16 field.                                             */
  #define GPIO_IN_PIN16_Msk (0x1UL << GPIO_IN_PIN16_Pos) /*!< Bit mask of PIN16 field.                                         */
  #define GPIO_IN_PIN16_Min (0x0UL)                  /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_IN_PIN16_Max (0x1UL)                  /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_IN_PIN16_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN16_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_IN_PIN17_Pos (17UL)                   /*!< Position of PIN17 field.                                             */
  #define GPIO_IN_PIN17_Msk (0x1UL << GPIO_IN_PIN17_Pos) /*!< Bit mask of PIN17 field.                                         */
  #define GPIO_IN_PIN17_Min (0x0UL)                  /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_IN_PIN17_Max (0x1UL)                  /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_IN_PIN17_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN17_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_IN_PIN18_Pos (18UL)                   /*!< Position of PIN18 field.                                             */
  #define GPIO_IN_PIN18_Msk (0x1UL << GPIO_IN_PIN18_Pos) /*!< Bit mask of PIN18 field.                                         */
  #define GPIO_IN_PIN18_Min (0x0UL)                  /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_IN_PIN18_Max (0x1UL)                  /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_IN_PIN18_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN18_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_IN_PIN19_Pos (19UL)                   /*!< Position of PIN19 field.                                             */
  #define GPIO_IN_PIN19_Msk (0x1UL << GPIO_IN_PIN19_Pos) /*!< Bit mask of PIN19 field.                                         */
  #define GPIO_IN_PIN19_Min (0x0UL)                  /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_IN_PIN19_Max (0x1UL)                  /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_IN_PIN19_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN19_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_IN_PIN20_Pos (20UL)                   /*!< Position of PIN20 field.                                             */
  #define GPIO_IN_PIN20_Msk (0x1UL << GPIO_IN_PIN20_Pos) /*!< Bit mask of PIN20 field.                                         */
  #define GPIO_IN_PIN20_Min (0x0UL)                  /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_IN_PIN20_Max (0x1UL)                  /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_IN_PIN20_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN20_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_IN_PIN21_Pos (21UL)                   /*!< Position of PIN21 field.                                             */
  #define GPIO_IN_PIN21_Msk (0x1UL << GPIO_IN_PIN21_Pos) /*!< Bit mask of PIN21 field.                                         */
  #define GPIO_IN_PIN21_Min (0x0UL)                  /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_IN_PIN21_Max (0x1UL)                  /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_IN_PIN21_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN21_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_IN_PIN22_Pos (22UL)                   /*!< Position of PIN22 field.                                             */
  #define GPIO_IN_PIN22_Msk (0x1UL << GPIO_IN_PIN22_Pos) /*!< Bit mask of PIN22 field.                                         */
  #define GPIO_IN_PIN22_Min (0x0UL)                  /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_IN_PIN22_Max (0x1UL)                  /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_IN_PIN22_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN22_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_IN_PIN23_Pos (23UL)                   /*!< Position of PIN23 field.                                             */
  #define GPIO_IN_PIN23_Msk (0x1UL << GPIO_IN_PIN23_Pos) /*!< Bit mask of PIN23 field.                                         */
  #define GPIO_IN_PIN23_Min (0x0UL)                  /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_IN_PIN23_Max (0x1UL)                  /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_IN_PIN23_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN23_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_IN_PIN24_Pos (24UL)                   /*!< Position of PIN24 field.                                             */
  #define GPIO_IN_PIN24_Msk (0x1UL << GPIO_IN_PIN24_Pos) /*!< Bit mask of PIN24 field.                                         */
  #define GPIO_IN_PIN24_Min (0x0UL)                  /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_IN_PIN24_Max (0x1UL)                  /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_IN_PIN24_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN24_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_IN_PIN25_Pos (25UL)                   /*!< Position of PIN25 field.                                             */
  #define GPIO_IN_PIN25_Msk (0x1UL << GPIO_IN_PIN25_Pos) /*!< Bit mask of PIN25 field.                                         */
  #define GPIO_IN_PIN25_Min (0x0UL)                  /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_IN_PIN25_Max (0x1UL)                  /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_IN_PIN25_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN25_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_IN_PIN26_Pos (26UL)                   /*!< Position of PIN26 field.                                             */
  #define GPIO_IN_PIN26_Msk (0x1UL << GPIO_IN_PIN26_Pos) /*!< Bit mask of PIN26 field.                                         */
  #define GPIO_IN_PIN26_Min (0x0UL)                  /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_IN_PIN26_Max (0x1UL)                  /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_IN_PIN26_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN26_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_IN_PIN27_Pos (27UL)                   /*!< Position of PIN27 field.                                             */
  #define GPIO_IN_PIN27_Msk (0x1UL << GPIO_IN_PIN27_Pos) /*!< Bit mask of PIN27 field.                                         */
  #define GPIO_IN_PIN27_Min (0x0UL)                  /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_IN_PIN27_Max (0x1UL)                  /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_IN_PIN27_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN27_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_IN_PIN28_Pos (28UL)                   /*!< Position of PIN28 field.                                             */
  #define GPIO_IN_PIN28_Msk (0x1UL << GPIO_IN_PIN28_Pos) /*!< Bit mask of PIN28 field.                                         */
  #define GPIO_IN_PIN28_Min (0x0UL)                  /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_IN_PIN28_Max (0x1UL)                  /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_IN_PIN28_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN28_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_IN_PIN29_Pos (29UL)                   /*!< Position of PIN29 field.                                             */
  #define GPIO_IN_PIN29_Msk (0x1UL << GPIO_IN_PIN29_Pos) /*!< Bit mask of PIN29 field.                                         */
  #define GPIO_IN_PIN29_Min (0x0UL)                  /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_IN_PIN29_Max (0x1UL)                  /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_IN_PIN29_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN29_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_IN_PIN30_Pos (30UL)                   /*!< Position of PIN30 field.                                             */
  #define GPIO_IN_PIN30_Msk (0x1UL << GPIO_IN_PIN30_Pos) /*!< Bit mask of PIN30 field.                                         */
  #define GPIO_IN_PIN30_Min (0x0UL)                  /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_IN_PIN30_Max (0x1UL)                  /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_IN_PIN30_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN30_High (0x1UL)                 /*!< Pin input is high                                                    */

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_IN_PIN31_Pos (31UL)                   /*!< Position of PIN31 field.                                             */
  #define GPIO_IN_PIN31_Msk (0x1UL << GPIO_IN_PIN31_Pos) /*!< Bit mask of PIN31 field.                                         */
  #define GPIO_IN_PIN31_Min (0x0UL)                  /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_IN_PIN31_Max (0x1UL)                  /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_IN_PIN31_Low (0x0UL)                  /*!< Pin input is low                                                     */
  #define GPIO_IN_PIN31_High (0x1UL)                 /*!< Pin input is high                                                    */


/* GPIO_DIR: Direction of GPIO pins */
  #define GPIO_DIR_ResetValue (0x00000000UL)         /*!< Reset value of DIR register.                                         */

/* PIN0 @Bit 0 : Pin 0 */
  #define GPIO_DIR_PIN0_Pos (0UL)                    /*!< Position of PIN0 field.                                              */
  #define GPIO_DIR_PIN0_Msk (0x1UL << GPIO_DIR_PIN0_Pos) /*!< Bit mask of PIN0 field.                                          */
  #define GPIO_DIR_PIN0_Min (0x0UL)                  /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_DIR_PIN0_Max (0x1UL)                  /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_DIR_PIN0_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN0_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN1 @Bit 1 : Pin 1 */
  #define GPIO_DIR_PIN1_Pos (1UL)                    /*!< Position of PIN1 field.                                              */
  #define GPIO_DIR_PIN1_Msk (0x1UL << GPIO_DIR_PIN1_Pos) /*!< Bit mask of PIN1 field.                                          */
  #define GPIO_DIR_PIN1_Min (0x0UL)                  /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_DIR_PIN1_Max (0x1UL)                  /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_DIR_PIN1_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN1_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN2 @Bit 2 : Pin 2 */
  #define GPIO_DIR_PIN2_Pos (2UL)                    /*!< Position of PIN2 field.                                              */
  #define GPIO_DIR_PIN2_Msk (0x1UL << GPIO_DIR_PIN2_Pos) /*!< Bit mask of PIN2 field.                                          */
  #define GPIO_DIR_PIN2_Min (0x0UL)                  /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_DIR_PIN2_Max (0x1UL)                  /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_DIR_PIN2_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN2_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN3 @Bit 3 : Pin 3 */
  #define GPIO_DIR_PIN3_Pos (3UL)                    /*!< Position of PIN3 field.                                              */
  #define GPIO_DIR_PIN3_Msk (0x1UL << GPIO_DIR_PIN3_Pos) /*!< Bit mask of PIN3 field.                                          */
  #define GPIO_DIR_PIN3_Min (0x0UL)                  /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_DIR_PIN3_Max (0x1UL)                  /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_DIR_PIN3_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN3_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN4 @Bit 4 : Pin 4 */
  #define GPIO_DIR_PIN4_Pos (4UL)                    /*!< Position of PIN4 field.                                              */
  #define GPIO_DIR_PIN4_Msk (0x1UL << GPIO_DIR_PIN4_Pos) /*!< Bit mask of PIN4 field.                                          */
  #define GPIO_DIR_PIN4_Min (0x0UL)                  /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_DIR_PIN4_Max (0x1UL)                  /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_DIR_PIN4_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN4_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN5 @Bit 5 : Pin 5 */
  #define GPIO_DIR_PIN5_Pos (5UL)                    /*!< Position of PIN5 field.                                              */
  #define GPIO_DIR_PIN5_Msk (0x1UL << GPIO_DIR_PIN5_Pos) /*!< Bit mask of PIN5 field.                                          */
  #define GPIO_DIR_PIN5_Min (0x0UL)                  /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_DIR_PIN5_Max (0x1UL)                  /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_DIR_PIN5_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN5_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN6 @Bit 6 : Pin 6 */
  #define GPIO_DIR_PIN6_Pos (6UL)                    /*!< Position of PIN6 field.                                              */
  #define GPIO_DIR_PIN6_Msk (0x1UL << GPIO_DIR_PIN6_Pos) /*!< Bit mask of PIN6 field.                                          */
  #define GPIO_DIR_PIN6_Min (0x0UL)                  /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_DIR_PIN6_Max (0x1UL)                  /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_DIR_PIN6_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN6_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN7 @Bit 7 : Pin 7 */
  #define GPIO_DIR_PIN7_Pos (7UL)                    /*!< Position of PIN7 field.                                              */
  #define GPIO_DIR_PIN7_Msk (0x1UL << GPIO_DIR_PIN7_Pos) /*!< Bit mask of PIN7 field.                                          */
  #define GPIO_DIR_PIN7_Min (0x0UL)                  /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_DIR_PIN7_Max (0x1UL)                  /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_DIR_PIN7_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN7_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN8 @Bit 8 : Pin 8 */
  #define GPIO_DIR_PIN8_Pos (8UL)                    /*!< Position of PIN8 field.                                              */
  #define GPIO_DIR_PIN8_Msk (0x1UL << GPIO_DIR_PIN8_Pos) /*!< Bit mask of PIN8 field.                                          */
  #define GPIO_DIR_PIN8_Min (0x0UL)                  /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_DIR_PIN8_Max (0x1UL)                  /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_DIR_PIN8_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN8_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN9 @Bit 9 : Pin 9 */
  #define GPIO_DIR_PIN9_Pos (9UL)                    /*!< Position of PIN9 field.                                              */
  #define GPIO_DIR_PIN9_Msk (0x1UL << GPIO_DIR_PIN9_Pos) /*!< Bit mask of PIN9 field.                                          */
  #define GPIO_DIR_PIN9_Min (0x0UL)                  /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_DIR_PIN9_Max (0x1UL)                  /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_DIR_PIN9_Input (0x0UL)                /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN9_Output (0x1UL)               /*!< Pin set as output                                                    */

/* PIN10 @Bit 10 : Pin 10 */
  #define GPIO_DIR_PIN10_Pos (10UL)                  /*!< Position of PIN10 field.                                             */
  #define GPIO_DIR_PIN10_Msk (0x1UL << GPIO_DIR_PIN10_Pos) /*!< Bit mask of PIN10 field.                                       */
  #define GPIO_DIR_PIN10_Min (0x0UL)                 /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_DIR_PIN10_Max (0x1UL)                 /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_DIR_PIN10_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN10_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN11 @Bit 11 : Pin 11 */
  #define GPIO_DIR_PIN11_Pos (11UL)                  /*!< Position of PIN11 field.                                             */
  #define GPIO_DIR_PIN11_Msk (0x1UL << GPIO_DIR_PIN11_Pos) /*!< Bit mask of PIN11 field.                                       */
  #define GPIO_DIR_PIN11_Min (0x0UL)                 /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_DIR_PIN11_Max (0x1UL)                 /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_DIR_PIN11_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN11_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN12 @Bit 12 : Pin 12 */
  #define GPIO_DIR_PIN12_Pos (12UL)                  /*!< Position of PIN12 field.                                             */
  #define GPIO_DIR_PIN12_Msk (0x1UL << GPIO_DIR_PIN12_Pos) /*!< Bit mask of PIN12 field.                                       */
  #define GPIO_DIR_PIN12_Min (0x0UL)                 /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_DIR_PIN12_Max (0x1UL)                 /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_DIR_PIN12_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN12_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN13 @Bit 13 : Pin 13 */
  #define GPIO_DIR_PIN13_Pos (13UL)                  /*!< Position of PIN13 field.                                             */
  #define GPIO_DIR_PIN13_Msk (0x1UL << GPIO_DIR_PIN13_Pos) /*!< Bit mask of PIN13 field.                                       */
  #define GPIO_DIR_PIN13_Min (0x0UL)                 /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_DIR_PIN13_Max (0x1UL)                 /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_DIR_PIN13_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN13_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN14 @Bit 14 : Pin 14 */
  #define GPIO_DIR_PIN14_Pos (14UL)                  /*!< Position of PIN14 field.                                             */
  #define GPIO_DIR_PIN14_Msk (0x1UL << GPIO_DIR_PIN14_Pos) /*!< Bit mask of PIN14 field.                                       */
  #define GPIO_DIR_PIN14_Min (0x0UL)                 /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_DIR_PIN14_Max (0x1UL)                 /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_DIR_PIN14_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN14_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN15 @Bit 15 : Pin 15 */
  #define GPIO_DIR_PIN15_Pos (15UL)                  /*!< Position of PIN15 field.                                             */
  #define GPIO_DIR_PIN15_Msk (0x1UL << GPIO_DIR_PIN15_Pos) /*!< Bit mask of PIN15 field.                                       */
  #define GPIO_DIR_PIN15_Min (0x0UL)                 /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_DIR_PIN15_Max (0x1UL)                 /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_DIR_PIN15_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN15_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN16 @Bit 16 : Pin 16 */
  #define GPIO_DIR_PIN16_Pos (16UL)                  /*!< Position of PIN16 field.                                             */
  #define GPIO_DIR_PIN16_Msk (0x1UL << GPIO_DIR_PIN16_Pos) /*!< Bit mask of PIN16 field.                                       */
  #define GPIO_DIR_PIN16_Min (0x0UL)                 /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_DIR_PIN16_Max (0x1UL)                 /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_DIR_PIN16_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN16_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN17 @Bit 17 : Pin 17 */
  #define GPIO_DIR_PIN17_Pos (17UL)                  /*!< Position of PIN17 field.                                             */
  #define GPIO_DIR_PIN17_Msk (0x1UL << GPIO_DIR_PIN17_Pos) /*!< Bit mask of PIN17 field.                                       */
  #define GPIO_DIR_PIN17_Min (0x0UL)                 /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_DIR_PIN17_Max (0x1UL)                 /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_DIR_PIN17_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN17_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN18 @Bit 18 : Pin 18 */
  #define GPIO_DIR_PIN18_Pos (18UL)                  /*!< Position of PIN18 field.                                             */
  #define GPIO_DIR_PIN18_Msk (0x1UL << GPIO_DIR_PIN18_Pos) /*!< Bit mask of PIN18 field.                                       */
  #define GPIO_DIR_PIN18_Min (0x0UL)                 /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_DIR_PIN18_Max (0x1UL)                 /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_DIR_PIN18_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN18_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN19 @Bit 19 : Pin 19 */
  #define GPIO_DIR_PIN19_Pos (19UL)                  /*!< Position of PIN19 field.                                             */
  #define GPIO_DIR_PIN19_Msk (0x1UL << GPIO_DIR_PIN19_Pos) /*!< Bit mask of PIN19 field.                                       */
  #define GPIO_DIR_PIN19_Min (0x0UL)                 /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_DIR_PIN19_Max (0x1UL)                 /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_DIR_PIN19_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN19_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN20 @Bit 20 : Pin 20 */
  #define GPIO_DIR_PIN20_Pos (20UL)                  /*!< Position of PIN20 field.                                             */
  #define GPIO_DIR_PIN20_Msk (0x1UL << GPIO_DIR_PIN20_Pos) /*!< Bit mask of PIN20 field.                                       */
  #define GPIO_DIR_PIN20_Min (0x0UL)                 /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_DIR_PIN20_Max (0x1UL)                 /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_DIR_PIN20_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN20_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN21 @Bit 21 : Pin 21 */
  #define GPIO_DIR_PIN21_Pos (21UL)                  /*!< Position of PIN21 field.                                             */
  #define GPIO_DIR_PIN21_Msk (0x1UL << GPIO_DIR_PIN21_Pos) /*!< Bit mask of PIN21 field.                                       */
  #define GPIO_DIR_PIN21_Min (0x0UL)                 /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_DIR_PIN21_Max (0x1UL)                 /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_DIR_PIN21_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN21_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN22 @Bit 22 : Pin 22 */
  #define GPIO_DIR_PIN22_Pos (22UL)                  /*!< Position of PIN22 field.                                             */
  #define GPIO_DIR_PIN22_Msk (0x1UL << GPIO_DIR_PIN22_Pos) /*!< Bit mask of PIN22 field.                                       */
  #define GPIO_DIR_PIN22_Min (0x0UL)                 /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_DIR_PIN22_Max (0x1UL)                 /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_DIR_PIN22_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN22_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN23 @Bit 23 : Pin 23 */
  #define GPIO_DIR_PIN23_Pos (23UL)                  /*!< Position of PIN23 field.                                             */
  #define GPIO_DIR_PIN23_Msk (0x1UL << GPIO_DIR_PIN23_Pos) /*!< Bit mask of PIN23 field.                                       */
  #define GPIO_DIR_PIN23_Min (0x0UL)                 /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_DIR_PIN23_Max (0x1UL)                 /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_DIR_PIN23_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN23_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN24 @Bit 24 : Pin 24 */
  #define GPIO_DIR_PIN24_Pos (24UL)                  /*!< Position of PIN24 field.                                             */
  #define GPIO_DIR_PIN24_Msk (0x1UL << GPIO_DIR_PIN24_Pos) /*!< Bit mask of PIN24 field.                                       */
  #define GPIO_DIR_PIN24_Min (0x0UL)                 /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_DIR_PIN24_Max (0x1UL)                 /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_DIR_PIN24_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN24_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN25 @Bit 25 : Pin 25 */
  #define GPIO_DIR_PIN25_Pos (25UL)                  /*!< Position of PIN25 field.                                             */
  #define GPIO_DIR_PIN25_Msk (0x1UL << GPIO_DIR_PIN25_Pos) /*!< Bit mask of PIN25 field.                                       */
  #define GPIO_DIR_PIN25_Min (0x0UL)                 /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_DIR_PIN25_Max (0x1UL)                 /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_DIR_PIN25_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN25_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN26 @Bit 26 : Pin 26 */
  #define GPIO_DIR_PIN26_Pos (26UL)                  /*!< Position of PIN26 field.                                             */
  #define GPIO_DIR_PIN26_Msk (0x1UL << GPIO_DIR_PIN26_Pos) /*!< Bit mask of PIN26 field.                                       */
  #define GPIO_DIR_PIN26_Min (0x0UL)                 /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_DIR_PIN26_Max (0x1UL)                 /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_DIR_PIN26_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN26_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN27 @Bit 27 : Pin 27 */
  #define GPIO_DIR_PIN27_Pos (27UL)                  /*!< Position of PIN27 field.                                             */
  #define GPIO_DIR_PIN27_Msk (0x1UL << GPIO_DIR_PIN27_Pos) /*!< Bit mask of PIN27 field.                                       */
  #define GPIO_DIR_PIN27_Min (0x0UL)                 /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_DIR_PIN27_Max (0x1UL)                 /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_DIR_PIN27_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN27_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN28 @Bit 28 : Pin 28 */
  #define GPIO_DIR_PIN28_Pos (28UL)                  /*!< Position of PIN28 field.                                             */
  #define GPIO_DIR_PIN28_Msk (0x1UL << GPIO_DIR_PIN28_Pos) /*!< Bit mask of PIN28 field.                                       */
  #define GPIO_DIR_PIN28_Min (0x0UL)                 /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_DIR_PIN28_Max (0x1UL)                 /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_DIR_PIN28_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN28_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN29 @Bit 29 : Pin 29 */
  #define GPIO_DIR_PIN29_Pos (29UL)                  /*!< Position of PIN29 field.                                             */
  #define GPIO_DIR_PIN29_Msk (0x1UL << GPIO_DIR_PIN29_Pos) /*!< Bit mask of PIN29 field.                                       */
  #define GPIO_DIR_PIN29_Min (0x0UL)                 /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_DIR_PIN29_Max (0x1UL)                 /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_DIR_PIN29_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN29_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN30 @Bit 30 : Pin 30 */
  #define GPIO_DIR_PIN30_Pos (30UL)                  /*!< Position of PIN30 field.                                             */
  #define GPIO_DIR_PIN30_Msk (0x1UL << GPIO_DIR_PIN30_Pos) /*!< Bit mask of PIN30 field.                                       */
  #define GPIO_DIR_PIN30_Min (0x0UL)                 /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_DIR_PIN30_Max (0x1UL)                 /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_DIR_PIN30_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN30_Output (0x1UL)              /*!< Pin set as output                                                    */

/* PIN31 @Bit 31 : Pin 31 */
  #define GPIO_DIR_PIN31_Pos (31UL)                  /*!< Position of PIN31 field.                                             */
  #define GPIO_DIR_PIN31_Msk (0x1UL << GPIO_DIR_PIN31_Pos) /*!< Bit mask of PIN31 field.                                       */
  #define GPIO_DIR_PIN31_Min (0x0UL)                 /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_DIR_PIN31_Max (0x1UL)                 /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_DIR_PIN31_Input (0x0UL)               /*!< Pin set as input                                                     */
  #define GPIO_DIR_PIN31_Output (0x1UL)              /*!< Pin set as output                                                    */


/* GPIO_DIRSET: DIR set register */
  #define GPIO_DIRSET_ResetValue (0x00000000UL)      /*!< Reset value of DIRSET register.                                      */

/* PIN0 @Bit 0 : Set as output pin 0 */
  #define GPIO_DIRSET_PIN0_Pos (0UL)                 /*!< Position of PIN0 field.                                              */
  #define GPIO_DIRSET_PIN0_Msk (0x1UL << GPIO_DIRSET_PIN0_Pos) /*!< Bit mask of PIN0 field.                                    */
  #define GPIO_DIRSET_PIN0_Min (0x0UL)               /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_DIRSET_PIN0_Max (0x1UL)               /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_DIRSET_PIN0_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN0_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN0_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN1 @Bit 1 : Set as output pin 1 */
  #define GPIO_DIRSET_PIN1_Pos (1UL)                 /*!< Position of PIN1 field.                                              */
  #define GPIO_DIRSET_PIN1_Msk (0x1UL << GPIO_DIRSET_PIN1_Pos) /*!< Bit mask of PIN1 field.                                    */
  #define GPIO_DIRSET_PIN1_Min (0x0UL)               /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_DIRSET_PIN1_Max (0x1UL)               /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_DIRSET_PIN1_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN1_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN1_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN2 @Bit 2 : Set as output pin 2 */
  #define GPIO_DIRSET_PIN2_Pos (2UL)                 /*!< Position of PIN2 field.                                              */
  #define GPIO_DIRSET_PIN2_Msk (0x1UL << GPIO_DIRSET_PIN2_Pos) /*!< Bit mask of PIN2 field.                                    */
  #define GPIO_DIRSET_PIN2_Min (0x0UL)               /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_DIRSET_PIN2_Max (0x1UL)               /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_DIRSET_PIN2_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN2_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN2_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN3 @Bit 3 : Set as output pin 3 */
  #define GPIO_DIRSET_PIN3_Pos (3UL)                 /*!< Position of PIN3 field.                                              */
  #define GPIO_DIRSET_PIN3_Msk (0x1UL << GPIO_DIRSET_PIN3_Pos) /*!< Bit mask of PIN3 field.                                    */
  #define GPIO_DIRSET_PIN3_Min (0x0UL)               /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_DIRSET_PIN3_Max (0x1UL)               /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_DIRSET_PIN3_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN3_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN3_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN4 @Bit 4 : Set as output pin 4 */
  #define GPIO_DIRSET_PIN4_Pos (4UL)                 /*!< Position of PIN4 field.                                              */
  #define GPIO_DIRSET_PIN4_Msk (0x1UL << GPIO_DIRSET_PIN4_Pos) /*!< Bit mask of PIN4 field.                                    */
  #define GPIO_DIRSET_PIN4_Min (0x0UL)               /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_DIRSET_PIN4_Max (0x1UL)               /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_DIRSET_PIN4_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN4_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN4_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN5 @Bit 5 : Set as output pin 5 */
  #define GPIO_DIRSET_PIN5_Pos (5UL)                 /*!< Position of PIN5 field.                                              */
  #define GPIO_DIRSET_PIN5_Msk (0x1UL << GPIO_DIRSET_PIN5_Pos) /*!< Bit mask of PIN5 field.                                    */
  #define GPIO_DIRSET_PIN5_Min (0x0UL)               /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_DIRSET_PIN5_Max (0x1UL)               /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_DIRSET_PIN5_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN5_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN5_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN6 @Bit 6 : Set as output pin 6 */
  #define GPIO_DIRSET_PIN6_Pos (6UL)                 /*!< Position of PIN6 field.                                              */
  #define GPIO_DIRSET_PIN6_Msk (0x1UL << GPIO_DIRSET_PIN6_Pos) /*!< Bit mask of PIN6 field.                                    */
  #define GPIO_DIRSET_PIN6_Min (0x0UL)               /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_DIRSET_PIN6_Max (0x1UL)               /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_DIRSET_PIN6_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN6_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN6_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN7 @Bit 7 : Set as output pin 7 */
  #define GPIO_DIRSET_PIN7_Pos (7UL)                 /*!< Position of PIN7 field.                                              */
  #define GPIO_DIRSET_PIN7_Msk (0x1UL << GPIO_DIRSET_PIN7_Pos) /*!< Bit mask of PIN7 field.                                    */
  #define GPIO_DIRSET_PIN7_Min (0x0UL)               /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_DIRSET_PIN7_Max (0x1UL)               /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_DIRSET_PIN7_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN7_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN7_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN8 @Bit 8 : Set as output pin 8 */
  #define GPIO_DIRSET_PIN8_Pos (8UL)                 /*!< Position of PIN8 field.                                              */
  #define GPIO_DIRSET_PIN8_Msk (0x1UL << GPIO_DIRSET_PIN8_Pos) /*!< Bit mask of PIN8 field.                                    */
  #define GPIO_DIRSET_PIN8_Min (0x0UL)               /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_DIRSET_PIN8_Max (0x1UL)               /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_DIRSET_PIN8_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN8_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN8_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN9 @Bit 9 : Set as output pin 9 */
  #define GPIO_DIRSET_PIN9_Pos (9UL)                 /*!< Position of PIN9 field.                                              */
  #define GPIO_DIRSET_PIN9_Msk (0x1UL << GPIO_DIRSET_PIN9_Pos) /*!< Bit mask of PIN9 field.                                    */
  #define GPIO_DIRSET_PIN9_Min (0x0UL)               /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_DIRSET_PIN9_Max (0x1UL)               /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_DIRSET_PIN9_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN9_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN9_Set (0x1UL)               /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN10 @Bit 10 : Set as output pin 10 */
  #define GPIO_DIRSET_PIN10_Pos (10UL)               /*!< Position of PIN10 field.                                             */
  #define GPIO_DIRSET_PIN10_Msk (0x1UL << GPIO_DIRSET_PIN10_Pos) /*!< Bit mask of PIN10 field.                                 */
  #define GPIO_DIRSET_PIN10_Min (0x0UL)              /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_DIRSET_PIN10_Max (0x1UL)              /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_DIRSET_PIN10_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN10_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN10_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN11 @Bit 11 : Set as output pin 11 */
  #define GPIO_DIRSET_PIN11_Pos (11UL)               /*!< Position of PIN11 field.                                             */
  #define GPIO_DIRSET_PIN11_Msk (0x1UL << GPIO_DIRSET_PIN11_Pos) /*!< Bit mask of PIN11 field.                                 */
  #define GPIO_DIRSET_PIN11_Min (0x0UL)              /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_DIRSET_PIN11_Max (0x1UL)              /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_DIRSET_PIN11_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN11_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN11_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN12 @Bit 12 : Set as output pin 12 */
  #define GPIO_DIRSET_PIN12_Pos (12UL)               /*!< Position of PIN12 field.                                             */
  #define GPIO_DIRSET_PIN12_Msk (0x1UL << GPIO_DIRSET_PIN12_Pos) /*!< Bit mask of PIN12 field.                                 */
  #define GPIO_DIRSET_PIN12_Min (0x0UL)              /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_DIRSET_PIN12_Max (0x1UL)              /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_DIRSET_PIN12_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN12_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN12_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN13 @Bit 13 : Set as output pin 13 */
  #define GPIO_DIRSET_PIN13_Pos (13UL)               /*!< Position of PIN13 field.                                             */
  #define GPIO_DIRSET_PIN13_Msk (0x1UL << GPIO_DIRSET_PIN13_Pos) /*!< Bit mask of PIN13 field.                                 */
  #define GPIO_DIRSET_PIN13_Min (0x0UL)              /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_DIRSET_PIN13_Max (0x1UL)              /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_DIRSET_PIN13_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN13_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN13_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN14 @Bit 14 : Set as output pin 14 */
  #define GPIO_DIRSET_PIN14_Pos (14UL)               /*!< Position of PIN14 field.                                             */
  #define GPIO_DIRSET_PIN14_Msk (0x1UL << GPIO_DIRSET_PIN14_Pos) /*!< Bit mask of PIN14 field.                                 */
  #define GPIO_DIRSET_PIN14_Min (0x0UL)              /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_DIRSET_PIN14_Max (0x1UL)              /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_DIRSET_PIN14_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN14_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN14_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN15 @Bit 15 : Set as output pin 15 */
  #define GPIO_DIRSET_PIN15_Pos (15UL)               /*!< Position of PIN15 field.                                             */
  #define GPIO_DIRSET_PIN15_Msk (0x1UL << GPIO_DIRSET_PIN15_Pos) /*!< Bit mask of PIN15 field.                                 */
  #define GPIO_DIRSET_PIN15_Min (0x0UL)              /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_DIRSET_PIN15_Max (0x1UL)              /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_DIRSET_PIN15_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN15_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN15_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN16 @Bit 16 : Set as output pin 16 */
  #define GPIO_DIRSET_PIN16_Pos (16UL)               /*!< Position of PIN16 field.                                             */
  #define GPIO_DIRSET_PIN16_Msk (0x1UL << GPIO_DIRSET_PIN16_Pos) /*!< Bit mask of PIN16 field.                                 */
  #define GPIO_DIRSET_PIN16_Min (0x0UL)              /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_DIRSET_PIN16_Max (0x1UL)              /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_DIRSET_PIN16_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN16_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN16_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN17 @Bit 17 : Set as output pin 17 */
  #define GPIO_DIRSET_PIN17_Pos (17UL)               /*!< Position of PIN17 field.                                             */
  #define GPIO_DIRSET_PIN17_Msk (0x1UL << GPIO_DIRSET_PIN17_Pos) /*!< Bit mask of PIN17 field.                                 */
  #define GPIO_DIRSET_PIN17_Min (0x0UL)              /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_DIRSET_PIN17_Max (0x1UL)              /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_DIRSET_PIN17_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN17_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN17_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN18 @Bit 18 : Set as output pin 18 */
  #define GPIO_DIRSET_PIN18_Pos (18UL)               /*!< Position of PIN18 field.                                             */
  #define GPIO_DIRSET_PIN18_Msk (0x1UL << GPIO_DIRSET_PIN18_Pos) /*!< Bit mask of PIN18 field.                                 */
  #define GPIO_DIRSET_PIN18_Min (0x0UL)              /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_DIRSET_PIN18_Max (0x1UL)              /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_DIRSET_PIN18_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN18_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN18_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN19 @Bit 19 : Set as output pin 19 */
  #define GPIO_DIRSET_PIN19_Pos (19UL)               /*!< Position of PIN19 field.                                             */
  #define GPIO_DIRSET_PIN19_Msk (0x1UL << GPIO_DIRSET_PIN19_Pos) /*!< Bit mask of PIN19 field.                                 */
  #define GPIO_DIRSET_PIN19_Min (0x0UL)              /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_DIRSET_PIN19_Max (0x1UL)              /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_DIRSET_PIN19_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN19_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN19_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN20 @Bit 20 : Set as output pin 20 */
  #define GPIO_DIRSET_PIN20_Pos (20UL)               /*!< Position of PIN20 field.                                             */
  #define GPIO_DIRSET_PIN20_Msk (0x1UL << GPIO_DIRSET_PIN20_Pos) /*!< Bit mask of PIN20 field.                                 */
  #define GPIO_DIRSET_PIN20_Min (0x0UL)              /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_DIRSET_PIN20_Max (0x1UL)              /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_DIRSET_PIN20_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN20_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN20_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN21 @Bit 21 : Set as output pin 21 */
  #define GPIO_DIRSET_PIN21_Pos (21UL)               /*!< Position of PIN21 field.                                             */
  #define GPIO_DIRSET_PIN21_Msk (0x1UL << GPIO_DIRSET_PIN21_Pos) /*!< Bit mask of PIN21 field.                                 */
  #define GPIO_DIRSET_PIN21_Min (0x0UL)              /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_DIRSET_PIN21_Max (0x1UL)              /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_DIRSET_PIN21_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN21_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN21_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN22 @Bit 22 : Set as output pin 22 */
  #define GPIO_DIRSET_PIN22_Pos (22UL)               /*!< Position of PIN22 field.                                             */
  #define GPIO_DIRSET_PIN22_Msk (0x1UL << GPIO_DIRSET_PIN22_Pos) /*!< Bit mask of PIN22 field.                                 */
  #define GPIO_DIRSET_PIN22_Min (0x0UL)              /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_DIRSET_PIN22_Max (0x1UL)              /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_DIRSET_PIN22_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN22_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN22_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN23 @Bit 23 : Set as output pin 23 */
  #define GPIO_DIRSET_PIN23_Pos (23UL)               /*!< Position of PIN23 field.                                             */
  #define GPIO_DIRSET_PIN23_Msk (0x1UL << GPIO_DIRSET_PIN23_Pos) /*!< Bit mask of PIN23 field.                                 */
  #define GPIO_DIRSET_PIN23_Min (0x0UL)              /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_DIRSET_PIN23_Max (0x1UL)              /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_DIRSET_PIN23_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN23_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN23_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN24 @Bit 24 : Set as output pin 24 */
  #define GPIO_DIRSET_PIN24_Pos (24UL)               /*!< Position of PIN24 field.                                             */
  #define GPIO_DIRSET_PIN24_Msk (0x1UL << GPIO_DIRSET_PIN24_Pos) /*!< Bit mask of PIN24 field.                                 */
  #define GPIO_DIRSET_PIN24_Min (0x0UL)              /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_DIRSET_PIN24_Max (0x1UL)              /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_DIRSET_PIN24_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN24_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN24_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN25 @Bit 25 : Set as output pin 25 */
  #define GPIO_DIRSET_PIN25_Pos (25UL)               /*!< Position of PIN25 field.                                             */
  #define GPIO_DIRSET_PIN25_Msk (0x1UL << GPIO_DIRSET_PIN25_Pos) /*!< Bit mask of PIN25 field.                                 */
  #define GPIO_DIRSET_PIN25_Min (0x0UL)              /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_DIRSET_PIN25_Max (0x1UL)              /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_DIRSET_PIN25_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN25_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN25_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN26 @Bit 26 : Set as output pin 26 */
  #define GPIO_DIRSET_PIN26_Pos (26UL)               /*!< Position of PIN26 field.                                             */
  #define GPIO_DIRSET_PIN26_Msk (0x1UL << GPIO_DIRSET_PIN26_Pos) /*!< Bit mask of PIN26 field.                                 */
  #define GPIO_DIRSET_PIN26_Min (0x0UL)              /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_DIRSET_PIN26_Max (0x1UL)              /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_DIRSET_PIN26_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN26_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN26_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN27 @Bit 27 : Set as output pin 27 */
  #define GPIO_DIRSET_PIN27_Pos (27UL)               /*!< Position of PIN27 field.                                             */
  #define GPIO_DIRSET_PIN27_Msk (0x1UL << GPIO_DIRSET_PIN27_Pos) /*!< Bit mask of PIN27 field.                                 */
  #define GPIO_DIRSET_PIN27_Min (0x0UL)              /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_DIRSET_PIN27_Max (0x1UL)              /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_DIRSET_PIN27_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN27_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN27_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN28 @Bit 28 : Set as output pin 28 */
  #define GPIO_DIRSET_PIN28_Pos (28UL)               /*!< Position of PIN28 field.                                             */
  #define GPIO_DIRSET_PIN28_Msk (0x1UL << GPIO_DIRSET_PIN28_Pos) /*!< Bit mask of PIN28 field.                                 */
  #define GPIO_DIRSET_PIN28_Min (0x0UL)              /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_DIRSET_PIN28_Max (0x1UL)              /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_DIRSET_PIN28_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN28_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN28_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN29 @Bit 29 : Set as output pin 29 */
  #define GPIO_DIRSET_PIN29_Pos (29UL)               /*!< Position of PIN29 field.                                             */
  #define GPIO_DIRSET_PIN29_Msk (0x1UL << GPIO_DIRSET_PIN29_Pos) /*!< Bit mask of PIN29 field.                                 */
  #define GPIO_DIRSET_PIN29_Min (0x0UL)              /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_DIRSET_PIN29_Max (0x1UL)              /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_DIRSET_PIN29_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN29_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN29_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN30 @Bit 30 : Set as output pin 30 */
  #define GPIO_DIRSET_PIN30_Pos (30UL)               /*!< Position of PIN30 field.                                             */
  #define GPIO_DIRSET_PIN30_Msk (0x1UL << GPIO_DIRSET_PIN30_Pos) /*!< Bit mask of PIN30 field.                                 */
  #define GPIO_DIRSET_PIN30_Min (0x0UL)              /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_DIRSET_PIN30_Max (0x1UL)              /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_DIRSET_PIN30_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN30_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN30_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* PIN31 @Bit 31 : Set as output pin 31 */
  #define GPIO_DIRSET_PIN31_Pos (31UL)               /*!< Position of PIN31 field.                                             */
  #define GPIO_DIRSET_PIN31_Msk (0x1UL << GPIO_DIRSET_PIN31_Pos) /*!< Bit mask of PIN31 field.                                 */
  #define GPIO_DIRSET_PIN31_Min (0x0UL)              /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_DIRSET_PIN31_Max (0x1UL)              /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_DIRSET_PIN31_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRSET_PIN31_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRSET_PIN31_Set (0x1UL)              /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */


/* GPIO_DIRCLR: DIR clear register */
  #define GPIO_DIRCLR_ResetValue (0x00000000UL)      /*!< Reset value of DIRCLR register.                                      */

/* PIN0 @Bit 0 : Set as input pin 0 */
  #define GPIO_DIRCLR_PIN0_Pos (0UL)                 /*!< Position of PIN0 field.                                              */
  #define GPIO_DIRCLR_PIN0_Msk (0x1UL << GPIO_DIRCLR_PIN0_Pos) /*!< Bit mask of PIN0 field.                                    */
  #define GPIO_DIRCLR_PIN0_Min (0x0UL)               /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_DIRCLR_PIN0_Max (0x1UL)               /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_DIRCLR_PIN0_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN0_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN0_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN1 @Bit 1 : Set as input pin 1 */
  #define GPIO_DIRCLR_PIN1_Pos (1UL)                 /*!< Position of PIN1 field.                                              */
  #define GPIO_DIRCLR_PIN1_Msk (0x1UL << GPIO_DIRCLR_PIN1_Pos) /*!< Bit mask of PIN1 field.                                    */
  #define GPIO_DIRCLR_PIN1_Min (0x0UL)               /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_DIRCLR_PIN1_Max (0x1UL)               /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_DIRCLR_PIN1_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN1_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN1_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN2 @Bit 2 : Set as input pin 2 */
  #define GPIO_DIRCLR_PIN2_Pos (2UL)                 /*!< Position of PIN2 field.                                              */
  #define GPIO_DIRCLR_PIN2_Msk (0x1UL << GPIO_DIRCLR_PIN2_Pos) /*!< Bit mask of PIN2 field.                                    */
  #define GPIO_DIRCLR_PIN2_Min (0x0UL)               /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_DIRCLR_PIN2_Max (0x1UL)               /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_DIRCLR_PIN2_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN2_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN2_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN3 @Bit 3 : Set as input pin 3 */
  #define GPIO_DIRCLR_PIN3_Pos (3UL)                 /*!< Position of PIN3 field.                                              */
  #define GPIO_DIRCLR_PIN3_Msk (0x1UL << GPIO_DIRCLR_PIN3_Pos) /*!< Bit mask of PIN3 field.                                    */
  #define GPIO_DIRCLR_PIN3_Min (0x0UL)               /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_DIRCLR_PIN3_Max (0x1UL)               /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_DIRCLR_PIN3_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN3_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN3_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN4 @Bit 4 : Set as input pin 4 */
  #define GPIO_DIRCLR_PIN4_Pos (4UL)                 /*!< Position of PIN4 field.                                              */
  #define GPIO_DIRCLR_PIN4_Msk (0x1UL << GPIO_DIRCLR_PIN4_Pos) /*!< Bit mask of PIN4 field.                                    */
  #define GPIO_DIRCLR_PIN4_Min (0x0UL)               /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_DIRCLR_PIN4_Max (0x1UL)               /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_DIRCLR_PIN4_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN4_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN4_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN5 @Bit 5 : Set as input pin 5 */
  #define GPIO_DIRCLR_PIN5_Pos (5UL)                 /*!< Position of PIN5 field.                                              */
  #define GPIO_DIRCLR_PIN5_Msk (0x1UL << GPIO_DIRCLR_PIN5_Pos) /*!< Bit mask of PIN5 field.                                    */
  #define GPIO_DIRCLR_PIN5_Min (0x0UL)               /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_DIRCLR_PIN5_Max (0x1UL)               /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_DIRCLR_PIN5_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN5_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN5_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN6 @Bit 6 : Set as input pin 6 */
  #define GPIO_DIRCLR_PIN6_Pos (6UL)                 /*!< Position of PIN6 field.                                              */
  #define GPIO_DIRCLR_PIN6_Msk (0x1UL << GPIO_DIRCLR_PIN6_Pos) /*!< Bit mask of PIN6 field.                                    */
  #define GPIO_DIRCLR_PIN6_Min (0x0UL)               /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_DIRCLR_PIN6_Max (0x1UL)               /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_DIRCLR_PIN6_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN6_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN6_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN7 @Bit 7 : Set as input pin 7 */
  #define GPIO_DIRCLR_PIN7_Pos (7UL)                 /*!< Position of PIN7 field.                                              */
  #define GPIO_DIRCLR_PIN7_Msk (0x1UL << GPIO_DIRCLR_PIN7_Pos) /*!< Bit mask of PIN7 field.                                    */
  #define GPIO_DIRCLR_PIN7_Min (0x0UL)               /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_DIRCLR_PIN7_Max (0x1UL)               /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_DIRCLR_PIN7_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN7_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN7_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN8 @Bit 8 : Set as input pin 8 */
  #define GPIO_DIRCLR_PIN8_Pos (8UL)                 /*!< Position of PIN8 field.                                              */
  #define GPIO_DIRCLR_PIN8_Msk (0x1UL << GPIO_DIRCLR_PIN8_Pos) /*!< Bit mask of PIN8 field.                                    */
  #define GPIO_DIRCLR_PIN8_Min (0x0UL)               /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_DIRCLR_PIN8_Max (0x1UL)               /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_DIRCLR_PIN8_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN8_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN8_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN9 @Bit 9 : Set as input pin 9 */
  #define GPIO_DIRCLR_PIN9_Pos (9UL)                 /*!< Position of PIN9 field.                                              */
  #define GPIO_DIRCLR_PIN9_Msk (0x1UL << GPIO_DIRCLR_PIN9_Pos) /*!< Bit mask of PIN9 field.                                    */
  #define GPIO_DIRCLR_PIN9_Min (0x0UL)               /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_DIRCLR_PIN9_Max (0x1UL)               /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_DIRCLR_PIN9_Input (0x0UL)             /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN9_Output (0x1UL)            /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN9_Clear (0x1UL)             /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN10 @Bit 10 : Set as input pin 10 */
  #define GPIO_DIRCLR_PIN10_Pos (10UL)               /*!< Position of PIN10 field.                                             */
  #define GPIO_DIRCLR_PIN10_Msk (0x1UL << GPIO_DIRCLR_PIN10_Pos) /*!< Bit mask of PIN10 field.                                 */
  #define GPIO_DIRCLR_PIN10_Min (0x0UL)              /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_DIRCLR_PIN10_Max (0x1UL)              /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_DIRCLR_PIN10_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN10_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN10_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN11 @Bit 11 : Set as input pin 11 */
  #define GPIO_DIRCLR_PIN11_Pos (11UL)               /*!< Position of PIN11 field.                                             */
  #define GPIO_DIRCLR_PIN11_Msk (0x1UL << GPIO_DIRCLR_PIN11_Pos) /*!< Bit mask of PIN11 field.                                 */
  #define GPIO_DIRCLR_PIN11_Min (0x0UL)              /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_DIRCLR_PIN11_Max (0x1UL)              /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_DIRCLR_PIN11_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN11_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN11_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN12 @Bit 12 : Set as input pin 12 */
  #define GPIO_DIRCLR_PIN12_Pos (12UL)               /*!< Position of PIN12 field.                                             */
  #define GPIO_DIRCLR_PIN12_Msk (0x1UL << GPIO_DIRCLR_PIN12_Pos) /*!< Bit mask of PIN12 field.                                 */
  #define GPIO_DIRCLR_PIN12_Min (0x0UL)              /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_DIRCLR_PIN12_Max (0x1UL)              /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_DIRCLR_PIN12_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN12_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN12_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN13 @Bit 13 : Set as input pin 13 */
  #define GPIO_DIRCLR_PIN13_Pos (13UL)               /*!< Position of PIN13 field.                                             */
  #define GPIO_DIRCLR_PIN13_Msk (0x1UL << GPIO_DIRCLR_PIN13_Pos) /*!< Bit mask of PIN13 field.                                 */
  #define GPIO_DIRCLR_PIN13_Min (0x0UL)              /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_DIRCLR_PIN13_Max (0x1UL)              /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_DIRCLR_PIN13_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN13_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN13_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN14 @Bit 14 : Set as input pin 14 */
  #define GPIO_DIRCLR_PIN14_Pos (14UL)               /*!< Position of PIN14 field.                                             */
  #define GPIO_DIRCLR_PIN14_Msk (0x1UL << GPIO_DIRCLR_PIN14_Pos) /*!< Bit mask of PIN14 field.                                 */
  #define GPIO_DIRCLR_PIN14_Min (0x0UL)              /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_DIRCLR_PIN14_Max (0x1UL)              /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_DIRCLR_PIN14_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN14_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN14_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN15 @Bit 15 : Set as input pin 15 */
  #define GPIO_DIRCLR_PIN15_Pos (15UL)               /*!< Position of PIN15 field.                                             */
  #define GPIO_DIRCLR_PIN15_Msk (0x1UL << GPIO_DIRCLR_PIN15_Pos) /*!< Bit mask of PIN15 field.                                 */
  #define GPIO_DIRCLR_PIN15_Min (0x0UL)              /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_DIRCLR_PIN15_Max (0x1UL)              /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_DIRCLR_PIN15_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN15_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN15_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN16 @Bit 16 : Set as input pin 16 */
  #define GPIO_DIRCLR_PIN16_Pos (16UL)               /*!< Position of PIN16 field.                                             */
  #define GPIO_DIRCLR_PIN16_Msk (0x1UL << GPIO_DIRCLR_PIN16_Pos) /*!< Bit mask of PIN16 field.                                 */
  #define GPIO_DIRCLR_PIN16_Min (0x0UL)              /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_DIRCLR_PIN16_Max (0x1UL)              /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_DIRCLR_PIN16_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN16_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN16_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN17 @Bit 17 : Set as input pin 17 */
  #define GPIO_DIRCLR_PIN17_Pos (17UL)               /*!< Position of PIN17 field.                                             */
  #define GPIO_DIRCLR_PIN17_Msk (0x1UL << GPIO_DIRCLR_PIN17_Pos) /*!< Bit mask of PIN17 field.                                 */
  #define GPIO_DIRCLR_PIN17_Min (0x0UL)              /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_DIRCLR_PIN17_Max (0x1UL)              /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_DIRCLR_PIN17_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN17_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN17_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN18 @Bit 18 : Set as input pin 18 */
  #define GPIO_DIRCLR_PIN18_Pos (18UL)               /*!< Position of PIN18 field.                                             */
  #define GPIO_DIRCLR_PIN18_Msk (0x1UL << GPIO_DIRCLR_PIN18_Pos) /*!< Bit mask of PIN18 field.                                 */
  #define GPIO_DIRCLR_PIN18_Min (0x0UL)              /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_DIRCLR_PIN18_Max (0x1UL)              /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_DIRCLR_PIN18_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN18_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN18_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN19 @Bit 19 : Set as input pin 19 */
  #define GPIO_DIRCLR_PIN19_Pos (19UL)               /*!< Position of PIN19 field.                                             */
  #define GPIO_DIRCLR_PIN19_Msk (0x1UL << GPIO_DIRCLR_PIN19_Pos) /*!< Bit mask of PIN19 field.                                 */
  #define GPIO_DIRCLR_PIN19_Min (0x0UL)              /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_DIRCLR_PIN19_Max (0x1UL)              /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_DIRCLR_PIN19_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN19_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN19_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN20 @Bit 20 : Set as input pin 20 */
  #define GPIO_DIRCLR_PIN20_Pos (20UL)               /*!< Position of PIN20 field.                                             */
  #define GPIO_DIRCLR_PIN20_Msk (0x1UL << GPIO_DIRCLR_PIN20_Pos) /*!< Bit mask of PIN20 field.                                 */
  #define GPIO_DIRCLR_PIN20_Min (0x0UL)              /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_DIRCLR_PIN20_Max (0x1UL)              /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_DIRCLR_PIN20_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN20_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN20_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN21 @Bit 21 : Set as input pin 21 */
  #define GPIO_DIRCLR_PIN21_Pos (21UL)               /*!< Position of PIN21 field.                                             */
  #define GPIO_DIRCLR_PIN21_Msk (0x1UL << GPIO_DIRCLR_PIN21_Pos) /*!< Bit mask of PIN21 field.                                 */
  #define GPIO_DIRCLR_PIN21_Min (0x0UL)              /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_DIRCLR_PIN21_Max (0x1UL)              /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_DIRCLR_PIN21_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN21_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN21_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN22 @Bit 22 : Set as input pin 22 */
  #define GPIO_DIRCLR_PIN22_Pos (22UL)               /*!< Position of PIN22 field.                                             */
  #define GPIO_DIRCLR_PIN22_Msk (0x1UL << GPIO_DIRCLR_PIN22_Pos) /*!< Bit mask of PIN22 field.                                 */
  #define GPIO_DIRCLR_PIN22_Min (0x0UL)              /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_DIRCLR_PIN22_Max (0x1UL)              /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_DIRCLR_PIN22_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN22_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN22_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN23 @Bit 23 : Set as input pin 23 */
  #define GPIO_DIRCLR_PIN23_Pos (23UL)               /*!< Position of PIN23 field.                                             */
  #define GPIO_DIRCLR_PIN23_Msk (0x1UL << GPIO_DIRCLR_PIN23_Pos) /*!< Bit mask of PIN23 field.                                 */
  #define GPIO_DIRCLR_PIN23_Min (0x0UL)              /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_DIRCLR_PIN23_Max (0x1UL)              /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_DIRCLR_PIN23_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN23_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN23_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN24 @Bit 24 : Set as input pin 24 */
  #define GPIO_DIRCLR_PIN24_Pos (24UL)               /*!< Position of PIN24 field.                                             */
  #define GPIO_DIRCLR_PIN24_Msk (0x1UL << GPIO_DIRCLR_PIN24_Pos) /*!< Bit mask of PIN24 field.                                 */
  #define GPIO_DIRCLR_PIN24_Min (0x0UL)              /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_DIRCLR_PIN24_Max (0x1UL)              /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_DIRCLR_PIN24_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN24_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN24_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN25 @Bit 25 : Set as input pin 25 */
  #define GPIO_DIRCLR_PIN25_Pos (25UL)               /*!< Position of PIN25 field.                                             */
  #define GPIO_DIRCLR_PIN25_Msk (0x1UL << GPIO_DIRCLR_PIN25_Pos) /*!< Bit mask of PIN25 field.                                 */
  #define GPIO_DIRCLR_PIN25_Min (0x0UL)              /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_DIRCLR_PIN25_Max (0x1UL)              /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_DIRCLR_PIN25_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN25_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN25_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN26 @Bit 26 : Set as input pin 26 */
  #define GPIO_DIRCLR_PIN26_Pos (26UL)               /*!< Position of PIN26 field.                                             */
  #define GPIO_DIRCLR_PIN26_Msk (0x1UL << GPIO_DIRCLR_PIN26_Pos) /*!< Bit mask of PIN26 field.                                 */
  #define GPIO_DIRCLR_PIN26_Min (0x0UL)              /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_DIRCLR_PIN26_Max (0x1UL)              /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_DIRCLR_PIN26_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN26_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN26_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN27 @Bit 27 : Set as input pin 27 */
  #define GPIO_DIRCLR_PIN27_Pos (27UL)               /*!< Position of PIN27 field.                                             */
  #define GPIO_DIRCLR_PIN27_Msk (0x1UL << GPIO_DIRCLR_PIN27_Pos) /*!< Bit mask of PIN27 field.                                 */
  #define GPIO_DIRCLR_PIN27_Min (0x0UL)              /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_DIRCLR_PIN27_Max (0x1UL)              /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_DIRCLR_PIN27_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN27_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN27_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN28 @Bit 28 : Set as input pin 28 */
  #define GPIO_DIRCLR_PIN28_Pos (28UL)               /*!< Position of PIN28 field.                                             */
  #define GPIO_DIRCLR_PIN28_Msk (0x1UL << GPIO_DIRCLR_PIN28_Pos) /*!< Bit mask of PIN28 field.                                 */
  #define GPIO_DIRCLR_PIN28_Min (0x0UL)              /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_DIRCLR_PIN28_Max (0x1UL)              /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_DIRCLR_PIN28_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN28_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN28_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN29 @Bit 29 : Set as input pin 29 */
  #define GPIO_DIRCLR_PIN29_Pos (29UL)               /*!< Position of PIN29 field.                                             */
  #define GPIO_DIRCLR_PIN29_Msk (0x1UL << GPIO_DIRCLR_PIN29_Pos) /*!< Bit mask of PIN29 field.                                 */
  #define GPIO_DIRCLR_PIN29_Min (0x0UL)              /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_DIRCLR_PIN29_Max (0x1UL)              /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_DIRCLR_PIN29_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN29_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN29_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN30 @Bit 30 : Set as input pin 30 */
  #define GPIO_DIRCLR_PIN30_Pos (30UL)               /*!< Position of PIN30 field.                                             */
  #define GPIO_DIRCLR_PIN30_Msk (0x1UL << GPIO_DIRCLR_PIN30_Pos) /*!< Bit mask of PIN30 field.                                 */
  #define GPIO_DIRCLR_PIN30_Min (0x0UL)              /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_DIRCLR_PIN30_Max (0x1UL)              /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_DIRCLR_PIN30_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN30_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN30_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */

/* PIN31 @Bit 31 : Set as input pin 31 */
  #define GPIO_DIRCLR_PIN31_Pos (31UL)               /*!< Position of PIN31 field.                                             */
  #define GPIO_DIRCLR_PIN31_Msk (0x1UL << GPIO_DIRCLR_PIN31_Pos) /*!< Bit mask of PIN31 field.                                 */
  #define GPIO_DIRCLR_PIN31_Min (0x0UL)              /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_DIRCLR_PIN31_Max (0x1UL)              /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_DIRCLR_PIN31_Input (0x0UL)            /*!< Read: pin set as input                                               */
  #define GPIO_DIRCLR_PIN31_Output (0x1UL)           /*!< Read: pin set as output                                              */
  #define GPIO_DIRCLR_PIN31_Clear (0x1UL)            /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect  */


/* GPIO_LATCH: Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers */
  #define GPIO_LATCH_ResetValue (0x00000000UL)       /*!< Reset value of LATCH register.                                       */

/* PIN0 @Bit 0 : Status on whether PIN0 has met criteria set in PIN_CNF[0].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN0_Pos (0UL)                  /*!< Position of PIN0 field.                                              */
  #define GPIO_LATCH_PIN0_Msk (0x1UL << GPIO_LATCH_PIN0_Pos) /*!< Bit mask of PIN0 field.                                      */
  #define GPIO_LATCH_PIN0_Min (0x0UL)                /*!< Min enumerator value of PIN0 field.                                  */
  #define GPIO_LATCH_PIN0_Max (0x1UL)                /*!< Max enumerator value of PIN0 field.                                  */
  #define GPIO_LATCH_PIN0_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN0_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN1 @Bit 1 : Status on whether PIN1 has met criteria set in PIN_CNF[1].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN1_Pos (1UL)                  /*!< Position of PIN1 field.                                              */
  #define GPIO_LATCH_PIN1_Msk (0x1UL << GPIO_LATCH_PIN1_Pos) /*!< Bit mask of PIN1 field.                                      */
  #define GPIO_LATCH_PIN1_Min (0x0UL)                /*!< Min enumerator value of PIN1 field.                                  */
  #define GPIO_LATCH_PIN1_Max (0x1UL)                /*!< Max enumerator value of PIN1 field.                                  */
  #define GPIO_LATCH_PIN1_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN1_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN2 @Bit 2 : Status on whether PIN2 has met criteria set in PIN_CNF[2].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN2_Pos (2UL)                  /*!< Position of PIN2 field.                                              */
  #define GPIO_LATCH_PIN2_Msk (0x1UL << GPIO_LATCH_PIN2_Pos) /*!< Bit mask of PIN2 field.                                      */
  #define GPIO_LATCH_PIN2_Min (0x0UL)                /*!< Min enumerator value of PIN2 field.                                  */
  #define GPIO_LATCH_PIN2_Max (0x1UL)                /*!< Max enumerator value of PIN2 field.                                  */
  #define GPIO_LATCH_PIN2_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN2_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN3 @Bit 3 : Status on whether PIN3 has met criteria set in PIN_CNF[3].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN3_Pos (3UL)                  /*!< Position of PIN3 field.                                              */
  #define GPIO_LATCH_PIN3_Msk (0x1UL << GPIO_LATCH_PIN3_Pos) /*!< Bit mask of PIN3 field.                                      */
  #define GPIO_LATCH_PIN3_Min (0x0UL)                /*!< Min enumerator value of PIN3 field.                                  */
  #define GPIO_LATCH_PIN3_Max (0x1UL)                /*!< Max enumerator value of PIN3 field.                                  */
  #define GPIO_LATCH_PIN3_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN3_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN4 @Bit 4 : Status on whether PIN4 has met criteria set in PIN_CNF[4].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN4_Pos (4UL)                  /*!< Position of PIN4 field.                                              */
  #define GPIO_LATCH_PIN4_Msk (0x1UL << GPIO_LATCH_PIN4_Pos) /*!< Bit mask of PIN4 field.                                      */
  #define GPIO_LATCH_PIN4_Min (0x0UL)                /*!< Min enumerator value of PIN4 field.                                  */
  #define GPIO_LATCH_PIN4_Max (0x1UL)                /*!< Max enumerator value of PIN4 field.                                  */
  #define GPIO_LATCH_PIN4_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN4_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN5 @Bit 5 : Status on whether PIN5 has met criteria set in PIN_CNF[5].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN5_Pos (5UL)                  /*!< Position of PIN5 field.                                              */
  #define GPIO_LATCH_PIN5_Msk (0x1UL << GPIO_LATCH_PIN5_Pos) /*!< Bit mask of PIN5 field.                                      */
  #define GPIO_LATCH_PIN5_Min (0x0UL)                /*!< Min enumerator value of PIN5 field.                                  */
  #define GPIO_LATCH_PIN5_Max (0x1UL)                /*!< Max enumerator value of PIN5 field.                                  */
  #define GPIO_LATCH_PIN5_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN5_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN6 @Bit 6 : Status on whether PIN6 has met criteria set in PIN_CNF[6].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN6_Pos (6UL)                  /*!< Position of PIN6 field.                                              */
  #define GPIO_LATCH_PIN6_Msk (0x1UL << GPIO_LATCH_PIN6_Pos) /*!< Bit mask of PIN6 field.                                      */
  #define GPIO_LATCH_PIN6_Min (0x0UL)                /*!< Min enumerator value of PIN6 field.                                  */
  #define GPIO_LATCH_PIN6_Max (0x1UL)                /*!< Max enumerator value of PIN6 field.                                  */
  #define GPIO_LATCH_PIN6_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN6_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN7 @Bit 7 : Status on whether PIN7 has met criteria set in PIN_CNF[7].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN7_Pos (7UL)                  /*!< Position of PIN7 field.                                              */
  #define GPIO_LATCH_PIN7_Msk (0x1UL << GPIO_LATCH_PIN7_Pos) /*!< Bit mask of PIN7 field.                                      */
  #define GPIO_LATCH_PIN7_Min (0x0UL)                /*!< Min enumerator value of PIN7 field.                                  */
  #define GPIO_LATCH_PIN7_Max (0x1UL)                /*!< Max enumerator value of PIN7 field.                                  */
  #define GPIO_LATCH_PIN7_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN7_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN8 @Bit 8 : Status on whether PIN8 has met criteria set in PIN_CNF[8].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN8_Pos (8UL)                  /*!< Position of PIN8 field.                                              */
  #define GPIO_LATCH_PIN8_Msk (0x1UL << GPIO_LATCH_PIN8_Pos) /*!< Bit mask of PIN8 field.                                      */
  #define GPIO_LATCH_PIN8_Min (0x0UL)                /*!< Min enumerator value of PIN8 field.                                  */
  #define GPIO_LATCH_PIN8_Max (0x1UL)                /*!< Max enumerator value of PIN8 field.                                  */
  #define GPIO_LATCH_PIN8_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN8_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN9 @Bit 9 : Status on whether PIN9 has met criteria set in PIN_CNF[9].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN9_Pos (9UL)                  /*!< Position of PIN9 field.                                              */
  #define GPIO_LATCH_PIN9_Msk (0x1UL << GPIO_LATCH_PIN9_Pos) /*!< Bit mask of PIN9 field.                                      */
  #define GPIO_LATCH_PIN9_Min (0x0UL)                /*!< Min enumerator value of PIN9 field.                                  */
  #define GPIO_LATCH_PIN9_Max (0x1UL)                /*!< Max enumerator value of PIN9 field.                                  */
  #define GPIO_LATCH_PIN9_NotLatched (0x0UL)         /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN9_Latched (0x1UL)            /*!< Criteria has been met                                                */

/* PIN10 @Bit 10 : Status on whether PIN10 has met criteria set in PIN_CNF[10].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN10_Pos (10UL)                /*!< Position of PIN10 field.                                             */
  #define GPIO_LATCH_PIN10_Msk (0x1UL << GPIO_LATCH_PIN10_Pos) /*!< Bit mask of PIN10 field.                                   */
  #define GPIO_LATCH_PIN10_Min (0x0UL)               /*!< Min enumerator value of PIN10 field.                                 */
  #define GPIO_LATCH_PIN10_Max (0x1UL)               /*!< Max enumerator value of PIN10 field.                                 */
  #define GPIO_LATCH_PIN10_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN10_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN11 @Bit 11 : Status on whether PIN11 has met criteria set in PIN_CNF[11].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN11_Pos (11UL)                /*!< Position of PIN11 field.                                             */
  #define GPIO_LATCH_PIN11_Msk (0x1UL << GPIO_LATCH_PIN11_Pos) /*!< Bit mask of PIN11 field.                                   */
  #define GPIO_LATCH_PIN11_Min (0x0UL)               /*!< Min enumerator value of PIN11 field.                                 */
  #define GPIO_LATCH_PIN11_Max (0x1UL)               /*!< Max enumerator value of PIN11 field.                                 */
  #define GPIO_LATCH_PIN11_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN11_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN12 @Bit 12 : Status on whether PIN12 has met criteria set in PIN_CNF[12].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN12_Pos (12UL)                /*!< Position of PIN12 field.                                             */
  #define GPIO_LATCH_PIN12_Msk (0x1UL << GPIO_LATCH_PIN12_Pos) /*!< Bit mask of PIN12 field.                                   */
  #define GPIO_LATCH_PIN12_Min (0x0UL)               /*!< Min enumerator value of PIN12 field.                                 */
  #define GPIO_LATCH_PIN12_Max (0x1UL)               /*!< Max enumerator value of PIN12 field.                                 */
  #define GPIO_LATCH_PIN12_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN12_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN13 @Bit 13 : Status on whether PIN13 has met criteria set in PIN_CNF[13].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN13_Pos (13UL)                /*!< Position of PIN13 field.                                             */
  #define GPIO_LATCH_PIN13_Msk (0x1UL << GPIO_LATCH_PIN13_Pos) /*!< Bit mask of PIN13 field.                                   */
  #define GPIO_LATCH_PIN13_Min (0x0UL)               /*!< Min enumerator value of PIN13 field.                                 */
  #define GPIO_LATCH_PIN13_Max (0x1UL)               /*!< Max enumerator value of PIN13 field.                                 */
  #define GPIO_LATCH_PIN13_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN13_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN14 @Bit 14 : Status on whether PIN14 has met criteria set in PIN_CNF[14].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN14_Pos (14UL)                /*!< Position of PIN14 field.                                             */
  #define GPIO_LATCH_PIN14_Msk (0x1UL << GPIO_LATCH_PIN14_Pos) /*!< Bit mask of PIN14 field.                                   */
  #define GPIO_LATCH_PIN14_Min (0x0UL)               /*!< Min enumerator value of PIN14 field.                                 */
  #define GPIO_LATCH_PIN14_Max (0x1UL)               /*!< Max enumerator value of PIN14 field.                                 */
  #define GPIO_LATCH_PIN14_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN14_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN15 @Bit 15 : Status on whether PIN15 has met criteria set in PIN_CNF[15].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN15_Pos (15UL)                /*!< Position of PIN15 field.                                             */
  #define GPIO_LATCH_PIN15_Msk (0x1UL << GPIO_LATCH_PIN15_Pos) /*!< Bit mask of PIN15 field.                                   */
  #define GPIO_LATCH_PIN15_Min (0x0UL)               /*!< Min enumerator value of PIN15 field.                                 */
  #define GPIO_LATCH_PIN15_Max (0x1UL)               /*!< Max enumerator value of PIN15 field.                                 */
  #define GPIO_LATCH_PIN15_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN15_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN16 @Bit 16 : Status on whether PIN16 has met criteria set in PIN_CNF[16].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN16_Pos (16UL)                /*!< Position of PIN16 field.                                             */
  #define GPIO_LATCH_PIN16_Msk (0x1UL << GPIO_LATCH_PIN16_Pos) /*!< Bit mask of PIN16 field.                                   */
  #define GPIO_LATCH_PIN16_Min (0x0UL)               /*!< Min enumerator value of PIN16 field.                                 */
  #define GPIO_LATCH_PIN16_Max (0x1UL)               /*!< Max enumerator value of PIN16 field.                                 */
  #define GPIO_LATCH_PIN16_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN16_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN17 @Bit 17 : Status on whether PIN17 has met criteria set in PIN_CNF[17].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN17_Pos (17UL)                /*!< Position of PIN17 field.                                             */
  #define GPIO_LATCH_PIN17_Msk (0x1UL << GPIO_LATCH_PIN17_Pos) /*!< Bit mask of PIN17 field.                                   */
  #define GPIO_LATCH_PIN17_Min (0x0UL)               /*!< Min enumerator value of PIN17 field.                                 */
  #define GPIO_LATCH_PIN17_Max (0x1UL)               /*!< Max enumerator value of PIN17 field.                                 */
  #define GPIO_LATCH_PIN17_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN17_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN18 @Bit 18 : Status on whether PIN18 has met criteria set in PIN_CNF[18].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN18_Pos (18UL)                /*!< Position of PIN18 field.                                             */
  #define GPIO_LATCH_PIN18_Msk (0x1UL << GPIO_LATCH_PIN18_Pos) /*!< Bit mask of PIN18 field.                                   */
  #define GPIO_LATCH_PIN18_Min (0x0UL)               /*!< Min enumerator value of PIN18 field.                                 */
  #define GPIO_LATCH_PIN18_Max (0x1UL)               /*!< Max enumerator value of PIN18 field.                                 */
  #define GPIO_LATCH_PIN18_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN18_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN19 @Bit 19 : Status on whether PIN19 has met criteria set in PIN_CNF[19].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN19_Pos (19UL)                /*!< Position of PIN19 field.                                             */
  #define GPIO_LATCH_PIN19_Msk (0x1UL << GPIO_LATCH_PIN19_Pos) /*!< Bit mask of PIN19 field.                                   */
  #define GPIO_LATCH_PIN19_Min (0x0UL)               /*!< Min enumerator value of PIN19 field.                                 */
  #define GPIO_LATCH_PIN19_Max (0x1UL)               /*!< Max enumerator value of PIN19 field.                                 */
  #define GPIO_LATCH_PIN19_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN19_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN20 @Bit 20 : Status on whether PIN20 has met criteria set in PIN_CNF[20].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN20_Pos (20UL)                /*!< Position of PIN20 field.                                             */
  #define GPIO_LATCH_PIN20_Msk (0x1UL << GPIO_LATCH_PIN20_Pos) /*!< Bit mask of PIN20 field.                                   */
  #define GPIO_LATCH_PIN20_Min (0x0UL)               /*!< Min enumerator value of PIN20 field.                                 */
  #define GPIO_LATCH_PIN20_Max (0x1UL)               /*!< Max enumerator value of PIN20 field.                                 */
  #define GPIO_LATCH_PIN20_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN20_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN21 @Bit 21 : Status on whether PIN21 has met criteria set in PIN_CNF[21].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN21_Pos (21UL)                /*!< Position of PIN21 field.                                             */
  #define GPIO_LATCH_PIN21_Msk (0x1UL << GPIO_LATCH_PIN21_Pos) /*!< Bit mask of PIN21 field.                                   */
  #define GPIO_LATCH_PIN21_Min (0x0UL)               /*!< Min enumerator value of PIN21 field.                                 */
  #define GPIO_LATCH_PIN21_Max (0x1UL)               /*!< Max enumerator value of PIN21 field.                                 */
  #define GPIO_LATCH_PIN21_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN21_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN22 @Bit 22 : Status on whether PIN22 has met criteria set in PIN_CNF[22].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN22_Pos (22UL)                /*!< Position of PIN22 field.                                             */
  #define GPIO_LATCH_PIN22_Msk (0x1UL << GPIO_LATCH_PIN22_Pos) /*!< Bit mask of PIN22 field.                                   */
  #define GPIO_LATCH_PIN22_Min (0x0UL)               /*!< Min enumerator value of PIN22 field.                                 */
  #define GPIO_LATCH_PIN22_Max (0x1UL)               /*!< Max enumerator value of PIN22 field.                                 */
  #define GPIO_LATCH_PIN22_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN22_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN23 @Bit 23 : Status on whether PIN23 has met criteria set in PIN_CNF[23].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN23_Pos (23UL)                /*!< Position of PIN23 field.                                             */
  #define GPIO_LATCH_PIN23_Msk (0x1UL << GPIO_LATCH_PIN23_Pos) /*!< Bit mask of PIN23 field.                                   */
  #define GPIO_LATCH_PIN23_Min (0x0UL)               /*!< Min enumerator value of PIN23 field.                                 */
  #define GPIO_LATCH_PIN23_Max (0x1UL)               /*!< Max enumerator value of PIN23 field.                                 */
  #define GPIO_LATCH_PIN23_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN23_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN24 @Bit 24 : Status on whether PIN24 has met criteria set in PIN_CNF[24].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN24_Pos (24UL)                /*!< Position of PIN24 field.                                             */
  #define GPIO_LATCH_PIN24_Msk (0x1UL << GPIO_LATCH_PIN24_Pos) /*!< Bit mask of PIN24 field.                                   */
  #define GPIO_LATCH_PIN24_Min (0x0UL)               /*!< Min enumerator value of PIN24 field.                                 */
  #define GPIO_LATCH_PIN24_Max (0x1UL)               /*!< Max enumerator value of PIN24 field.                                 */
  #define GPIO_LATCH_PIN24_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN24_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN25 @Bit 25 : Status on whether PIN25 has met criteria set in PIN_CNF[25].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN25_Pos (25UL)                /*!< Position of PIN25 field.                                             */
  #define GPIO_LATCH_PIN25_Msk (0x1UL << GPIO_LATCH_PIN25_Pos) /*!< Bit mask of PIN25 field.                                   */
  #define GPIO_LATCH_PIN25_Min (0x0UL)               /*!< Min enumerator value of PIN25 field.                                 */
  #define GPIO_LATCH_PIN25_Max (0x1UL)               /*!< Max enumerator value of PIN25 field.                                 */
  #define GPIO_LATCH_PIN25_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN25_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN26 @Bit 26 : Status on whether PIN26 has met criteria set in PIN_CNF[26].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN26_Pos (26UL)                /*!< Position of PIN26 field.                                             */
  #define GPIO_LATCH_PIN26_Msk (0x1UL << GPIO_LATCH_PIN26_Pos) /*!< Bit mask of PIN26 field.                                   */
  #define GPIO_LATCH_PIN26_Min (0x0UL)               /*!< Min enumerator value of PIN26 field.                                 */
  #define GPIO_LATCH_PIN26_Max (0x1UL)               /*!< Max enumerator value of PIN26 field.                                 */
  #define GPIO_LATCH_PIN26_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN26_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN27 @Bit 27 : Status on whether PIN27 has met criteria set in PIN_CNF[27].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN27_Pos (27UL)                /*!< Position of PIN27 field.                                             */
  #define GPIO_LATCH_PIN27_Msk (0x1UL << GPIO_LATCH_PIN27_Pos) /*!< Bit mask of PIN27 field.                                   */
  #define GPIO_LATCH_PIN27_Min (0x0UL)               /*!< Min enumerator value of PIN27 field.                                 */
  #define GPIO_LATCH_PIN27_Max (0x1UL)               /*!< Max enumerator value of PIN27 field.                                 */
  #define GPIO_LATCH_PIN27_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN27_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN28 @Bit 28 : Status on whether PIN28 has met criteria set in PIN_CNF[28].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN28_Pos (28UL)                /*!< Position of PIN28 field.                                             */
  #define GPIO_LATCH_PIN28_Msk (0x1UL << GPIO_LATCH_PIN28_Pos) /*!< Bit mask of PIN28 field.                                   */
  #define GPIO_LATCH_PIN28_Min (0x0UL)               /*!< Min enumerator value of PIN28 field.                                 */
  #define GPIO_LATCH_PIN28_Max (0x1UL)               /*!< Max enumerator value of PIN28 field.                                 */
  #define GPIO_LATCH_PIN28_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN28_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN29 @Bit 29 : Status on whether PIN29 has met criteria set in PIN_CNF[29].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN29_Pos (29UL)                /*!< Position of PIN29 field.                                             */
  #define GPIO_LATCH_PIN29_Msk (0x1UL << GPIO_LATCH_PIN29_Pos) /*!< Bit mask of PIN29 field.                                   */
  #define GPIO_LATCH_PIN29_Min (0x0UL)               /*!< Min enumerator value of PIN29 field.                                 */
  #define GPIO_LATCH_PIN29_Max (0x1UL)               /*!< Max enumerator value of PIN29 field.                                 */
  #define GPIO_LATCH_PIN29_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN29_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN30 @Bit 30 : Status on whether PIN30 has met criteria set in PIN_CNF[30].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN30_Pos (30UL)                /*!< Position of PIN30 field.                                             */
  #define GPIO_LATCH_PIN30_Msk (0x1UL << GPIO_LATCH_PIN30_Pos) /*!< Bit mask of PIN30 field.                                   */
  #define GPIO_LATCH_PIN30_Min (0x0UL)               /*!< Min enumerator value of PIN30 field.                                 */
  #define GPIO_LATCH_PIN30_Max (0x1UL)               /*!< Max enumerator value of PIN30 field.                                 */
  #define GPIO_LATCH_PIN30_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN30_Latched (0x1UL)           /*!< Criteria has been met                                                */

/* PIN31 @Bit 31 : Status on whether PIN31 has met criteria set in PIN_CNF[31].SENSE register. Write '1' to clear. */
  #define GPIO_LATCH_PIN31_Pos (31UL)                /*!< Position of PIN31 field.                                             */
  #define GPIO_LATCH_PIN31_Msk (0x1UL << GPIO_LATCH_PIN31_Pos) /*!< Bit mask of PIN31 field.                                   */
  #define GPIO_LATCH_PIN31_Min (0x0UL)               /*!< Min enumerator value of PIN31 field.                                 */
  #define GPIO_LATCH_PIN31_Max (0x1UL)               /*!< Max enumerator value of PIN31 field.                                 */
  #define GPIO_LATCH_PIN31_NotLatched (0x0UL)        /*!< Criteria has not been met                                            */
  #define GPIO_LATCH_PIN31_Latched (0x1UL)           /*!< Criteria has been met                                                */


/* GPIO_DETECTMODE: Select between default DETECT signal behavior and LDETECT mode */
  #define GPIO_DETECTMODE_ResetValue (0x00000000UL)  /*!< Reset value of DETECTMODE register.                                  */

/* DETECTMODE @Bit 0 : Select between default DETECT signal behavior and LDETECT mode */
  #define GPIO_DETECTMODE_DETECTMODE_Pos (0UL)       /*!< Position of DETECTMODE field.                                        */
  #define GPIO_DETECTMODE_DETECTMODE_Msk (0x1UL << GPIO_DETECTMODE_DETECTMODE_Pos) /*!< Bit mask of DETECTMODE field.          */
  #define GPIO_DETECTMODE_DETECTMODE_Min (0x0UL)     /*!< Min enumerator value of DETECTMODE field.                            */
  #define GPIO_DETECTMODE_DETECTMODE_Max (0x1UL)     /*!< Max enumerator value of DETECTMODE field.                            */
  #define GPIO_DETECTMODE_DETECTMODE_Default (0x0UL) /*!< DETECT directly connected to PIN DETECT signals                      */
  #define GPIO_DETECTMODE_DETECTMODE_LDETECT (0x1UL) /*!< Use the latched LDETECT behavior                                     */


/* GPIO_PIN_CNF: Pin n configuration of GPIO pin */
  #define GPIO_PIN_CNF_MaxCount (32UL)               /*!< Max size of PIN_CNF[32] array.                                       */
  #define GPIO_PIN_CNF_MaxIndex (31UL)               /*!< Max index of PIN_CNF[32] array.                                      */
  #define GPIO_PIN_CNF_MinIndex (0UL)                /*!< Min index of PIN_CNF[32] array.                                      */
  #define GPIO_PIN_CNF_ResetValue (0x00000002UL)     /*!< Reset value of PIN_CNF[32] register.                                 */

/* DIR @Bit 0 : Pin direction. Same physical register as DIR register */
  #define GPIO_PIN_CNF_DIR_Pos (0UL)                 /*!< Position of DIR field.                                               */
  #define GPIO_PIN_CNF_DIR_Msk (0x1UL << GPIO_PIN_CNF_DIR_Pos) /*!< Bit mask of DIR field.                                     */
  #define GPIO_PIN_CNF_DIR_Min (0x0UL)               /*!< Min enumerator value of DIR field.                                   */
  #define GPIO_PIN_CNF_DIR_Max (0x1UL)               /*!< Max enumerator value of DIR field.                                   */
  #define GPIO_PIN_CNF_DIR_Input (0x0UL)             /*!< Configure pin as an input pin                                        */
  #define GPIO_PIN_CNF_DIR_Output (0x1UL)            /*!< Configure pin as an output pin                                       */

/* INPUT @Bit 1 : Connect or disconnect input buffer */
  #define GPIO_PIN_CNF_INPUT_Pos (1UL)               /*!< Position of INPUT field.                                             */
  #define GPIO_PIN_CNF_INPUT_Msk (0x1UL << GPIO_PIN_CNF_INPUT_Pos) /*!< Bit mask of INPUT field.                               */
  #define GPIO_PIN_CNF_INPUT_Min (0x0UL)             /*!< Min enumerator value of INPUT field.                                 */
  #define GPIO_PIN_CNF_INPUT_Max (0x1UL)             /*!< Max enumerator value of INPUT field.                                 */
  #define GPIO_PIN_CNF_INPUT_Connect (0x0UL)         /*!< Connect input buffer                                                 */
  #define GPIO_PIN_CNF_INPUT_Disconnect (0x1UL)      /*!< Disconnect input buffer                                              */

/* PULL @Bits 2..3 : Pull configuration */
  #define GPIO_PIN_CNF_PULL_Pos (2UL)                /*!< Position of PULL field.                                              */
  #define GPIO_PIN_CNF_PULL_Msk (0x3UL << GPIO_PIN_CNF_PULL_Pos) /*!< Bit mask of PULL field.                                  */
  #define GPIO_PIN_CNF_PULL_Min (0x0UL)              /*!< Min enumerator value of PULL field.                                  */
  #define GPIO_PIN_CNF_PULL_Max (0x3UL)              /*!< Max enumerator value of PULL field.                                  */
  #define GPIO_PIN_CNF_PULL_Disabled (0x0UL)         /*!< No pull                                                              */
  #define GPIO_PIN_CNF_PULL_Pulldown (0x1UL)         /*!< Pull down on pin                                                     */
  #define GPIO_PIN_CNF_PULL_Pullup (0x3UL)           /*!< Pull up on pin                                                       */

/* DRIVE0 @Bits 8..9 : Drive configuration for '0' */
  #define GPIO_PIN_CNF_DRIVE0_Pos (8UL)              /*!< Position of DRIVE0 field.                                            */
  #define GPIO_PIN_CNF_DRIVE0_Msk (0x3UL << GPIO_PIN_CNF_DRIVE0_Pos) /*!< Bit mask of DRIVE0 field.                            */
  #define GPIO_PIN_CNF_DRIVE0_Min (0x0UL)            /*!< Min enumerator value of DRIVE0 field.                                */
  #define GPIO_PIN_CNF_DRIVE0_Max (0x3UL)            /*!< Max enumerator value of DRIVE0 field.                                */
  #define GPIO_PIN_CNF_DRIVE0_S0 (0x0UL)             /*!< Standard '0'                                                         */
  #define GPIO_PIN_CNF_DRIVE0_H0 (0x1UL)             /*!< High drive '0'                                                       */
  #define GPIO_PIN_CNF_DRIVE0_D0 (0x2UL)             /*!< Disconnect '0'(normally used for wired-or connections)               */
  #define GPIO_PIN_CNF_DRIVE0_E0 (0x3UL)             /*!< Extra high drive '0'                                                 */

/* DRIVE1 @Bits 10..11 : Drive configuration for '1' */
  #define GPIO_PIN_CNF_DRIVE1_Pos (10UL)             /*!< Position of DRIVE1 field.                                            */
  #define GPIO_PIN_CNF_DRIVE1_Msk (0x3UL << GPIO_PIN_CNF_DRIVE1_Pos) /*!< Bit mask of DRIVE1 field.                            */
  #define GPIO_PIN_CNF_DRIVE1_Min (0x0UL)            /*!< Min enumerator value of DRIVE1 field.                                */
  #define GPIO_PIN_CNF_DRIVE1_Max (0x3UL)            /*!< Max enumerator value of DRIVE1 field.                                */
  #define GPIO_PIN_CNF_DRIVE1_S1 (0x0UL)             /*!< Standard '1'                                                         */
  #define GPIO_PIN_CNF_DRIVE1_H1 (0x1UL)             /*!< High drive '1'                                                       */
  #define GPIO_PIN_CNF_DRIVE1_D1 (0x2UL)             /*!< Disconnect '1'(normally used for wired-or connections)               */
  #define GPIO_PIN_CNF_DRIVE1_E1 (0x3UL)             /*!< Extra high drive '1'                                                 */

/* SENSE @Bits 16..17 : Pin sensing mechanism */
  #define GPIO_PIN_CNF_SENSE_Pos (16UL)              /*!< Position of SENSE field.                                             */
  #define GPIO_PIN_CNF_SENSE_Msk (0x3UL << GPIO_PIN_CNF_SENSE_Pos) /*!< Bit mask of SENSE field.                               */
  #define GPIO_PIN_CNF_SENSE_Min (0x0UL)             /*!< Min enumerator value of SENSE field.                                 */
  #define GPIO_PIN_CNF_SENSE_Max (0x3UL)             /*!< Max enumerator value of SENSE field.                                 */
  #define GPIO_PIN_CNF_SENSE_Disabled (0x0UL)        /*!< Disabled                                                             */
  #define GPIO_PIN_CNF_SENSE_High (0x2UL)            /*!< Sense for high level                                                 */
  #define GPIO_PIN_CNF_SENSE_Low (0x3UL)             /*!< Sense for low level                                                  */

/* CTRLSEL @Bits 28..30 : Select which module has direct control over this pin */
  #define GPIO_PIN_CNF_CTRLSEL_Pos (28UL)            /*!< Position of CTRLSEL field.                                           */
  #define GPIO_PIN_CNF_CTRLSEL_Msk (0x7UL << GPIO_PIN_CNF_CTRLSEL_Pos) /*!< Bit mask of CTRLSEL field.                         */
  #define GPIO_PIN_CNF_CTRLSEL_Min (0x0UL)           /*!< Min enumerator value of CTRLSEL field.                               */
  #define GPIO_PIN_CNF_CTRLSEL_Max (0x4UL)           /*!< Max enumerator value of CTRLSEL field.                               */
  #define GPIO_PIN_CNF_CTRLSEL_GPIO (0x0UL)          /*!< GPIO or peripherals with PSEL registers                              */
  #define GPIO_PIN_CNF_CTRLSEL_VPR (0x1UL)           /*!< VPR processor                                                        */
  #define GPIO_PIN_CNF_CTRLSEL_GRTC (0x4UL)          /*!< GRTC peripheral                                                      */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                       GPIOINTERNAL                                       ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* =================================================== Struct GPIOINTERNAL =================================================== */
/**
  * @brief GPIO Internal
  */
  typedef struct {                                   /*!< GPIOINTERNAL Structure                                               */
    __IM uint32_t RESERVED;
  } NRF_GPIOINTERNAL_Type;                           /*!< Size = 4 (0x004)                                                     */

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          GPIOTE                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct GPIOTE_EVENTS_PORT ================================================ */
/**
  * @brief EVENTS_PORT [GPIOTE_EVENTS_PORT] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  NONSECURE;                         /*!< (@ 0x00000000) Port event (the event name NONSECURE was chosen to be
                                                                         API compatible with devices that feature Arm TrustZone
                                                                         security)*/
  __IM  uint32_t  RESERVED;
} NRF_GPIOTE_EVENTS_PORT_Type;                       /*!< Size = 8 (0x008)                                                     */
  #define GPIOTE_EVENTS_PORT_MaxCount (1UL)          /*!< Size of EVENTS_PORT[1] array.                                        */
  #define GPIOTE_EVENTS_PORT_MaxIndex (0UL)          /*!< Max index of EVENTS_PORT[1] array.                                   */
  #define GPIOTE_EVENTS_PORT_MinIndex (0UL)          /*!< Min index of EVENTS_PORT[1] array.                                   */

/* GPIOTE_EVENTS_PORT_NONSECURE: Port event (the event name NONSECURE was chosen to be API compatible with devices that feature
                                  Arm TrustZone security) */

  #define GPIOTE_EVENTS_PORT_NONSECURE_ResetValue (0x00000000UL) /*!< Reset value of NONSECURE register.                       */

/* NONSECURE @Bit 0 : Port event (the event name NONSECURE was chosen to be API compatible with devices that feature Arm
                      TrustZone security) */

  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Pos (0UL) /*!< Position of NONSECURE field.                                   */
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Msk (0x1UL << GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Pos) /*!< Bit mask of
                                                                            NONSECURE field.*/
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Min (0x0UL) /*!< Min enumerator value of NONSECURE field.                     */
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Max (0x1UL) /*!< Max enumerator value of NONSECURE field.                     */
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_NotGenerated (0x0UL) /*!< Event not generated                                 */
  #define GPIOTE_EVENTS_PORT_NONSECURE_NONSECURE_Generated (0x1UL) /*!< Event generated                                        */



/* =============================================== Struct GPIOTE_PUBLISH_PORT ================================================ */
/**
  * @brief PUBLISH_PORT [GPIOTE_PUBLISH_PORT] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  NONSECURE;                         /*!< (@ 0x00000000) Publish configuration for event PORT[n].NONSECURE     */
  __IM  uint32_t  RESERVED;
} NRF_GPIOTE_PUBLISH_PORT_Type;                      /*!< Size = 8 (0x008)                                                     */
  #define GPIOTE_PUBLISH_PORT_MaxCount (1UL)         /*!< Size of PUBLISH_PORT[1] array.                                       */
  #define GPIOTE_PUBLISH_PORT_MaxIndex (0UL)         /*!< Max index of PUBLISH_PORT[1] array.                                  */
  #define GPIOTE_PUBLISH_PORT_MinIndex (0UL)         /*!< Min index of PUBLISH_PORT[1] array.                                  */

/* GPIOTE_PUBLISH_PORT_NONSECURE: Publish configuration for event PORT[n].NONSECURE */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_ResetValue (0x00000000UL) /*!< Reset value of NONSECURE register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that event PORT[n].NONSECURE will publish to */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                          */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                      */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                       */

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Pos (31UL) /*!< Position of EN field.                                               */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Msk (0x1UL << GPIOTE_PUBLISH_PORT_NONSECURE_EN_Pos) /*!< Bit mask of EN field.      */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                  */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                  */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Disabled (0x0UL) /*!< Disable publishing                                            */
  #define GPIOTE_PUBLISH_PORT_NONSECURE_EN_Enabled (0x1UL) /*!< Enable publishing                                              */


/* ====================================================== Struct GPIOTE ====================================================== */
/**
  * @brief GPIO Tasks and Events
  */
  typedef struct {                                   /*!< GPIOTE Structure                                                     */
    __OM uint32_t TASKS_OUT[8];                      /*!< (@ 0x00000000) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is configured in CONFIG[n].POLARITY.*/
    __IM uint32_t RESERVED[4];
    __OM uint32_t TASKS_SET[8];                      /*!< (@ 0x00000030) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is to set it high.*/
    __IM uint32_t RESERVED1[4];
    __OM uint32_t TASKS_CLR[8];                      /*!< (@ 0x00000060) Task for writing to pin specified in CONFIG[n].PSEL.
                                                                         Action on pin is to set it low.*/
    __IOM uint32_t SUBSCRIBE_OUT[8];                 /*!< (@ 0x00000080) Subscribe configuration for task OUT[n]               */
    __IM uint32_t RESERVED2[4];
    __IOM uint32_t SUBSCRIBE_SET[8];                 /*!< (@ 0x000000B0) Subscribe configuration for task SET[n]               */
    __IM uint32_t RESERVED3[4];
    __IOM uint32_t SUBSCRIBE_CLR[8];                 /*!< (@ 0x000000E0) Subscribe configuration for task CLR[n]               */
    __IOM uint32_t EVENTS_IN[8];                     /*!< (@ 0x00000100) Event from pin specified in CONFIG[n].PSEL            */
    __IM uint32_t RESERVED4[8];
    __IOM NRF_GPIOTE_EVENTS_PORT_Type EVENTS_PORT[1]; /*!< (@ 0x00000140) Peripheral events.                                   */
    __IM uint32_t RESERVED5[14];
    __IOM uint32_t PUBLISH_IN[8];                    /*!< (@ 0x00000180) Publish configuration for event IN[n]                 */
    __IM uint32_t RESERVED6[8];
    __IOM NRF_GPIOTE_PUBLISH_PORT_Type PUBLISH_PORT[1]; /*!< (@ 0x000001C0) Publish configuration for events                   */
    __IM uint32_t RESERVED7[79];
    __IOM uint32_t INTENSET0;                        /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR0;                        /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t INTENSET1;                        /*!< (@ 0x00000314) Enable interrupt                                      */
    __IOM uint32_t INTENCLR1;                        /*!< (@ 0x00000318) Disable interrupt                                     */
    __IM uint32_t RESERVED9[125];
    __IOM uint32_t CONFIG[8];                        /*!< (@ 0x00000510) Configuration for OUT[n], SET[n], and CLR[n] tasks and
                                                                         IN[n] event*/
  } NRF_GPIOTE_Type;                                 /*!< Size = 1328 (0x530)                                                  */

/* GPIOTE_TASKS_OUT: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
  #define GPIOTE_TASKS_OUT_MaxCount (8UL)            /*!< Max size of TASKS_OUT[8] array.                                      */
  #define GPIOTE_TASKS_OUT_MaxIndex (7UL)            /*!< Max index of TASKS_OUT[8] array.                                     */
  #define GPIOTE_TASKS_OUT_MinIndex (0UL)            /*!< Min index of TASKS_OUT[8] array.                                     */
  #define GPIOTE_TASKS_OUT_ResetValue (0x00000000UL) /*!< Reset value of TASKS_OUT[8] register.                                */

/* TASKS_OUT @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Pos (0UL)       /*!< Position of TASKS_OUT field.                                         */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Msk (0x1UL << GPIOTE_TASKS_OUT_TASKS_OUT_Pos) /*!< Bit mask of TASKS_OUT field.           */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Min (0x1UL)     /*!< Min enumerator value of TASKS_OUT field.                             */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Max (0x1UL)     /*!< Max enumerator value of TASKS_OUT field.                             */
  #define GPIOTE_TASKS_OUT_TASKS_OUT_Trigger (0x1UL) /*!< Trigger task                                                         */


/* GPIOTE_TASKS_SET: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
  #define GPIOTE_TASKS_SET_MaxCount (8UL)            /*!< Max size of TASKS_SET[8] array.                                      */
  #define GPIOTE_TASKS_SET_MaxIndex (7UL)            /*!< Max index of TASKS_SET[8] array.                                     */
  #define GPIOTE_TASKS_SET_MinIndex (0UL)            /*!< Min index of TASKS_SET[8] array.                                     */
  #define GPIOTE_TASKS_SET_ResetValue (0x00000000UL) /*!< Reset value of TASKS_SET[8] register.                                */

/* TASKS_SET @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
  #define GPIOTE_TASKS_SET_TASKS_SET_Pos (0UL)       /*!< Position of TASKS_SET field.                                         */
  #define GPIOTE_TASKS_SET_TASKS_SET_Msk (0x1UL << GPIOTE_TASKS_SET_TASKS_SET_Pos) /*!< Bit mask of TASKS_SET field.           */
  #define GPIOTE_TASKS_SET_TASKS_SET_Min (0x1UL)     /*!< Min enumerator value of TASKS_SET field.                             */
  #define GPIOTE_TASKS_SET_TASKS_SET_Max (0x1UL)     /*!< Max enumerator value of TASKS_SET field.                             */
  #define GPIOTE_TASKS_SET_TASKS_SET_Trigger (0x1UL) /*!< Trigger task                                                         */


/* GPIOTE_TASKS_CLR: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
  #define GPIOTE_TASKS_CLR_MaxCount (8UL)            /*!< Max size of TASKS_CLR[8] array.                                      */
  #define GPIOTE_TASKS_CLR_MaxIndex (7UL)            /*!< Max index of TASKS_CLR[8] array.                                     */
  #define GPIOTE_TASKS_CLR_MinIndex (0UL)            /*!< Min index of TASKS_CLR[8] array.                                     */
  #define GPIOTE_TASKS_CLR_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CLR[8] register.                                */

/* TASKS_CLR @Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Pos (0UL)       /*!< Position of TASKS_CLR field.                                         */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Msk (0x1UL << GPIOTE_TASKS_CLR_TASKS_CLR_Pos) /*!< Bit mask of TASKS_CLR field.           */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Min (0x1UL)     /*!< Min enumerator value of TASKS_CLR field.                             */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Max (0x1UL)     /*!< Max enumerator value of TASKS_CLR field.                             */
  #define GPIOTE_TASKS_CLR_TASKS_CLR_Trigger (0x1UL) /*!< Trigger task                                                         */


/* GPIOTE_SUBSCRIBE_OUT: Subscribe configuration for task OUT[n] */
  #define GPIOTE_SUBSCRIBE_OUT_MaxCount (8UL)        /*!< Max size of SUBSCRIBE_OUT[8] array.                                  */
  #define GPIOTE_SUBSCRIBE_OUT_MaxIndex (7UL)        /*!< Max index of SUBSCRIBE_OUT[8] array.                                 */
  #define GPIOTE_SUBSCRIBE_OUT_MinIndex (0UL)        /*!< Min index of SUBSCRIBE_OUT[8] array.                                 */
  #define GPIOTE_SUBSCRIBE_OUT_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_OUT[8] register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task OUT[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define GPIOTE_SUBSCRIBE_OUT_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_OUT_EN_Pos) /*!< Bit mask of EN field.                        */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define GPIOTE_SUBSCRIBE_OUT_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* GPIOTE_SUBSCRIBE_SET: Subscribe configuration for task SET[n] */
  #define GPIOTE_SUBSCRIBE_SET_MaxCount (8UL)        /*!< Max size of SUBSCRIBE_SET[8] array.                                  */
  #define GPIOTE_SUBSCRIBE_SET_MaxIndex (7UL)        /*!< Max index of SUBSCRIBE_SET[8] array.                                 */
  #define GPIOTE_SUBSCRIBE_SET_MinIndex (0UL)        /*!< Min index of SUBSCRIBE_SET[8] array.                                 */
  #define GPIOTE_SUBSCRIBE_SET_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SET[8] register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task SET[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_SET_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define GPIOTE_SUBSCRIBE_SET_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_SET_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define GPIOTE_SUBSCRIBE_SET_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_SET_EN_Pos) /*!< Bit mask of EN field.                        */
  #define GPIOTE_SUBSCRIBE_SET_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define GPIOTE_SUBSCRIBE_SET_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define GPIOTE_SUBSCRIBE_SET_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define GPIOTE_SUBSCRIBE_SET_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* GPIOTE_SUBSCRIBE_CLR: Subscribe configuration for task CLR[n] */
  #define GPIOTE_SUBSCRIBE_CLR_MaxCount (8UL)        /*!< Max size of SUBSCRIBE_CLR[8] array.                                  */
  #define GPIOTE_SUBSCRIBE_CLR_MaxIndex (7UL)        /*!< Max index of SUBSCRIBE_CLR[8] array.                                 */
  #define GPIOTE_SUBSCRIBE_CLR_MinIndex (0UL)        /*!< Min index of SUBSCRIBE_CLR[8] array.                                 */
  #define GPIOTE_SUBSCRIBE_CLR_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CLR[8] register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task CLR[n] will subscribe to */
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define GPIOTE_SUBSCRIBE_CLR_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_CLR_EN_Pos) /*!< Bit mask of EN field.                        */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define GPIOTE_SUBSCRIBE_CLR_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* GPIOTE_EVENTS_IN: Event from pin specified in CONFIG[n].PSEL */
  #define GPIOTE_EVENTS_IN_MaxCount (8UL)            /*!< Max size of EVENTS_IN[8] array.                                      */
  #define GPIOTE_EVENTS_IN_MaxIndex (7UL)            /*!< Max index of EVENTS_IN[8] array.                                     */
  #define GPIOTE_EVENTS_IN_MinIndex (0UL)            /*!< Min index of EVENTS_IN[8] array.                                     */
  #define GPIOTE_EVENTS_IN_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_IN[8] register.                                */

/* EVENTS_IN @Bit 0 : Event from pin specified in CONFIG[n].PSEL */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Pos (0UL)       /*!< Position of EVENTS_IN field.                                         */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Msk (0x1UL << GPIOTE_EVENTS_IN_EVENTS_IN_Pos) /*!< Bit mask of EVENTS_IN field.           */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Min (0x0UL)     /*!< Min enumerator value of EVENTS_IN field.                             */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Max (0x1UL)     /*!< Max enumerator value of EVENTS_IN field.                             */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define GPIOTE_EVENTS_IN_EVENTS_IN_Generated (0x1UL) /*!< Event generated                                                    */


/* GPIOTE_PUBLISH_IN: Publish configuration for event IN[n] */
  #define GPIOTE_PUBLISH_IN_MaxCount (8UL)           /*!< Max size of PUBLISH_IN[8] array.                                     */
  #define GPIOTE_PUBLISH_IN_MaxIndex (7UL)           /*!< Max index of PUBLISH_IN[8] array.                                    */
  #define GPIOTE_PUBLISH_IN_MinIndex (0UL)           /*!< Min index of PUBLISH_IN[8] array.                                    */
  #define GPIOTE_PUBLISH_IN_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_IN[8] register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event IN[n] will publish to */
  #define GPIOTE_PUBLISH_IN_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define GPIOTE_PUBLISH_IN_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_IN_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define GPIOTE_PUBLISH_IN_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define GPIOTE_PUBLISH_IN_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GPIOTE_PUBLISH_IN_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define GPIOTE_PUBLISH_IN_EN_Msk (0x1UL << GPIOTE_PUBLISH_IN_EN_Pos) /*!< Bit mask of EN field.                              */
  #define GPIOTE_PUBLISH_IN_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define GPIOTE_PUBLISH_IN_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define GPIOTE_PUBLISH_IN_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define GPIOTE_PUBLISH_IN_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* GPIOTE_INTENSET0: Enable interrupt */
  #define GPIOTE_INTENSET0_ResetValue (0x00000000UL) /*!< Reset value of INTENSET0 register.                                   */

/* IN0 @Bit 0 : Write '1' to enable interrupt for event IN[0] */
  #define GPIOTE_INTENSET0_IN0_Pos (0UL)             /*!< Position of IN0 field.                                               */
  #define GPIOTE_INTENSET0_IN0_Msk (0x1UL << GPIOTE_INTENSET0_IN0_Pos) /*!< Bit mask of IN0 field.                             */
  #define GPIOTE_INTENSET0_IN0_Min (0x0UL)           /*!< Min enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENSET0_IN0_Max (0x1UL)           /*!< Max enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENSET0_IN0_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN0_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN0_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN1 @Bit 1 : Write '1' to enable interrupt for event IN[1] */
  #define GPIOTE_INTENSET0_IN1_Pos (1UL)             /*!< Position of IN1 field.                                               */
  #define GPIOTE_INTENSET0_IN1_Msk (0x1UL << GPIOTE_INTENSET0_IN1_Pos) /*!< Bit mask of IN1 field.                             */
  #define GPIOTE_INTENSET0_IN1_Min (0x0UL)           /*!< Min enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENSET0_IN1_Max (0x1UL)           /*!< Max enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENSET0_IN1_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN1_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN1_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN2 @Bit 2 : Write '1' to enable interrupt for event IN[2] */
  #define GPIOTE_INTENSET0_IN2_Pos (2UL)             /*!< Position of IN2 field.                                               */
  #define GPIOTE_INTENSET0_IN2_Msk (0x1UL << GPIOTE_INTENSET0_IN2_Pos) /*!< Bit mask of IN2 field.                             */
  #define GPIOTE_INTENSET0_IN2_Min (0x0UL)           /*!< Min enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENSET0_IN2_Max (0x1UL)           /*!< Max enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENSET0_IN2_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN2_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN2_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN3 @Bit 3 : Write '1' to enable interrupt for event IN[3] */
  #define GPIOTE_INTENSET0_IN3_Pos (3UL)             /*!< Position of IN3 field.                                               */
  #define GPIOTE_INTENSET0_IN3_Msk (0x1UL << GPIOTE_INTENSET0_IN3_Pos) /*!< Bit mask of IN3 field.                             */
  #define GPIOTE_INTENSET0_IN3_Min (0x0UL)           /*!< Min enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENSET0_IN3_Max (0x1UL)           /*!< Max enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENSET0_IN3_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN3_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN3_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN4 @Bit 4 : Write '1' to enable interrupt for event IN[4] */
  #define GPIOTE_INTENSET0_IN4_Pos (4UL)             /*!< Position of IN4 field.                                               */
  #define GPIOTE_INTENSET0_IN4_Msk (0x1UL << GPIOTE_INTENSET0_IN4_Pos) /*!< Bit mask of IN4 field.                             */
  #define GPIOTE_INTENSET0_IN4_Min (0x0UL)           /*!< Min enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENSET0_IN4_Max (0x1UL)           /*!< Max enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENSET0_IN4_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN4_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN4_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN5 @Bit 5 : Write '1' to enable interrupt for event IN[5] */
  #define GPIOTE_INTENSET0_IN5_Pos (5UL)             /*!< Position of IN5 field.                                               */
  #define GPIOTE_INTENSET0_IN5_Msk (0x1UL << GPIOTE_INTENSET0_IN5_Pos) /*!< Bit mask of IN5 field.                             */
  #define GPIOTE_INTENSET0_IN5_Min (0x0UL)           /*!< Min enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENSET0_IN5_Max (0x1UL)           /*!< Max enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENSET0_IN5_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN5_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN5_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN6 @Bit 6 : Write '1' to enable interrupt for event IN[6] */
  #define GPIOTE_INTENSET0_IN6_Pos (6UL)             /*!< Position of IN6 field.                                               */
  #define GPIOTE_INTENSET0_IN6_Msk (0x1UL << GPIOTE_INTENSET0_IN6_Pos) /*!< Bit mask of IN6 field.                             */
  #define GPIOTE_INTENSET0_IN6_Min (0x0UL)           /*!< Min enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENSET0_IN6_Max (0x1UL)           /*!< Max enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENSET0_IN6_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN6_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN6_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN7 @Bit 7 : Write '1' to enable interrupt for event IN[7] */
  #define GPIOTE_INTENSET0_IN7_Pos (7UL)             /*!< Position of IN7 field.                                               */
  #define GPIOTE_INTENSET0_IN7_Msk (0x1UL << GPIOTE_INTENSET0_IN7_Pos) /*!< Bit mask of IN7 field.                             */
  #define GPIOTE_INTENSET0_IN7_Min (0x0UL)           /*!< Min enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENSET0_IN7_Max (0x1UL)           /*!< Max enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENSET0_IN7_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET0_IN7_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET0_IN7_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PORT0NONSECURE @Bit 16 : Write '1' to enable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Pos (16UL) /*!< Position of PORT0NONSECURE field.                                    */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENSET0_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Min (0x0UL) /*!< Min enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Max (0x1UL) /*!< Max enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Set (0x1UL) /*!< Enable                                                              */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Disabled (0x0UL) /*!< Read: Disabled                                                 */
  #define GPIOTE_INTENSET0_PORT0NONSECURE_Enabled (0x1UL) /*!< Read: Enabled                                                   */


/* GPIOTE_INTENCLR0: Disable interrupt */
  #define GPIOTE_INTENCLR0_ResetValue (0x00000000UL) /*!< Reset value of INTENCLR0 register.                                   */

/* IN0 @Bit 0 : Write '1' to disable interrupt for event IN[0] */
  #define GPIOTE_INTENCLR0_IN0_Pos (0UL)             /*!< Position of IN0 field.                                               */
  #define GPIOTE_INTENCLR0_IN0_Msk (0x1UL << GPIOTE_INTENCLR0_IN0_Pos) /*!< Bit mask of IN0 field.                             */
  #define GPIOTE_INTENCLR0_IN0_Min (0x0UL)           /*!< Min enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENCLR0_IN0_Max (0x1UL)           /*!< Max enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENCLR0_IN0_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN0_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN0_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN1 @Bit 1 : Write '1' to disable interrupt for event IN[1] */
  #define GPIOTE_INTENCLR0_IN1_Pos (1UL)             /*!< Position of IN1 field.                                               */
  #define GPIOTE_INTENCLR0_IN1_Msk (0x1UL << GPIOTE_INTENCLR0_IN1_Pos) /*!< Bit mask of IN1 field.                             */
  #define GPIOTE_INTENCLR0_IN1_Min (0x0UL)           /*!< Min enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENCLR0_IN1_Max (0x1UL)           /*!< Max enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENCLR0_IN1_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN1_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN1_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN2 @Bit 2 : Write '1' to disable interrupt for event IN[2] */
  #define GPIOTE_INTENCLR0_IN2_Pos (2UL)             /*!< Position of IN2 field.                                               */
  #define GPIOTE_INTENCLR0_IN2_Msk (0x1UL << GPIOTE_INTENCLR0_IN2_Pos) /*!< Bit mask of IN2 field.                             */
  #define GPIOTE_INTENCLR0_IN2_Min (0x0UL)           /*!< Min enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENCLR0_IN2_Max (0x1UL)           /*!< Max enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENCLR0_IN2_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN2_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN2_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN3 @Bit 3 : Write '1' to disable interrupt for event IN[3] */
  #define GPIOTE_INTENCLR0_IN3_Pos (3UL)             /*!< Position of IN3 field.                                               */
  #define GPIOTE_INTENCLR0_IN3_Msk (0x1UL << GPIOTE_INTENCLR0_IN3_Pos) /*!< Bit mask of IN3 field.                             */
  #define GPIOTE_INTENCLR0_IN3_Min (0x0UL)           /*!< Min enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENCLR0_IN3_Max (0x1UL)           /*!< Max enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENCLR0_IN3_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN3_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN3_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN4 @Bit 4 : Write '1' to disable interrupt for event IN[4] */
  #define GPIOTE_INTENCLR0_IN4_Pos (4UL)             /*!< Position of IN4 field.                                               */
  #define GPIOTE_INTENCLR0_IN4_Msk (0x1UL << GPIOTE_INTENCLR0_IN4_Pos) /*!< Bit mask of IN4 field.                             */
  #define GPIOTE_INTENCLR0_IN4_Min (0x0UL)           /*!< Min enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENCLR0_IN4_Max (0x1UL)           /*!< Max enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENCLR0_IN4_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN4_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN4_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN5 @Bit 5 : Write '1' to disable interrupt for event IN[5] */
  #define GPIOTE_INTENCLR0_IN5_Pos (5UL)             /*!< Position of IN5 field.                                               */
  #define GPIOTE_INTENCLR0_IN5_Msk (0x1UL << GPIOTE_INTENCLR0_IN5_Pos) /*!< Bit mask of IN5 field.                             */
  #define GPIOTE_INTENCLR0_IN5_Min (0x0UL)           /*!< Min enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENCLR0_IN5_Max (0x1UL)           /*!< Max enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENCLR0_IN5_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN5_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN5_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN6 @Bit 6 : Write '1' to disable interrupt for event IN[6] */
  #define GPIOTE_INTENCLR0_IN6_Pos (6UL)             /*!< Position of IN6 field.                                               */
  #define GPIOTE_INTENCLR0_IN6_Msk (0x1UL << GPIOTE_INTENCLR0_IN6_Pos) /*!< Bit mask of IN6 field.                             */
  #define GPIOTE_INTENCLR0_IN6_Min (0x0UL)           /*!< Min enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENCLR0_IN6_Max (0x1UL)           /*!< Max enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENCLR0_IN6_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN6_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN6_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN7 @Bit 7 : Write '1' to disable interrupt for event IN[7] */
  #define GPIOTE_INTENCLR0_IN7_Pos (7UL)             /*!< Position of IN7 field.                                               */
  #define GPIOTE_INTENCLR0_IN7_Msk (0x1UL << GPIOTE_INTENCLR0_IN7_Pos) /*!< Bit mask of IN7 field.                             */
  #define GPIOTE_INTENCLR0_IN7_Min (0x0UL)           /*!< Min enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENCLR0_IN7_Max (0x1UL)           /*!< Max enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENCLR0_IN7_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR0_IN7_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR0_IN7_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PORT0NONSECURE @Bit 16 : Write '1' to disable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Pos (16UL) /*!< Position of PORT0NONSECURE field.                                    */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENCLR0_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Min (0x0UL) /*!< Min enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Max (0x1UL) /*!< Max enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Clear (0x1UL) /*!< Disable                                                           */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Disabled (0x0UL) /*!< Read: Disabled                                                 */
  #define GPIOTE_INTENCLR0_PORT0NONSECURE_Enabled (0x1UL) /*!< Read: Enabled                                                   */


/* GPIOTE_INTENSET1: Enable interrupt */
  #define GPIOTE_INTENSET1_ResetValue (0x00000000UL) /*!< Reset value of INTENSET1 register.                                   */

/* IN0 @Bit 0 : Write '1' to enable interrupt for event IN[0] */
  #define GPIOTE_INTENSET1_IN0_Pos (0UL)             /*!< Position of IN0 field.                                               */
  #define GPIOTE_INTENSET1_IN0_Msk (0x1UL << GPIOTE_INTENSET1_IN0_Pos) /*!< Bit mask of IN0 field.                             */
  #define GPIOTE_INTENSET1_IN0_Min (0x0UL)           /*!< Min enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENSET1_IN0_Max (0x1UL)           /*!< Max enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENSET1_IN0_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN0_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN0_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN1 @Bit 1 : Write '1' to enable interrupt for event IN[1] */
  #define GPIOTE_INTENSET1_IN1_Pos (1UL)             /*!< Position of IN1 field.                                               */
  #define GPIOTE_INTENSET1_IN1_Msk (0x1UL << GPIOTE_INTENSET1_IN1_Pos) /*!< Bit mask of IN1 field.                             */
  #define GPIOTE_INTENSET1_IN1_Min (0x0UL)           /*!< Min enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENSET1_IN1_Max (0x1UL)           /*!< Max enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENSET1_IN1_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN1_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN1_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN2 @Bit 2 : Write '1' to enable interrupt for event IN[2] */
  #define GPIOTE_INTENSET1_IN2_Pos (2UL)             /*!< Position of IN2 field.                                               */
  #define GPIOTE_INTENSET1_IN2_Msk (0x1UL << GPIOTE_INTENSET1_IN2_Pos) /*!< Bit mask of IN2 field.                             */
  #define GPIOTE_INTENSET1_IN2_Min (0x0UL)           /*!< Min enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENSET1_IN2_Max (0x1UL)           /*!< Max enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENSET1_IN2_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN2_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN2_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN3 @Bit 3 : Write '1' to enable interrupt for event IN[3] */
  #define GPIOTE_INTENSET1_IN3_Pos (3UL)             /*!< Position of IN3 field.                                               */
  #define GPIOTE_INTENSET1_IN3_Msk (0x1UL << GPIOTE_INTENSET1_IN3_Pos) /*!< Bit mask of IN3 field.                             */
  #define GPIOTE_INTENSET1_IN3_Min (0x0UL)           /*!< Min enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENSET1_IN3_Max (0x1UL)           /*!< Max enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENSET1_IN3_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN3_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN3_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN4 @Bit 4 : Write '1' to enable interrupt for event IN[4] */
  #define GPIOTE_INTENSET1_IN4_Pos (4UL)             /*!< Position of IN4 field.                                               */
  #define GPIOTE_INTENSET1_IN4_Msk (0x1UL << GPIOTE_INTENSET1_IN4_Pos) /*!< Bit mask of IN4 field.                             */
  #define GPIOTE_INTENSET1_IN4_Min (0x0UL)           /*!< Min enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENSET1_IN4_Max (0x1UL)           /*!< Max enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENSET1_IN4_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN4_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN4_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN5 @Bit 5 : Write '1' to enable interrupt for event IN[5] */
  #define GPIOTE_INTENSET1_IN5_Pos (5UL)             /*!< Position of IN5 field.                                               */
  #define GPIOTE_INTENSET1_IN5_Msk (0x1UL << GPIOTE_INTENSET1_IN5_Pos) /*!< Bit mask of IN5 field.                             */
  #define GPIOTE_INTENSET1_IN5_Min (0x0UL)           /*!< Min enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENSET1_IN5_Max (0x1UL)           /*!< Max enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENSET1_IN5_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN5_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN5_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN6 @Bit 6 : Write '1' to enable interrupt for event IN[6] */
  #define GPIOTE_INTENSET1_IN6_Pos (6UL)             /*!< Position of IN6 field.                                               */
  #define GPIOTE_INTENSET1_IN6_Msk (0x1UL << GPIOTE_INTENSET1_IN6_Pos) /*!< Bit mask of IN6 field.                             */
  #define GPIOTE_INTENSET1_IN6_Min (0x0UL)           /*!< Min enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENSET1_IN6_Max (0x1UL)           /*!< Max enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENSET1_IN6_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN6_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN6_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN7 @Bit 7 : Write '1' to enable interrupt for event IN[7] */
  #define GPIOTE_INTENSET1_IN7_Pos (7UL)             /*!< Position of IN7 field.                                               */
  #define GPIOTE_INTENSET1_IN7_Msk (0x1UL << GPIOTE_INTENSET1_IN7_Pos) /*!< Bit mask of IN7 field.                             */
  #define GPIOTE_INTENSET1_IN7_Min (0x0UL)           /*!< Min enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENSET1_IN7_Max (0x1UL)           /*!< Max enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENSET1_IN7_Set (0x1UL)           /*!< Enable                                                               */
  #define GPIOTE_INTENSET1_IN7_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENSET1_IN7_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PORT0NONSECURE @Bit 16 : Write '1' to enable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Pos (16UL) /*!< Position of PORT0NONSECURE field.                                    */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENSET1_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Min (0x0UL) /*!< Min enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Max (0x1UL) /*!< Max enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Set (0x1UL) /*!< Enable                                                              */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Disabled (0x0UL) /*!< Read: Disabled                                                 */
  #define GPIOTE_INTENSET1_PORT0NONSECURE_Enabled (0x1UL) /*!< Read: Enabled                                                   */


/* GPIOTE_INTENCLR1: Disable interrupt */
  #define GPIOTE_INTENCLR1_ResetValue (0x00000000UL) /*!< Reset value of INTENCLR1 register.                                   */

/* IN0 @Bit 0 : Write '1' to disable interrupt for event IN[0] */
  #define GPIOTE_INTENCLR1_IN0_Pos (0UL)             /*!< Position of IN0 field.                                               */
  #define GPIOTE_INTENCLR1_IN0_Msk (0x1UL << GPIOTE_INTENCLR1_IN0_Pos) /*!< Bit mask of IN0 field.                             */
  #define GPIOTE_INTENCLR1_IN0_Min (0x0UL)           /*!< Min enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENCLR1_IN0_Max (0x1UL)           /*!< Max enumerator value of IN0 field.                                   */
  #define GPIOTE_INTENCLR1_IN0_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN0_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN0_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN1 @Bit 1 : Write '1' to disable interrupt for event IN[1] */
  #define GPIOTE_INTENCLR1_IN1_Pos (1UL)             /*!< Position of IN1 field.                                               */
  #define GPIOTE_INTENCLR1_IN1_Msk (0x1UL << GPIOTE_INTENCLR1_IN1_Pos) /*!< Bit mask of IN1 field.                             */
  #define GPIOTE_INTENCLR1_IN1_Min (0x0UL)           /*!< Min enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENCLR1_IN1_Max (0x1UL)           /*!< Max enumerator value of IN1 field.                                   */
  #define GPIOTE_INTENCLR1_IN1_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN1_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN1_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN2 @Bit 2 : Write '1' to disable interrupt for event IN[2] */
  #define GPIOTE_INTENCLR1_IN2_Pos (2UL)             /*!< Position of IN2 field.                                               */
  #define GPIOTE_INTENCLR1_IN2_Msk (0x1UL << GPIOTE_INTENCLR1_IN2_Pos) /*!< Bit mask of IN2 field.                             */
  #define GPIOTE_INTENCLR1_IN2_Min (0x0UL)           /*!< Min enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENCLR1_IN2_Max (0x1UL)           /*!< Max enumerator value of IN2 field.                                   */
  #define GPIOTE_INTENCLR1_IN2_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN2_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN2_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN3 @Bit 3 : Write '1' to disable interrupt for event IN[3] */
  #define GPIOTE_INTENCLR1_IN3_Pos (3UL)             /*!< Position of IN3 field.                                               */
  #define GPIOTE_INTENCLR1_IN3_Msk (0x1UL << GPIOTE_INTENCLR1_IN3_Pos) /*!< Bit mask of IN3 field.                             */
  #define GPIOTE_INTENCLR1_IN3_Min (0x0UL)           /*!< Min enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENCLR1_IN3_Max (0x1UL)           /*!< Max enumerator value of IN3 field.                                   */
  #define GPIOTE_INTENCLR1_IN3_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN3_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN3_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN4 @Bit 4 : Write '1' to disable interrupt for event IN[4] */
  #define GPIOTE_INTENCLR1_IN4_Pos (4UL)             /*!< Position of IN4 field.                                               */
  #define GPIOTE_INTENCLR1_IN4_Msk (0x1UL << GPIOTE_INTENCLR1_IN4_Pos) /*!< Bit mask of IN4 field.                             */
  #define GPIOTE_INTENCLR1_IN4_Min (0x0UL)           /*!< Min enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENCLR1_IN4_Max (0x1UL)           /*!< Max enumerator value of IN4 field.                                   */
  #define GPIOTE_INTENCLR1_IN4_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN4_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN4_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN5 @Bit 5 : Write '1' to disable interrupt for event IN[5] */
  #define GPIOTE_INTENCLR1_IN5_Pos (5UL)             /*!< Position of IN5 field.                                               */
  #define GPIOTE_INTENCLR1_IN5_Msk (0x1UL << GPIOTE_INTENCLR1_IN5_Pos) /*!< Bit mask of IN5 field.                             */
  #define GPIOTE_INTENCLR1_IN5_Min (0x0UL)           /*!< Min enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENCLR1_IN5_Max (0x1UL)           /*!< Max enumerator value of IN5 field.                                   */
  #define GPIOTE_INTENCLR1_IN5_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN5_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN5_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN6 @Bit 6 : Write '1' to disable interrupt for event IN[6] */
  #define GPIOTE_INTENCLR1_IN6_Pos (6UL)             /*!< Position of IN6 field.                                               */
  #define GPIOTE_INTENCLR1_IN6_Msk (0x1UL << GPIOTE_INTENCLR1_IN6_Pos) /*!< Bit mask of IN6 field.                             */
  #define GPIOTE_INTENCLR1_IN6_Min (0x0UL)           /*!< Min enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENCLR1_IN6_Max (0x1UL)           /*!< Max enumerator value of IN6 field.                                   */
  #define GPIOTE_INTENCLR1_IN6_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN6_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN6_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* IN7 @Bit 7 : Write '1' to disable interrupt for event IN[7] */
  #define GPIOTE_INTENCLR1_IN7_Pos (7UL)             /*!< Position of IN7 field.                                               */
  #define GPIOTE_INTENCLR1_IN7_Msk (0x1UL << GPIOTE_INTENCLR1_IN7_Pos) /*!< Bit mask of IN7 field.                             */
  #define GPIOTE_INTENCLR1_IN7_Min (0x0UL)           /*!< Min enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENCLR1_IN7_Max (0x1UL)           /*!< Max enumerator value of IN7 field.                                   */
  #define GPIOTE_INTENCLR1_IN7_Clear (0x1UL)         /*!< Disable                                                              */
  #define GPIOTE_INTENCLR1_IN7_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define GPIOTE_INTENCLR1_IN7_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PORT0NONSECURE @Bit 16 : Write '1' to disable interrupt for event PORT0NONSECURE */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Pos (16UL) /*!< Position of PORT0NONSECURE field.                                    */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Msk (0x1UL << GPIOTE_INTENCLR1_PORT0NONSECURE_Pos) /*!< Bit mask of PORT0NONSECURE
                                                                            field.*/
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Min (0x0UL) /*!< Min enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Max (0x1UL) /*!< Max enumerator value of PORT0NONSECURE field.                       */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Clear (0x1UL) /*!< Disable                                                           */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Disabled (0x0UL) /*!< Read: Disabled                                                 */
  #define GPIOTE_INTENCLR1_PORT0NONSECURE_Enabled (0x1UL) /*!< Read: Enabled                                                   */


/* GPIOTE_CONFIG: Configuration for OUT[n], SET[n], and CLR[n] tasks and IN[n] event */
  #define GPIOTE_CONFIG_MaxCount (8UL)               /*!< Max size of CONFIG[8] array.                                         */
  #define GPIOTE_CONFIG_MaxIndex (7UL)               /*!< Max index of CONFIG[8] array.                                        */
  #define GPIOTE_CONFIG_MinIndex (0UL)               /*!< Min index of CONFIG[8] array.                                        */
  #define GPIOTE_CONFIG_ResetValue (0x00000000UL)    /*!< Reset value of CONFIG[8] register.                                   */

/* MODE @Bits 0..1 : Mode */
  #define GPIOTE_CONFIG_MODE_Pos (0UL)               /*!< Position of MODE field.                                              */
  #define GPIOTE_CONFIG_MODE_Msk (0x3UL << GPIOTE_CONFIG_MODE_Pos) /*!< Bit mask of MODE field.                                */
  #define GPIOTE_CONFIG_MODE_Min (0x0UL)             /*!< Min enumerator value of MODE field.                                  */
  #define GPIOTE_CONFIG_MODE_Max (0x3UL)             /*!< Max enumerator value of MODE field.                                  */
  #define GPIOTE_CONFIG_MODE_Disabled (0x0UL)        /*!< Disabled. Pin specified by PSEL will not be acquired by the GPIOTE
                                                          module.*/
  #define GPIOTE_CONFIG_MODE_Event (0x1UL)           /*!< Event mode                                                           */
  #define GPIOTE_CONFIG_MODE_Task (0x3UL)            /*!< Task mode                                                            */

/* PSEL @Bits 4..8 : GPIO number associated with SET[n], CLR[n], and OUT[n] tasks and IN[n] event */
  #define GPIOTE_CONFIG_PSEL_Pos (4UL)               /*!< Position of PSEL field.                                              */
  #define GPIOTE_CONFIG_PSEL_Msk (0x1FUL << GPIOTE_CONFIG_PSEL_Pos) /*!< Bit mask of PSEL field.                               */
  #define GPIOTE_CONFIG_PSEL_Min (0x00UL)            /*!< Min value of PSEL field.                                             */
  #define GPIOTE_CONFIG_PSEL_Max (0x1FUL)            /*!< Max size of PSEL field.                                              */

/* PORT @Bits 9..12 : Port number */
  #define GPIOTE_CONFIG_PORT_Pos (9UL)               /*!< Position of PORT field.                                              */
  #define GPIOTE_CONFIG_PORT_Msk (0xFUL << GPIOTE_CONFIG_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define GPIOTE_CONFIG_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define GPIOTE_CONFIG_PORT_Max (0xFUL)             /*!< Max size of PORT field.                                              */

/* POLARITY @Bits 16..17 : When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event
                           mode: Operation on input that shall trigger IN[n] event. */

  #define GPIOTE_CONFIG_POLARITY_Pos (16UL)          /*!< Position of POLARITY field.                                          */
  #define GPIOTE_CONFIG_POLARITY_Msk (0x3UL << GPIOTE_CONFIG_POLARITY_Pos) /*!< Bit mask of POLARITY field.                    */
  #define GPIOTE_CONFIG_POLARITY_Min (0x0UL)         /*!< Min enumerator value of POLARITY field.                              */
  #define GPIOTE_CONFIG_POLARITY_Max (0x3UL)         /*!< Max enumerator value of POLARITY field.                              */
  #define GPIOTE_CONFIG_POLARITY_None (0x0UL)        /*!< Task mode: No effect on pin from OUT[n] task. Event mode: no IN[n]
                                                          event generated on pin activity.*/
  #define GPIOTE_CONFIG_POLARITY_LoToHi (0x1UL)      /*!< Task mode: Set pin from OUT[n] task. Event mode: Generate IN[n] event
                                                          when rising edge on pin.*/
  #define GPIOTE_CONFIG_POLARITY_HiToLo (0x2UL)      /*!< Task mode: Clear pin from OUT[n] task. Event mode: Generate IN[n]
                                                          event when falling edge on pin.*/
  #define GPIOTE_CONFIG_POLARITY_Toggle (0x3UL)      /*!< Task mode: Toggle pin from OUT[n]. Event mode: Generate IN[n] when any
                                                          change on pin.*/

/* OUTINIT @Bit 20 : When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode:
                     No effect. */

  #define GPIOTE_CONFIG_OUTINIT_Pos (20UL)           /*!< Position of OUTINIT field.                                           */
  #define GPIOTE_CONFIG_OUTINIT_Msk (0x1UL << GPIOTE_CONFIG_OUTINIT_Pos) /*!< Bit mask of OUTINIT field.                       */
  #define GPIOTE_CONFIG_OUTINIT_Min (0x0UL)          /*!< Min enumerator value of OUTINIT field.                               */
  #define GPIOTE_CONFIG_OUTINIT_Max (0x1UL)          /*!< Max enumerator value of OUTINIT field.                               */
  #define GPIOTE_CONFIG_OUTINIT_Low (0x0UL)          /*!< Task mode: Initial value of pin before task triggering is low        */
  #define GPIOTE_CONFIG_OUTINIT_High (0x1UL)         /*!< Task mode: Initial value of pin before task triggering is high       */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           GRTC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ===================================================== Struct GRTC_CC ====================================================== */
/**
  * @brief CC [GRTC_CC] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CCL;                               /*!< (@ 0x00000000) The lower 32-bits of Capture/Compare register CC[n]   */
  __IOM uint32_t  CCH;                               /*!< (@ 0x00000004) The higher 32-bits of Capture/Compare register CC[n]  */
  __OM  uint32_t  CCADD;                             /*!< (@ 0x00000008) Count to add to CC[n] when this register is written.  */
  __IOM uint32_t  CCEN;                              /*!< (@ 0x0000000C) Configure Capture/Compare register CC[n]              */
} NRF_GRTC_CC_Type;                                  /*!< Size = 16 (0x010)                                                    */
  #define GRTC_CC_MaxCount (12UL)                    /*!< Size of CC[12] array.                                                */
  #define GRTC_CC_MaxIndex (11UL)                    /*!< Max index of CC[12] array.                                           */
  #define GRTC_CC_MinIndex (0UL)                     /*!< Min index of CC[12] array.                                           */

/* GRTC_CC_CCL: The lower 32-bits of Capture/Compare register CC[n] */
  #define GRTC_CC_CCL_ResetValue (0x00000000UL)      /*!< Reset value of CCL register.                                         */

/* CCL @Bits 0..31 : Capture/Compare low value in 1 us */
  #define GRTC_CC_CCL_CCL_Pos (0UL)                  /*!< Position of CCL field.                                               */
  #define GRTC_CC_CCL_CCL_Msk (0xFFFFFFFFUL << GRTC_CC_CCL_CCL_Pos) /*!< Bit mask of CCL field.                                */


/* GRTC_CC_CCH: The higher 32-bits of Capture/Compare register CC[n] */
  #define GRTC_CC_CCH_ResetValue (0x00000000UL)      /*!< Reset value of CCH register.                                         */

/* CCH @Bits 0..19 : Capture/Compare high value in 1 us */
  #define GRTC_CC_CCH_CCH_Pos (0UL)                  /*!< Position of CCH field.                                               */
  #define GRTC_CC_CCH_CCH_Msk (0xFFFFFUL << GRTC_CC_CCH_CCH_Pos) /*!< Bit mask of CCH field.                                   */


/* GRTC_CC_CCADD: Count to add to CC[n] when this register is written. */
  #define GRTC_CC_CCADD_ResetValue (0x00000000UL)    /*!< Reset value of CCADD register.                                       */

/* VALUE @Bits 0..30 : Count to add to CC[n] */
  #define GRTC_CC_CCADD_VALUE_Pos (0UL)              /*!< Position of VALUE field.                                             */
  #define GRTC_CC_CCADD_VALUE_Msk (0x7FFFFFFFUL << GRTC_CC_CCADD_VALUE_Pos) /*!< Bit mask of VALUE field.                      */

/* REFERENCE @Bit 31 : Configure the Capture/Compare register */
  #define GRTC_CC_CCADD_REFERENCE_Pos (31UL)         /*!< Position of REFERENCE field.                                         */
  #define GRTC_CC_CCADD_REFERENCE_Msk (0x1UL << GRTC_CC_CCADD_REFERENCE_Pos) /*!< Bit mask of REFERENCE field.                 */
  #define GRTC_CC_CCADD_REFERENCE_Min (0x0UL)        /*!< Min enumerator value of REFERENCE field.                             */
  #define GRTC_CC_CCADD_REFERENCE_Max (0x1UL)        /*!< Max enumerator value of REFERENCE field.                             */
  #define GRTC_CC_CCADD_REFERENCE_SYSCOUNTER (0x0UL) /*!< Adds SYSCOUNTER value.                                               */
  #define GRTC_CC_CCADD_REFERENCE_CC (0x1UL)         /*!< Adds CC value.                                                       */


/* GRTC_CC_CCEN: Configure Capture/Compare register CC[n] */
  #define GRTC_CC_CCEN_ResetValue (0x00000000UL)     /*!< Reset value of CCEN register.                                        */

/* ACTIVE @Bit 0 : Configure the Capture/Compare register */
  #define GRTC_CC_CCEN_ACTIVE_Pos (0UL)              /*!< Position of ACTIVE field.                                            */
  #define GRTC_CC_CCEN_ACTIVE_Msk (0x1UL << GRTC_CC_CCEN_ACTIVE_Pos) /*!< Bit mask of ACTIVE field.                            */
  #define GRTC_CC_CCEN_ACTIVE_Min (0x0UL)            /*!< Min enumerator value of ACTIVE field.                                */
  #define GRTC_CC_CCEN_ACTIVE_Max (0x1UL)            /*!< Max enumerator value of ACTIVE field.                                */
  #define GRTC_CC_CCEN_ACTIVE_Disable (0x0UL)        /*!< Capture/Compare register CC[n] Disabled.                             */
  #define GRTC_CC_CCEN_ACTIVE_Enable (0x1UL)         /*!< Capture/Compare register CC[n] enabled.                              */

/* PASTCC @Bit 1 : Status of event EVENTS_COMPARE[n] caused by the configured CC value is in past */
  #define GRTC_CC_CCEN_PASTCC_Pos (1UL)              /*!< Position of PASTCC field.                                            */
  #define GRTC_CC_CCEN_PASTCC_Msk (0x1UL << GRTC_CC_CCEN_PASTCC_Pos) /*!< Bit mask of PASTCC field.                            */
  #define GRTC_CC_CCEN_PASTCC_Min (0x0UL)            /*!< Min enumerator value of PASTCC field.                                */
  #define GRTC_CC_CCEN_PASTCC_Max (0x1UL)            /*!< Max enumerator value of PASTCC field.                                */
  #define GRTC_CC_CCEN_PASTCC_Inactive (0x0UL)       /*!< Inactive                                                             */
  #define GRTC_CC_CCEN_PASTCC_Active (0x1UL)         /*!< Active                                                               */



/* =================================================== Struct GRTC_STATUS ==================================================== */
/**
  * @brief STATUS [GRTC_STATUS] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LFTIMER;                           /*!< (@ 0x00000000) Low frequency timer status.                           */
  __IOM uint32_t  PWM;                               /*!< (@ 0x00000004) PWM status.                                           */
  __IOM uint32_t  CLKOUT;                            /*!< (@ 0x00000008) CLKOUT configuration status.                          */
} NRF_GRTC_STATUS_Type;                              /*!< Size = 12 (0x00C)                                                    */

/* GRTC_STATUS_LFTIMER: Low frequency timer status. */
  #define GRTC_STATUS_LFTIMER_ResetValue (0x00000001UL) /*!< Reset value of LFTIMER register.                                  */

/* READY @Bit 0 : Low frequency timer is ready or busy. */
  #define GRTC_STATUS_LFTIMER_READY_Pos (0UL)        /*!< Position of READY field.                                             */
  #define GRTC_STATUS_LFTIMER_READY_Msk (0x1UL << GRTC_STATUS_LFTIMER_READY_Pos) /*!< Bit mask of READY field.                 */
  #define GRTC_STATUS_LFTIMER_READY_Min (0x0UL)      /*!< Min enumerator value of READY field.                                 */
  #define GRTC_STATUS_LFTIMER_READY_Max (0x1UL)      /*!< Max enumerator value of READY field.                                 */
  #define GRTC_STATUS_LFTIMER_READY_Busy (0x0UL)     /*!< Busy                                                                 */
  #define GRTC_STATUS_LFTIMER_READY_Ready (0x1UL)    /*!< Ready                                                                */


/* GRTC_STATUS_PWM: PWM status. */
  #define GRTC_STATUS_PWM_ResetValue (0x00000001UL)  /*!< Reset value of PWM register.                                         */

/* READY @Bit 0 : PWM is ready or busy. */
  #define GRTC_STATUS_PWM_READY_Pos (0UL)            /*!< Position of READY field.                                             */
  #define GRTC_STATUS_PWM_READY_Msk (0x1UL << GRTC_STATUS_PWM_READY_Pos) /*!< Bit mask of READY field.                         */
  #define GRTC_STATUS_PWM_READY_Min (0x0UL)          /*!< Min enumerator value of READY field.                                 */
  #define GRTC_STATUS_PWM_READY_Max (0x1UL)          /*!< Max enumerator value of READY field.                                 */
  #define GRTC_STATUS_PWM_READY_Busy (0x0UL)         /*!< Busy                                                                 */
  #define GRTC_STATUS_PWM_READY_Ready (0x1UL)        /*!< Ready                                                                */


/* GRTC_STATUS_CLKOUT: CLKOUT configuration status. */
  #define GRTC_STATUS_CLKOUT_ResetValue (0x00000001UL) /*!< Reset value of CLKOUT register.                                    */

/* READY @Bit 0 : CLKOUT is ready or busy. */
  #define GRTC_STATUS_CLKOUT_READY_Pos (0UL)         /*!< Position of READY field.                                             */
  #define GRTC_STATUS_CLKOUT_READY_Msk (0x1UL << GRTC_STATUS_CLKOUT_READY_Pos) /*!< Bit mask of READY field.                   */
  #define GRTC_STATUS_CLKOUT_READY_Min (0x0UL)       /*!< Min enumerator value of READY field.                                 */
  #define GRTC_STATUS_CLKOUT_READY_Max (0x1UL)       /*!< Max enumerator value of READY field.                                 */
  #define GRTC_STATUS_CLKOUT_READY_Busy (0x0UL)      /*!< Busy                                                                 */
  #define GRTC_STATUS_CLKOUT_READY_Ready (0x1UL)     /*!< Ready                                                                */



/* ================================================= Struct GRTC_SYSCOUNTER ================================================== */
/**
  * @brief SYSCOUNTER [GRTC_SYSCOUNTER] (unspecified)
  */
typedef struct {
  __IM  uint32_t  SYSCOUNTERL;                       /*!< (@ 0x00000000) The lower 32-bits of the SYSCOUNTER for index [n]     */
  __IM  uint32_t  SYSCOUNTERH;                       /*!< (@ 0x00000004) The higher 20-bits of the SYSCOUNTER for index [n]    */
  __IOM uint32_t  ACTIVE;                            /*!< (@ 0x00000008) Request to keep the SYSCOUNTER in the active state and
                                                                         prevent going to sleep for index [n]*/
  __IM  uint32_t  RESERVED;
} NRF_GRTC_SYSCOUNTER_Type;                          /*!< Size = 16 (0x010)                                                    */
  #define GRTC_SYSCOUNTER_MaxCount (4UL)             /*!< Size of SYSCOUNTER[4] array.                                         */
  #define GRTC_SYSCOUNTER_MaxIndex (3UL)             /*!< Max index of SYSCOUNTER[4] array.                                    */
  #define GRTC_SYSCOUNTER_MinIndex (0UL)             /*!< Min index of SYSCOUNTER[4] array.                                    */

/* GRTC_SYSCOUNTER_SYSCOUNTERL: The lower 32-bits of the SYSCOUNTER for index [n] */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_ResetValue (0x00000000UL) /*!< Reset value of SYSCOUNTERL register.                      */

/* VALUE @Bits 0..31 : The lower 32-bits of the SYSCOUNTER value. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                            */
  #define GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Msk (0xFFFFFFFFUL << GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/


/* GRTC_SYSCOUNTER_SYSCOUNTERH: The higher 20-bits of the SYSCOUNTER for index [n] */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_ResetValue (0x60000000UL) /*!< Reset value of SYSCOUNTERH register.                      */

/* VALUE @Bits 0..19 : The higher 20-bits of the SYSCOUNTER value. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Pos (0UL) /*!< Position of VALUE field.                                            */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Msk (0xFFFFFUL << GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/

/* LOADED @Bit 29 : SYSCOUNTER loaded status */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Pos (29UL) /*!< Position of LOADED field.                                         */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Pos) /*!< Bit mask of LOADED
                                                                            field.*/
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Min (0x0UL) /*!< Min enumerator value of LOADED field.                            */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Max (0x1UL) /*!< Max enumerator value of LOADED field.                            */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_NotLoaded (0x0UL) /*!< SYSCOUNTER is not loaded                                   */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_LOADED_Loaded (0x1UL) /*!< SYSCOUNTER is loaded                                          */

/* BUSY @Bit 30 : SYSCOUNTER busy status */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Pos (30UL) /*!< Position of BUSY field.                                             */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Pos) /*!< Bit mask of BUSY field.    */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Min (0x0UL) /*!< Min enumerator value of BUSY field.                                */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Max (0x1UL) /*!< Max enumerator value of BUSY field.                                */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Ready (0x0UL) /*!< SYSCOUNTER is ready for read                                     */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Busy (0x1UL) /*!< SYSCOUNTER is busy, so not ready for read (value returned in the
                                                             VALUE field of this register is not valid)*/

/* OVERFLOW @Bit 31 : The SYSCOUNTERL overflow indication after reading it. */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Pos (31UL) /*!< Position of OVERFLOW field.                                     */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Msk (0x1UL << GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW
                                                                            field.*/
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Min (0x0UL) /*!< Min enumerator value of OVERFLOW field.                        */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Max (0x1UL) /*!< Max enumerator value of OVERFLOW field.                        */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_NoOverflow (0x0UL) /*!< SYSCOUNTERL is not overflown                            */
  #define GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Overflow (0x1UL) /*!< SYSCOUNTERL overflown                                     */


/* GRTC_SYSCOUNTER_ACTIVE: Request to keep the SYSCOUNTER in the active state and prevent going to sleep for index [n] */
  #define GRTC_SYSCOUNTER_ACTIVE_ResetValue (0x00000000UL) /*!< Reset value of ACTIVE register.                                */

/* ACTIVE @Bit 0 : Keep SYSCOUNTER in active state */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Pos (0UL)    /*!< Position of ACTIVE field.                                            */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Msk (0x1UL << GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Pos) /*!< Bit mask of ACTIVE field.        */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Min (0x0UL)  /*!< Min enumerator value of ACTIVE field.                                */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Max (0x1UL)  /*!< Max enumerator value of ACTIVE field.                                */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_NotActive (0x0UL) /*!< Allow SYSCOUNTER to go to sleep                                 */
  #define GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Active (0x1UL) /*!< Keep SYSCOUNTER active                                             */


/* ======================================================= Struct GRTC ======================================================= */
/**
  * @brief Global Real-time counter
  */
  typedef struct {                                   /*!< GRTC Structure                                                       */
    __OM uint32_t TASKS_CAPTURE[12];                 /*!< (@ 0x00000000) Capture the counter value to CC[n] register           */
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000060) Start the counter                                     */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000064) Stop the counter                                      */
    __OM uint32_t TASKS_CLEAR;                       /*!< (@ 0x00000068) Clear the counter                                     */
    __OM uint32_t TASKS_PWMSTART;                    /*!< (@ 0x0000006C) Start the PWM                                         */
    __OM uint32_t TASKS_PWMSTOP;                     /*!< (@ 0x00000070) Stop the PWM                                          */
    __IM uint32_t RESERVED1[3];
    __IOM uint32_t SUBSCRIBE_CAPTURE[12];            /*!< (@ 0x00000080) Subscribe configuration for task CAPTURE[n]           */
    __IM uint32_t RESERVED2[20];
    __IOM uint32_t EVENTS_COMPARE[12];               /*!< (@ 0x00000100) Compare event on CC[n] match                          */
    __IM uint32_t RESERVED3[13];
    __IOM uint32_t EVENTS_RTCOMPARESYNC;             /*!< (@ 0x00000164) The GRTC low frequency timer is synchronized with the
                                                                         SYSCOUNTER*/
    __IM uint32_t RESERVED4;
    __IOM uint32_t EVENTS_PWMPERIODEND;              /*!< (@ 0x0000016C) Event on end of each PWM period                       */
    __IM uint32_t RESERVED5;
    __IOM uint32_t EVENTS_PWMREADY;                  /*!< (@ 0x00000174) Event on STATUS.PWM.READY status changed to ready     */
    __IOM uint32_t EVENTS_CLKOUTREADY;               /*!< (@ 0x00000178) Event on STATUS.CLKOUT.READY status changed to ready  */
    __IM uint32_t RESERVED6;
    __IOM uint32_t PUBLISH_COMPARE[12];              /*!< (@ 0x00000180) Publish configuration for event COMPARE[n]            */
    __IM uint32_t RESERVED7[17];
    __IOM uint32_t PUBLISH_PWMREADY;                 /*!< (@ 0x000001F4) Publish configuration for event PWMREADY              */
    __IOM uint32_t PUBLISH_CLKOUTREADY;              /*!< (@ 0x000001F8) Publish configuration for event CLKOUTREADY           */
    __IM uint32_t RESERVED8;
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED9[63];
    __IOM uint32_t INTEN0;                           /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET0;                        /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR0;                        /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND0;                          /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IOM uint32_t INTEN1;                           /*!< (@ 0x00000310) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET1;                        /*!< (@ 0x00000314) Enable interrupt                                      */
    __IOM uint32_t INTENCLR1;                        /*!< (@ 0x00000318) Disable interrupt                                     */
    __IM uint32_t INTPEND1;                          /*!< (@ 0x0000031C) Pending interrupts                                    */
    __IOM uint32_t INTEN2;                           /*!< (@ 0x00000320) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET2;                        /*!< (@ 0x00000324) Enable interrupt                                      */
    __IOM uint32_t INTENCLR2;                        /*!< (@ 0x00000328) Disable interrupt                                     */
    __IM uint32_t INTPEND2;                          /*!< (@ 0x0000032C) Pending interrupts                                    */
    __IOM uint32_t INTEN3;                           /*!< (@ 0x00000330) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET3;                        /*!< (@ 0x00000334) Enable interrupt                                      */
    __IOM uint32_t INTENCLR3;                        /*!< (@ 0x00000338) Disable interrupt                                     */
    __IM uint32_t INTPEND3;                          /*!< (@ 0x0000033C) Pending interrupts                                    */
    __IM uint32_t RESERVED10[48];
    __IOM uint32_t EVTEN;                            /*!< (@ 0x00000400) Enable or disable event routing                       */
    __IOM uint32_t EVTENSET;                         /*!< (@ 0x00000404) Enable event routing                                  */
    __IOM uint32_t EVTENCLR;                         /*!< (@ 0x00000408) Disable event routing                                 */
    __IM uint32_t RESERVED11[65];
    __IOM uint32_t MODE;                             /*!< (@ 0x00000510) Counter mode selection                                */
    __IM uint32_t RESERVED12[3];
    __IOM NRF_GRTC_CC_Type CC[12];                   /*!< (@ 0x00000520) (unspecified)                                         */
    __IM uint32_t RESERVED13[49];
    __IOM uint32_t TIMEOUT;                          /*!< (@ 0x000006A4) Timeout after all CPUs gone into sleep state to stop
                                                                         the SYSCOUNTER*/
    __IOM uint32_t INTERVAL;                         /*!< (@ 0x000006A8) Count to add to CC[0] when the event EVENTS_COMPARE[0]
                                                                         triggers.*/
    __IOM uint32_t WAKETIME;                         /*!< (@ 0x000006AC) GRTC wake up time.                                    */
    __IOM NRF_GRTC_STATUS_Type STATUS;               /*!< (@ 0x000006B0) (unspecified)                                         */
    __IM uint32_t RESERVED14[21];
    __IOM uint32_t PWMCONFIG;                        /*!< (@ 0x00000710) PWM configuration.                                    */
    __IOM uint32_t CLKOUT;                           /*!< (@ 0x00000714) Configuration of clock output                         */
    __IOM uint32_t CLKCFG;                           /*!< (@ 0x00000718) Clock Configuration                                   */
    __IM uint32_t RESERVED15;
    __IOM NRF_GRTC_SYSCOUNTER_Type SYSCOUNTER[4];    /*!< (@ 0x00000720) (unspecified)                                         */
  } NRF_GRTC_Type;                                   /*!< Size = 1888 (0x760)                                                  */

/* GRTC_TASKS_CAPTURE: Capture the counter value to CC[n] register */
  #define GRTC_TASKS_CAPTURE_MaxCount (12UL)         /*!< Max size of TASKS_CAPTURE[12] array.                                 */
  #define GRTC_TASKS_CAPTURE_MaxIndex (11UL)         /*!< Max index of TASKS_CAPTURE[12] array.                                */
  #define GRTC_TASKS_CAPTURE_MinIndex (0UL)          /*!< Min index of TASKS_CAPTURE[12] array.                                */
  #define GRTC_TASKS_CAPTURE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CAPTURE[12] register.                         */

/* TASKS_CAPTURE @Bit 0 : Capture the counter value to CC[n] register */
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL) /*!< Position of TASKS_CAPTURE field.                                     */
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE
                                                                            field.*/
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Min (0x1UL) /*!< Min enumerator value of TASKS_CAPTURE field.                       */
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Max (0x1UL) /*!< Max enumerator value of TASKS_CAPTURE field.                       */
  #define GRTC_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (0x1UL) /*!< Trigger task                                                   */


/* GRTC_TASKS_START: Start the counter */
  #define GRTC_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start the counter */
  #define GRTC_TASKS_START_TASKS_START_Pos (0UL)     /*!< Position of TASKS_START field.                                       */
  #define GRTC_TASKS_START_TASKS_START_Msk (0x1UL << GRTC_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.     */
  #define GRTC_TASKS_START_TASKS_START_Min (0x1UL)   /*!< Min enumerator value of TASKS_START field.                           */
  #define GRTC_TASKS_START_TASKS_START_Max (0x1UL)   /*!< Max enumerator value of TASKS_START field.                           */
  #define GRTC_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                       */


/* GRTC_TASKS_STOP: Stop the counter */
  #define GRTC_TASKS_STOP_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop the counter */
  #define GRTC_TASKS_STOP_TASKS_STOP_Pos (0UL)       /*!< Position of TASKS_STOP field.                                        */
  #define GRTC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << GRTC_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.          */
  #define GRTC_TASKS_STOP_TASKS_STOP_Min (0x1UL)     /*!< Min enumerator value of TASKS_STOP field.                            */
  #define GRTC_TASKS_STOP_TASKS_STOP_Max (0x1UL)     /*!< Max enumerator value of TASKS_STOP field.                            */
  #define GRTC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                         */


/* GRTC_TASKS_CLEAR: Clear the counter */
  #define GRTC_TASKS_CLEAR_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CLEAR register.                                 */

/* TASKS_CLEAR @Bit 0 : Clear the counter */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL)     /*!< Position of TASKS_CLEAR field.                                       */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << GRTC_TASKS_CLEAR_TASKS_CLEAR_Pos) /*!< Bit mask of TASKS_CLEAR field.     */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Min (0x1UL)   /*!< Min enumerator value of TASKS_CLEAR field.                           */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Max (0x1UL)   /*!< Max enumerator value of TASKS_CLEAR field.                           */
  #define GRTC_TASKS_CLEAR_TASKS_CLEAR_Trigger (0x1UL) /*!< Trigger task                                                       */


/* GRTC_TASKS_PWMSTART: Start the PWM */
  #define GRTC_TASKS_PWMSTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_PWMSTART register.                           */

/* TASKS_PWMSTART @Bit 0 : Start the PWM */
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Pos (0UL) /*!< Position of TASKS_PWMSTART field.                                  */
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Msk (0x1UL << GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Pos) /*!< Bit mask of
                                                                            TASKS_PWMSTART field.*/
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Min (0x1UL) /*!< Min enumerator value of TASKS_PWMSTART field.                    */
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Max (0x1UL) /*!< Max enumerator value of TASKS_PWMSTART field.                    */
  #define GRTC_TASKS_PWMSTART_TASKS_PWMSTART_Trigger (0x1UL) /*!< Trigger task                                                 */


/* GRTC_TASKS_PWMSTOP: Stop the PWM */
  #define GRTC_TASKS_PWMSTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_PWMSTOP register.                             */

/* TASKS_PWMSTOP @Bit 0 : Stop the PWM */
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Pos (0UL) /*!< Position of TASKS_PWMSTOP field.                                     */
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Msk (0x1UL << GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Pos) /*!< Bit mask of TASKS_PWMSTOP
                                                                            field.*/
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_PWMSTOP field.                       */
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_PWMSTOP field.                       */
  #define GRTC_TASKS_PWMSTOP_TASKS_PWMSTOP_Trigger (0x1UL) /*!< Trigger task                                                   */


/* GRTC_SUBSCRIBE_CAPTURE: Subscribe configuration for task CAPTURE[n] */
  #define GRTC_SUBSCRIBE_CAPTURE_MaxCount (12UL)     /*!< Max size of SUBSCRIBE_CAPTURE[12] array.                             */
  #define GRTC_SUBSCRIBE_CAPTURE_MaxIndex (11UL)     /*!< Max index of SUBSCRIBE_CAPTURE[12] array.                            */
  #define GRTC_SUBSCRIBE_CAPTURE_MinIndex (0UL)      /*!< Min index of SUBSCRIBE_CAPTURE[12] array.                            */
  #define GRTC_SUBSCRIBE_CAPTURE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CAPTURE[12] register.                 */

/* CHIDX @Bits 0..7 : DPPI channel that task CAPTURE[n] will subscribe to */
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << GRTC_SUBSCRIBE_CAPTURE_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define GRTC_SUBSCRIBE_CAPTURE_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << GRTC_SUBSCRIBE_CAPTURE_EN_Pos) /*!< Bit mask of EN field.                    */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define GRTC_SUBSCRIBE_CAPTURE_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* GRTC_EVENTS_COMPARE: Compare event on CC[n] match */
  #define GRTC_EVENTS_COMPARE_MaxCount (12UL)        /*!< Max size of EVENTS_COMPARE[12] array.                                */
  #define GRTC_EVENTS_COMPARE_MaxIndex (11UL)        /*!< Max index of EVENTS_COMPARE[12] array.                               */
  #define GRTC_EVENTS_COMPARE_MinIndex (0UL)         /*!< Min index of EVENTS_COMPARE[12] array.                               */
  #define GRTC_EVENTS_COMPARE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_COMPARE[12] register.                       */

/* EVENTS_COMPARE @Bit 0 : Compare event on CC[n] match */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL) /*!< Position of EVENTS_COMPARE field.                                  */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPARE field.*/
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Min (0x0UL) /*!< Min enumerator value of EVENTS_COMPARE field.                    */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Max (0x1UL) /*!< Max enumerator value of EVENTS_COMPARE field.                    */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define GRTC_EVENTS_COMPARE_EVENTS_COMPARE_Generated (0x1UL) /*!< Event generated                                            */


/* GRTC_EVENTS_RTCOMPARESYNC: The GRTC low frequency timer is synchronized with the SYSCOUNTER */
  #define GRTC_EVENTS_RTCOMPARESYNC_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RTCOMPARESYNC register.               */

/* EVENTS_RTCOMPARESYNC @Bit 0 : The GRTC low frequency timer is synchronized with the SYSCOUNTER */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Pos (0UL) /*!< Position of EVENTS_RTCOMPARESYNC field.                */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Msk (0x1UL << GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Pos) /*!<
                                                                            Bit mask of EVENTS_RTCOMPARESYNC field.*/
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Min (0x0UL) /*!< Min enumerator value of EVENTS_RTCOMPARESYNC field.  */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Max (0x1UL) /*!< Max enumerator value of EVENTS_RTCOMPARESYNC field.  */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_NotGenerated (0x0UL) /*!< Event not generated                         */
  #define GRTC_EVENTS_RTCOMPARESYNC_EVENTS_RTCOMPARESYNC_Generated (0x1UL) /*!< Event generated                                */


/* GRTC_EVENTS_PWMPERIODEND: Event on end of each PWM period */
  #define GRTC_EVENTS_PWMPERIODEND_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_PWMPERIODEND register.                 */

/* EVENTS_PWMPERIODEND @Bit 0 : Event on end of each PWM period */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos (0UL) /*!< Position of EVENTS_PWMPERIODEND field.                   */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk (0x1UL << GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos) /*!< Bit
                                                                            mask of EVENTS_PWMPERIODEND field.*/
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Min (0x0UL) /*!< Min enumerator value of EVENTS_PWMPERIODEND field.     */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Max (0x1UL) /*!< Max enumerator value of EVENTS_PWMPERIODEND field.     */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated (0x0UL) /*!< Event not generated                           */
  #define GRTC_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated (0x1UL) /*!< Event generated                                  */


/* GRTC_EVENTS_PWMREADY: Event on STATUS.PWM.READY status changed to ready */
  #define GRTC_EVENTS_PWMREADY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_PWMREADY register.                         */

/* EVENTS_PWMREADY @Bit 0 : Event on STATUS.PWM.READY status changed to ready */
  #define GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_Pos (0UL) /*!< Position of EVENTS_PWMREADY field.                               */
  #define GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_Msk (0x1UL << GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_PWMREADY field.*/
  #define GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_Min (0x0UL) /*!< Min enumerator value of EVENTS_PWMREADY field.                 */
  #define GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_Max (0x1UL) /*!< Max enumerator value of EVENTS_PWMREADY field.                 */
  #define GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define GRTC_EVENTS_PWMREADY_EVENTS_PWMREADY_Generated (0x1UL) /*!< Event generated                                          */


/* GRTC_EVENTS_CLKOUTREADY: Event on STATUS.CLKOUT.READY status changed to ready */
  #define GRTC_EVENTS_CLKOUTREADY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CLKOUTREADY register.                   */

/* EVENTS_CLKOUTREADY @Bit 0 : Event on STATUS.CLKOUT.READY status changed to ready */
  #define GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_Pos (0UL) /*!< Position of EVENTS_CLKOUTREADY field.                      */
  #define GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_Msk (0x1UL << GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_Pos) /*!< Bit mask
                                                                            of EVENTS_CLKOUTREADY field.*/
  #define GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_Min (0x0UL) /*!< Min enumerator value of EVENTS_CLKOUTREADY field.        */
  #define GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_Max (0x1UL) /*!< Max enumerator value of EVENTS_CLKOUTREADY field.        */
  #define GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_NotGenerated (0x0UL) /*!< Event not generated                             */
  #define GRTC_EVENTS_CLKOUTREADY_EVENTS_CLKOUTREADY_Generated (0x1UL) /*!< Event generated                                    */


/* GRTC_PUBLISH_COMPARE: Publish configuration for event COMPARE[n] */
  #define GRTC_PUBLISH_COMPARE_MaxCount (12UL)       /*!< Max size of PUBLISH_COMPARE[12] array.                               */
  #define GRTC_PUBLISH_COMPARE_MaxIndex (11UL)       /*!< Max index of PUBLISH_COMPARE[12] array.                              */
  #define GRTC_PUBLISH_COMPARE_MinIndex (0UL)        /*!< Min index of PUBLISH_COMPARE[12] array.                              */
  #define GRTC_PUBLISH_COMPARE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_COMPARE[12] register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that event COMPARE[n] will publish to */
  #define GRTC_PUBLISH_COMPARE_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define GRTC_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << GRTC_PUBLISH_COMPARE_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define GRTC_PUBLISH_COMPARE_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define GRTC_PUBLISH_COMPARE_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GRTC_PUBLISH_COMPARE_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define GRTC_PUBLISH_COMPARE_EN_Msk (0x1UL << GRTC_PUBLISH_COMPARE_EN_Pos) /*!< Bit mask of EN field.                        */
  #define GRTC_PUBLISH_COMPARE_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define GRTC_PUBLISH_COMPARE_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define GRTC_PUBLISH_COMPARE_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define GRTC_PUBLISH_COMPARE_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* GRTC_PUBLISH_PWMREADY: Publish configuration for event PWMREADY */
  #define GRTC_PUBLISH_PWMREADY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_PWMREADY register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that event PWMREADY will publish to */
  #define GRTC_PUBLISH_PWMREADY_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define GRTC_PUBLISH_PWMREADY_CHIDX_Msk (0xFFUL << GRTC_PUBLISH_PWMREADY_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define GRTC_PUBLISH_PWMREADY_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define GRTC_PUBLISH_PWMREADY_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define GRTC_PUBLISH_PWMREADY_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define GRTC_PUBLISH_PWMREADY_EN_Msk (0x1UL << GRTC_PUBLISH_PWMREADY_EN_Pos) /*!< Bit mask of EN field.                      */
  #define GRTC_PUBLISH_PWMREADY_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define GRTC_PUBLISH_PWMREADY_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define GRTC_PUBLISH_PWMREADY_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define GRTC_PUBLISH_PWMREADY_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* GRTC_PUBLISH_CLKOUTREADY: Publish configuration for event CLKOUTREADY */
  #define GRTC_PUBLISH_CLKOUTREADY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CLKOUTREADY register.                 */

/* CHIDX @Bits 0..7 : DPPI channel that event CLKOUTREADY will publish to */
  #define GRTC_PUBLISH_CLKOUTREADY_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define GRTC_PUBLISH_CLKOUTREADY_CHIDX_Msk (0xFFUL << GRTC_PUBLISH_CLKOUTREADY_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define GRTC_PUBLISH_CLKOUTREADY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define GRTC_PUBLISH_CLKOUTREADY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define GRTC_PUBLISH_CLKOUTREADY_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define GRTC_PUBLISH_CLKOUTREADY_EN_Msk (0x1UL << GRTC_PUBLISH_CLKOUTREADY_EN_Pos) /*!< Bit mask of EN field.                */
  #define GRTC_PUBLISH_CLKOUTREADY_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define GRTC_PUBLISH_CLKOUTREADY_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define GRTC_PUBLISH_CLKOUTREADY_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define GRTC_PUBLISH_CLKOUTREADY_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* GRTC_SHORTS: Shortcuts between local events and tasks */
  #define GRTC_SHORTS_ResetValue (0x00000000UL)      /*!< Reset value of SHORTS register.                                      */

/* RTCOMPARE_CLEAR @Bit 0 : Shortcut between event RTCOMPARE and task CLEAR */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Pos (0UL)      /*!< Position of RTCOMPARE_CLEAR field.                                   */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Msk (0x1UL << GRTC_SHORTS_RTCOMPARE_CLEAR_Pos) /*!< Bit mask of RTCOMPARE_CLEAR field.   */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Min (0x0UL)    /*!< Min enumerator value of RTCOMPARE_CLEAR field.                       */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Max (0x1UL)    /*!< Max enumerator value of RTCOMPARE_CLEAR field.                       */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define GRTC_SHORTS_RTCOMPARE_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */


/* GRTC_INTEN0: Enable or disable interrupt */
  #define GRTC_INTEN0_ResetValue (0x00000000UL)      /*!< Reset value of INTEN0 register.                                      */

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN0_COMPARE0_Pos (0UL)             /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTEN0_COMPARE0_Msk (0x1UL << GRTC_INTEN0_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                        */
  #define GRTC_INTEN0_COMPARE0_Min (0x0UL)           /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN0_COMPARE0_Max (0x1UL)           /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN0_COMPARE0_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE0_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN0_COMPARE1_Pos (1UL)             /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTEN0_COMPARE1_Msk (0x1UL << GRTC_INTEN0_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                        */
  #define GRTC_INTEN0_COMPARE1_Min (0x0UL)           /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN0_COMPARE1_Max (0x1UL)           /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN0_COMPARE1_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE1_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN0_COMPARE2_Pos (2UL)             /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTEN0_COMPARE2_Msk (0x1UL << GRTC_INTEN0_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                        */
  #define GRTC_INTEN0_COMPARE2_Min (0x0UL)           /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN0_COMPARE2_Max (0x1UL)           /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN0_COMPARE2_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE2_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN0_COMPARE3_Pos (3UL)             /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTEN0_COMPARE3_Msk (0x1UL << GRTC_INTEN0_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                        */
  #define GRTC_INTEN0_COMPARE3_Min (0x0UL)           /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN0_COMPARE3_Max (0x1UL)           /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN0_COMPARE3_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE3_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN0_COMPARE4_Pos (4UL)             /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTEN0_COMPARE4_Msk (0x1UL << GRTC_INTEN0_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                        */
  #define GRTC_INTEN0_COMPARE4_Min (0x0UL)           /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN0_COMPARE4_Max (0x1UL)           /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN0_COMPARE4_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE4_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN0_COMPARE5_Pos (5UL)             /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTEN0_COMPARE5_Msk (0x1UL << GRTC_INTEN0_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                        */
  #define GRTC_INTEN0_COMPARE5_Min (0x0UL)           /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN0_COMPARE5_Max (0x1UL)           /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN0_COMPARE5_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE5_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN0_COMPARE6_Pos (6UL)             /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTEN0_COMPARE6_Msk (0x1UL << GRTC_INTEN0_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                        */
  #define GRTC_INTEN0_COMPARE6_Min (0x0UL)           /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN0_COMPARE6_Max (0x1UL)           /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN0_COMPARE6_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE6_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN0_COMPARE7_Pos (7UL)             /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTEN0_COMPARE7_Msk (0x1UL << GRTC_INTEN0_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                        */
  #define GRTC_INTEN0_COMPARE7_Min (0x0UL)           /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN0_COMPARE7_Max (0x1UL)           /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN0_COMPARE7_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE7_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN0_COMPARE8_Pos (8UL)             /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTEN0_COMPARE8_Msk (0x1UL << GRTC_INTEN0_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                        */
  #define GRTC_INTEN0_COMPARE8_Min (0x0UL)           /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN0_COMPARE8_Max (0x1UL)           /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN0_COMPARE8_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE8_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN0_COMPARE9_Pos (9UL)             /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTEN0_COMPARE9_Msk (0x1UL << GRTC_INTEN0_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                        */
  #define GRTC_INTEN0_COMPARE9_Min (0x0UL)           /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN0_COMPARE9_Max (0x1UL)           /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN0_COMPARE9_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE9_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN0_COMPARE10_Pos (10UL)           /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTEN0_COMPARE10_Msk (0x1UL << GRTC_INTEN0_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                     */
  #define GRTC_INTEN0_COMPARE10_Min (0x0UL)          /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN0_COMPARE10_Max (0x1UL)          /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN0_COMPARE10_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE10_Enabled (0x1UL)      /*!< Enable                                                               */

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN0_COMPARE11_Pos (11UL)           /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTEN0_COMPARE11_Msk (0x1UL << GRTC_INTEN0_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                     */
  #define GRTC_INTEN0_COMPARE11_Min (0x0UL)          /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN0_COMPARE11_Max (0x1UL)          /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN0_COMPARE11_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN0_COMPARE11_Enabled (0x1UL)      /*!< Enable                                                               */

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN0_RTCOMPARESYNC_Pos (25UL)       /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTEN0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN0_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.         */
  #define GRTC_INTEN0_RTCOMPARESYNC_Min (0x0UL)      /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN0_RTCOMPARESYNC_Max (0x1UL)      /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN0_RTCOMPARESYNC_Disabled (0x0UL) /*!< Disable                                                              */
  #define GRTC_INTEN0_RTCOMPARESYNC_Enabled (0x1UL)  /*!< Enable                                                               */

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN0_PWMPERIODEND_Pos (27UL)        /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTEN0_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN0_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.            */
  #define GRTC_INTEN0_PWMPERIODEND_Min (0x0UL)       /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN0_PWMPERIODEND_Max (0x1UL)       /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN0_PWMPERIODEND_Disabled (0x0UL)  /*!< Disable                                                              */
  #define GRTC_INTEN0_PWMPERIODEND_Enabled (0x1UL)   /*!< Enable                                                               */

/* PWMREADY @Bit 29 : Enable or disable interrupt for event PWMREADY */
  #define GRTC_INTEN0_PWMREADY_Pos (29UL)            /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTEN0_PWMREADY_Msk (0x1UL << GRTC_INTEN0_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                        */
  #define GRTC_INTEN0_PWMREADY_Min (0x0UL)           /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN0_PWMREADY_Max (0x1UL)           /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN0_PWMREADY_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN0_PWMREADY_Enabled (0x1UL)       /*!< Enable                                                               */

/* CLKOUTREADY @Bit 30 : Enable or disable interrupt for event CLKOUTREADY */
  #define GRTC_INTEN0_CLKOUTREADY_Pos (30UL)         /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTEN0_CLKOUTREADY_Msk (0x1UL << GRTC_INTEN0_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.               */
  #define GRTC_INTEN0_CLKOUTREADY_Min (0x0UL)        /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN0_CLKOUTREADY_Max (0x1UL)        /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN0_CLKOUTREADY_Disabled (0x0UL)   /*!< Disable                                                              */
  #define GRTC_INTEN0_CLKOUTREADY_Enabled (0x1UL)    /*!< Enable                                                               */


/* GRTC_INTENSET0: Enable interrupt */
  #define GRTC_INTENSET0_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET0 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET0_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENSET0_COMPARE0_Msk (0x1UL << GRTC_INTENSET0_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENSET0_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET0_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET0_COMPARE0_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET0_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENSET0_COMPARE1_Msk (0x1UL << GRTC_INTENSET0_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENSET0_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET0_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET0_COMPARE1_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET0_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENSET0_COMPARE2_Msk (0x1UL << GRTC_INTENSET0_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENSET0_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET0_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET0_COMPARE2_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET0_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENSET0_COMPARE3_Msk (0x1UL << GRTC_INTENSET0_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENSET0_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET0_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET0_COMPARE3_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET0_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENSET0_COMPARE4_Msk (0x1UL << GRTC_INTENSET0_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENSET0_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET0_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET0_COMPARE4_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET0_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENSET0_COMPARE5_Msk (0x1UL << GRTC_INTENSET0_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENSET0_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET0_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET0_COMPARE5_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET0_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENSET0_COMPARE6_Msk (0x1UL << GRTC_INTENSET0_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENSET0_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET0_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET0_COMPARE6_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET0_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENSET0_COMPARE7_Msk (0x1UL << GRTC_INTENSET0_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENSET0_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET0_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET0_COMPARE7_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET0_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENSET0_COMPARE8_Msk (0x1UL << GRTC_INTENSET0_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENSET0_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET0_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET0_COMPARE8_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET0_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENSET0_COMPARE9_Msk (0x1UL << GRTC_INTENSET0_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENSET0_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET0_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET0_COMPARE9_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET0_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENSET0_COMPARE10_Msk (0x1UL << GRTC_INTENSET0_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENSET0_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET0_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET0_COMPARE10_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET0_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENSET0_COMPARE11_Msk (0x1UL << GRTC_INTENSET0_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENSET0_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET0_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET0_COMPARE11_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET0_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET0_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Set (0x1UL)   /*!< Enable                                                               */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENSET0_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET0_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENSET0_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET0_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENSET0_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET0_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET0_PWMPERIODEND_Set (0x1UL)    /*!< Enable                                                               */
  #define GRTC_INTENSET0_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENSET0_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to enable interrupt for event PWMREADY */
  #define GRTC_INTENSET0_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENSET0_PWMREADY_Msk (0x1UL << GRTC_INTENSET0_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENSET0_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET0_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET0_PWMREADY_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET0_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET0_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to enable interrupt for event CLKOUTREADY */
  #define GRTC_INTENSET0_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENSET0_CLKOUTREADY_Msk (0x1UL << GRTC_INTENSET0_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENSET0_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET0_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET0_CLKOUTREADY_Set (0x1UL)     /*!< Enable                                                               */
  #define GRTC_INTENSET0_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENSET0_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTENCLR0: Disable interrupt */
  #define GRTC_INTENCLR0_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR0 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR0_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENCLR0_COMPARE0_Msk (0x1UL << GRTC_INTENCLR0_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENCLR0_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR0_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR0_COMPARE0_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR0_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENCLR0_COMPARE1_Msk (0x1UL << GRTC_INTENCLR0_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENCLR0_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR0_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR0_COMPARE1_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR0_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENCLR0_COMPARE2_Msk (0x1UL << GRTC_INTENCLR0_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENCLR0_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR0_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR0_COMPARE2_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR0_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENCLR0_COMPARE3_Msk (0x1UL << GRTC_INTENCLR0_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENCLR0_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR0_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR0_COMPARE3_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR0_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENCLR0_COMPARE4_Msk (0x1UL << GRTC_INTENCLR0_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENCLR0_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR0_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR0_COMPARE4_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR0_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENCLR0_COMPARE5_Msk (0x1UL << GRTC_INTENCLR0_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENCLR0_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR0_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR0_COMPARE5_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR0_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENCLR0_COMPARE6_Msk (0x1UL << GRTC_INTENCLR0_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENCLR0_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR0_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR0_COMPARE6_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR0_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENCLR0_COMPARE7_Msk (0x1UL << GRTC_INTENCLR0_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENCLR0_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR0_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR0_COMPARE7_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR0_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENCLR0_COMPARE8_Msk (0x1UL << GRTC_INTENCLR0_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENCLR0_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR0_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR0_COMPARE8_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR0_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENCLR0_COMPARE9_Msk (0x1UL << GRTC_INTENCLR0_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENCLR0_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR0_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR0_COMPARE9_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR0_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENCLR0_COMPARE10_Msk (0x1UL << GRTC_INTENCLR0_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENCLR0_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR0_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR0_COMPARE10_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR0_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENCLR0_COMPARE11_Msk (0x1UL << GRTC_INTENCLR0_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENCLR0_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR0_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR0_COMPARE11_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR0_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR0_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Clear (0x1UL) /*!< Disable                                                              */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENCLR0_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR0_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENCLR0_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR0_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENCLR0_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR0_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR0_PWMPERIODEND_Clear (0x1UL)  /*!< Disable                                                              */
  #define GRTC_INTENCLR0_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENCLR0_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to disable interrupt for event PWMREADY */
  #define GRTC_INTENCLR0_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENCLR0_PWMREADY_Msk (0x1UL << GRTC_INTENCLR0_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENCLR0_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR0_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR0_PWMREADY_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR0_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR0_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to disable interrupt for event CLKOUTREADY */
  #define GRTC_INTENCLR0_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENCLR0_CLKOUTREADY_Msk (0x1UL << GRTC_INTENCLR0_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENCLR0_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR0_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR0_CLKOUTREADY_Clear (0x1UL)   /*!< Disable                                                              */
  #define GRTC_INTENCLR0_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENCLR0_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTPEND0: Pending interrupts */
  #define GRTC_INTPEND0_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND0 register.                                    */

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND0_COMPARE0_Pos (0UL)           /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTPEND0_COMPARE0_Msk (0x1UL << GRTC_INTPEND0_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                    */
  #define GRTC_INTPEND0_COMPARE0_Min (0x0UL)         /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND0_COMPARE0_Max (0x1UL)         /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND0_COMPARE0_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE0_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND0_COMPARE1_Pos (1UL)           /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTPEND0_COMPARE1_Msk (0x1UL << GRTC_INTPEND0_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                    */
  #define GRTC_INTPEND0_COMPARE1_Min (0x0UL)         /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND0_COMPARE1_Max (0x1UL)         /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND0_COMPARE1_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE1_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND0_COMPARE2_Pos (2UL)           /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTPEND0_COMPARE2_Msk (0x1UL << GRTC_INTPEND0_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                    */
  #define GRTC_INTPEND0_COMPARE2_Min (0x0UL)         /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND0_COMPARE2_Max (0x1UL)         /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND0_COMPARE2_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE2_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND0_COMPARE3_Pos (3UL)           /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTPEND0_COMPARE3_Msk (0x1UL << GRTC_INTPEND0_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                    */
  #define GRTC_INTPEND0_COMPARE3_Min (0x0UL)         /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND0_COMPARE3_Max (0x1UL)         /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND0_COMPARE3_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE3_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND0_COMPARE4_Pos (4UL)           /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTPEND0_COMPARE4_Msk (0x1UL << GRTC_INTPEND0_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                    */
  #define GRTC_INTPEND0_COMPARE4_Min (0x0UL)         /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND0_COMPARE4_Max (0x1UL)         /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND0_COMPARE4_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE4_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND0_COMPARE5_Pos (5UL)           /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTPEND0_COMPARE5_Msk (0x1UL << GRTC_INTPEND0_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                    */
  #define GRTC_INTPEND0_COMPARE5_Min (0x0UL)         /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND0_COMPARE5_Max (0x1UL)         /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND0_COMPARE5_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE5_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND0_COMPARE6_Pos (6UL)           /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTPEND0_COMPARE6_Msk (0x1UL << GRTC_INTPEND0_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                    */
  #define GRTC_INTPEND0_COMPARE6_Min (0x0UL)         /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND0_COMPARE6_Max (0x1UL)         /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND0_COMPARE6_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE6_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND0_COMPARE7_Pos (7UL)           /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTPEND0_COMPARE7_Msk (0x1UL << GRTC_INTPEND0_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                    */
  #define GRTC_INTPEND0_COMPARE7_Min (0x0UL)         /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND0_COMPARE7_Max (0x1UL)         /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND0_COMPARE7_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE7_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND0_COMPARE8_Pos (8UL)           /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTPEND0_COMPARE8_Msk (0x1UL << GRTC_INTPEND0_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                    */
  #define GRTC_INTPEND0_COMPARE8_Min (0x0UL)         /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND0_COMPARE8_Max (0x1UL)         /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND0_COMPARE8_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE8_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND0_COMPARE9_Pos (9UL)           /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTPEND0_COMPARE9_Msk (0x1UL << GRTC_INTPEND0_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                    */
  #define GRTC_INTPEND0_COMPARE9_Min (0x0UL)         /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND0_COMPARE9_Max (0x1UL)         /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND0_COMPARE9_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE9_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND0_COMPARE10_Pos (10UL)         /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTPEND0_COMPARE10_Msk (0x1UL << GRTC_INTPEND0_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                 */
  #define GRTC_INTPEND0_COMPARE10_Min (0x0UL)        /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND0_COMPARE10_Max (0x1UL)        /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND0_COMPARE10_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE10_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND0_COMPARE11_Pos (11UL)         /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTPEND0_COMPARE11_Msk (0x1UL << GRTC_INTPEND0_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                 */
  #define GRTC_INTPEND0_COMPARE11_Min (0x0UL)        /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND0_COMPARE11_Max (0x1UL)        /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND0_COMPARE11_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_COMPARE11_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Pos (25UL)     /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND0_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.     */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Min (0x0UL)    /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Max (0x1UL)    /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND0_RTCOMPARESYNC_NotPending (0x0UL) /*!< Read: Not pending                                                */
  #define GRTC_INTPEND0_RTCOMPARESYNC_Pending (0x1UL) /*!< Read: Pending                                                       */

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND0_PWMPERIODEND_Pos (27UL)      /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTPEND0_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND0_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.        */
  #define GRTC_INTPEND0_PWMPERIODEND_Min (0x0UL)     /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND0_PWMPERIODEND_Max (0x1UL)     /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND0_PWMPERIODEND_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define GRTC_INTPEND0_PWMPERIODEND_Pending (0x1UL) /*!< Read: Pending                                                        */

/* PWMREADY @Bit 29 : Read pending status of interrupt for event PWMREADY */
  #define GRTC_INTPEND0_PWMREADY_Pos (29UL)          /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTPEND0_PWMREADY_Msk (0x1UL << GRTC_INTPEND0_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                    */
  #define GRTC_INTPEND0_PWMREADY_Min (0x0UL)         /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND0_PWMREADY_Max (0x1UL)         /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND0_PWMREADY_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND0_PWMREADY_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* CLKOUTREADY @Bit 30 : Read pending status of interrupt for event CLKOUTREADY */
  #define GRTC_INTPEND0_CLKOUTREADY_Pos (30UL)       /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTPEND0_CLKOUTREADY_Msk (0x1UL << GRTC_INTPEND0_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.           */
  #define GRTC_INTPEND0_CLKOUTREADY_Min (0x0UL)      /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND0_CLKOUTREADY_Max (0x1UL)      /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND0_CLKOUTREADY_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define GRTC_INTPEND0_CLKOUTREADY_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* GRTC_INTEN1: Enable or disable interrupt */
  #define GRTC_INTEN1_ResetValue (0x00000000UL)      /*!< Reset value of INTEN1 register.                                      */

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN1_COMPARE0_Pos (0UL)             /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTEN1_COMPARE0_Msk (0x1UL << GRTC_INTEN1_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                        */
  #define GRTC_INTEN1_COMPARE0_Min (0x0UL)           /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN1_COMPARE0_Max (0x1UL)           /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN1_COMPARE0_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE0_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN1_COMPARE1_Pos (1UL)             /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTEN1_COMPARE1_Msk (0x1UL << GRTC_INTEN1_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                        */
  #define GRTC_INTEN1_COMPARE1_Min (0x0UL)           /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN1_COMPARE1_Max (0x1UL)           /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN1_COMPARE1_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE1_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN1_COMPARE2_Pos (2UL)             /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTEN1_COMPARE2_Msk (0x1UL << GRTC_INTEN1_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                        */
  #define GRTC_INTEN1_COMPARE2_Min (0x0UL)           /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN1_COMPARE2_Max (0x1UL)           /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN1_COMPARE2_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE2_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN1_COMPARE3_Pos (3UL)             /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTEN1_COMPARE3_Msk (0x1UL << GRTC_INTEN1_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                        */
  #define GRTC_INTEN1_COMPARE3_Min (0x0UL)           /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN1_COMPARE3_Max (0x1UL)           /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN1_COMPARE3_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE3_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN1_COMPARE4_Pos (4UL)             /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTEN1_COMPARE4_Msk (0x1UL << GRTC_INTEN1_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                        */
  #define GRTC_INTEN1_COMPARE4_Min (0x0UL)           /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN1_COMPARE4_Max (0x1UL)           /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN1_COMPARE4_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE4_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN1_COMPARE5_Pos (5UL)             /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTEN1_COMPARE5_Msk (0x1UL << GRTC_INTEN1_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                        */
  #define GRTC_INTEN1_COMPARE5_Min (0x0UL)           /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN1_COMPARE5_Max (0x1UL)           /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN1_COMPARE5_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE5_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN1_COMPARE6_Pos (6UL)             /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTEN1_COMPARE6_Msk (0x1UL << GRTC_INTEN1_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                        */
  #define GRTC_INTEN1_COMPARE6_Min (0x0UL)           /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN1_COMPARE6_Max (0x1UL)           /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN1_COMPARE6_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE6_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN1_COMPARE7_Pos (7UL)             /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTEN1_COMPARE7_Msk (0x1UL << GRTC_INTEN1_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                        */
  #define GRTC_INTEN1_COMPARE7_Min (0x0UL)           /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN1_COMPARE7_Max (0x1UL)           /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN1_COMPARE7_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE7_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN1_COMPARE8_Pos (8UL)             /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTEN1_COMPARE8_Msk (0x1UL << GRTC_INTEN1_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                        */
  #define GRTC_INTEN1_COMPARE8_Min (0x0UL)           /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN1_COMPARE8_Max (0x1UL)           /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN1_COMPARE8_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE8_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN1_COMPARE9_Pos (9UL)             /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTEN1_COMPARE9_Msk (0x1UL << GRTC_INTEN1_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                        */
  #define GRTC_INTEN1_COMPARE9_Min (0x0UL)           /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN1_COMPARE9_Max (0x1UL)           /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN1_COMPARE9_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE9_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN1_COMPARE10_Pos (10UL)           /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTEN1_COMPARE10_Msk (0x1UL << GRTC_INTEN1_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                     */
  #define GRTC_INTEN1_COMPARE10_Min (0x0UL)          /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN1_COMPARE10_Max (0x1UL)          /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN1_COMPARE10_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE10_Enabled (0x1UL)      /*!< Enable                                                               */

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN1_COMPARE11_Pos (11UL)           /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTEN1_COMPARE11_Msk (0x1UL << GRTC_INTEN1_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                     */
  #define GRTC_INTEN1_COMPARE11_Min (0x0UL)          /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN1_COMPARE11_Max (0x1UL)          /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN1_COMPARE11_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN1_COMPARE11_Enabled (0x1UL)      /*!< Enable                                                               */

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN1_RTCOMPARESYNC_Pos (25UL)       /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTEN1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN1_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.         */
  #define GRTC_INTEN1_RTCOMPARESYNC_Min (0x0UL)      /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN1_RTCOMPARESYNC_Max (0x1UL)      /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN1_RTCOMPARESYNC_Disabled (0x0UL) /*!< Disable                                                              */
  #define GRTC_INTEN1_RTCOMPARESYNC_Enabled (0x1UL)  /*!< Enable                                                               */

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN1_PWMPERIODEND_Pos (27UL)        /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTEN1_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN1_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.            */
  #define GRTC_INTEN1_PWMPERIODEND_Min (0x0UL)       /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN1_PWMPERIODEND_Max (0x1UL)       /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN1_PWMPERIODEND_Disabled (0x0UL)  /*!< Disable                                                              */
  #define GRTC_INTEN1_PWMPERIODEND_Enabled (0x1UL)   /*!< Enable                                                               */

/* PWMREADY @Bit 29 : Enable or disable interrupt for event PWMREADY */
  #define GRTC_INTEN1_PWMREADY_Pos (29UL)            /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTEN1_PWMREADY_Msk (0x1UL << GRTC_INTEN1_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                        */
  #define GRTC_INTEN1_PWMREADY_Min (0x0UL)           /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN1_PWMREADY_Max (0x1UL)           /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN1_PWMREADY_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN1_PWMREADY_Enabled (0x1UL)       /*!< Enable                                                               */

/* CLKOUTREADY @Bit 30 : Enable or disable interrupt for event CLKOUTREADY */
  #define GRTC_INTEN1_CLKOUTREADY_Pos (30UL)         /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTEN1_CLKOUTREADY_Msk (0x1UL << GRTC_INTEN1_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.               */
  #define GRTC_INTEN1_CLKOUTREADY_Min (0x0UL)        /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN1_CLKOUTREADY_Max (0x1UL)        /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN1_CLKOUTREADY_Disabled (0x0UL)   /*!< Disable                                                              */
  #define GRTC_INTEN1_CLKOUTREADY_Enabled (0x1UL)    /*!< Enable                                                               */


/* GRTC_INTENSET1: Enable interrupt */
  #define GRTC_INTENSET1_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET1 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET1_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENSET1_COMPARE0_Msk (0x1UL << GRTC_INTENSET1_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENSET1_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET1_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET1_COMPARE0_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET1_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENSET1_COMPARE1_Msk (0x1UL << GRTC_INTENSET1_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENSET1_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET1_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET1_COMPARE1_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET1_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENSET1_COMPARE2_Msk (0x1UL << GRTC_INTENSET1_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENSET1_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET1_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET1_COMPARE2_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET1_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENSET1_COMPARE3_Msk (0x1UL << GRTC_INTENSET1_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENSET1_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET1_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET1_COMPARE3_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET1_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENSET1_COMPARE4_Msk (0x1UL << GRTC_INTENSET1_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENSET1_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET1_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET1_COMPARE4_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET1_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENSET1_COMPARE5_Msk (0x1UL << GRTC_INTENSET1_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENSET1_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET1_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET1_COMPARE5_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET1_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENSET1_COMPARE6_Msk (0x1UL << GRTC_INTENSET1_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENSET1_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET1_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET1_COMPARE6_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET1_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENSET1_COMPARE7_Msk (0x1UL << GRTC_INTENSET1_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENSET1_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET1_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET1_COMPARE7_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET1_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENSET1_COMPARE8_Msk (0x1UL << GRTC_INTENSET1_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENSET1_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET1_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET1_COMPARE8_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET1_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENSET1_COMPARE9_Msk (0x1UL << GRTC_INTENSET1_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENSET1_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET1_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET1_COMPARE9_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET1_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENSET1_COMPARE10_Msk (0x1UL << GRTC_INTENSET1_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENSET1_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET1_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET1_COMPARE10_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET1_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENSET1_COMPARE11_Msk (0x1UL << GRTC_INTENSET1_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENSET1_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET1_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET1_COMPARE11_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET1_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET1_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Set (0x1UL)   /*!< Enable                                                               */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENSET1_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET1_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENSET1_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET1_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENSET1_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET1_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET1_PWMPERIODEND_Set (0x1UL)    /*!< Enable                                                               */
  #define GRTC_INTENSET1_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENSET1_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to enable interrupt for event PWMREADY */
  #define GRTC_INTENSET1_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENSET1_PWMREADY_Msk (0x1UL << GRTC_INTENSET1_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENSET1_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET1_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET1_PWMREADY_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET1_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET1_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to enable interrupt for event CLKOUTREADY */
  #define GRTC_INTENSET1_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENSET1_CLKOUTREADY_Msk (0x1UL << GRTC_INTENSET1_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENSET1_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET1_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET1_CLKOUTREADY_Set (0x1UL)     /*!< Enable                                                               */
  #define GRTC_INTENSET1_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENSET1_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTENCLR1: Disable interrupt */
  #define GRTC_INTENCLR1_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR1 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR1_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENCLR1_COMPARE0_Msk (0x1UL << GRTC_INTENCLR1_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENCLR1_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR1_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR1_COMPARE0_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR1_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENCLR1_COMPARE1_Msk (0x1UL << GRTC_INTENCLR1_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENCLR1_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR1_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR1_COMPARE1_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR1_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENCLR1_COMPARE2_Msk (0x1UL << GRTC_INTENCLR1_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENCLR1_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR1_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR1_COMPARE2_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR1_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENCLR1_COMPARE3_Msk (0x1UL << GRTC_INTENCLR1_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENCLR1_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR1_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR1_COMPARE3_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR1_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENCLR1_COMPARE4_Msk (0x1UL << GRTC_INTENCLR1_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENCLR1_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR1_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR1_COMPARE4_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR1_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENCLR1_COMPARE5_Msk (0x1UL << GRTC_INTENCLR1_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENCLR1_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR1_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR1_COMPARE5_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR1_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENCLR1_COMPARE6_Msk (0x1UL << GRTC_INTENCLR1_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENCLR1_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR1_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR1_COMPARE6_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR1_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENCLR1_COMPARE7_Msk (0x1UL << GRTC_INTENCLR1_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENCLR1_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR1_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR1_COMPARE7_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR1_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENCLR1_COMPARE8_Msk (0x1UL << GRTC_INTENCLR1_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENCLR1_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR1_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR1_COMPARE8_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR1_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENCLR1_COMPARE9_Msk (0x1UL << GRTC_INTENCLR1_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENCLR1_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR1_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR1_COMPARE9_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR1_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENCLR1_COMPARE10_Msk (0x1UL << GRTC_INTENCLR1_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENCLR1_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR1_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR1_COMPARE10_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR1_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENCLR1_COMPARE11_Msk (0x1UL << GRTC_INTENCLR1_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENCLR1_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR1_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR1_COMPARE11_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR1_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR1_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Clear (0x1UL) /*!< Disable                                                              */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENCLR1_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR1_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENCLR1_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR1_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENCLR1_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR1_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR1_PWMPERIODEND_Clear (0x1UL)  /*!< Disable                                                              */
  #define GRTC_INTENCLR1_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENCLR1_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to disable interrupt for event PWMREADY */
  #define GRTC_INTENCLR1_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENCLR1_PWMREADY_Msk (0x1UL << GRTC_INTENCLR1_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENCLR1_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR1_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR1_PWMREADY_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR1_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR1_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to disable interrupt for event CLKOUTREADY */
  #define GRTC_INTENCLR1_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENCLR1_CLKOUTREADY_Msk (0x1UL << GRTC_INTENCLR1_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENCLR1_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR1_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR1_CLKOUTREADY_Clear (0x1UL)   /*!< Disable                                                              */
  #define GRTC_INTENCLR1_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENCLR1_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTPEND1: Pending interrupts */
  #define GRTC_INTPEND1_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND1 register.                                    */

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND1_COMPARE0_Pos (0UL)           /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTPEND1_COMPARE0_Msk (0x1UL << GRTC_INTPEND1_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                    */
  #define GRTC_INTPEND1_COMPARE0_Min (0x0UL)         /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND1_COMPARE0_Max (0x1UL)         /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND1_COMPARE0_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE0_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND1_COMPARE1_Pos (1UL)           /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTPEND1_COMPARE1_Msk (0x1UL << GRTC_INTPEND1_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                    */
  #define GRTC_INTPEND1_COMPARE1_Min (0x0UL)         /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND1_COMPARE1_Max (0x1UL)         /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND1_COMPARE1_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE1_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND1_COMPARE2_Pos (2UL)           /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTPEND1_COMPARE2_Msk (0x1UL << GRTC_INTPEND1_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                    */
  #define GRTC_INTPEND1_COMPARE2_Min (0x0UL)         /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND1_COMPARE2_Max (0x1UL)         /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND1_COMPARE2_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE2_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND1_COMPARE3_Pos (3UL)           /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTPEND1_COMPARE3_Msk (0x1UL << GRTC_INTPEND1_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                    */
  #define GRTC_INTPEND1_COMPARE3_Min (0x0UL)         /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND1_COMPARE3_Max (0x1UL)         /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND1_COMPARE3_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE3_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND1_COMPARE4_Pos (4UL)           /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTPEND1_COMPARE4_Msk (0x1UL << GRTC_INTPEND1_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                    */
  #define GRTC_INTPEND1_COMPARE4_Min (0x0UL)         /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND1_COMPARE4_Max (0x1UL)         /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND1_COMPARE4_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE4_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND1_COMPARE5_Pos (5UL)           /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTPEND1_COMPARE5_Msk (0x1UL << GRTC_INTPEND1_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                    */
  #define GRTC_INTPEND1_COMPARE5_Min (0x0UL)         /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND1_COMPARE5_Max (0x1UL)         /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND1_COMPARE5_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE5_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND1_COMPARE6_Pos (6UL)           /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTPEND1_COMPARE6_Msk (0x1UL << GRTC_INTPEND1_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                    */
  #define GRTC_INTPEND1_COMPARE6_Min (0x0UL)         /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND1_COMPARE6_Max (0x1UL)         /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND1_COMPARE6_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE6_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND1_COMPARE7_Pos (7UL)           /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTPEND1_COMPARE7_Msk (0x1UL << GRTC_INTPEND1_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                    */
  #define GRTC_INTPEND1_COMPARE7_Min (0x0UL)         /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND1_COMPARE7_Max (0x1UL)         /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND1_COMPARE7_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE7_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND1_COMPARE8_Pos (8UL)           /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTPEND1_COMPARE8_Msk (0x1UL << GRTC_INTPEND1_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                    */
  #define GRTC_INTPEND1_COMPARE8_Min (0x0UL)         /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND1_COMPARE8_Max (0x1UL)         /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND1_COMPARE8_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE8_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND1_COMPARE9_Pos (9UL)           /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTPEND1_COMPARE9_Msk (0x1UL << GRTC_INTPEND1_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                    */
  #define GRTC_INTPEND1_COMPARE9_Min (0x0UL)         /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND1_COMPARE9_Max (0x1UL)         /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND1_COMPARE9_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE9_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND1_COMPARE10_Pos (10UL)         /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTPEND1_COMPARE10_Msk (0x1UL << GRTC_INTPEND1_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                 */
  #define GRTC_INTPEND1_COMPARE10_Min (0x0UL)        /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND1_COMPARE10_Max (0x1UL)        /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND1_COMPARE10_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE10_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND1_COMPARE11_Pos (11UL)         /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTPEND1_COMPARE11_Msk (0x1UL << GRTC_INTPEND1_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                 */
  #define GRTC_INTPEND1_COMPARE11_Min (0x0UL)        /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND1_COMPARE11_Max (0x1UL)        /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND1_COMPARE11_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_COMPARE11_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Pos (25UL)     /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND1_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.     */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Min (0x0UL)    /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Max (0x1UL)    /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND1_RTCOMPARESYNC_NotPending (0x0UL) /*!< Read: Not pending                                                */
  #define GRTC_INTPEND1_RTCOMPARESYNC_Pending (0x1UL) /*!< Read: Pending                                                       */

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND1_PWMPERIODEND_Pos (27UL)      /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTPEND1_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND1_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.        */
  #define GRTC_INTPEND1_PWMPERIODEND_Min (0x0UL)     /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND1_PWMPERIODEND_Max (0x1UL)     /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND1_PWMPERIODEND_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define GRTC_INTPEND1_PWMPERIODEND_Pending (0x1UL) /*!< Read: Pending                                                        */

/* PWMREADY @Bit 29 : Read pending status of interrupt for event PWMREADY */
  #define GRTC_INTPEND1_PWMREADY_Pos (29UL)          /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTPEND1_PWMREADY_Msk (0x1UL << GRTC_INTPEND1_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                    */
  #define GRTC_INTPEND1_PWMREADY_Min (0x0UL)         /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND1_PWMREADY_Max (0x1UL)         /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND1_PWMREADY_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND1_PWMREADY_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* CLKOUTREADY @Bit 30 : Read pending status of interrupt for event CLKOUTREADY */
  #define GRTC_INTPEND1_CLKOUTREADY_Pos (30UL)       /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTPEND1_CLKOUTREADY_Msk (0x1UL << GRTC_INTPEND1_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.           */
  #define GRTC_INTPEND1_CLKOUTREADY_Min (0x0UL)      /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND1_CLKOUTREADY_Max (0x1UL)      /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND1_CLKOUTREADY_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define GRTC_INTPEND1_CLKOUTREADY_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* GRTC_INTEN2: Enable or disable interrupt */
  #define GRTC_INTEN2_ResetValue (0x00000000UL)      /*!< Reset value of INTEN2 register.                                      */

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN2_COMPARE0_Pos (0UL)             /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTEN2_COMPARE0_Msk (0x1UL << GRTC_INTEN2_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                        */
  #define GRTC_INTEN2_COMPARE0_Min (0x0UL)           /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN2_COMPARE0_Max (0x1UL)           /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN2_COMPARE0_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE0_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN2_COMPARE1_Pos (1UL)             /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTEN2_COMPARE1_Msk (0x1UL << GRTC_INTEN2_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                        */
  #define GRTC_INTEN2_COMPARE1_Min (0x0UL)           /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN2_COMPARE1_Max (0x1UL)           /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN2_COMPARE1_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE1_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN2_COMPARE2_Pos (2UL)             /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTEN2_COMPARE2_Msk (0x1UL << GRTC_INTEN2_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                        */
  #define GRTC_INTEN2_COMPARE2_Min (0x0UL)           /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN2_COMPARE2_Max (0x1UL)           /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN2_COMPARE2_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE2_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN2_COMPARE3_Pos (3UL)             /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTEN2_COMPARE3_Msk (0x1UL << GRTC_INTEN2_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                        */
  #define GRTC_INTEN2_COMPARE3_Min (0x0UL)           /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN2_COMPARE3_Max (0x1UL)           /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN2_COMPARE3_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE3_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN2_COMPARE4_Pos (4UL)             /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTEN2_COMPARE4_Msk (0x1UL << GRTC_INTEN2_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                        */
  #define GRTC_INTEN2_COMPARE4_Min (0x0UL)           /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN2_COMPARE4_Max (0x1UL)           /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN2_COMPARE4_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE4_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN2_COMPARE5_Pos (5UL)             /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTEN2_COMPARE5_Msk (0x1UL << GRTC_INTEN2_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                        */
  #define GRTC_INTEN2_COMPARE5_Min (0x0UL)           /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN2_COMPARE5_Max (0x1UL)           /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN2_COMPARE5_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE5_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN2_COMPARE6_Pos (6UL)             /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTEN2_COMPARE6_Msk (0x1UL << GRTC_INTEN2_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                        */
  #define GRTC_INTEN2_COMPARE6_Min (0x0UL)           /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN2_COMPARE6_Max (0x1UL)           /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN2_COMPARE6_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE6_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN2_COMPARE7_Pos (7UL)             /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTEN2_COMPARE7_Msk (0x1UL << GRTC_INTEN2_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                        */
  #define GRTC_INTEN2_COMPARE7_Min (0x0UL)           /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN2_COMPARE7_Max (0x1UL)           /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN2_COMPARE7_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE7_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN2_COMPARE8_Pos (8UL)             /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTEN2_COMPARE8_Msk (0x1UL << GRTC_INTEN2_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                        */
  #define GRTC_INTEN2_COMPARE8_Min (0x0UL)           /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN2_COMPARE8_Max (0x1UL)           /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN2_COMPARE8_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE8_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN2_COMPARE9_Pos (9UL)             /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTEN2_COMPARE9_Msk (0x1UL << GRTC_INTEN2_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                        */
  #define GRTC_INTEN2_COMPARE9_Min (0x0UL)           /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN2_COMPARE9_Max (0x1UL)           /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN2_COMPARE9_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE9_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN2_COMPARE10_Pos (10UL)           /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTEN2_COMPARE10_Msk (0x1UL << GRTC_INTEN2_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                     */
  #define GRTC_INTEN2_COMPARE10_Min (0x0UL)          /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN2_COMPARE10_Max (0x1UL)          /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN2_COMPARE10_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE10_Enabled (0x1UL)      /*!< Enable                                                               */

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN2_COMPARE11_Pos (11UL)           /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTEN2_COMPARE11_Msk (0x1UL << GRTC_INTEN2_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                     */
  #define GRTC_INTEN2_COMPARE11_Min (0x0UL)          /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN2_COMPARE11_Max (0x1UL)          /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN2_COMPARE11_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN2_COMPARE11_Enabled (0x1UL)      /*!< Enable                                                               */

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN2_RTCOMPARESYNC_Pos (25UL)       /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTEN2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN2_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.         */
  #define GRTC_INTEN2_RTCOMPARESYNC_Min (0x0UL)      /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN2_RTCOMPARESYNC_Max (0x1UL)      /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN2_RTCOMPARESYNC_Disabled (0x0UL) /*!< Disable                                                              */
  #define GRTC_INTEN2_RTCOMPARESYNC_Enabled (0x1UL)  /*!< Enable                                                               */

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN2_PWMPERIODEND_Pos (27UL)        /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTEN2_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN2_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.            */
  #define GRTC_INTEN2_PWMPERIODEND_Min (0x0UL)       /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN2_PWMPERIODEND_Max (0x1UL)       /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN2_PWMPERIODEND_Disabled (0x0UL)  /*!< Disable                                                              */
  #define GRTC_INTEN2_PWMPERIODEND_Enabled (0x1UL)   /*!< Enable                                                               */

/* PWMREADY @Bit 29 : Enable or disable interrupt for event PWMREADY */
  #define GRTC_INTEN2_PWMREADY_Pos (29UL)            /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTEN2_PWMREADY_Msk (0x1UL << GRTC_INTEN2_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                        */
  #define GRTC_INTEN2_PWMREADY_Min (0x0UL)           /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN2_PWMREADY_Max (0x1UL)           /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN2_PWMREADY_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN2_PWMREADY_Enabled (0x1UL)       /*!< Enable                                                               */

/* CLKOUTREADY @Bit 30 : Enable or disable interrupt for event CLKOUTREADY */
  #define GRTC_INTEN2_CLKOUTREADY_Pos (30UL)         /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTEN2_CLKOUTREADY_Msk (0x1UL << GRTC_INTEN2_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.               */
  #define GRTC_INTEN2_CLKOUTREADY_Min (0x0UL)        /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN2_CLKOUTREADY_Max (0x1UL)        /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN2_CLKOUTREADY_Disabled (0x0UL)   /*!< Disable                                                              */
  #define GRTC_INTEN2_CLKOUTREADY_Enabled (0x1UL)    /*!< Enable                                                               */


/* GRTC_INTENSET2: Enable interrupt */
  #define GRTC_INTENSET2_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET2 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET2_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENSET2_COMPARE0_Msk (0x1UL << GRTC_INTENSET2_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENSET2_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET2_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET2_COMPARE0_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET2_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENSET2_COMPARE1_Msk (0x1UL << GRTC_INTENSET2_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENSET2_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET2_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET2_COMPARE1_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET2_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENSET2_COMPARE2_Msk (0x1UL << GRTC_INTENSET2_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENSET2_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET2_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET2_COMPARE2_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET2_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENSET2_COMPARE3_Msk (0x1UL << GRTC_INTENSET2_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENSET2_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET2_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET2_COMPARE3_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET2_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENSET2_COMPARE4_Msk (0x1UL << GRTC_INTENSET2_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENSET2_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET2_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET2_COMPARE4_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET2_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENSET2_COMPARE5_Msk (0x1UL << GRTC_INTENSET2_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENSET2_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET2_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET2_COMPARE5_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET2_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENSET2_COMPARE6_Msk (0x1UL << GRTC_INTENSET2_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENSET2_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET2_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET2_COMPARE6_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET2_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENSET2_COMPARE7_Msk (0x1UL << GRTC_INTENSET2_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENSET2_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET2_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET2_COMPARE7_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET2_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENSET2_COMPARE8_Msk (0x1UL << GRTC_INTENSET2_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENSET2_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET2_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET2_COMPARE8_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET2_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENSET2_COMPARE9_Msk (0x1UL << GRTC_INTENSET2_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENSET2_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET2_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET2_COMPARE9_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET2_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENSET2_COMPARE10_Msk (0x1UL << GRTC_INTENSET2_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENSET2_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET2_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET2_COMPARE10_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET2_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENSET2_COMPARE11_Msk (0x1UL << GRTC_INTENSET2_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENSET2_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET2_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET2_COMPARE11_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET2_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET2_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Set (0x1UL)   /*!< Enable                                                               */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENSET2_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET2_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENSET2_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET2_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENSET2_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET2_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET2_PWMPERIODEND_Set (0x1UL)    /*!< Enable                                                               */
  #define GRTC_INTENSET2_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENSET2_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to enable interrupt for event PWMREADY */
  #define GRTC_INTENSET2_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENSET2_PWMREADY_Msk (0x1UL << GRTC_INTENSET2_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENSET2_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET2_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET2_PWMREADY_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET2_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET2_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to enable interrupt for event CLKOUTREADY */
  #define GRTC_INTENSET2_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENSET2_CLKOUTREADY_Msk (0x1UL << GRTC_INTENSET2_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENSET2_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET2_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET2_CLKOUTREADY_Set (0x1UL)     /*!< Enable                                                               */
  #define GRTC_INTENSET2_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENSET2_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTENCLR2: Disable interrupt */
  #define GRTC_INTENCLR2_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR2 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR2_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENCLR2_COMPARE0_Msk (0x1UL << GRTC_INTENCLR2_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENCLR2_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR2_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR2_COMPARE0_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR2_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENCLR2_COMPARE1_Msk (0x1UL << GRTC_INTENCLR2_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENCLR2_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR2_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR2_COMPARE1_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR2_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENCLR2_COMPARE2_Msk (0x1UL << GRTC_INTENCLR2_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENCLR2_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR2_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR2_COMPARE2_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR2_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENCLR2_COMPARE3_Msk (0x1UL << GRTC_INTENCLR2_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENCLR2_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR2_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR2_COMPARE3_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR2_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENCLR2_COMPARE4_Msk (0x1UL << GRTC_INTENCLR2_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENCLR2_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR2_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR2_COMPARE4_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR2_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENCLR2_COMPARE5_Msk (0x1UL << GRTC_INTENCLR2_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENCLR2_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR2_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR2_COMPARE5_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR2_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENCLR2_COMPARE6_Msk (0x1UL << GRTC_INTENCLR2_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENCLR2_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR2_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR2_COMPARE6_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR2_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENCLR2_COMPARE7_Msk (0x1UL << GRTC_INTENCLR2_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENCLR2_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR2_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR2_COMPARE7_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR2_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENCLR2_COMPARE8_Msk (0x1UL << GRTC_INTENCLR2_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENCLR2_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR2_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR2_COMPARE8_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR2_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENCLR2_COMPARE9_Msk (0x1UL << GRTC_INTENCLR2_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENCLR2_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR2_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR2_COMPARE9_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR2_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENCLR2_COMPARE10_Msk (0x1UL << GRTC_INTENCLR2_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENCLR2_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR2_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR2_COMPARE10_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR2_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENCLR2_COMPARE11_Msk (0x1UL << GRTC_INTENCLR2_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENCLR2_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR2_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR2_COMPARE11_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR2_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR2_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Clear (0x1UL) /*!< Disable                                                              */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENCLR2_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR2_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENCLR2_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR2_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENCLR2_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR2_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR2_PWMPERIODEND_Clear (0x1UL)  /*!< Disable                                                              */
  #define GRTC_INTENCLR2_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENCLR2_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to disable interrupt for event PWMREADY */
  #define GRTC_INTENCLR2_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENCLR2_PWMREADY_Msk (0x1UL << GRTC_INTENCLR2_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENCLR2_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR2_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR2_PWMREADY_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR2_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR2_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to disable interrupt for event CLKOUTREADY */
  #define GRTC_INTENCLR2_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENCLR2_CLKOUTREADY_Msk (0x1UL << GRTC_INTENCLR2_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENCLR2_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR2_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR2_CLKOUTREADY_Clear (0x1UL)   /*!< Disable                                                              */
  #define GRTC_INTENCLR2_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENCLR2_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTPEND2: Pending interrupts */
  #define GRTC_INTPEND2_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND2 register.                                    */

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND2_COMPARE0_Pos (0UL)           /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTPEND2_COMPARE0_Msk (0x1UL << GRTC_INTPEND2_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                    */
  #define GRTC_INTPEND2_COMPARE0_Min (0x0UL)         /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND2_COMPARE0_Max (0x1UL)         /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND2_COMPARE0_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE0_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND2_COMPARE1_Pos (1UL)           /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTPEND2_COMPARE1_Msk (0x1UL << GRTC_INTPEND2_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                    */
  #define GRTC_INTPEND2_COMPARE1_Min (0x0UL)         /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND2_COMPARE1_Max (0x1UL)         /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND2_COMPARE1_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE1_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND2_COMPARE2_Pos (2UL)           /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTPEND2_COMPARE2_Msk (0x1UL << GRTC_INTPEND2_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                    */
  #define GRTC_INTPEND2_COMPARE2_Min (0x0UL)         /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND2_COMPARE2_Max (0x1UL)         /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND2_COMPARE2_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE2_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND2_COMPARE3_Pos (3UL)           /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTPEND2_COMPARE3_Msk (0x1UL << GRTC_INTPEND2_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                    */
  #define GRTC_INTPEND2_COMPARE3_Min (0x0UL)         /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND2_COMPARE3_Max (0x1UL)         /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND2_COMPARE3_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE3_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND2_COMPARE4_Pos (4UL)           /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTPEND2_COMPARE4_Msk (0x1UL << GRTC_INTPEND2_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                    */
  #define GRTC_INTPEND2_COMPARE4_Min (0x0UL)         /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND2_COMPARE4_Max (0x1UL)         /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND2_COMPARE4_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE4_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND2_COMPARE5_Pos (5UL)           /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTPEND2_COMPARE5_Msk (0x1UL << GRTC_INTPEND2_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                    */
  #define GRTC_INTPEND2_COMPARE5_Min (0x0UL)         /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND2_COMPARE5_Max (0x1UL)         /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND2_COMPARE5_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE5_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND2_COMPARE6_Pos (6UL)           /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTPEND2_COMPARE6_Msk (0x1UL << GRTC_INTPEND2_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                    */
  #define GRTC_INTPEND2_COMPARE6_Min (0x0UL)         /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND2_COMPARE6_Max (0x1UL)         /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND2_COMPARE6_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE6_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND2_COMPARE7_Pos (7UL)           /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTPEND2_COMPARE7_Msk (0x1UL << GRTC_INTPEND2_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                    */
  #define GRTC_INTPEND2_COMPARE7_Min (0x0UL)         /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND2_COMPARE7_Max (0x1UL)         /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND2_COMPARE7_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE7_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND2_COMPARE8_Pos (8UL)           /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTPEND2_COMPARE8_Msk (0x1UL << GRTC_INTPEND2_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                    */
  #define GRTC_INTPEND2_COMPARE8_Min (0x0UL)         /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND2_COMPARE8_Max (0x1UL)         /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND2_COMPARE8_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE8_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND2_COMPARE9_Pos (9UL)           /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTPEND2_COMPARE9_Msk (0x1UL << GRTC_INTPEND2_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                    */
  #define GRTC_INTPEND2_COMPARE9_Min (0x0UL)         /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND2_COMPARE9_Max (0x1UL)         /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND2_COMPARE9_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE9_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND2_COMPARE10_Pos (10UL)         /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTPEND2_COMPARE10_Msk (0x1UL << GRTC_INTPEND2_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                 */
  #define GRTC_INTPEND2_COMPARE10_Min (0x0UL)        /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND2_COMPARE10_Max (0x1UL)        /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND2_COMPARE10_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE10_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND2_COMPARE11_Pos (11UL)         /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTPEND2_COMPARE11_Msk (0x1UL << GRTC_INTPEND2_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                 */
  #define GRTC_INTPEND2_COMPARE11_Min (0x0UL)        /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND2_COMPARE11_Max (0x1UL)        /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND2_COMPARE11_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_COMPARE11_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Pos (25UL)     /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND2_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.     */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Min (0x0UL)    /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Max (0x1UL)    /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND2_RTCOMPARESYNC_NotPending (0x0UL) /*!< Read: Not pending                                                */
  #define GRTC_INTPEND2_RTCOMPARESYNC_Pending (0x1UL) /*!< Read: Pending                                                       */

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND2_PWMPERIODEND_Pos (27UL)      /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTPEND2_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND2_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.        */
  #define GRTC_INTPEND2_PWMPERIODEND_Min (0x0UL)     /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND2_PWMPERIODEND_Max (0x1UL)     /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND2_PWMPERIODEND_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define GRTC_INTPEND2_PWMPERIODEND_Pending (0x1UL) /*!< Read: Pending                                                        */

/* PWMREADY @Bit 29 : Read pending status of interrupt for event PWMREADY */
  #define GRTC_INTPEND2_PWMREADY_Pos (29UL)          /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTPEND2_PWMREADY_Msk (0x1UL << GRTC_INTPEND2_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                    */
  #define GRTC_INTPEND2_PWMREADY_Min (0x0UL)         /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND2_PWMREADY_Max (0x1UL)         /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND2_PWMREADY_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND2_PWMREADY_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* CLKOUTREADY @Bit 30 : Read pending status of interrupt for event CLKOUTREADY */
  #define GRTC_INTPEND2_CLKOUTREADY_Pos (30UL)       /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTPEND2_CLKOUTREADY_Msk (0x1UL << GRTC_INTPEND2_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.           */
  #define GRTC_INTPEND2_CLKOUTREADY_Min (0x0UL)      /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND2_CLKOUTREADY_Max (0x1UL)      /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND2_CLKOUTREADY_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define GRTC_INTPEND2_CLKOUTREADY_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* GRTC_INTEN3: Enable or disable interrupt */
  #define GRTC_INTEN3_ResetValue (0x00000000UL)      /*!< Reset value of INTEN3 register.                                      */

/* COMPARE0 @Bit 0 : Enable or disable interrupt for event COMPARE[0] */
  #define GRTC_INTEN3_COMPARE0_Pos (0UL)             /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTEN3_COMPARE0_Msk (0x1UL << GRTC_INTEN3_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                        */
  #define GRTC_INTEN3_COMPARE0_Min (0x0UL)           /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN3_COMPARE0_Max (0x1UL)           /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTEN3_COMPARE0_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE0_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE1 @Bit 1 : Enable or disable interrupt for event COMPARE[1] */
  #define GRTC_INTEN3_COMPARE1_Pos (1UL)             /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTEN3_COMPARE1_Msk (0x1UL << GRTC_INTEN3_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                        */
  #define GRTC_INTEN3_COMPARE1_Min (0x0UL)           /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN3_COMPARE1_Max (0x1UL)           /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTEN3_COMPARE1_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE1_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE2 @Bit 2 : Enable or disable interrupt for event COMPARE[2] */
  #define GRTC_INTEN3_COMPARE2_Pos (2UL)             /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTEN3_COMPARE2_Msk (0x1UL << GRTC_INTEN3_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                        */
  #define GRTC_INTEN3_COMPARE2_Min (0x0UL)           /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN3_COMPARE2_Max (0x1UL)           /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTEN3_COMPARE2_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE2_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE3 @Bit 3 : Enable or disable interrupt for event COMPARE[3] */
  #define GRTC_INTEN3_COMPARE3_Pos (3UL)             /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTEN3_COMPARE3_Msk (0x1UL << GRTC_INTEN3_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                        */
  #define GRTC_INTEN3_COMPARE3_Min (0x0UL)           /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN3_COMPARE3_Max (0x1UL)           /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTEN3_COMPARE3_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE3_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE4 @Bit 4 : Enable or disable interrupt for event COMPARE[4] */
  #define GRTC_INTEN3_COMPARE4_Pos (4UL)             /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTEN3_COMPARE4_Msk (0x1UL << GRTC_INTEN3_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                        */
  #define GRTC_INTEN3_COMPARE4_Min (0x0UL)           /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN3_COMPARE4_Max (0x1UL)           /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTEN3_COMPARE4_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE4_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE5 @Bit 5 : Enable or disable interrupt for event COMPARE[5] */
  #define GRTC_INTEN3_COMPARE5_Pos (5UL)             /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTEN3_COMPARE5_Msk (0x1UL << GRTC_INTEN3_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                        */
  #define GRTC_INTEN3_COMPARE5_Min (0x0UL)           /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN3_COMPARE5_Max (0x1UL)           /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTEN3_COMPARE5_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE5_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE6 @Bit 6 : Enable or disable interrupt for event COMPARE[6] */
  #define GRTC_INTEN3_COMPARE6_Pos (6UL)             /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTEN3_COMPARE6_Msk (0x1UL << GRTC_INTEN3_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                        */
  #define GRTC_INTEN3_COMPARE6_Min (0x0UL)           /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN3_COMPARE6_Max (0x1UL)           /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTEN3_COMPARE6_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE6_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE7 @Bit 7 : Enable or disable interrupt for event COMPARE[7] */
  #define GRTC_INTEN3_COMPARE7_Pos (7UL)             /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTEN3_COMPARE7_Msk (0x1UL << GRTC_INTEN3_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                        */
  #define GRTC_INTEN3_COMPARE7_Min (0x0UL)           /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN3_COMPARE7_Max (0x1UL)           /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTEN3_COMPARE7_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE7_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE8 @Bit 8 : Enable or disable interrupt for event COMPARE[8] */
  #define GRTC_INTEN3_COMPARE8_Pos (8UL)             /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTEN3_COMPARE8_Msk (0x1UL << GRTC_INTEN3_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                        */
  #define GRTC_INTEN3_COMPARE8_Min (0x0UL)           /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN3_COMPARE8_Max (0x1UL)           /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTEN3_COMPARE8_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE8_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE9 @Bit 9 : Enable or disable interrupt for event COMPARE[9] */
  #define GRTC_INTEN3_COMPARE9_Pos (9UL)             /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTEN3_COMPARE9_Msk (0x1UL << GRTC_INTEN3_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                        */
  #define GRTC_INTEN3_COMPARE9_Min (0x0UL)           /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN3_COMPARE9_Max (0x1UL)           /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTEN3_COMPARE9_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE9_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE10 @Bit 10 : Enable or disable interrupt for event COMPARE[10] */
  #define GRTC_INTEN3_COMPARE10_Pos (10UL)           /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTEN3_COMPARE10_Msk (0x1UL << GRTC_INTEN3_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                     */
  #define GRTC_INTEN3_COMPARE10_Min (0x0UL)          /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN3_COMPARE10_Max (0x1UL)          /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTEN3_COMPARE10_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE10_Enabled (0x1UL)      /*!< Enable                                                               */

/* COMPARE11 @Bit 11 : Enable or disable interrupt for event COMPARE[11] */
  #define GRTC_INTEN3_COMPARE11_Pos (11UL)           /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTEN3_COMPARE11_Msk (0x1UL << GRTC_INTEN3_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                     */
  #define GRTC_INTEN3_COMPARE11_Min (0x0UL)          /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN3_COMPARE11_Max (0x1UL)          /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTEN3_COMPARE11_Disabled (0x0UL)     /*!< Disable                                                              */
  #define GRTC_INTEN3_COMPARE11_Enabled (0x1UL)      /*!< Enable                                                               */

/* RTCOMPARESYNC @Bit 25 : Enable or disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTEN3_RTCOMPARESYNC_Pos (25UL)       /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTEN3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTEN3_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.         */
  #define GRTC_INTEN3_RTCOMPARESYNC_Min (0x0UL)      /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN3_RTCOMPARESYNC_Max (0x1UL)      /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTEN3_RTCOMPARESYNC_Disabled (0x0UL) /*!< Disable                                                              */
  #define GRTC_INTEN3_RTCOMPARESYNC_Enabled (0x1UL)  /*!< Enable                                                               */

/* PWMPERIODEND @Bit 27 : Enable or disable interrupt for event PWMPERIODEND */
  #define GRTC_INTEN3_PWMPERIODEND_Pos (27UL)        /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTEN3_PWMPERIODEND_Msk (0x1UL << GRTC_INTEN3_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.            */
  #define GRTC_INTEN3_PWMPERIODEND_Min (0x0UL)       /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN3_PWMPERIODEND_Max (0x1UL)       /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTEN3_PWMPERIODEND_Disabled (0x0UL)  /*!< Disable                                                              */
  #define GRTC_INTEN3_PWMPERIODEND_Enabled (0x1UL)   /*!< Enable                                                               */

/* PWMREADY @Bit 29 : Enable or disable interrupt for event PWMREADY */
  #define GRTC_INTEN3_PWMREADY_Pos (29UL)            /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTEN3_PWMREADY_Msk (0x1UL << GRTC_INTEN3_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                        */
  #define GRTC_INTEN3_PWMREADY_Min (0x0UL)           /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN3_PWMREADY_Max (0x1UL)           /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTEN3_PWMREADY_Disabled (0x0UL)      /*!< Disable                                                              */
  #define GRTC_INTEN3_PWMREADY_Enabled (0x1UL)       /*!< Enable                                                               */

/* CLKOUTREADY @Bit 30 : Enable or disable interrupt for event CLKOUTREADY */
  #define GRTC_INTEN3_CLKOUTREADY_Pos (30UL)         /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTEN3_CLKOUTREADY_Msk (0x1UL << GRTC_INTEN3_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.               */
  #define GRTC_INTEN3_CLKOUTREADY_Min (0x0UL)        /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN3_CLKOUTREADY_Max (0x1UL)        /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTEN3_CLKOUTREADY_Disabled (0x0UL)   /*!< Disable                                                              */
  #define GRTC_INTEN3_CLKOUTREADY_Enabled (0x1UL)    /*!< Enable                                                               */


/* GRTC_INTENSET3: Enable interrupt */
  #define GRTC_INTENSET3_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET3 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to enable interrupt for event COMPARE[0] */
  #define GRTC_INTENSET3_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENSET3_COMPARE0_Msk (0x1UL << GRTC_INTENSET3_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENSET3_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET3_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENSET3_COMPARE0_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to enable interrupt for event COMPARE[1] */
  #define GRTC_INTENSET3_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENSET3_COMPARE1_Msk (0x1UL << GRTC_INTENSET3_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENSET3_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET3_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENSET3_COMPARE1_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to enable interrupt for event COMPARE[2] */
  #define GRTC_INTENSET3_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENSET3_COMPARE2_Msk (0x1UL << GRTC_INTENSET3_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENSET3_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET3_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENSET3_COMPARE2_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to enable interrupt for event COMPARE[3] */
  #define GRTC_INTENSET3_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENSET3_COMPARE3_Msk (0x1UL << GRTC_INTENSET3_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENSET3_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET3_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENSET3_COMPARE3_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to enable interrupt for event COMPARE[4] */
  #define GRTC_INTENSET3_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENSET3_COMPARE4_Msk (0x1UL << GRTC_INTENSET3_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENSET3_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET3_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENSET3_COMPARE4_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to enable interrupt for event COMPARE[5] */
  #define GRTC_INTENSET3_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENSET3_COMPARE5_Msk (0x1UL << GRTC_INTENSET3_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENSET3_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET3_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENSET3_COMPARE5_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to enable interrupt for event COMPARE[6] */
  #define GRTC_INTENSET3_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENSET3_COMPARE6_Msk (0x1UL << GRTC_INTENSET3_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENSET3_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET3_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENSET3_COMPARE6_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to enable interrupt for event COMPARE[7] */
  #define GRTC_INTENSET3_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENSET3_COMPARE7_Msk (0x1UL << GRTC_INTENSET3_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENSET3_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET3_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENSET3_COMPARE7_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to enable interrupt for event COMPARE[8] */
  #define GRTC_INTENSET3_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENSET3_COMPARE8_Msk (0x1UL << GRTC_INTENSET3_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENSET3_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET3_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENSET3_COMPARE8_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to enable interrupt for event COMPARE[9] */
  #define GRTC_INTENSET3_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENSET3_COMPARE9_Msk (0x1UL << GRTC_INTENSET3_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENSET3_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET3_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENSET3_COMPARE9_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to enable interrupt for event COMPARE[10] */
  #define GRTC_INTENSET3_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENSET3_COMPARE10_Msk (0x1UL << GRTC_INTENSET3_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENSET3_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET3_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENSET3_COMPARE10_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to enable interrupt for event COMPARE[11] */
  #define GRTC_INTENSET3_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENSET3_COMPARE11_Msk (0x1UL << GRTC_INTENSET3_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENSET3_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET3_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENSET3_COMPARE11_Set (0x1UL)       /*!< Enable                                                               */
  #define GRTC_INTENSET3_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to enable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENSET3_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Set (0x1UL)   /*!< Enable                                                               */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENSET3_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define GRTC_INTENSET3_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENSET3_PWMPERIODEND_Msk (0x1UL << GRTC_INTENSET3_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENSET3_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET3_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENSET3_PWMPERIODEND_Set (0x1UL)    /*!< Enable                                                               */
  #define GRTC_INTENSET3_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENSET3_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to enable interrupt for event PWMREADY */
  #define GRTC_INTENSET3_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENSET3_PWMREADY_Msk (0x1UL << GRTC_INTENSET3_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENSET3_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET3_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENSET3_PWMREADY_Set (0x1UL)        /*!< Enable                                                               */
  #define GRTC_INTENSET3_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENSET3_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to enable interrupt for event CLKOUTREADY */
  #define GRTC_INTENSET3_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENSET3_CLKOUTREADY_Msk (0x1UL << GRTC_INTENSET3_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENSET3_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET3_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENSET3_CLKOUTREADY_Set (0x1UL)     /*!< Enable                                                               */
  #define GRTC_INTENSET3_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENSET3_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTENCLR3: Disable interrupt */
  #define GRTC_INTENCLR3_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR3 register.                                   */

/* COMPARE0 @Bit 0 : Write '1' to disable interrupt for event COMPARE[0] */
  #define GRTC_INTENCLR3_COMPARE0_Pos (0UL)          /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTENCLR3_COMPARE0_Msk (0x1UL << GRTC_INTENCLR3_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define GRTC_INTENCLR3_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR3_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTENCLR3_COMPARE0_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 1 : Write '1' to disable interrupt for event COMPARE[1] */
  #define GRTC_INTENCLR3_COMPARE1_Pos (1UL)          /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTENCLR3_COMPARE1_Msk (0x1UL << GRTC_INTENCLR3_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define GRTC_INTENCLR3_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR3_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTENCLR3_COMPARE1_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 2 : Write '1' to disable interrupt for event COMPARE[2] */
  #define GRTC_INTENCLR3_COMPARE2_Pos (2UL)          /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTENCLR3_COMPARE2_Msk (0x1UL << GRTC_INTENCLR3_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define GRTC_INTENCLR3_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR3_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTENCLR3_COMPARE2_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 3 : Write '1' to disable interrupt for event COMPARE[3] */
  #define GRTC_INTENCLR3_COMPARE3_Pos (3UL)          /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTENCLR3_COMPARE3_Msk (0x1UL << GRTC_INTENCLR3_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define GRTC_INTENCLR3_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR3_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTENCLR3_COMPARE3_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 4 : Write '1' to disable interrupt for event COMPARE[4] */
  #define GRTC_INTENCLR3_COMPARE4_Pos (4UL)          /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTENCLR3_COMPARE4_Msk (0x1UL << GRTC_INTENCLR3_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define GRTC_INTENCLR3_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR3_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTENCLR3_COMPARE4_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 5 : Write '1' to disable interrupt for event COMPARE[5] */
  #define GRTC_INTENCLR3_COMPARE5_Pos (5UL)          /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTENCLR3_COMPARE5_Msk (0x1UL << GRTC_INTENCLR3_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define GRTC_INTENCLR3_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR3_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTENCLR3_COMPARE5_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 6 : Write '1' to disable interrupt for event COMPARE[6] */
  #define GRTC_INTENCLR3_COMPARE6_Pos (6UL)          /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTENCLR3_COMPARE6_Msk (0x1UL << GRTC_INTENCLR3_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define GRTC_INTENCLR3_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR3_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTENCLR3_COMPARE6_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 7 : Write '1' to disable interrupt for event COMPARE[7] */
  #define GRTC_INTENCLR3_COMPARE7_Pos (7UL)          /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTENCLR3_COMPARE7_Msk (0x1UL << GRTC_INTENCLR3_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define GRTC_INTENCLR3_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR3_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTENCLR3_COMPARE7_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE8 @Bit 8 : Write '1' to disable interrupt for event COMPARE[8] */
  #define GRTC_INTENCLR3_COMPARE8_Pos (8UL)          /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTENCLR3_COMPARE8_Msk (0x1UL << GRTC_INTENCLR3_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                  */
  #define GRTC_INTENCLR3_COMPARE8_Min (0x0UL)        /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR3_COMPARE8_Max (0x1UL)        /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTENCLR3_COMPARE8_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE8_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE8_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE9 @Bit 9 : Write '1' to disable interrupt for event COMPARE[9] */
  #define GRTC_INTENCLR3_COMPARE9_Pos (9UL)          /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTENCLR3_COMPARE9_Msk (0x1UL << GRTC_INTENCLR3_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                  */
  #define GRTC_INTENCLR3_COMPARE9_Min (0x0UL)        /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR3_COMPARE9_Max (0x1UL)        /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTENCLR3_COMPARE9_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE9_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE9_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE10 @Bit 10 : Write '1' to disable interrupt for event COMPARE[10] */
  #define GRTC_INTENCLR3_COMPARE10_Pos (10UL)        /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTENCLR3_COMPARE10_Msk (0x1UL << GRTC_INTENCLR3_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.               */
  #define GRTC_INTENCLR3_COMPARE10_Min (0x0UL)       /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR3_COMPARE10_Max (0x1UL)       /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTENCLR3_COMPARE10_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE10_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE10_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* COMPARE11 @Bit 11 : Write '1' to disable interrupt for event COMPARE[11] */
  #define GRTC_INTENCLR3_COMPARE11_Pos (11UL)        /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTENCLR3_COMPARE11_Msk (0x1UL << GRTC_INTENCLR3_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.               */
  #define GRTC_INTENCLR3_COMPARE11_Min (0x0UL)       /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR3_COMPARE11_Max (0x1UL)       /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTENCLR3_COMPARE11_Clear (0x1UL)     /*!< Disable                                                              */
  #define GRTC_INTENCLR3_COMPARE11_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_COMPARE11_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RTCOMPARESYNC @Bit 25 : Write '1' to disable interrupt for event RTCOMPARESYNC */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Pos (25UL)    /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTENCLR3_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.   */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Min (0x0UL)   /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Max (0x1UL)   /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Clear (0x1UL) /*!< Disable                                                              */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define GRTC_INTENCLR3_RTCOMPARESYNC_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* PWMPERIODEND @Bit 27 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define GRTC_INTENCLR3_PWMPERIODEND_Pos (27UL)     /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTENCLR3_PWMPERIODEND_Msk (0x1UL << GRTC_INTENCLR3_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.      */
  #define GRTC_INTENCLR3_PWMPERIODEND_Min (0x0UL)    /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR3_PWMPERIODEND_Max (0x1UL)    /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTENCLR3_PWMPERIODEND_Clear (0x1UL)  /*!< Disable                                                              */
  #define GRTC_INTENCLR3_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define GRTC_INTENCLR3_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PWMREADY @Bit 29 : Write '1' to disable interrupt for event PWMREADY */
  #define GRTC_INTENCLR3_PWMREADY_Pos (29UL)         /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTENCLR3_PWMREADY_Msk (0x1UL << GRTC_INTENCLR3_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                  */
  #define GRTC_INTENCLR3_PWMREADY_Min (0x0UL)        /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR3_PWMREADY_Max (0x1UL)        /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTENCLR3_PWMREADY_Clear (0x1UL)      /*!< Disable                                                              */
  #define GRTC_INTENCLR3_PWMREADY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define GRTC_INTENCLR3_PWMREADY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* CLKOUTREADY @Bit 30 : Write '1' to disable interrupt for event CLKOUTREADY */
  #define GRTC_INTENCLR3_CLKOUTREADY_Pos (30UL)      /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTENCLR3_CLKOUTREADY_Msk (0x1UL << GRTC_INTENCLR3_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.         */
  #define GRTC_INTENCLR3_CLKOUTREADY_Min (0x0UL)     /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR3_CLKOUTREADY_Max (0x1UL)     /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTENCLR3_CLKOUTREADY_Clear (0x1UL)   /*!< Disable                                                              */
  #define GRTC_INTENCLR3_CLKOUTREADY_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_INTENCLR3_CLKOUTREADY_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* GRTC_INTPEND3: Pending interrupts */
  #define GRTC_INTPEND3_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND3 register.                                    */

/* COMPARE0 @Bit 0 : Read pending status of interrupt for event COMPARE[0] */
  #define GRTC_INTPEND3_COMPARE0_Pos (0UL)           /*!< Position of COMPARE0 field.                                          */
  #define GRTC_INTPEND3_COMPARE0_Msk (0x1UL << GRTC_INTPEND3_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                    */
  #define GRTC_INTPEND3_COMPARE0_Min (0x0UL)         /*!< Min enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND3_COMPARE0_Max (0x1UL)         /*!< Max enumerator value of COMPARE0 field.                              */
  #define GRTC_INTPEND3_COMPARE0_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE0_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE1 @Bit 1 : Read pending status of interrupt for event COMPARE[1] */
  #define GRTC_INTPEND3_COMPARE1_Pos (1UL)           /*!< Position of COMPARE1 field.                                          */
  #define GRTC_INTPEND3_COMPARE1_Msk (0x1UL << GRTC_INTPEND3_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                    */
  #define GRTC_INTPEND3_COMPARE1_Min (0x0UL)         /*!< Min enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND3_COMPARE1_Max (0x1UL)         /*!< Max enumerator value of COMPARE1 field.                              */
  #define GRTC_INTPEND3_COMPARE1_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE1_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE2 @Bit 2 : Read pending status of interrupt for event COMPARE[2] */
  #define GRTC_INTPEND3_COMPARE2_Pos (2UL)           /*!< Position of COMPARE2 field.                                          */
  #define GRTC_INTPEND3_COMPARE2_Msk (0x1UL << GRTC_INTPEND3_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                    */
  #define GRTC_INTPEND3_COMPARE2_Min (0x0UL)         /*!< Min enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND3_COMPARE2_Max (0x1UL)         /*!< Max enumerator value of COMPARE2 field.                              */
  #define GRTC_INTPEND3_COMPARE2_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE2_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE3 @Bit 3 : Read pending status of interrupt for event COMPARE[3] */
  #define GRTC_INTPEND3_COMPARE3_Pos (3UL)           /*!< Position of COMPARE3 field.                                          */
  #define GRTC_INTPEND3_COMPARE3_Msk (0x1UL << GRTC_INTPEND3_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                    */
  #define GRTC_INTPEND3_COMPARE3_Min (0x0UL)         /*!< Min enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND3_COMPARE3_Max (0x1UL)         /*!< Max enumerator value of COMPARE3 field.                              */
  #define GRTC_INTPEND3_COMPARE3_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE3_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE4 @Bit 4 : Read pending status of interrupt for event COMPARE[4] */
  #define GRTC_INTPEND3_COMPARE4_Pos (4UL)           /*!< Position of COMPARE4 field.                                          */
  #define GRTC_INTPEND3_COMPARE4_Msk (0x1UL << GRTC_INTPEND3_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                    */
  #define GRTC_INTPEND3_COMPARE4_Min (0x0UL)         /*!< Min enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND3_COMPARE4_Max (0x1UL)         /*!< Max enumerator value of COMPARE4 field.                              */
  #define GRTC_INTPEND3_COMPARE4_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE4_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE5 @Bit 5 : Read pending status of interrupt for event COMPARE[5] */
  #define GRTC_INTPEND3_COMPARE5_Pos (5UL)           /*!< Position of COMPARE5 field.                                          */
  #define GRTC_INTPEND3_COMPARE5_Msk (0x1UL << GRTC_INTPEND3_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                    */
  #define GRTC_INTPEND3_COMPARE5_Min (0x0UL)         /*!< Min enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND3_COMPARE5_Max (0x1UL)         /*!< Max enumerator value of COMPARE5 field.                              */
  #define GRTC_INTPEND3_COMPARE5_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE5_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE6 @Bit 6 : Read pending status of interrupt for event COMPARE[6] */
  #define GRTC_INTPEND3_COMPARE6_Pos (6UL)           /*!< Position of COMPARE6 field.                                          */
  #define GRTC_INTPEND3_COMPARE6_Msk (0x1UL << GRTC_INTPEND3_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                    */
  #define GRTC_INTPEND3_COMPARE6_Min (0x0UL)         /*!< Min enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND3_COMPARE6_Max (0x1UL)         /*!< Max enumerator value of COMPARE6 field.                              */
  #define GRTC_INTPEND3_COMPARE6_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE6_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE7 @Bit 7 : Read pending status of interrupt for event COMPARE[7] */
  #define GRTC_INTPEND3_COMPARE7_Pos (7UL)           /*!< Position of COMPARE7 field.                                          */
  #define GRTC_INTPEND3_COMPARE7_Msk (0x1UL << GRTC_INTPEND3_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                    */
  #define GRTC_INTPEND3_COMPARE7_Min (0x0UL)         /*!< Min enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND3_COMPARE7_Max (0x1UL)         /*!< Max enumerator value of COMPARE7 field.                              */
  #define GRTC_INTPEND3_COMPARE7_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE7_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE8 @Bit 8 : Read pending status of interrupt for event COMPARE[8] */
  #define GRTC_INTPEND3_COMPARE8_Pos (8UL)           /*!< Position of COMPARE8 field.                                          */
  #define GRTC_INTPEND3_COMPARE8_Msk (0x1UL << GRTC_INTPEND3_COMPARE8_Pos) /*!< Bit mask of COMPARE8 field.                    */
  #define GRTC_INTPEND3_COMPARE8_Min (0x0UL)         /*!< Min enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND3_COMPARE8_Max (0x1UL)         /*!< Max enumerator value of COMPARE8 field.                              */
  #define GRTC_INTPEND3_COMPARE8_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE8_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE9 @Bit 9 : Read pending status of interrupt for event COMPARE[9] */
  #define GRTC_INTPEND3_COMPARE9_Pos (9UL)           /*!< Position of COMPARE9 field.                                          */
  #define GRTC_INTPEND3_COMPARE9_Msk (0x1UL << GRTC_INTPEND3_COMPARE9_Pos) /*!< Bit mask of COMPARE9 field.                    */
  #define GRTC_INTPEND3_COMPARE9_Min (0x0UL)         /*!< Min enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND3_COMPARE9_Max (0x1UL)         /*!< Max enumerator value of COMPARE9 field.                              */
  #define GRTC_INTPEND3_COMPARE9_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE9_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* COMPARE10 @Bit 10 : Read pending status of interrupt for event COMPARE[10] */
  #define GRTC_INTPEND3_COMPARE10_Pos (10UL)         /*!< Position of COMPARE10 field.                                         */
  #define GRTC_INTPEND3_COMPARE10_Msk (0x1UL << GRTC_INTPEND3_COMPARE10_Pos) /*!< Bit mask of COMPARE10 field.                 */
  #define GRTC_INTPEND3_COMPARE10_Min (0x0UL)        /*!< Min enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND3_COMPARE10_Max (0x1UL)        /*!< Max enumerator value of COMPARE10 field.                             */
  #define GRTC_INTPEND3_COMPARE10_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE10_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* COMPARE11 @Bit 11 : Read pending status of interrupt for event COMPARE[11] */
  #define GRTC_INTPEND3_COMPARE11_Pos (11UL)         /*!< Position of COMPARE11 field.                                         */
  #define GRTC_INTPEND3_COMPARE11_Msk (0x1UL << GRTC_INTPEND3_COMPARE11_Pos) /*!< Bit mask of COMPARE11 field.                 */
  #define GRTC_INTPEND3_COMPARE11_Min (0x0UL)        /*!< Min enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND3_COMPARE11_Max (0x1UL)        /*!< Max enumerator value of COMPARE11 field.                             */
  #define GRTC_INTPEND3_COMPARE11_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_COMPARE11_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* RTCOMPARESYNC @Bit 25 : Read pending status of interrupt for event RTCOMPARESYNC */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Pos (25UL)     /*!< Position of RTCOMPARESYNC field.                                     */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Msk (0x1UL << GRTC_INTPEND3_RTCOMPARESYNC_Pos) /*!< Bit mask of RTCOMPARESYNC field.     */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Min (0x0UL)    /*!< Min enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Max (0x1UL)    /*!< Max enumerator value of RTCOMPARESYNC field.                         */
  #define GRTC_INTPEND3_RTCOMPARESYNC_NotPending (0x0UL) /*!< Read: Not pending                                                */
  #define GRTC_INTPEND3_RTCOMPARESYNC_Pending (0x1UL) /*!< Read: Pending                                                       */

/* PWMPERIODEND @Bit 27 : Read pending status of interrupt for event PWMPERIODEND */
  #define GRTC_INTPEND3_PWMPERIODEND_Pos (27UL)      /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_INTPEND3_PWMPERIODEND_Msk (0x1UL << GRTC_INTPEND3_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.        */
  #define GRTC_INTPEND3_PWMPERIODEND_Min (0x0UL)     /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND3_PWMPERIODEND_Max (0x1UL)     /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_INTPEND3_PWMPERIODEND_NotPending (0x0UL) /*!< Read: Not pending                                                 */
  #define GRTC_INTPEND3_PWMPERIODEND_Pending (0x1UL) /*!< Read: Pending                                                        */

/* PWMREADY @Bit 29 : Read pending status of interrupt for event PWMREADY */
  #define GRTC_INTPEND3_PWMREADY_Pos (29UL)          /*!< Position of PWMREADY field.                                          */
  #define GRTC_INTPEND3_PWMREADY_Msk (0x1UL << GRTC_INTPEND3_PWMREADY_Pos) /*!< Bit mask of PWMREADY field.                    */
  #define GRTC_INTPEND3_PWMREADY_Min (0x0UL)         /*!< Min enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND3_PWMREADY_Max (0x1UL)         /*!< Max enumerator value of PWMREADY field.                              */
  #define GRTC_INTPEND3_PWMREADY_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define GRTC_INTPEND3_PWMREADY_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* CLKOUTREADY @Bit 30 : Read pending status of interrupt for event CLKOUTREADY */
  #define GRTC_INTPEND3_CLKOUTREADY_Pos (30UL)       /*!< Position of CLKOUTREADY field.                                       */
  #define GRTC_INTPEND3_CLKOUTREADY_Msk (0x1UL << GRTC_INTPEND3_CLKOUTREADY_Pos) /*!< Bit mask of CLKOUTREADY field.           */
  #define GRTC_INTPEND3_CLKOUTREADY_Min (0x0UL)      /*!< Min enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND3_CLKOUTREADY_Max (0x1UL)      /*!< Max enumerator value of CLKOUTREADY field.                           */
  #define GRTC_INTPEND3_CLKOUTREADY_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define GRTC_INTPEND3_CLKOUTREADY_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* GRTC_EVTEN: Enable or disable event routing */
  #define GRTC_EVTEN_ResetValue (0x00000000UL)       /*!< Reset value of EVTEN register.                                       */

/* PWMPERIODEND @Bit 27 : Enable or disable event routing for event PWMPERIODEND */
  #define GRTC_EVTEN_PWMPERIODEND_Pos (27UL)         /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_EVTEN_PWMPERIODEND_Msk (0x1UL << GRTC_EVTEN_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.              */
  #define GRTC_EVTEN_PWMPERIODEND_Min (0x0UL)        /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_EVTEN_PWMPERIODEND_Max (0x1UL)        /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_EVTEN_PWMPERIODEND_Disabled (0x0UL)   /*!< Disable                                                              */
  #define GRTC_EVTEN_PWMPERIODEND_Enabled (0x1UL)    /*!< Enable                                                               */


/* GRTC_EVTENSET: Enable event routing */
  #define GRTC_EVTENSET_ResetValue (0x00000000UL)    /*!< Reset value of EVTENSET register.                                    */

/* PWMPERIODEND @Bit 27 : Write '1' to enable event routing for event PWMPERIODEND */
  #define GRTC_EVTENSET_PWMPERIODEND_Pos (27UL)      /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_EVTENSET_PWMPERIODEND_Msk (0x1UL << GRTC_EVTENSET_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.        */
  #define GRTC_EVTENSET_PWMPERIODEND_Min (0x0UL)     /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_EVTENSET_PWMPERIODEND_Max (0x1UL)     /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_EVTENSET_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_EVTENSET_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                        */
  #define GRTC_EVTENSET_PWMPERIODEND_Set (0x1UL)     /*!< Enable                                                               */


/* GRTC_EVTENCLR: Disable event routing */
  #define GRTC_EVTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of EVTENCLR register.                                    */

/* PWMPERIODEND @Bit 27 : Write '1' to disable event routing for event PWMPERIODEND */
  #define GRTC_EVTENCLR_PWMPERIODEND_Pos (27UL)      /*!< Position of PWMPERIODEND field.                                      */
  #define GRTC_EVTENCLR_PWMPERIODEND_Msk (0x1UL << GRTC_EVTENCLR_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.        */
  #define GRTC_EVTENCLR_PWMPERIODEND_Min (0x0UL)     /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define GRTC_EVTENCLR_PWMPERIODEND_Max (0x1UL)     /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define GRTC_EVTENCLR_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define GRTC_EVTENCLR_PWMPERIODEND_Enabled (0x1UL) /*!< Read: Enabled                                                        */
  #define GRTC_EVTENCLR_PWMPERIODEND_Clear (0x1UL)   /*!< Disable                                                              */


/* GRTC_MODE: Counter mode selection */
  #define GRTC_MODE_ResetValue (0x00000000UL)        /*!< Reset value of MODE register.                                        */

/* AUTOEN @Bit 0 : Automatic enable to keep the SYSCOUNTER active. */
  #define GRTC_MODE_AUTOEN_Pos (0UL)                 /*!< Position of AUTOEN field.                                            */
  #define GRTC_MODE_AUTOEN_Msk (0x1UL << GRTC_MODE_AUTOEN_Pos) /*!< Bit mask of AUTOEN field.                                  */
  #define GRTC_MODE_AUTOEN_Min (0x0UL)               /*!< Min enumerator value of AUTOEN field.                                */
  #define GRTC_MODE_AUTOEN_Max (0x1UL)               /*!< Max enumerator value of AUTOEN field.                                */
  #define GRTC_MODE_AUTOEN_Default (0x0UL)           /*!< Default configuration to keep the SYSCOUNTER active.                 */
  #define GRTC_MODE_AUTOEN_CpuActive (0x1UL)         /*!< In addition to the above mode, any local CPU that is not sleeping keep
                                                          the SYSCOUNTER active.*/

/* SYSCOUNTEREN @Bit 1 : Enable the SYSCOUNTER */
  #define GRTC_MODE_SYSCOUNTEREN_Pos (1UL)           /*!< Position of SYSCOUNTEREN field.                                      */
  #define GRTC_MODE_SYSCOUNTEREN_Msk (0x1UL << GRTC_MODE_SYSCOUNTEREN_Pos) /*!< Bit mask of SYSCOUNTEREN field.                */
  #define GRTC_MODE_SYSCOUNTEREN_Min (0x0UL)         /*!< Min enumerator value of SYSCOUNTEREN field.                          */
  #define GRTC_MODE_SYSCOUNTEREN_Max (0x1UL)         /*!< Max enumerator value of SYSCOUNTEREN field.                          */
  #define GRTC_MODE_SYSCOUNTEREN_Disabled (0x0UL)    /*!< SYSCOUNTER disabled                                                  */
  #define GRTC_MODE_SYSCOUNTEREN_Enabled (0x1UL)     /*!< SYSCOUNTER enabled                                                   */


/* GRTC_TIMEOUT: Timeout after all CPUs gone into sleep state to stop the SYSCOUNTER */
  #define GRTC_TIMEOUT_ResetValue (0x00000000UL)     /*!< Reset value of TIMEOUT register.                                     */

/* VALUE @Bits 0..15 : Number of 32Ki cycles */
  #define GRTC_TIMEOUT_VALUE_Pos (0UL)               /*!< Position of VALUE field.                                             */
  #define GRTC_TIMEOUT_VALUE_Msk (0xFFFFUL << GRTC_TIMEOUT_VALUE_Pos) /*!< Bit mask of VALUE field.                            */


/* GRTC_INTERVAL: Count to add to CC[0] when the event EVENTS_COMPARE[0] triggers. */
  #define GRTC_INTERVAL_ResetValue (0x00000000UL)    /*!< Reset value of INTERVAL register.                                    */

/* VALUE @Bits 0..15 : Count to add to CC[0] */
  #define GRTC_INTERVAL_VALUE_Pos (0UL)              /*!< Position of VALUE field.                                             */
  #define GRTC_INTERVAL_VALUE_Msk (0xFFFFUL << GRTC_INTERVAL_VALUE_Pos) /*!< Bit mask of VALUE field.                          */


/* GRTC_WAKETIME: GRTC wake up time. */
  #define GRTC_WAKETIME_ResetValue (0x00000001UL)    /*!< Reset value of WAKETIME register.                                    */

/* VALUE @Bits 0..7 : Number of LFCLK clock cycles to wake up before the next scheduled EVENTS_COMPARE event */
  #define GRTC_WAKETIME_VALUE_Pos (0UL)              /*!< Position of VALUE field.                                             */
  #define GRTC_WAKETIME_VALUE_Msk (0xFFUL << GRTC_WAKETIME_VALUE_Pos) /*!< Bit mask of VALUE field.                            */


/* GRTC_PWMCONFIG: PWM configuration. */
  #define GRTC_PWMCONFIG_ResetValue (0x00000000UL)   /*!< Reset value of PWMCONFIG register.                                   */

/* COMPAREVALUE @Bits 0..7 : The PWM compare value */
  #define GRTC_PWMCONFIG_COMPAREVALUE_Pos (0UL)      /*!< Position of COMPAREVALUE field.                                      */
  #define GRTC_PWMCONFIG_COMPAREVALUE_Msk (0xFFUL << GRTC_PWMCONFIG_COMPAREVALUE_Pos) /*!< Bit mask of COMPAREVALUE field.     */


/* GRTC_CLKOUT: Configuration of clock output */
  #define GRTC_CLKOUT_ResetValue (0x00000000UL)      /*!< Reset value of CLKOUT register.                                      */

/* CLKOUT32K @Bit 0 : Enable 32Ki clock output on pin */
  #define GRTC_CLKOUT_CLKOUT32K_Pos (0UL)            /*!< Position of CLKOUT32K field.                                         */
  #define GRTC_CLKOUT_CLKOUT32K_Msk (0x1UL << GRTC_CLKOUT_CLKOUT32K_Pos) /*!< Bit mask of CLKOUT32K field.                     */
  #define GRTC_CLKOUT_CLKOUT32K_Min (0x0UL)          /*!< Min enumerator value of CLKOUT32K field.                             */
  #define GRTC_CLKOUT_CLKOUT32K_Max (0x1UL)          /*!< Max enumerator value of CLKOUT32K field.                             */
  #define GRTC_CLKOUT_CLKOUT32K_Disabled (0x0UL)     /*!< Disabled                                                             */
  #define GRTC_CLKOUT_CLKOUT32K_Enabled (0x1UL)      /*!< Enabled                                                              */

/* CLKOUTFAST @Bit 1 : Enable fast clock output on pin */
  #define GRTC_CLKOUT_CLKOUTFAST_Pos (1UL)           /*!< Position of CLKOUTFAST field.                                        */
  #define GRTC_CLKOUT_CLKOUTFAST_Msk (0x1UL << GRTC_CLKOUT_CLKOUTFAST_Pos) /*!< Bit mask of CLKOUTFAST field.                  */
  #define GRTC_CLKOUT_CLKOUTFAST_Min (0x0UL)         /*!< Min enumerator value of CLKOUTFAST field.                            */
  #define GRTC_CLKOUT_CLKOUTFAST_Max (0x1UL)         /*!< Max enumerator value of CLKOUTFAST field.                            */
  #define GRTC_CLKOUT_CLKOUTFAST_Disabled (0x0UL)    /*!< Disabled                                                             */
  #define GRTC_CLKOUT_CLKOUTFAST_Enabled (0x1UL)     /*!< Enabled                                                              */


/* GRTC_CLKCFG: Clock Configuration */
  #define GRTC_CLKCFG_ResetValue (0x00010001UL)      /*!< Reset value of CLKCFG register.                                      */

/* CLKFASTDIV @Bits 0..7 : Fast clock divisor value of clock output */
  #define GRTC_CLKCFG_CLKFASTDIV_Pos (0UL)           /*!< Position of CLKFASTDIV field.                                        */
  #define GRTC_CLKCFG_CLKFASTDIV_Msk (0xFFUL << GRTC_CLKCFG_CLKFASTDIV_Pos) /*!< Bit mask of CLKFASTDIV field.                 */
  #define GRTC_CLKCFG_CLKFASTDIV_Min (0x01UL)        /*!< Min value of CLKFASTDIV field.                                       */
  #define GRTC_CLKCFG_CLKFASTDIV_Max (0xFFUL)        /*!< Max size of CLKFASTDIV field.                                        */

/* CLKSEL @Bits 16..17 : GRTC LFCLK clock source selection */
  #define GRTC_CLKCFG_CLKSEL_Pos (16UL)              /*!< Position of CLKSEL field.                                            */
  #define GRTC_CLKCFG_CLKSEL_Msk (0x3UL << GRTC_CLKCFG_CLKSEL_Pos) /*!< Bit mask of CLKSEL field.                              */
  #define GRTC_CLKCFG_CLKSEL_Min (0x0UL)             /*!< Min enumerator value of CLKSEL field.                                */
  #define GRTC_CLKCFG_CLKSEL_Max (0x2UL)             /*!< Max enumerator value of CLKSEL field.                                */
  #define GRTC_CLKCFG_CLKSEL_LFXO (0x0UL)            /*!< GRTC LFCLK clock source is LFXO                                      */
  #define GRTC_CLKCFG_CLKSEL_SystemLFCLK (0x1UL)     /*!< GRTC LFCLK clock source is system LFCLK                              */
  #define GRTC_CLKCFG_CLKSEL_LFLPRC (0x2UL)          /*!< GRTC LFCLK clock source is LFLPRC                                    */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                          MEMCONF                                          ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct MEMCONF_POWER =================================================== */
/**
  * @brief POWER [MEMCONF_POWER] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONTROL;                           /*!< (@ 0x00000000) Control memory block power.                           */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  RET;                               /*!< (@ 0x00000008) RAM retention for RAM [n].                            */
  __IM  uint32_t  RESERVED1;
} NRF_MEMCONF_POWER_Type;                            /*!< Size = 16 (0x010)                                                    */
  #define MEMCONF_POWER_MaxCount (2UL)               /*!< Size of POWER[2] array.                                              */
  #define MEMCONF_POWER_MaxIndex (1UL)               /*!< Max index of POWER[2] array.                                         */
  #define MEMCONF_POWER_MinIndex (0UL)               /*!< Min index of POWER[2] array.                                         */

/* MEMCONF_POWER_CONTROL: Control memory block power. */
  #define MEMCONF_POWER_CONTROL_ResetValue (0xFFFFFFFFUL) /*!< Reset value of CONTROL register.                                */

/* MEM0 @Bit 0 : Keep the memory block MEM[0] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM0_Pos (0UL)       /*!< Position of MEM0 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM0_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM0_Pos) /*!< Bit mask of MEM0 field.                */
  #define MEMCONF_POWER_CONTROL_MEM0_Min (0x0UL)     /*!< Min enumerator value of MEM0 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM0_Max (0x1UL)     /*!< Max enumerator value of MEM0 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM0_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM0_On (0x1UL)      /*!< Power up                                                             */

/* MEM1 @Bit 1 : Keep the memory block MEM[1] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM1_Pos (1UL)       /*!< Position of MEM1 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM1_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM1_Pos) /*!< Bit mask of MEM1 field.                */
  #define MEMCONF_POWER_CONTROL_MEM1_Min (0x0UL)     /*!< Min enumerator value of MEM1 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM1_Max (0x1UL)     /*!< Max enumerator value of MEM1 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM1_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM1_On (0x1UL)      /*!< Power up                                                             */

/* MEM2 @Bit 2 : Keep the memory block MEM[2] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM2_Pos (2UL)       /*!< Position of MEM2 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM2_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM2_Pos) /*!< Bit mask of MEM2 field.                */
  #define MEMCONF_POWER_CONTROL_MEM2_Min (0x0UL)     /*!< Min enumerator value of MEM2 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM2_Max (0x1UL)     /*!< Max enumerator value of MEM2 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM2_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM2_On (0x1UL)      /*!< Power up                                                             */

/* MEM3 @Bit 3 : Keep the memory block MEM[3] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM3_Pos (3UL)       /*!< Position of MEM3 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM3_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM3_Pos) /*!< Bit mask of MEM3 field.                */
  #define MEMCONF_POWER_CONTROL_MEM3_Min (0x0UL)     /*!< Min enumerator value of MEM3 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM3_Max (0x1UL)     /*!< Max enumerator value of MEM3 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM3_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM3_On (0x1UL)      /*!< Power up                                                             */

/* MEM4 @Bit 4 : Keep the memory block MEM[4] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM4_Pos (4UL)       /*!< Position of MEM4 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM4_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM4_Pos) /*!< Bit mask of MEM4 field.                */
  #define MEMCONF_POWER_CONTROL_MEM4_Min (0x0UL)     /*!< Min enumerator value of MEM4 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM4_Max (0x1UL)     /*!< Max enumerator value of MEM4 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM4_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM4_On (0x1UL)      /*!< Power up                                                             */

/* MEM5 @Bit 5 : Keep the memory block MEM[5] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM5_Pos (5UL)       /*!< Position of MEM5 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM5_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM5_Pos) /*!< Bit mask of MEM5 field.                */
  #define MEMCONF_POWER_CONTROL_MEM5_Min (0x0UL)     /*!< Min enumerator value of MEM5 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM5_Max (0x1UL)     /*!< Max enumerator value of MEM5 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM5_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM5_On (0x1UL)      /*!< Power up                                                             */

/* MEM6 @Bit 6 : Keep the memory block MEM[6] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM6_Pos (6UL)       /*!< Position of MEM6 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM6_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM6_Pos) /*!< Bit mask of MEM6 field.                */
  #define MEMCONF_POWER_CONTROL_MEM6_Min (0x0UL)     /*!< Min enumerator value of MEM6 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM6_Max (0x1UL)     /*!< Max enumerator value of MEM6 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM6_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM6_On (0x1UL)      /*!< Power up                                                             */

/* MEM7 @Bit 7 : Keep the memory block MEM[7] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM7_Pos (7UL)       /*!< Position of MEM7 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM7_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM7_Pos) /*!< Bit mask of MEM7 field.                */
  #define MEMCONF_POWER_CONTROL_MEM7_Min (0x0UL)     /*!< Min enumerator value of MEM7 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM7_Max (0x1UL)     /*!< Max enumerator value of MEM7 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM7_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM7_On (0x1UL)      /*!< Power up                                                             */

/* MEM8 @Bit 8 : Keep the memory block MEM[8] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM8_Pos (8UL)       /*!< Position of MEM8 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM8_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM8_Pos) /*!< Bit mask of MEM8 field.                */
  #define MEMCONF_POWER_CONTROL_MEM8_Min (0x0UL)     /*!< Min enumerator value of MEM8 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM8_Max (0x1UL)     /*!< Max enumerator value of MEM8 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM8_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM8_On (0x1UL)      /*!< Power up                                                             */

/* MEM9 @Bit 9 : Keep the memory block MEM[9] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM9_Pos (9UL)       /*!< Position of MEM9 field.                                              */
  #define MEMCONF_POWER_CONTROL_MEM9_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM9_Pos) /*!< Bit mask of MEM9 field.                */
  #define MEMCONF_POWER_CONTROL_MEM9_Min (0x0UL)     /*!< Min enumerator value of MEM9 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM9_Max (0x1UL)     /*!< Max enumerator value of MEM9 field.                                  */
  #define MEMCONF_POWER_CONTROL_MEM9_Off (0x0UL)     /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM9_On (0x1UL)      /*!< Power up                                                             */

/* MEM10 @Bit 10 : Keep the memory block MEM[10] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM10_Pos (10UL)     /*!< Position of MEM10 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM10_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM10_Pos) /*!< Bit mask of MEM10 field.             */
  #define MEMCONF_POWER_CONTROL_MEM10_Min (0x0UL)    /*!< Min enumerator value of MEM10 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM10_Max (0x1UL)    /*!< Max enumerator value of MEM10 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM10_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM10_On (0x1UL)     /*!< Power up                                                             */

/* MEM11 @Bit 11 : Keep the memory block MEM[11] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM11_Pos (11UL)     /*!< Position of MEM11 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM11_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM11_Pos) /*!< Bit mask of MEM11 field.             */
  #define MEMCONF_POWER_CONTROL_MEM11_Min (0x0UL)    /*!< Min enumerator value of MEM11 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM11_Max (0x1UL)    /*!< Max enumerator value of MEM11 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM11_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM11_On (0x1UL)     /*!< Power up                                                             */

/* MEM12 @Bit 12 : Keep the memory block MEM[12] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM12_Pos (12UL)     /*!< Position of MEM12 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM12_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM12_Pos) /*!< Bit mask of MEM12 field.             */
  #define MEMCONF_POWER_CONTROL_MEM12_Min (0x0UL)    /*!< Min enumerator value of MEM12 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM12_Max (0x1UL)    /*!< Max enumerator value of MEM12 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM12_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM12_On (0x1UL)     /*!< Power up                                                             */

/* MEM13 @Bit 13 : Keep the memory block MEM[13] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM13_Pos (13UL)     /*!< Position of MEM13 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM13_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM13_Pos) /*!< Bit mask of MEM13 field.             */
  #define MEMCONF_POWER_CONTROL_MEM13_Min (0x0UL)    /*!< Min enumerator value of MEM13 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM13_Max (0x1UL)    /*!< Max enumerator value of MEM13 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM13_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM13_On (0x1UL)     /*!< Power up                                                             */

/* MEM14 @Bit 14 : Keep the memory block MEM[14] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM14_Pos (14UL)     /*!< Position of MEM14 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM14_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM14_Pos) /*!< Bit mask of MEM14 field.             */
  #define MEMCONF_POWER_CONTROL_MEM14_Min (0x0UL)    /*!< Min enumerator value of MEM14 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM14_Max (0x1UL)    /*!< Max enumerator value of MEM14 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM14_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM14_On (0x1UL)     /*!< Power up                                                             */

/* MEM15 @Bit 15 : Keep the memory block MEM[15] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM15_Pos (15UL)     /*!< Position of MEM15 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM15_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM15_Pos) /*!< Bit mask of MEM15 field.             */
  #define MEMCONF_POWER_CONTROL_MEM15_Min (0x0UL)    /*!< Min enumerator value of MEM15 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM15_Max (0x1UL)    /*!< Max enumerator value of MEM15 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM15_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM15_On (0x1UL)     /*!< Power up                                                             */

/* MEM16 @Bit 16 : Keep the memory block MEM[16] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM16_Pos (16UL)     /*!< Position of MEM16 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM16_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM16_Pos) /*!< Bit mask of MEM16 field.             */
  #define MEMCONF_POWER_CONTROL_MEM16_Min (0x0UL)    /*!< Min enumerator value of MEM16 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM16_Max (0x1UL)    /*!< Max enumerator value of MEM16 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM16_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM16_On (0x1UL)     /*!< Power up                                                             */

/* MEM17 @Bit 17 : Keep the memory block MEM[17] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM17_Pos (17UL)     /*!< Position of MEM17 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM17_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM17_Pos) /*!< Bit mask of MEM17 field.             */
  #define MEMCONF_POWER_CONTROL_MEM17_Min (0x0UL)    /*!< Min enumerator value of MEM17 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM17_Max (0x1UL)    /*!< Max enumerator value of MEM17 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM17_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM17_On (0x1UL)     /*!< Power up                                                             */

/* MEM18 @Bit 18 : Keep the memory block MEM[18] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM18_Pos (18UL)     /*!< Position of MEM18 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM18_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM18_Pos) /*!< Bit mask of MEM18 field.             */
  #define MEMCONF_POWER_CONTROL_MEM18_Min (0x0UL)    /*!< Min enumerator value of MEM18 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM18_Max (0x1UL)    /*!< Max enumerator value of MEM18 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM18_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM18_On (0x1UL)     /*!< Power up                                                             */

/* MEM19 @Bit 19 : Keep the memory block MEM[19] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM19_Pos (19UL)     /*!< Position of MEM19 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM19_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM19_Pos) /*!< Bit mask of MEM19 field.             */
  #define MEMCONF_POWER_CONTROL_MEM19_Min (0x0UL)    /*!< Min enumerator value of MEM19 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM19_Max (0x1UL)    /*!< Max enumerator value of MEM19 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM19_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM19_On (0x1UL)     /*!< Power up                                                             */

/* MEM20 @Bit 20 : Keep the memory block MEM[20] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM20_Pos (20UL)     /*!< Position of MEM20 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM20_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM20_Pos) /*!< Bit mask of MEM20 field.             */
  #define MEMCONF_POWER_CONTROL_MEM20_Min (0x0UL)    /*!< Min enumerator value of MEM20 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM20_Max (0x1UL)    /*!< Max enumerator value of MEM20 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM20_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM20_On (0x1UL)     /*!< Power up                                                             */

/* MEM21 @Bit 21 : Keep the memory block MEM[21] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM21_Pos (21UL)     /*!< Position of MEM21 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM21_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM21_Pos) /*!< Bit mask of MEM21 field.             */
  #define MEMCONF_POWER_CONTROL_MEM21_Min (0x0UL)    /*!< Min enumerator value of MEM21 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM21_Max (0x1UL)    /*!< Max enumerator value of MEM21 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM21_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM21_On (0x1UL)     /*!< Power up                                                             */

/* MEM22 @Bit 22 : Keep the memory block MEM[22] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM22_Pos (22UL)     /*!< Position of MEM22 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM22_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM22_Pos) /*!< Bit mask of MEM22 field.             */
  #define MEMCONF_POWER_CONTROL_MEM22_Min (0x0UL)    /*!< Min enumerator value of MEM22 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM22_Max (0x1UL)    /*!< Max enumerator value of MEM22 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM22_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM22_On (0x1UL)     /*!< Power up                                                             */

/* MEM23 @Bit 23 : Keep the memory block MEM[23] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM23_Pos (23UL)     /*!< Position of MEM23 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM23_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM23_Pos) /*!< Bit mask of MEM23 field.             */
  #define MEMCONF_POWER_CONTROL_MEM23_Min (0x0UL)    /*!< Min enumerator value of MEM23 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM23_Max (0x1UL)    /*!< Max enumerator value of MEM23 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM23_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM23_On (0x1UL)     /*!< Power up                                                             */

/* MEM24 @Bit 24 : Keep the memory block MEM[24] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM24_Pos (24UL)     /*!< Position of MEM24 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM24_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM24_Pos) /*!< Bit mask of MEM24 field.             */
  #define MEMCONF_POWER_CONTROL_MEM24_Min (0x0UL)    /*!< Min enumerator value of MEM24 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM24_Max (0x1UL)    /*!< Max enumerator value of MEM24 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM24_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM24_On (0x1UL)     /*!< Power up                                                             */

/* MEM25 @Bit 25 : Keep the memory block MEM[25] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM25_Pos (25UL)     /*!< Position of MEM25 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM25_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM25_Pos) /*!< Bit mask of MEM25 field.             */
  #define MEMCONF_POWER_CONTROL_MEM25_Min (0x0UL)    /*!< Min enumerator value of MEM25 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM25_Max (0x1UL)    /*!< Max enumerator value of MEM25 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM25_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM25_On (0x1UL)     /*!< Power up                                                             */

/* MEM26 @Bit 26 : Keep the memory block MEM[26] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM26_Pos (26UL)     /*!< Position of MEM26 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM26_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM26_Pos) /*!< Bit mask of MEM26 field.             */
  #define MEMCONF_POWER_CONTROL_MEM26_Min (0x0UL)    /*!< Min enumerator value of MEM26 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM26_Max (0x1UL)    /*!< Max enumerator value of MEM26 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM26_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM26_On (0x1UL)     /*!< Power up                                                             */

/* MEM27 @Bit 27 : Keep the memory block MEM[27] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM27_Pos (27UL)     /*!< Position of MEM27 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM27_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM27_Pos) /*!< Bit mask of MEM27 field.             */
  #define MEMCONF_POWER_CONTROL_MEM27_Min (0x0UL)    /*!< Min enumerator value of MEM27 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM27_Max (0x1UL)    /*!< Max enumerator value of MEM27 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM27_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM27_On (0x1UL)     /*!< Power up                                                             */

/* MEM28 @Bit 28 : Keep the memory block MEM[28] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM28_Pos (28UL)     /*!< Position of MEM28 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM28_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM28_Pos) /*!< Bit mask of MEM28 field.             */
  #define MEMCONF_POWER_CONTROL_MEM28_Min (0x0UL)    /*!< Min enumerator value of MEM28 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM28_Max (0x1UL)    /*!< Max enumerator value of MEM28 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM28_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM28_On (0x1UL)     /*!< Power up                                                             */

/* MEM29 @Bit 29 : Keep the memory block MEM[29] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM29_Pos (29UL)     /*!< Position of MEM29 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM29_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM29_Pos) /*!< Bit mask of MEM29 field.             */
  #define MEMCONF_POWER_CONTROL_MEM29_Min (0x0UL)    /*!< Min enumerator value of MEM29 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM29_Max (0x1UL)    /*!< Max enumerator value of MEM29 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM29_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM29_On (0x1UL)     /*!< Power up                                                             */

/* MEM30 @Bit 30 : Keep the memory block MEM[30] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM30_Pos (30UL)     /*!< Position of MEM30 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM30_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM30_Pos) /*!< Bit mask of MEM30 field.             */
  #define MEMCONF_POWER_CONTROL_MEM30_Min (0x0UL)    /*!< Min enumerator value of MEM30 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM30_Max (0x1UL)    /*!< Max enumerator value of MEM30 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM30_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM30_On (0x1UL)     /*!< Power up                                                             */

/* MEM31 @Bit 31 : Keep the memory block MEM[31] on or off when in System ON mode. */
  #define MEMCONF_POWER_CONTROL_MEM31_Pos (31UL)     /*!< Position of MEM31 field.                                             */
  #define MEMCONF_POWER_CONTROL_MEM31_Msk (0x1UL << MEMCONF_POWER_CONTROL_MEM31_Pos) /*!< Bit mask of MEM31 field.             */
  #define MEMCONF_POWER_CONTROL_MEM31_Min (0x0UL)    /*!< Min enumerator value of MEM31 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM31_Max (0x1UL)    /*!< Max enumerator value of MEM31 field.                                 */
  #define MEMCONF_POWER_CONTROL_MEM31_Off (0x0UL)    /*!< Power down                                                           */
  #define MEMCONF_POWER_CONTROL_MEM31_On (0x1UL)     /*!< Power up                                                             */


/* MEMCONF_POWER_RET: RAM retention for RAM [n]. */
  #define MEMCONF_POWER_RET_ResetValue (0xFFFFFFFFUL) /*!< Reset value of RET register.                                        */

/* MEM0 @Bit 0 : Keep the RAM block MEM[0] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM0_Pos (0UL)           /*!< Position of MEM0 field.                                              */
  #define MEMCONF_POWER_RET_MEM0_Msk (0x1UL << MEMCONF_POWER_RET_MEM0_Pos) /*!< Bit mask of MEM0 field.                        */
  #define MEMCONF_POWER_RET_MEM0_Min (0x0UL)         /*!< Min enumerator value of MEM0 field.                                  */
  #define MEMCONF_POWER_RET_MEM0_Max (0x1UL)         /*!< Max enumerator value of MEM0 field.                                  */
  #define MEMCONF_POWER_RET_MEM0_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM0_On (0x1UL)          /*!< Retention on                                                         */

/* MEM1 @Bit 1 : Keep the RAM block MEM[1] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM1_Pos (1UL)           /*!< Position of MEM1 field.                                              */
  #define MEMCONF_POWER_RET_MEM1_Msk (0x1UL << MEMCONF_POWER_RET_MEM1_Pos) /*!< Bit mask of MEM1 field.                        */
  #define MEMCONF_POWER_RET_MEM1_Min (0x0UL)         /*!< Min enumerator value of MEM1 field.                                  */
  #define MEMCONF_POWER_RET_MEM1_Max (0x1UL)         /*!< Max enumerator value of MEM1 field.                                  */
  #define MEMCONF_POWER_RET_MEM1_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM1_On (0x1UL)          /*!< Retention on                                                         */

/* MEM2 @Bit 2 : Keep the RAM block MEM[2] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM2_Pos (2UL)           /*!< Position of MEM2 field.                                              */
  #define MEMCONF_POWER_RET_MEM2_Msk (0x1UL << MEMCONF_POWER_RET_MEM2_Pos) /*!< Bit mask of MEM2 field.                        */
  #define MEMCONF_POWER_RET_MEM2_Min (0x0UL)         /*!< Min enumerator value of MEM2 field.                                  */
  #define MEMCONF_POWER_RET_MEM2_Max (0x1UL)         /*!< Max enumerator value of MEM2 field.                                  */
  #define MEMCONF_POWER_RET_MEM2_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM2_On (0x1UL)          /*!< Retention on                                                         */

/* MEM3 @Bit 3 : Keep the RAM block MEM[3] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM3_Pos (3UL)           /*!< Position of MEM3 field.                                              */
  #define MEMCONF_POWER_RET_MEM3_Msk (0x1UL << MEMCONF_POWER_RET_MEM3_Pos) /*!< Bit mask of MEM3 field.                        */
  #define MEMCONF_POWER_RET_MEM3_Min (0x0UL)         /*!< Min enumerator value of MEM3 field.                                  */
  #define MEMCONF_POWER_RET_MEM3_Max (0x1UL)         /*!< Max enumerator value of MEM3 field.                                  */
  #define MEMCONF_POWER_RET_MEM3_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM3_On (0x1UL)          /*!< Retention on                                                         */

/* MEM4 @Bit 4 : Keep the RAM block MEM[4] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM4_Pos (4UL)           /*!< Position of MEM4 field.                                              */
  #define MEMCONF_POWER_RET_MEM4_Msk (0x1UL << MEMCONF_POWER_RET_MEM4_Pos) /*!< Bit mask of MEM4 field.                        */
  #define MEMCONF_POWER_RET_MEM4_Min (0x0UL)         /*!< Min enumerator value of MEM4 field.                                  */
  #define MEMCONF_POWER_RET_MEM4_Max (0x1UL)         /*!< Max enumerator value of MEM4 field.                                  */
  #define MEMCONF_POWER_RET_MEM4_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM4_On (0x1UL)          /*!< Retention on                                                         */

/* MEM5 @Bit 5 : Keep the RAM block MEM[5] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM5_Pos (5UL)           /*!< Position of MEM5 field.                                              */
  #define MEMCONF_POWER_RET_MEM5_Msk (0x1UL << MEMCONF_POWER_RET_MEM5_Pos) /*!< Bit mask of MEM5 field.                        */
  #define MEMCONF_POWER_RET_MEM5_Min (0x0UL)         /*!< Min enumerator value of MEM5 field.                                  */
  #define MEMCONF_POWER_RET_MEM5_Max (0x1UL)         /*!< Max enumerator value of MEM5 field.                                  */
  #define MEMCONF_POWER_RET_MEM5_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM5_On (0x1UL)          /*!< Retention on                                                         */

/* MEM6 @Bit 6 : Keep the RAM block MEM[6] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM6_Pos (6UL)           /*!< Position of MEM6 field.                                              */
  #define MEMCONF_POWER_RET_MEM6_Msk (0x1UL << MEMCONF_POWER_RET_MEM6_Pos) /*!< Bit mask of MEM6 field.                        */
  #define MEMCONF_POWER_RET_MEM6_Min (0x0UL)         /*!< Min enumerator value of MEM6 field.                                  */
  #define MEMCONF_POWER_RET_MEM6_Max (0x1UL)         /*!< Max enumerator value of MEM6 field.                                  */
  #define MEMCONF_POWER_RET_MEM6_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM6_On (0x1UL)          /*!< Retention on                                                         */

/* MEM7 @Bit 7 : Keep the RAM block MEM[7] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM7_Pos (7UL)           /*!< Position of MEM7 field.                                              */
  #define MEMCONF_POWER_RET_MEM7_Msk (0x1UL << MEMCONF_POWER_RET_MEM7_Pos) /*!< Bit mask of MEM7 field.                        */
  #define MEMCONF_POWER_RET_MEM7_Min (0x0UL)         /*!< Min enumerator value of MEM7 field.                                  */
  #define MEMCONF_POWER_RET_MEM7_Max (0x1UL)         /*!< Max enumerator value of MEM7 field.                                  */
  #define MEMCONF_POWER_RET_MEM7_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM7_On (0x1UL)          /*!< Retention on                                                         */

/* MEM8 @Bit 8 : Keep the RAM block MEM[8] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM8_Pos (8UL)           /*!< Position of MEM8 field.                                              */
  #define MEMCONF_POWER_RET_MEM8_Msk (0x1UL << MEMCONF_POWER_RET_MEM8_Pos) /*!< Bit mask of MEM8 field.                        */
  #define MEMCONF_POWER_RET_MEM8_Min (0x0UL)         /*!< Min enumerator value of MEM8 field.                                  */
  #define MEMCONF_POWER_RET_MEM8_Max (0x1UL)         /*!< Max enumerator value of MEM8 field.                                  */
  #define MEMCONF_POWER_RET_MEM8_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM8_On (0x1UL)          /*!< Retention on                                                         */

/* MEM9 @Bit 9 : Keep the RAM block MEM[9] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM9_Pos (9UL)           /*!< Position of MEM9 field.                                              */
  #define MEMCONF_POWER_RET_MEM9_Msk (0x1UL << MEMCONF_POWER_RET_MEM9_Pos) /*!< Bit mask of MEM9 field.                        */
  #define MEMCONF_POWER_RET_MEM9_Min (0x0UL)         /*!< Min enumerator value of MEM9 field.                                  */
  #define MEMCONF_POWER_RET_MEM9_Max (0x1UL)         /*!< Max enumerator value of MEM9 field.                                  */
  #define MEMCONF_POWER_RET_MEM9_Off (0x0UL)         /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM9_On (0x1UL)          /*!< Retention on                                                         */

/* MEM10 @Bit 10 : Keep the RAM block MEM[10] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM10_Pos (10UL)         /*!< Position of MEM10 field.                                             */
  #define MEMCONF_POWER_RET_MEM10_Msk (0x1UL << MEMCONF_POWER_RET_MEM10_Pos) /*!< Bit mask of MEM10 field.                     */
  #define MEMCONF_POWER_RET_MEM10_Min (0x0UL)        /*!< Min enumerator value of MEM10 field.                                 */
  #define MEMCONF_POWER_RET_MEM10_Max (0x1UL)        /*!< Max enumerator value of MEM10 field.                                 */
  #define MEMCONF_POWER_RET_MEM10_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM10_On (0x1UL)         /*!< Retention on                                                         */

/* MEM11 @Bit 11 : Keep the RAM block MEM[11] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM11_Pos (11UL)         /*!< Position of MEM11 field.                                             */
  #define MEMCONF_POWER_RET_MEM11_Msk (0x1UL << MEMCONF_POWER_RET_MEM11_Pos) /*!< Bit mask of MEM11 field.                     */
  #define MEMCONF_POWER_RET_MEM11_Min (0x0UL)        /*!< Min enumerator value of MEM11 field.                                 */
  #define MEMCONF_POWER_RET_MEM11_Max (0x1UL)        /*!< Max enumerator value of MEM11 field.                                 */
  #define MEMCONF_POWER_RET_MEM11_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM11_On (0x1UL)         /*!< Retention on                                                         */

/* MEM12 @Bit 12 : Keep the RAM block MEM[12] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM12_Pos (12UL)         /*!< Position of MEM12 field.                                             */
  #define MEMCONF_POWER_RET_MEM12_Msk (0x1UL << MEMCONF_POWER_RET_MEM12_Pos) /*!< Bit mask of MEM12 field.                     */
  #define MEMCONF_POWER_RET_MEM12_Min (0x0UL)        /*!< Min enumerator value of MEM12 field.                                 */
  #define MEMCONF_POWER_RET_MEM12_Max (0x1UL)        /*!< Max enumerator value of MEM12 field.                                 */
  #define MEMCONF_POWER_RET_MEM12_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM12_On (0x1UL)         /*!< Retention on                                                         */

/* MEM13 @Bit 13 : Keep the RAM block MEM[13] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM13_Pos (13UL)         /*!< Position of MEM13 field.                                             */
  #define MEMCONF_POWER_RET_MEM13_Msk (0x1UL << MEMCONF_POWER_RET_MEM13_Pos) /*!< Bit mask of MEM13 field.                     */
  #define MEMCONF_POWER_RET_MEM13_Min (0x0UL)        /*!< Min enumerator value of MEM13 field.                                 */
  #define MEMCONF_POWER_RET_MEM13_Max (0x1UL)        /*!< Max enumerator value of MEM13 field.                                 */
  #define MEMCONF_POWER_RET_MEM13_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM13_On (0x1UL)         /*!< Retention on                                                         */

/* MEM14 @Bit 14 : Keep the RAM block MEM[14] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM14_Pos (14UL)         /*!< Position of MEM14 field.                                             */
  #define MEMCONF_POWER_RET_MEM14_Msk (0x1UL << MEMCONF_POWER_RET_MEM14_Pos) /*!< Bit mask of MEM14 field.                     */
  #define MEMCONF_POWER_RET_MEM14_Min (0x0UL)        /*!< Min enumerator value of MEM14 field.                                 */
  #define MEMCONF_POWER_RET_MEM14_Max (0x1UL)        /*!< Max enumerator value of MEM14 field.                                 */
  #define MEMCONF_POWER_RET_MEM14_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM14_On (0x1UL)         /*!< Retention on                                                         */

/* MEM15 @Bit 15 : Keep the RAM block MEM[15] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM15_Pos (15UL)         /*!< Position of MEM15 field.                                             */
  #define MEMCONF_POWER_RET_MEM15_Msk (0x1UL << MEMCONF_POWER_RET_MEM15_Pos) /*!< Bit mask of MEM15 field.                     */
  #define MEMCONF_POWER_RET_MEM15_Min (0x0UL)        /*!< Min enumerator value of MEM15 field.                                 */
  #define MEMCONF_POWER_RET_MEM15_Max (0x1UL)        /*!< Max enumerator value of MEM15 field.                                 */
  #define MEMCONF_POWER_RET_MEM15_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM15_On (0x1UL)         /*!< Retention on                                                         */

/* MEM16 @Bit 16 : Keep the RAM block MEM[16] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM16_Pos (16UL)         /*!< Position of MEM16 field.                                             */
  #define MEMCONF_POWER_RET_MEM16_Msk (0x1UL << MEMCONF_POWER_RET_MEM16_Pos) /*!< Bit mask of MEM16 field.                     */
  #define MEMCONF_POWER_RET_MEM16_Min (0x0UL)        /*!< Min enumerator value of MEM16 field.                                 */
  #define MEMCONF_POWER_RET_MEM16_Max (0x1UL)        /*!< Max enumerator value of MEM16 field.                                 */
  #define MEMCONF_POWER_RET_MEM16_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM16_On (0x1UL)         /*!< Retention on                                                         */

/* MEM17 @Bit 17 : Keep the RAM block MEM[17] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM17_Pos (17UL)         /*!< Position of MEM17 field.                                             */
  #define MEMCONF_POWER_RET_MEM17_Msk (0x1UL << MEMCONF_POWER_RET_MEM17_Pos) /*!< Bit mask of MEM17 field.                     */
  #define MEMCONF_POWER_RET_MEM17_Min (0x0UL)        /*!< Min enumerator value of MEM17 field.                                 */
  #define MEMCONF_POWER_RET_MEM17_Max (0x1UL)        /*!< Max enumerator value of MEM17 field.                                 */
  #define MEMCONF_POWER_RET_MEM17_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM17_On (0x1UL)         /*!< Retention on                                                         */

/* MEM18 @Bit 18 : Keep the RAM block MEM[18] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM18_Pos (18UL)         /*!< Position of MEM18 field.                                             */
  #define MEMCONF_POWER_RET_MEM18_Msk (0x1UL << MEMCONF_POWER_RET_MEM18_Pos) /*!< Bit mask of MEM18 field.                     */
  #define MEMCONF_POWER_RET_MEM18_Min (0x0UL)        /*!< Min enumerator value of MEM18 field.                                 */
  #define MEMCONF_POWER_RET_MEM18_Max (0x1UL)        /*!< Max enumerator value of MEM18 field.                                 */
  #define MEMCONF_POWER_RET_MEM18_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM18_On (0x1UL)         /*!< Retention on                                                         */

/* MEM19 @Bit 19 : Keep the RAM block MEM[19] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM19_Pos (19UL)         /*!< Position of MEM19 field.                                             */
  #define MEMCONF_POWER_RET_MEM19_Msk (0x1UL << MEMCONF_POWER_RET_MEM19_Pos) /*!< Bit mask of MEM19 field.                     */
  #define MEMCONF_POWER_RET_MEM19_Min (0x0UL)        /*!< Min enumerator value of MEM19 field.                                 */
  #define MEMCONF_POWER_RET_MEM19_Max (0x1UL)        /*!< Max enumerator value of MEM19 field.                                 */
  #define MEMCONF_POWER_RET_MEM19_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM19_On (0x1UL)         /*!< Retention on                                                         */

/* MEM20 @Bit 20 : Keep the RAM block MEM[20] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM20_Pos (20UL)         /*!< Position of MEM20 field.                                             */
  #define MEMCONF_POWER_RET_MEM20_Msk (0x1UL << MEMCONF_POWER_RET_MEM20_Pos) /*!< Bit mask of MEM20 field.                     */
  #define MEMCONF_POWER_RET_MEM20_Min (0x0UL)        /*!< Min enumerator value of MEM20 field.                                 */
  #define MEMCONF_POWER_RET_MEM20_Max (0x1UL)        /*!< Max enumerator value of MEM20 field.                                 */
  #define MEMCONF_POWER_RET_MEM20_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM20_On (0x1UL)         /*!< Retention on                                                         */

/* MEM21 @Bit 21 : Keep the RAM block MEM[21] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM21_Pos (21UL)         /*!< Position of MEM21 field.                                             */
  #define MEMCONF_POWER_RET_MEM21_Msk (0x1UL << MEMCONF_POWER_RET_MEM21_Pos) /*!< Bit mask of MEM21 field.                     */
  #define MEMCONF_POWER_RET_MEM21_Min (0x0UL)        /*!< Min enumerator value of MEM21 field.                                 */
  #define MEMCONF_POWER_RET_MEM21_Max (0x1UL)        /*!< Max enumerator value of MEM21 field.                                 */
  #define MEMCONF_POWER_RET_MEM21_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM21_On (0x1UL)         /*!< Retention on                                                         */

/* MEM22 @Bit 22 : Keep the RAM block MEM[22] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM22_Pos (22UL)         /*!< Position of MEM22 field.                                             */
  #define MEMCONF_POWER_RET_MEM22_Msk (0x1UL << MEMCONF_POWER_RET_MEM22_Pos) /*!< Bit mask of MEM22 field.                     */
  #define MEMCONF_POWER_RET_MEM22_Min (0x0UL)        /*!< Min enumerator value of MEM22 field.                                 */
  #define MEMCONF_POWER_RET_MEM22_Max (0x1UL)        /*!< Max enumerator value of MEM22 field.                                 */
  #define MEMCONF_POWER_RET_MEM22_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM22_On (0x1UL)         /*!< Retention on                                                         */

/* MEM23 @Bit 23 : Keep the RAM block MEM[23] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM23_Pos (23UL)         /*!< Position of MEM23 field.                                             */
  #define MEMCONF_POWER_RET_MEM23_Msk (0x1UL << MEMCONF_POWER_RET_MEM23_Pos) /*!< Bit mask of MEM23 field.                     */
  #define MEMCONF_POWER_RET_MEM23_Min (0x0UL)        /*!< Min enumerator value of MEM23 field.                                 */
  #define MEMCONF_POWER_RET_MEM23_Max (0x1UL)        /*!< Max enumerator value of MEM23 field.                                 */
  #define MEMCONF_POWER_RET_MEM23_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM23_On (0x1UL)         /*!< Retention on                                                         */

/* MEM24 @Bit 24 : Keep the RAM block MEM[24] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM24_Pos (24UL)         /*!< Position of MEM24 field.                                             */
  #define MEMCONF_POWER_RET_MEM24_Msk (0x1UL << MEMCONF_POWER_RET_MEM24_Pos) /*!< Bit mask of MEM24 field.                     */
  #define MEMCONF_POWER_RET_MEM24_Min (0x0UL)        /*!< Min enumerator value of MEM24 field.                                 */
  #define MEMCONF_POWER_RET_MEM24_Max (0x1UL)        /*!< Max enumerator value of MEM24 field.                                 */
  #define MEMCONF_POWER_RET_MEM24_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM24_On (0x1UL)         /*!< Retention on                                                         */

/* MEM25 @Bit 25 : Keep the RAM block MEM[25] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM25_Pos (25UL)         /*!< Position of MEM25 field.                                             */
  #define MEMCONF_POWER_RET_MEM25_Msk (0x1UL << MEMCONF_POWER_RET_MEM25_Pos) /*!< Bit mask of MEM25 field.                     */
  #define MEMCONF_POWER_RET_MEM25_Min (0x0UL)        /*!< Min enumerator value of MEM25 field.                                 */
  #define MEMCONF_POWER_RET_MEM25_Max (0x1UL)        /*!< Max enumerator value of MEM25 field.                                 */
  #define MEMCONF_POWER_RET_MEM25_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM25_On (0x1UL)         /*!< Retention on                                                         */

/* MEM26 @Bit 26 : Keep the RAM block MEM[26] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM26_Pos (26UL)         /*!< Position of MEM26 field.                                             */
  #define MEMCONF_POWER_RET_MEM26_Msk (0x1UL << MEMCONF_POWER_RET_MEM26_Pos) /*!< Bit mask of MEM26 field.                     */
  #define MEMCONF_POWER_RET_MEM26_Min (0x0UL)        /*!< Min enumerator value of MEM26 field.                                 */
  #define MEMCONF_POWER_RET_MEM26_Max (0x1UL)        /*!< Max enumerator value of MEM26 field.                                 */
  #define MEMCONF_POWER_RET_MEM26_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM26_On (0x1UL)         /*!< Retention on                                                         */

/* MEM27 @Bit 27 : Keep the RAM block MEM[27] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM27_Pos (27UL)         /*!< Position of MEM27 field.                                             */
  #define MEMCONF_POWER_RET_MEM27_Msk (0x1UL << MEMCONF_POWER_RET_MEM27_Pos) /*!< Bit mask of MEM27 field.                     */
  #define MEMCONF_POWER_RET_MEM27_Min (0x0UL)        /*!< Min enumerator value of MEM27 field.                                 */
  #define MEMCONF_POWER_RET_MEM27_Max (0x1UL)        /*!< Max enumerator value of MEM27 field.                                 */
  #define MEMCONF_POWER_RET_MEM27_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM27_On (0x1UL)         /*!< Retention on                                                         */

/* MEM28 @Bit 28 : Keep the RAM block MEM[28] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM28_Pos (28UL)         /*!< Position of MEM28 field.                                             */
  #define MEMCONF_POWER_RET_MEM28_Msk (0x1UL << MEMCONF_POWER_RET_MEM28_Pos) /*!< Bit mask of MEM28 field.                     */
  #define MEMCONF_POWER_RET_MEM28_Min (0x0UL)        /*!< Min enumerator value of MEM28 field.                                 */
  #define MEMCONF_POWER_RET_MEM28_Max (0x1UL)        /*!< Max enumerator value of MEM28 field.                                 */
  #define MEMCONF_POWER_RET_MEM28_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM28_On (0x1UL)         /*!< Retention on                                                         */

/* MEM29 @Bit 29 : Keep the RAM block MEM[29] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM29_Pos (29UL)         /*!< Position of MEM29 field.                                             */
  #define MEMCONF_POWER_RET_MEM29_Msk (0x1UL << MEMCONF_POWER_RET_MEM29_Pos) /*!< Bit mask of MEM29 field.                     */
  #define MEMCONF_POWER_RET_MEM29_Min (0x0UL)        /*!< Min enumerator value of MEM29 field.                                 */
  #define MEMCONF_POWER_RET_MEM29_Max (0x1UL)        /*!< Max enumerator value of MEM29 field.                                 */
  #define MEMCONF_POWER_RET_MEM29_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM29_On (0x1UL)         /*!< Retention on                                                         */

/* MEM30 @Bit 30 : Keep the RAM block MEM[30] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM30_Pos (30UL)         /*!< Position of MEM30 field.                                             */
  #define MEMCONF_POWER_RET_MEM30_Msk (0x1UL << MEMCONF_POWER_RET_MEM30_Pos) /*!< Bit mask of MEM30 field.                     */
  #define MEMCONF_POWER_RET_MEM30_Min (0x0UL)        /*!< Min enumerator value of MEM30 field.                                 */
  #define MEMCONF_POWER_RET_MEM30_Max (0x1UL)        /*!< Max enumerator value of MEM30 field.                                 */
  #define MEMCONF_POWER_RET_MEM30_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM30_On (0x1UL)         /*!< Retention on                                                         */

/* MEM31 @Bit 31 : Keep the RAM block MEM[31] retained when in System OFF mode. */
  #define MEMCONF_POWER_RET_MEM31_Pos (31UL)         /*!< Position of MEM31 field.                                             */
  #define MEMCONF_POWER_RET_MEM31_Msk (0x1UL << MEMCONF_POWER_RET_MEM31_Pos) /*!< Bit mask of MEM31 field.                     */
  #define MEMCONF_POWER_RET_MEM31_Min (0x0UL)        /*!< Min enumerator value of MEM31 field.                                 */
  #define MEMCONF_POWER_RET_MEM31_Max (0x1UL)        /*!< Max enumerator value of MEM31 field.                                 */
  #define MEMCONF_POWER_RET_MEM31_Off (0x0UL)        /*!< Retention off                                                        */
  #define MEMCONF_POWER_RET_MEM31_On (0x1UL)         /*!< Retention on                                                         */


/* ===================================================== Struct MEMCONF ====================================================== */
/**
  * @brief Memory configuration
  */
  typedef struct {                                   /*!< MEMCONF Structure                                                    */
    __IM uint32_t RESERVED[320];
    __IOM NRF_MEMCONF_POWER_Type POWER[2];           /*!< (@ 0x00000500) (unspecified)                                         */
  } NRF_MEMCONF_Type;                                /*!< Size = 1312 (0x520)                                                  */

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        OSCILLATORS                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================ Struct OSCILLATORS_XOSC32M_CONFIG ============================================ */
/**
  * @brief CONFIG [OSCILLATORS_XOSC32M_CONFIG] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  INTCAP;                            /*!< (@ 0x00000008) Crystal load capacitor as seen by the crystal across
                                                                         its terminals, including pin capacitance but excluding
                                                                         PCB stray capacitance.*/
} NRF_OSCILLATORS_XOSC32M_CONFIG_Type;               /*!< Size = 12 (0x00C)                                                    */

/* OSCILLATORS_XOSC32M_CONFIG_INTCAP: Crystal load capacitor as seen by the crystal across its terminals, including pin
                                       capacitance but excluding PCB stray capacitance. */

  #define OSCILLATORS_XOSC32M_CONFIG_INTCAP_ResetValue (0x00000020UL) /*!< Reset value of INTCAP register.                     */

/* VAL @Bits 0..5 : Crystal load capacitor value */
  #define OSCILLATORS_XOSC32M_CONFIG_INTCAP_VAL_Pos (0UL) /*!< Position of VAL field.                                          */
  #define OSCILLATORS_XOSC32M_CONFIG_INTCAP_VAL_Msk (0x3FUL << OSCILLATORS_XOSC32M_CONFIG_INTCAP_VAL_Pos) /*!< Bit mask of VAL
                                                                            field.*/



/* =============================================== Struct OSCILLATORS_XOSC32M ================================================ */
/**
  * @brief XOSC32M [OSCILLATORS_XOSC32M] 32 MHz oscillator control
  */
typedef struct {
  __IM  uint32_t  RESERVED[5];
  __IOM NRF_OSCILLATORS_XOSC32M_CONFIG_Type CONFIG;  /*!< (@ 0x00000014) (unspecified)                                         */
} NRF_OSCILLATORS_XOSC32M_Type;                      /*!< Size = 32 (0x020)                                                    */


/* ================================================= Struct OSCILLATORS_PLL ================================================== */
/**
  * @brief PLL [OSCILLATORS_PLL] Oscillator control
  */
typedef struct {
  __IOM uint32_t  FREQ;                              /*!< (@ 0x00000000) Set speed of MCU power domain, including CPU          */
  __IM  uint32_t  CURRENTFREQ;                       /*!< (@ 0x00000004) Current speed of MCU power domain, including CPU      */
} NRF_OSCILLATORS_PLL_Type;                          /*!< Size = 8 (0x008)                                                     */

/* OSCILLATORS_PLL_FREQ: Set speed of MCU power domain, including CPU */
  #define OSCILLATORS_PLL_FREQ_ResetValue (0x00000003UL) /*!< Reset value of FREQ register.                                    */

/* FREQ @Bits 0..1 : Select CPU speed */
  #define OSCILLATORS_PLL_FREQ_FREQ_Pos (0UL)        /*!< Position of FREQ field.                                              */
  #define OSCILLATORS_PLL_FREQ_FREQ_Msk (0x3UL << OSCILLATORS_PLL_FREQ_FREQ_Pos) /*!< Bit mask of FREQ field.                  */
  #define OSCILLATORS_PLL_FREQ_FREQ_Min (0x1UL)      /*!< Min enumerator value of FREQ field.                                  */
  #define OSCILLATORS_PLL_FREQ_FREQ_Max (0x3UL)      /*!< Max enumerator value of FREQ field.                                  */
  #define OSCILLATORS_PLL_FREQ_FREQ_CK128M (0x1UL)   /*!< 128 MHz                                                              */
  #define OSCILLATORS_PLL_FREQ_FREQ_CK64M (0x3UL)    /*!< 64 MHz                                                               */


/* OSCILLATORS_PLL_CURRENTFREQ: Current speed of MCU power domain, including CPU */
  #define OSCILLATORS_PLL_CURRENTFREQ_ResetValue (0x00000003UL) /*!< Reset value of CURRENTFREQ register.                      */

/* CURRENTFREQ @Bits 0..1 : Active CPU speed */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Pos (0UL) /*!< Position of CURRENTFREQ field.                                */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Msk (0x3UL << OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Pos) /*!< Bit mask of
                                                                            CURRENTFREQ field.*/
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Min (0x1UL) /*!< Min enumerator value of CURRENTFREQ field.                  */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_Max (0x3UL) /*!< Max enumerator value of CURRENTFREQ field.                  */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK128M (0x1UL) /*!< 128 MHz                                                  */
  #define OSCILLATORS_PLL_CURRENTFREQ_CURRENTFREQ_CK64M (0x3UL) /*!< 64 MHz                                                    */



/* =============================================== Struct OSCILLATORS_XOSC32KI =============================================== */
/**
  * @brief XOSC32KI [OSCILLATORS_XOSC32KI] 32.768 kHz oscillator control
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  INTCAP;                            /*!< (@ 0x00000004) Programmable capacitance of XL1 and XL2               */
} NRF_OSCILLATORS_XOSC32KI_Type;                     /*!< Size = 8 (0x008)                                                     */

/* OSCILLATORS_XOSC32KI_INTCAP: Programmable capacitance of XL1 and XL2 */
  #define OSCILLATORS_XOSC32KI_INTCAP_ResetValue (0x00000017UL) /*!< Reset value of INTCAP register.                           */

/* VAL @Bits 0..4 : Crystal load capacitor as seen by the crystal across its terminals, including pin capacitance but excluding
                    PCB stray capacitance. */

  #define OSCILLATORS_XOSC32KI_INTCAP_VAL_Pos (0UL)  /*!< Position of VAL field.                                               */
  #define OSCILLATORS_XOSC32KI_INTCAP_VAL_Msk (0x1FUL << OSCILLATORS_XOSC32KI_INTCAP_VAL_Pos) /*!< Bit mask of VAL field.      */


/* =================================================== Struct OSCILLATORS ==================================================== */
/**
  * @brief Oscillator control
  */
  typedef struct {                                   /*!< OSCILLATORS Structure                                                */
    __IM uint32_t RESERVED[448];
    __IOM NRF_OSCILLATORS_XOSC32M_Type XOSC32M;      /*!< (@ 0x00000700) 32 MHz oscillator control                             */
    __IM uint32_t RESERVED1[56];
    __IOM NRF_OSCILLATORS_PLL_Type PLL;              /*!< (@ 0x00000800) Oscillator control                                    */
    __IM uint32_t RESERVED2[62];
    __IOM NRF_OSCILLATORS_XOSC32KI_Type XOSC32KI;    /*!< (@ 0x00000900) 32.768 kHz oscillator control                         */
  } NRF_OSCILLATORS_Type;                            /*!< Size = 2312 (0x908)                                                  */

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           POWER                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct POWER ======================================================= */
/**
  * @brief Power control
  */
  typedef struct {                                   /*!< POWER Structure                                                      */
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_CONSTLAT;                    /*!< (@ 0x00000030) Enable Constant Latency mode                          */
    __OM uint32_t TASKS_LOWPWR;                      /*!< (@ 0x00000034) Enable Low-power mode (variable latency)              */
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t SUBSCRIBE_CONSTLAT;               /*!< (@ 0x000000B0) Subscribe configuration for task CONSTLAT             */
    __IOM uint32_t SUBSCRIBE_LOWPWR;                 /*!< (@ 0x000000B4) Subscribe configuration for task LOWPWR               */
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t EVENTS_POFWARN;                   /*!< (@ 0x00000130) Power failure warning                                 */
    __IOM uint32_t EVENTS_SLEEPENTER;                /*!< (@ 0x00000134) CPU entered WFI/WFE sleep                             */
    __IOM uint32_t EVENTS_SLEEPEXIT;                 /*!< (@ 0x00000138) CPU exited WFI/WFE sleep                              */
    __IM uint32_t RESERVED3[29];
    __IOM uint32_t PUBLISH_POFWARN;                  /*!< (@ 0x000001B0) Publish configuration for event POFWARN               */
    __IOM uint32_t PUBLISH_SLEEPENTER;               /*!< (@ 0x000001B4) Publish configuration for event SLEEPENTER            */
    __IOM uint32_t PUBLISH_SLEEPEXIT;                /*!< (@ 0x000001B8) Publish configuration for event SLEEPEXIT             */
    __IM uint32_t RESERVED4[81];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED5[125];
    __IOM uint32_t GPREGRET[2];                      /*!< (@ 0x00000500) General purpose retention register                    */
    __IM uint32_t RESERVED6[6];
    __IM uint32_t CONSTLATSTAT;                      /*!< (@ 0x00000520) Status of constant latency                            */
  } NRF_POWER_Type;                                  /*!< Size = 1316 (0x524)                                                  */

/* POWER_TASKS_CONSTLAT: Enable Constant Latency mode */
  #define POWER_TASKS_CONSTLAT_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CONSTLAT register.                          */

/* TASKS_CONSTLAT @Bit 0 : Enable Constant Latency mode */
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos (0UL) /*!< Position of TASKS_CONSTLAT field.                                 */
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk (0x1UL << POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos) /*!< Bit mask of
                                                                            TASKS_CONSTLAT field.*/
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Min (0x1UL) /*!< Min enumerator value of TASKS_CONSTLAT field.                   */
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Max (0x1UL) /*!< Max enumerator value of TASKS_CONSTLAT field.                   */
  #define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Trigger (0x1UL) /*!< Trigger task                                                */


/* POWER_TASKS_LOWPWR: Enable Low-power mode (variable latency) */
  #define POWER_TASKS_LOWPWR_ResetValue (0x00000000UL) /*!< Reset value of TASKS_LOWPWR register.                              */

/* TASKS_LOWPWR @Bit 0 : Enable Low-power mode (variable latency) */
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos (0UL)  /*!< Position of TASKS_LOWPWR field.                                      */
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk (0x1UL << POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos) /*!< Bit mask of TASKS_LOWPWR
                                                                            field.*/
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Min (0x1UL) /*!< Min enumerator value of TASKS_LOWPWR field.                         */
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Max (0x1UL) /*!< Max enumerator value of TASKS_LOWPWR field.                         */
  #define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Trigger (0x1UL) /*!< Trigger task                                                    */


/* POWER_SUBSCRIBE_CONSTLAT: Subscribe configuration for task CONSTLAT */
  #define POWER_SUBSCRIBE_CONSTLAT_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CONSTLAT register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that task CONSTLAT will subscribe to */
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Msk (0x1UL << POWER_SUBSCRIBE_CONSTLAT_EN_Pos) /*!< Bit mask of EN field.                */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Disabled (0x0UL) /*!< Disable subscription                                               */
  #define POWER_SUBSCRIBE_CONSTLAT_EN_Enabled (0x1UL) /*!< Enable subscription                                                 */


/* POWER_SUBSCRIBE_LOWPWR: Subscribe configuration for task LOWPWR */
  #define POWER_SUBSCRIBE_LOWPWR_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_LOWPWR register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task LOWPWR will subscribe to */
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define POWER_SUBSCRIBE_LOWPWR_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Msk (0x1UL << POWER_SUBSCRIBE_LOWPWR_EN_Pos) /*!< Bit mask of EN field.                    */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define POWER_SUBSCRIBE_LOWPWR_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* POWER_EVENTS_POFWARN: Power failure warning */
  #define POWER_EVENTS_POFWARN_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_POFWARN register.                          */

/* EVENTS_POFWARN @Bit 0 : Power failure warning */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos (0UL) /*!< Position of EVENTS_POFWARN field.                                 */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Msk (0x1UL << POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos) /*!< Bit mask of
                                                                            EVENTS_POFWARN field.*/
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Min (0x0UL) /*!< Min enumerator value of EVENTS_POFWARN field.                   */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Max (0x1UL) /*!< Max enumerator value of EVENTS_POFWARN field.                   */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Generated (0x1UL) /*!< Event generated                                           */


/* POWER_EVENTS_SLEEPENTER: CPU entered WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPENTER_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SLEEPENTER register.                    */

/* EVENTS_SLEEPENTER @Bit 0 : CPU entered WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos (0UL) /*!< Position of EVENTS_SLEEPENTER field.                        */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Msk (0x1UL << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos) /*!< Bit mask
                                                                            of EVENTS_SLEEPENTER field.*/
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Min (0x0UL) /*!< Min enumerator value of EVENTS_SLEEPENTER field.          */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Max (0x1UL) /*!< Max enumerator value of EVENTS_SLEEPENTER field.          */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Generated (0x1UL) /*!< Event generated                                     */


/* POWER_EVENTS_SLEEPEXIT: CPU exited WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPEXIT_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SLEEPEXIT register.                      */

/* EVENTS_SLEEPEXIT @Bit 0 : CPU exited WFI/WFE sleep */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos (0UL) /*!< Position of EVENTS_SLEEPEXIT field.                           */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Msk (0x1UL << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos) /*!< Bit mask of
                                                                            EVENTS_SLEEPEXIT field.*/
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Min (0x0UL) /*!< Min enumerator value of EVENTS_SLEEPEXIT field.             */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Max (0x1UL) /*!< Max enumerator value of EVENTS_SLEEPEXIT field.             */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Generated (0x1UL) /*!< Event generated                                       */


/* POWER_PUBLISH_POFWARN: Publish configuration for event POFWARN */
  #define POWER_PUBLISH_POFWARN_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_POFWARN register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event POFWARN will publish to */
  #define POWER_PUBLISH_POFWARN_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define POWER_PUBLISH_POFWARN_CHIDX_Msk (0xFFUL << POWER_PUBLISH_POFWARN_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define POWER_PUBLISH_POFWARN_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define POWER_PUBLISH_POFWARN_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_POFWARN_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define POWER_PUBLISH_POFWARN_EN_Msk (0x1UL << POWER_PUBLISH_POFWARN_EN_Pos) /*!< Bit mask of EN field.                      */
  #define POWER_PUBLISH_POFWARN_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define POWER_PUBLISH_POFWARN_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define POWER_PUBLISH_POFWARN_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define POWER_PUBLISH_POFWARN_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* POWER_PUBLISH_SLEEPENTER: Publish configuration for event SLEEPENTER */
  #define POWER_PUBLISH_SLEEPENTER_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SLEEPENTER register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event SLEEPENTER will publish to */
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPENTER_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define POWER_PUBLISH_SLEEPENTER_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_SLEEPENTER_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define POWER_PUBLISH_SLEEPENTER_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPENTER_EN_Pos) /*!< Bit mask of EN field.                */
  #define POWER_PUBLISH_SLEEPENTER_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define POWER_PUBLISH_SLEEPENTER_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define POWER_PUBLISH_SLEEPENTER_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define POWER_PUBLISH_SLEEPENTER_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* POWER_PUBLISH_SLEEPEXIT: Publish configuration for event SLEEPEXIT */
  #define POWER_PUBLISH_SLEEPEXIT_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SLEEPEXIT register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that event SLEEPEXIT will publish to */
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define POWER_PUBLISH_SLEEPEXIT_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPEXIT_EN_Pos) /*!< Bit mask of EN field.                  */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define POWER_PUBLISH_SLEEPEXIT_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* POWER_INTEN: Enable or disable interrupt */
  #define POWER_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* POFWARN @Bit 12 : Enable or disable interrupt for event POFWARN */
  #define POWER_INTEN_POFWARN_Pos (12UL)             /*!< Position of POFWARN field.                                           */
  #define POWER_INTEN_POFWARN_Msk (0x1UL << POWER_INTEN_POFWARN_Pos) /*!< Bit mask of POFWARN field.                           */
  #define POWER_INTEN_POFWARN_Min (0x0UL)            /*!< Min enumerator value of POFWARN field.                               */
  #define POWER_INTEN_POFWARN_Max (0x1UL)            /*!< Max enumerator value of POFWARN field.                               */
  #define POWER_INTEN_POFWARN_Disabled (0x0UL)       /*!< Disable                                                              */
  #define POWER_INTEN_POFWARN_Enabled (0x1UL)        /*!< Enable                                                               */

/* SLEEPENTER @Bit 13 : Enable or disable interrupt for event SLEEPENTER */
  #define POWER_INTEN_SLEEPENTER_Pos (13UL)          /*!< Position of SLEEPENTER field.                                        */
  #define POWER_INTEN_SLEEPENTER_Msk (0x1UL << POWER_INTEN_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field.                  */
  #define POWER_INTEN_SLEEPENTER_Min (0x0UL)         /*!< Min enumerator value of SLEEPENTER field.                            */
  #define POWER_INTEN_SLEEPENTER_Max (0x1UL)         /*!< Max enumerator value of SLEEPENTER field.                            */
  #define POWER_INTEN_SLEEPENTER_Disabled (0x0UL)    /*!< Disable                                                              */
  #define POWER_INTEN_SLEEPENTER_Enabled (0x1UL)     /*!< Enable                                                               */

/* SLEEPEXIT @Bit 14 : Enable or disable interrupt for event SLEEPEXIT */
  #define POWER_INTEN_SLEEPEXIT_Pos (14UL)           /*!< Position of SLEEPEXIT field.                                         */
  #define POWER_INTEN_SLEEPEXIT_Msk (0x1UL << POWER_INTEN_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field.                     */
  #define POWER_INTEN_SLEEPEXIT_Min (0x0UL)          /*!< Min enumerator value of SLEEPEXIT field.                             */
  #define POWER_INTEN_SLEEPEXIT_Max (0x1UL)          /*!< Max enumerator value of SLEEPEXIT field.                             */
  #define POWER_INTEN_SLEEPEXIT_Disabled (0x0UL)     /*!< Disable                                                              */
  #define POWER_INTEN_SLEEPEXIT_Enabled (0x1UL)      /*!< Enable                                                               */


/* POWER_INTENSET: Enable interrupt */
  #define POWER_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* POFWARN @Bit 12 : Write '1' to enable interrupt for event POFWARN */
  #define POWER_INTENSET_POFWARN_Pos (12UL)          /*!< Position of POFWARN field.                                           */
  #define POWER_INTENSET_POFWARN_Msk (0x1UL << POWER_INTENSET_POFWARN_Pos) /*!< Bit mask of POFWARN field.                     */
  #define POWER_INTENSET_POFWARN_Min (0x0UL)         /*!< Min enumerator value of POFWARN field.                               */
  #define POWER_INTENSET_POFWARN_Max (0x1UL)         /*!< Max enumerator value of POFWARN field.                               */
  #define POWER_INTENSET_POFWARN_Set (0x1UL)         /*!< Enable                                                               */
  #define POWER_INTENSET_POFWARN_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define POWER_INTENSET_POFWARN_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* SLEEPENTER @Bit 13 : Write '1' to enable interrupt for event SLEEPENTER */
  #define POWER_INTENSET_SLEEPENTER_Pos (13UL)       /*!< Position of SLEEPENTER field.                                        */
  #define POWER_INTENSET_SLEEPENTER_Msk (0x1UL << POWER_INTENSET_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field.            */
  #define POWER_INTENSET_SLEEPENTER_Min (0x0UL)      /*!< Min enumerator value of SLEEPENTER field.                            */
  #define POWER_INTENSET_SLEEPENTER_Max (0x1UL)      /*!< Max enumerator value of SLEEPENTER field.                            */
  #define POWER_INTENSET_SLEEPENTER_Set (0x1UL)      /*!< Enable                                                               */
  #define POWER_INTENSET_SLEEPENTER_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define POWER_INTENSET_SLEEPENTER_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* SLEEPEXIT @Bit 14 : Write '1' to enable interrupt for event SLEEPEXIT */
  #define POWER_INTENSET_SLEEPEXIT_Pos (14UL)        /*!< Position of SLEEPEXIT field.                                         */
  #define POWER_INTENSET_SLEEPEXIT_Msk (0x1UL << POWER_INTENSET_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field.               */
  #define POWER_INTENSET_SLEEPEXIT_Min (0x0UL)       /*!< Min enumerator value of SLEEPEXIT field.                             */
  #define POWER_INTENSET_SLEEPEXIT_Max (0x1UL)       /*!< Max enumerator value of SLEEPEXIT field.                             */
  #define POWER_INTENSET_SLEEPEXIT_Set (0x1UL)       /*!< Enable                                                               */
  #define POWER_INTENSET_SLEEPEXIT_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define POWER_INTENSET_SLEEPEXIT_Enabled (0x1UL)   /*!< Read: Enabled                                                        */


/* POWER_INTENCLR: Disable interrupt */
  #define POWER_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* POFWARN @Bit 12 : Write '1' to disable interrupt for event POFWARN */
  #define POWER_INTENCLR_POFWARN_Pos (12UL)          /*!< Position of POFWARN field.                                           */
  #define POWER_INTENCLR_POFWARN_Msk (0x1UL << POWER_INTENCLR_POFWARN_Pos) /*!< Bit mask of POFWARN field.                     */
  #define POWER_INTENCLR_POFWARN_Min (0x0UL)         /*!< Min enumerator value of POFWARN field.                               */
  #define POWER_INTENCLR_POFWARN_Max (0x1UL)         /*!< Max enumerator value of POFWARN field.                               */
  #define POWER_INTENCLR_POFWARN_Clear (0x1UL)       /*!< Disable                                                              */
  #define POWER_INTENCLR_POFWARN_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define POWER_INTENCLR_POFWARN_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* SLEEPENTER @Bit 13 : Write '1' to disable interrupt for event SLEEPENTER */
  #define POWER_INTENCLR_SLEEPENTER_Pos (13UL)       /*!< Position of SLEEPENTER field.                                        */
  #define POWER_INTENCLR_SLEEPENTER_Msk (0x1UL << POWER_INTENCLR_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field.            */
  #define POWER_INTENCLR_SLEEPENTER_Min (0x0UL)      /*!< Min enumerator value of SLEEPENTER field.                            */
  #define POWER_INTENCLR_SLEEPENTER_Max (0x1UL)      /*!< Max enumerator value of SLEEPENTER field.                            */
  #define POWER_INTENCLR_SLEEPENTER_Clear (0x1UL)    /*!< Disable                                                              */
  #define POWER_INTENCLR_SLEEPENTER_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define POWER_INTENCLR_SLEEPENTER_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* SLEEPEXIT @Bit 14 : Write '1' to disable interrupt for event SLEEPEXIT */
  #define POWER_INTENCLR_SLEEPEXIT_Pos (14UL)        /*!< Position of SLEEPEXIT field.                                         */
  #define POWER_INTENCLR_SLEEPEXIT_Msk (0x1UL << POWER_INTENCLR_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field.               */
  #define POWER_INTENCLR_SLEEPEXIT_Min (0x0UL)       /*!< Min enumerator value of SLEEPEXIT field.                             */
  #define POWER_INTENCLR_SLEEPEXIT_Max (0x1UL)       /*!< Max enumerator value of SLEEPEXIT field.                             */
  #define POWER_INTENCLR_SLEEPEXIT_Clear (0x1UL)     /*!< Disable                                                              */
  #define POWER_INTENCLR_SLEEPEXIT_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define POWER_INTENCLR_SLEEPEXIT_Enabled (0x1UL)   /*!< Read: Enabled                                                        */


/* POWER_GPREGRET: General purpose retention register */
  #define POWER_GPREGRET_MaxCount (2UL)              /*!< Max size of GPREGRET[2] array.                                       */
  #define POWER_GPREGRET_MaxIndex (1UL)              /*!< Max index of GPREGRET[2] array.                                      */
  #define POWER_GPREGRET_MinIndex (0UL)              /*!< Min index of GPREGRET[2] array.                                      */
  #define POWER_GPREGRET_ResetValue (0x00000000UL)   /*!< Reset value of GPREGRET[2] register.                                 */

/* GPREGRET @Bits 0..7 : General purpose retention register */
  #define POWER_GPREGRET_GPREGRET_Pos (0UL)          /*!< Position of GPREGRET field.                                          */
  #define POWER_GPREGRET_GPREGRET_Msk (0xFFUL << POWER_GPREGRET_GPREGRET_Pos) /*!< Bit mask of GPREGRET field.                 */


/* POWER_CONSTLATSTAT: Status of constant latency */
  #define POWER_CONSTLATSTAT_ResetValue (0x00000000UL) /*!< Reset value of CONSTLATSTAT register.                              */

/* STATUS @Bit 0 : Status */
  #define POWER_CONSTLATSTAT_STATUS_Pos (0UL)        /*!< Position of STATUS field.                                            */
  #define POWER_CONSTLATSTAT_STATUS_Msk (0x1UL << POWER_CONSTLATSTAT_STATUS_Pos) /*!< Bit mask of STATUS field.                */
  #define POWER_CONSTLATSTAT_STATUS_Min (0x0UL)      /*!< Min enumerator value of STATUS field.                                */
  #define POWER_CONSTLATSTAT_STATUS_Max (0x1UL)      /*!< Max enumerator value of STATUS field.                                */
  #define POWER_CONSTLATSTAT_STATUS_Disable (0x0UL)  /*!< Constant latency disabled                                            */
  #define POWER_CONSTLATSTAT_STATUS_Enable (0x1UL)   /*!< Constant latency enabled                                             */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           PPIB                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct PPIB_OVERFLOW =================================================== */
/**
  * @brief OVERFLOW [PPIB_OVERFLOW] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SEND;                              /*!< (@ 0x00000000) The task overflow for SEND tasks using SUBSCRIBE_SEND.
                                                                         Write 0 to clear.*/
} NRF_PPIB_OVERFLOW_Type;                            /*!< Size = 4 (0x004)                                                     */

/* PPIB_OVERFLOW_SEND: The task overflow for SEND tasks using SUBSCRIBE_SEND. Write 0 to clear. */
  #define PPIB_OVERFLOW_SEND_ResetValue (0x00000000UL) /*!< Reset value of SEND register.                                      */

/* SEND0 @Bit 0 : The status for tasks overflow at SUBSCRIBE_SEND[0]. */
  #define PPIB_OVERFLOW_SEND_SEND0_Pos (0UL)         /*!< Position of SEND0 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND0_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND0_Pos) /*!< Bit mask of SEND0 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND0_Min (0x0UL)       /*!< Min enumerator value of SEND0 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND0_Max (0x1UL)       /*!< Max enumerator value of SEND0 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND0_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND0_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND1 @Bit 1 : The status for tasks overflow at SUBSCRIBE_SEND[1]. */
  #define PPIB_OVERFLOW_SEND_SEND1_Pos (1UL)         /*!< Position of SEND1 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND1_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND1_Pos) /*!< Bit mask of SEND1 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND1_Min (0x0UL)       /*!< Min enumerator value of SEND1 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND1_Max (0x1UL)       /*!< Max enumerator value of SEND1 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND1_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND1_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND2 @Bit 2 : The status for tasks overflow at SUBSCRIBE_SEND[2]. */
  #define PPIB_OVERFLOW_SEND_SEND2_Pos (2UL)         /*!< Position of SEND2 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND2_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND2_Pos) /*!< Bit mask of SEND2 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND2_Min (0x0UL)       /*!< Min enumerator value of SEND2 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND2_Max (0x1UL)       /*!< Max enumerator value of SEND2 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND2_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND2_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND3 @Bit 3 : The status for tasks overflow at SUBSCRIBE_SEND[3]. */
  #define PPIB_OVERFLOW_SEND_SEND3_Pos (3UL)         /*!< Position of SEND3 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND3_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND3_Pos) /*!< Bit mask of SEND3 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND3_Min (0x0UL)       /*!< Min enumerator value of SEND3 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND3_Max (0x1UL)       /*!< Max enumerator value of SEND3 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND3_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND3_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND4 @Bit 4 : The status for tasks overflow at SUBSCRIBE_SEND[4]. */
  #define PPIB_OVERFLOW_SEND_SEND4_Pos (4UL)         /*!< Position of SEND4 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND4_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND4_Pos) /*!< Bit mask of SEND4 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND4_Min (0x0UL)       /*!< Min enumerator value of SEND4 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND4_Max (0x1UL)       /*!< Max enumerator value of SEND4 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND4_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND4_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND5 @Bit 5 : The status for tasks overflow at SUBSCRIBE_SEND[5]. */
  #define PPIB_OVERFLOW_SEND_SEND5_Pos (5UL)         /*!< Position of SEND5 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND5_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND5_Pos) /*!< Bit mask of SEND5 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND5_Min (0x0UL)       /*!< Min enumerator value of SEND5 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND5_Max (0x1UL)       /*!< Max enumerator value of SEND5 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND5_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND5_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND6 @Bit 6 : The status for tasks overflow at SUBSCRIBE_SEND[6]. */
  #define PPIB_OVERFLOW_SEND_SEND6_Pos (6UL)         /*!< Position of SEND6 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND6_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND6_Pos) /*!< Bit mask of SEND6 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND6_Min (0x0UL)       /*!< Min enumerator value of SEND6 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND6_Max (0x1UL)       /*!< Max enumerator value of SEND6 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND6_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND6_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND7 @Bit 7 : The status for tasks overflow at SUBSCRIBE_SEND[7]. */
  #define PPIB_OVERFLOW_SEND_SEND7_Pos (7UL)         /*!< Position of SEND7 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND7_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND7_Pos) /*!< Bit mask of SEND7 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND7_Min (0x0UL)       /*!< Min enumerator value of SEND7 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND7_Max (0x1UL)       /*!< Max enumerator value of SEND7 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND7_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND7_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND8 @Bit 8 : The status for tasks overflow at SUBSCRIBE_SEND[8]. */
  #define PPIB_OVERFLOW_SEND_SEND8_Pos (8UL)         /*!< Position of SEND8 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND8_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND8_Pos) /*!< Bit mask of SEND8 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND8_Min (0x0UL)       /*!< Min enumerator value of SEND8 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND8_Max (0x1UL)       /*!< Max enumerator value of SEND8 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND8_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND8_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND9 @Bit 9 : The status for tasks overflow at SUBSCRIBE_SEND[9]. */
  #define PPIB_OVERFLOW_SEND_SEND9_Pos (9UL)         /*!< Position of SEND9 field.                                             */
  #define PPIB_OVERFLOW_SEND_SEND9_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND9_Pos) /*!< Bit mask of SEND9 field.                   */
  #define PPIB_OVERFLOW_SEND_SEND9_Min (0x0UL)       /*!< Min enumerator value of SEND9 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND9_Max (0x1UL)       /*!< Max enumerator value of SEND9 field.                                 */
  #define PPIB_OVERFLOW_SEND_SEND9_Overflow (0x1UL)  /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND9_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                      */

/* SEND10 @Bit 10 : The status for tasks overflow at SUBSCRIBE_SEND[10]. */
  #define PPIB_OVERFLOW_SEND_SEND10_Pos (10UL)       /*!< Position of SEND10 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND10_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND10_Pos) /*!< Bit mask of SEND10 field.                */
  #define PPIB_OVERFLOW_SEND_SEND10_Min (0x0UL)      /*!< Min enumerator value of SEND10 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND10_Max (0x1UL)      /*!< Max enumerator value of SEND10 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND10_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND10_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND11 @Bit 11 : The status for tasks overflow at SUBSCRIBE_SEND[11]. */
  #define PPIB_OVERFLOW_SEND_SEND11_Pos (11UL)       /*!< Position of SEND11 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND11_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND11_Pos) /*!< Bit mask of SEND11 field.                */
  #define PPIB_OVERFLOW_SEND_SEND11_Min (0x0UL)      /*!< Min enumerator value of SEND11 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND11_Max (0x1UL)      /*!< Max enumerator value of SEND11 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND11_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND11_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND12 @Bit 12 : The status for tasks overflow at SUBSCRIBE_SEND[12]. */
  #define PPIB_OVERFLOW_SEND_SEND12_Pos (12UL)       /*!< Position of SEND12 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND12_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND12_Pos) /*!< Bit mask of SEND12 field.                */
  #define PPIB_OVERFLOW_SEND_SEND12_Min (0x0UL)      /*!< Min enumerator value of SEND12 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND12_Max (0x1UL)      /*!< Max enumerator value of SEND12 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND12_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND12_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND13 @Bit 13 : The status for tasks overflow at SUBSCRIBE_SEND[13]. */
  #define PPIB_OVERFLOW_SEND_SEND13_Pos (13UL)       /*!< Position of SEND13 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND13_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND13_Pos) /*!< Bit mask of SEND13 field.                */
  #define PPIB_OVERFLOW_SEND_SEND13_Min (0x0UL)      /*!< Min enumerator value of SEND13 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND13_Max (0x1UL)      /*!< Max enumerator value of SEND13 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND13_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND13_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND14 @Bit 14 : The status for tasks overflow at SUBSCRIBE_SEND[14]. */
  #define PPIB_OVERFLOW_SEND_SEND14_Pos (14UL)       /*!< Position of SEND14 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND14_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND14_Pos) /*!< Bit mask of SEND14 field.                */
  #define PPIB_OVERFLOW_SEND_SEND14_Min (0x0UL)      /*!< Min enumerator value of SEND14 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND14_Max (0x1UL)      /*!< Max enumerator value of SEND14 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND14_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND14_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND15 @Bit 15 : The status for tasks overflow at SUBSCRIBE_SEND[15]. */
  #define PPIB_OVERFLOW_SEND_SEND15_Pos (15UL)       /*!< Position of SEND15 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND15_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND15_Pos) /*!< Bit mask of SEND15 field.                */
  #define PPIB_OVERFLOW_SEND_SEND15_Min (0x0UL)      /*!< Min enumerator value of SEND15 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND15_Max (0x1UL)      /*!< Max enumerator value of SEND15 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND15_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND15_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND16 @Bit 16 : The status for tasks overflow at SUBSCRIBE_SEND[16]. */
  #define PPIB_OVERFLOW_SEND_SEND16_Pos (16UL)       /*!< Position of SEND16 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND16_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND16_Pos) /*!< Bit mask of SEND16 field.                */
  #define PPIB_OVERFLOW_SEND_SEND16_Min (0x0UL)      /*!< Min enumerator value of SEND16 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND16_Max (0x1UL)      /*!< Max enumerator value of SEND16 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND16_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND16_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND17 @Bit 17 : The status for tasks overflow at SUBSCRIBE_SEND[17]. */
  #define PPIB_OVERFLOW_SEND_SEND17_Pos (17UL)       /*!< Position of SEND17 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND17_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND17_Pos) /*!< Bit mask of SEND17 field.                */
  #define PPIB_OVERFLOW_SEND_SEND17_Min (0x0UL)      /*!< Min enumerator value of SEND17 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND17_Max (0x1UL)      /*!< Max enumerator value of SEND17 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND17_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND17_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND18 @Bit 18 : The status for tasks overflow at SUBSCRIBE_SEND[18]. */
  #define PPIB_OVERFLOW_SEND_SEND18_Pos (18UL)       /*!< Position of SEND18 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND18_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND18_Pos) /*!< Bit mask of SEND18 field.                */
  #define PPIB_OVERFLOW_SEND_SEND18_Min (0x0UL)      /*!< Min enumerator value of SEND18 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND18_Max (0x1UL)      /*!< Max enumerator value of SEND18 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND18_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND18_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND19 @Bit 19 : The status for tasks overflow at SUBSCRIBE_SEND[19]. */
  #define PPIB_OVERFLOW_SEND_SEND19_Pos (19UL)       /*!< Position of SEND19 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND19_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND19_Pos) /*!< Bit mask of SEND19 field.                */
  #define PPIB_OVERFLOW_SEND_SEND19_Min (0x0UL)      /*!< Min enumerator value of SEND19 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND19_Max (0x1UL)      /*!< Max enumerator value of SEND19 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND19_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND19_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND20 @Bit 20 : The status for tasks overflow at SUBSCRIBE_SEND[20]. */
  #define PPIB_OVERFLOW_SEND_SEND20_Pos (20UL)       /*!< Position of SEND20 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND20_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND20_Pos) /*!< Bit mask of SEND20 field.                */
  #define PPIB_OVERFLOW_SEND_SEND20_Min (0x0UL)      /*!< Min enumerator value of SEND20 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND20_Max (0x1UL)      /*!< Max enumerator value of SEND20 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND20_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND20_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND21 @Bit 21 : The status for tasks overflow at SUBSCRIBE_SEND[21]. */
  #define PPIB_OVERFLOW_SEND_SEND21_Pos (21UL)       /*!< Position of SEND21 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND21_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND21_Pos) /*!< Bit mask of SEND21 field.                */
  #define PPIB_OVERFLOW_SEND_SEND21_Min (0x0UL)      /*!< Min enumerator value of SEND21 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND21_Max (0x1UL)      /*!< Max enumerator value of SEND21 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND21_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND21_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND22 @Bit 22 : The status for tasks overflow at SUBSCRIBE_SEND[22]. */
  #define PPIB_OVERFLOW_SEND_SEND22_Pos (22UL)       /*!< Position of SEND22 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND22_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND22_Pos) /*!< Bit mask of SEND22 field.                */
  #define PPIB_OVERFLOW_SEND_SEND22_Min (0x0UL)      /*!< Min enumerator value of SEND22 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND22_Max (0x1UL)      /*!< Max enumerator value of SEND22 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND22_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND22_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND23 @Bit 23 : The status for tasks overflow at SUBSCRIBE_SEND[23]. */
  #define PPIB_OVERFLOW_SEND_SEND23_Pos (23UL)       /*!< Position of SEND23 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND23_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND23_Pos) /*!< Bit mask of SEND23 field.                */
  #define PPIB_OVERFLOW_SEND_SEND23_Min (0x0UL)      /*!< Min enumerator value of SEND23 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND23_Max (0x1UL)      /*!< Max enumerator value of SEND23 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND23_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND23_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND24 @Bit 24 : The status for tasks overflow at SUBSCRIBE_SEND[24]. */
  #define PPIB_OVERFLOW_SEND_SEND24_Pos (24UL)       /*!< Position of SEND24 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND24_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND24_Pos) /*!< Bit mask of SEND24 field.                */
  #define PPIB_OVERFLOW_SEND_SEND24_Min (0x0UL)      /*!< Min enumerator value of SEND24 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND24_Max (0x1UL)      /*!< Max enumerator value of SEND24 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND24_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND24_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND25 @Bit 25 : The status for tasks overflow at SUBSCRIBE_SEND[25]. */
  #define PPIB_OVERFLOW_SEND_SEND25_Pos (25UL)       /*!< Position of SEND25 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND25_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND25_Pos) /*!< Bit mask of SEND25 field.                */
  #define PPIB_OVERFLOW_SEND_SEND25_Min (0x0UL)      /*!< Min enumerator value of SEND25 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND25_Max (0x1UL)      /*!< Max enumerator value of SEND25 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND25_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND25_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND26 @Bit 26 : The status for tasks overflow at SUBSCRIBE_SEND[26]. */
  #define PPIB_OVERFLOW_SEND_SEND26_Pos (26UL)       /*!< Position of SEND26 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND26_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND26_Pos) /*!< Bit mask of SEND26 field.                */
  #define PPIB_OVERFLOW_SEND_SEND26_Min (0x0UL)      /*!< Min enumerator value of SEND26 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND26_Max (0x1UL)      /*!< Max enumerator value of SEND26 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND26_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND26_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND27 @Bit 27 : The status for tasks overflow at SUBSCRIBE_SEND[27]. */
  #define PPIB_OVERFLOW_SEND_SEND27_Pos (27UL)       /*!< Position of SEND27 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND27_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND27_Pos) /*!< Bit mask of SEND27 field.                */
  #define PPIB_OVERFLOW_SEND_SEND27_Min (0x0UL)      /*!< Min enumerator value of SEND27 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND27_Max (0x1UL)      /*!< Max enumerator value of SEND27 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND27_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND27_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND28 @Bit 28 : The status for tasks overflow at SUBSCRIBE_SEND[28]. */
  #define PPIB_OVERFLOW_SEND_SEND28_Pos (28UL)       /*!< Position of SEND28 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND28_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND28_Pos) /*!< Bit mask of SEND28 field.                */
  #define PPIB_OVERFLOW_SEND_SEND28_Min (0x0UL)      /*!< Min enumerator value of SEND28 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND28_Max (0x1UL)      /*!< Max enumerator value of SEND28 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND28_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND28_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND29 @Bit 29 : The status for tasks overflow at SUBSCRIBE_SEND[29]. */
  #define PPIB_OVERFLOW_SEND_SEND29_Pos (29UL)       /*!< Position of SEND29 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND29_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND29_Pos) /*!< Bit mask of SEND29 field.                */
  #define PPIB_OVERFLOW_SEND_SEND29_Min (0x0UL)      /*!< Min enumerator value of SEND29 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND29_Max (0x1UL)      /*!< Max enumerator value of SEND29 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND29_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND29_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND30 @Bit 30 : The status for tasks overflow at SUBSCRIBE_SEND[30]. */
  #define PPIB_OVERFLOW_SEND_SEND30_Pos (30UL)       /*!< Position of SEND30 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND30_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND30_Pos) /*!< Bit mask of SEND30 field.                */
  #define PPIB_OVERFLOW_SEND_SEND30_Min (0x0UL)      /*!< Min enumerator value of SEND30 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND30_Max (0x1UL)      /*!< Max enumerator value of SEND30 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND30_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND30_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */

/* SEND31 @Bit 31 : The status for tasks overflow at SUBSCRIBE_SEND[31]. */
  #define PPIB_OVERFLOW_SEND_SEND31_Pos (31UL)       /*!< Position of SEND31 field.                                            */
  #define PPIB_OVERFLOW_SEND_SEND31_Msk (0x1UL << PPIB_OVERFLOW_SEND_SEND31_Pos) /*!< Bit mask of SEND31 field.                */
  #define PPIB_OVERFLOW_SEND_SEND31_Min (0x0UL)      /*!< Min enumerator value of SEND31 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND31_Max (0x1UL)      /*!< Max enumerator value of SEND31 field.                                */
  #define PPIB_OVERFLOW_SEND_SEND31_Overflow (0x1UL) /*!< Task overflow is happened.                                           */
  #define PPIB_OVERFLOW_SEND_SEND31_NoOverflow (0x0UL) /*!< Task overflow is not happened.                                     */


/* ======================================================= Struct PPIB ======================================================= */
/**
  * @brief PPIB APB registers
  */
  typedef struct {                                   /*!< PPIB Structure                                                       */
    __OM uint32_t TASKS_SEND[32];                    /*!< (@ 0x00000000) This task is unused, but the PPIB provides the
                                                                         SUBSCRIBE task to connect SEND [n] task.*/
    __IOM uint32_t SUBSCRIBE_SEND[32];               /*!< (@ 0x00000080) Subscribe configuration for task SEND[n]              */
    __IOM uint32_t EVENTS_RECEIVE[32];               /*!< (@ 0x00000100) This event is unused, but the PPIB provides the PUBLISH
                                                                         event to connect RECEIVE [n] event.*/
    __IOM uint32_t PUBLISH_RECEIVE[32];              /*!< (@ 0x00000180) Publish configuration for event RECEIVE[n]            */
    __IM uint32_t RESERVED[128];
    __IOM NRF_PPIB_OVERFLOW_Type OVERFLOW;           /*!< (@ 0x00000400) (unspecified)                                         */
  } NRF_PPIB_Type;                                   /*!< Size = 1028 (0x404)                                                  */

/* PPIB_TASKS_SEND: This task is unused, but the PPIB provides the SUBSCRIBE task to connect SEND [n] task. */
  #define PPIB_TASKS_SEND_MaxCount (32UL)            /*!< Max size of TASKS_SEND[32] array.                                    */
  #define PPIB_TASKS_SEND_MaxIndex (31UL)            /*!< Max index of TASKS_SEND[32] array.                                   */
  #define PPIB_TASKS_SEND_MinIndex (0UL)             /*!< Min index of TASKS_SEND[32] array.                                   */
  #define PPIB_TASKS_SEND_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_SEND[32] register.                              */

/* TASKS_SEND @Bit 0 : This task is unused, but the PPIB provides the SUBSCRIBE task to connect SEND [n] task. */
  #define PPIB_TASKS_SEND_TASKS_SEND_Pos (0UL)       /*!< Position of TASKS_SEND field.                                        */
  #define PPIB_TASKS_SEND_TASKS_SEND_Msk (0x1UL << PPIB_TASKS_SEND_TASKS_SEND_Pos) /*!< Bit mask of TASKS_SEND field.          */
  #define PPIB_TASKS_SEND_TASKS_SEND_Min (0x1UL)     /*!< Min enumerator value of TASKS_SEND field.                            */
  #define PPIB_TASKS_SEND_TASKS_SEND_Max (0x1UL)     /*!< Max enumerator value of TASKS_SEND field.                            */
  #define PPIB_TASKS_SEND_TASKS_SEND_Trigger (0x1UL) /*!< Trigger task                                                         */


/* PPIB_SUBSCRIBE_SEND: Subscribe configuration for task SEND[n] */
  #define PPIB_SUBSCRIBE_SEND_MaxCount (32UL)        /*!< Max size of SUBSCRIBE_SEND[32] array.                                */
  #define PPIB_SUBSCRIBE_SEND_MaxIndex (31UL)        /*!< Max index of SUBSCRIBE_SEND[32] array.                               */
  #define PPIB_SUBSCRIBE_SEND_MinIndex (0UL)         /*!< Min index of SUBSCRIBE_SEND[32] array.                               */
  #define PPIB_SUBSCRIBE_SEND_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SEND[32] register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that task SEND[n] will subscribe to */
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Msk (0xFFUL << PPIB_SUBSCRIBE_SEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define PPIB_SUBSCRIBE_SEND_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PPIB_SUBSCRIBE_SEND_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define PPIB_SUBSCRIBE_SEND_EN_Msk (0x1UL << PPIB_SUBSCRIBE_SEND_EN_Pos) /*!< Bit mask of EN field.                          */
  #define PPIB_SUBSCRIBE_SEND_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define PPIB_SUBSCRIBE_SEND_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define PPIB_SUBSCRIBE_SEND_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define PPIB_SUBSCRIBE_SEND_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* PPIB_EVENTS_RECEIVE: This event is unused, but the PPIB provides the PUBLISH event to connect RECEIVE [n] event. */
  #define PPIB_EVENTS_RECEIVE_MaxCount (32UL)        /*!< Max size of EVENTS_RECEIVE[32] array.                                */
  #define PPIB_EVENTS_RECEIVE_MaxIndex (31UL)        /*!< Max index of EVENTS_RECEIVE[32] array.                               */
  #define PPIB_EVENTS_RECEIVE_MinIndex (0UL)         /*!< Min index of EVENTS_RECEIVE[32] array.                               */
  #define PPIB_EVENTS_RECEIVE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RECEIVE[32] register.                       */

/* EVENTS_RECEIVE @Bit 0 : This event is unused, but the PPIB provides the PUBLISH event to connect RECEIVE [n] event. */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos (0UL) /*!< Position of EVENTS_RECEIVE field.                                  */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Msk (0x1UL << PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos) /*!< Bit mask of
                                                                            EVENTS_RECEIVE field.*/
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Min (0x0UL) /*!< Min enumerator value of EVENTS_RECEIVE field.                    */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Max (0x1UL) /*!< Max enumerator value of EVENTS_RECEIVE field.                    */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define PPIB_EVENTS_RECEIVE_EVENTS_RECEIVE_Generated (0x1UL) /*!< Event generated                                            */


/* PPIB_PUBLISH_RECEIVE: Publish configuration for event RECEIVE[n] */
  #define PPIB_PUBLISH_RECEIVE_MaxCount (32UL)       /*!< Max size of PUBLISH_RECEIVE[32] array.                               */
  #define PPIB_PUBLISH_RECEIVE_MaxIndex (31UL)       /*!< Max index of PUBLISH_RECEIVE[32] array.                              */
  #define PPIB_PUBLISH_RECEIVE_MinIndex (0UL)        /*!< Min index of PUBLISH_RECEIVE[32] array.                              */
  #define PPIB_PUBLISH_RECEIVE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RECEIVE[32] register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that event RECEIVE[n] will publish to */
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Msk (0xFFUL << PPIB_PUBLISH_RECEIVE_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define PPIB_PUBLISH_RECEIVE_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PPIB_PUBLISH_RECEIVE_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define PPIB_PUBLISH_RECEIVE_EN_Msk (0x1UL << PPIB_PUBLISH_RECEIVE_EN_Pos) /*!< Bit mask of EN field.                        */
  #define PPIB_PUBLISH_RECEIVE_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define PPIB_PUBLISH_RECEIVE_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define PPIB_PUBLISH_RECEIVE_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define PPIB_PUBLISH_RECEIVE_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            PWM                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct PWM_TASKS_DMA_SEQ ================================================= */
/**
  * @brief SEQ [PWM_TASKS_DMA_SEQ] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_PWM_TASKS_DMA_SEQ_Type;                        /*!< Size = 8 (0x008)                                                     */
  #define PWM_TASKS_DMA_SEQ_MaxCount (2UL)           /*!< Size of SEQ[2] array.                                                */
  #define PWM_TASKS_DMA_SEQ_MaxIndex (1UL)           /*!< Max index of SEQ[2] array.                                           */
  #define PWM_TASKS_DMA_SEQ_MinIndex (0UL)           /*!< Min index of SEQ[2] array.                                           */

/* PWM_TASKS_DMA_SEQ_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define PWM_TASKS_DMA_SEQ_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                                */

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define PWM_TASKS_DMA_SEQ_START_START_Pos (0UL)    /*!< Position of START field.                                             */
  #define PWM_TASKS_DMA_SEQ_START_START_Msk (0x1UL << PWM_TASKS_DMA_SEQ_START_START_Pos) /*!< Bit mask of START field.         */
  #define PWM_TASKS_DMA_SEQ_START_START_Min (0x1UL)  /*!< Min enumerator value of START field.                                 */
  #define PWM_TASKS_DMA_SEQ_START_START_Max (0x1UL)  /*!< Max enumerator value of START field.                                 */
  #define PWM_TASKS_DMA_SEQ_START_START_Trigger (0x1UL) /*!< Trigger task                                                      */


/* PWM_TASKS_DMA_SEQ_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define PWM_TASKS_DMA_SEQ_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                                  */

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Pos (0UL)      /*!< Position of STOP field.                                              */
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Msk (0x1UL << PWM_TASKS_DMA_SEQ_STOP_STOP_Pos) /*!< Bit mask of STOP field.              */
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Min (0x1UL)    /*!< Min enumerator value of STOP field.                                  */
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Max (0x1UL)    /*!< Max enumerator value of STOP field.                                  */
  #define PWM_TASKS_DMA_SEQ_STOP_STOP_Trigger (0x1UL) /*!< Trigger task                                                        */



/* ================================================== Struct PWM_TASKS_DMA =================================================== */
/**
  * @brief TASKS_DMA [PWM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_PWM_TASKS_DMA_SEQ_Type SEQ[2];           /*!< (@ 0x00000000) Peripheral tasks.                                     */
} NRF_PWM_TASKS_DMA_Type;                            /*!< Size = 16 (0x010)                                                    */


/* ============================================== Struct PWM_SUBSCRIBE_DMA_SEQ =============================================== */
/**
  * @brief SEQ [PWM_SUBSCRIBE_DMA_SEQ] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;                             /*!< (@ 0x00000000) Subscribe configuration for task START                */
  __IOM uint32_t  STOP;                              /*!< (@ 0x00000004) Subscribe configuration for task STOP                 */
} NRF_PWM_SUBSCRIBE_DMA_SEQ_Type;                    /*!< Size = 8 (0x008)                                                     */
  #define PWM_SUBSCRIBE_DMA_SEQ_MaxCount (2UL)       /*!< Size of SEQ[2] array.                                                */
  #define PWM_SUBSCRIBE_DMA_SEQ_MaxIndex (1UL)       /*!< Max index of SEQ[2] array.                                           */
  #define PWM_SUBSCRIBE_DMA_SEQ_MinIndex (0UL)       /*!< Min index of SEQ[2] array.                                           */

/* PWM_SUBSCRIBE_DMA_SEQ_START: Subscribe configuration for task START */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Msk (0x1UL << PWM_SUBSCRIBE_DMA_SEQ_START_EN_Pos) /*!< Bit mask of EN field.          */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define PWM_SUBSCRIBE_DMA_SEQ_START_EN_Enabled (0x1UL) /*!< Enable subscription                                              */


/* PWM_SUBSCRIBE_DMA_SEQ_STOP: Subscribe configuration for task STOP */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Msk (0x1UL << PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Pos) /*!< Bit mask of EN field.            */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Disabled (0x0UL) /*!< Disable subscription                                             */
  #define PWM_SUBSCRIBE_DMA_SEQ_STOP_EN_Enabled (0x1UL) /*!< Enable subscription                                               */



/* ================================================ Struct PWM_SUBSCRIBE_DMA ================================================= */
/**
  * @brief SUBSCRIBE_DMA [PWM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_PWM_SUBSCRIBE_DMA_SEQ_Type SEQ[2];       /*!< (@ 0x00000000) Subscribe configuration for tasks                     */
} NRF_PWM_SUBSCRIBE_DMA_Type;                        /*!< Size = 16 (0x010)                                                    */


/* ================================================ Struct PWM_EVENTS_DMA_SEQ ================================================ */
/**
  * @brief SEQ [PWM_EVENTS_DMA_SEQ] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
} NRF_PWM_EVENTS_DMA_SEQ_Type;                       /*!< Size = 12 (0x00C)                                                    */
  #define PWM_EVENTS_DMA_SEQ_MaxCount (2UL)          /*!< Size of SEQ[2] array.                                                */
  #define PWM_EVENTS_DMA_SEQ_MaxIndex (1UL)          /*!< Max index of SEQ[2] array.                                           */
  #define PWM_EVENTS_DMA_SEQ_MinIndex (0UL)          /*!< Min index of SEQ[2] array.                                           */

/* PWM_EVENTS_DMA_SEQ_END: Generated after all MAXCNT bytes have been transferred */
  #define PWM_EVENTS_DMA_SEQ_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define PWM_EVENTS_DMA_SEQ_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define PWM_EVENTS_DMA_SEQ_END_END_Msk (0x1UL << PWM_EVENTS_DMA_SEQ_END_END_Pos) /*!< Bit mask of END field.                 */
  #define PWM_EVENTS_DMA_SEQ_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define PWM_EVENTS_DMA_SEQ_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define PWM_EVENTS_DMA_SEQ_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define PWM_EVENTS_DMA_SEQ_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* PWM_EVENTS_DMA_SEQ_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define PWM_EVENTS_DMA_SEQ_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define PWM_EVENTS_DMA_SEQ_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Msk (0x1UL << PWM_EVENTS_DMA_SEQ_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define PWM_EVENTS_DMA_SEQ_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define PWM_EVENTS_DMA_SEQ_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* PWM_EVENTS_DMA_SEQ_BUSERROR: An error occured during the bus transfer. */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Msk (0x1UL << PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define PWM_EVENTS_DMA_SEQ_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */



/* ================================================== Struct PWM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [PWM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_PWM_EVENTS_DMA_SEQ_Type SEQ[2];          /*!< (@ 0x00000000) Peripheral events.                                    */
} NRF_PWM_EVENTS_DMA_Type;                           /*!< Size = 24 (0x018)                                                    */


/* =============================================== Struct PWM_PUBLISH_DMA_SEQ ================================================ */
/**
  * @brief SEQ [PWM_PUBLISH_DMA_SEQ] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
} NRF_PWM_PUBLISH_DMA_SEQ_Type;                      /*!< Size = 12 (0x00C)                                                    */
  #define PWM_PUBLISH_DMA_SEQ_MaxCount (2UL)         /*!< Size of SEQ[2] array.                                                */
  #define PWM_PUBLISH_DMA_SEQ_MaxIndex (1UL)         /*!< Max index of SEQ[2] array.                                           */
  #define PWM_PUBLISH_DMA_SEQ_MinIndex (0UL)         /*!< Min index of SEQ[2] array.                                           */

/* PWM_PUBLISH_DMA_SEQ_END: Publish configuration for event END */
  #define PWM_PUBLISH_DMA_SEQ_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMA_SEQ_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define PWM_PUBLISH_DMA_SEQ_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Msk (0x1UL << PWM_PUBLISH_DMA_SEQ_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define PWM_PUBLISH_DMA_SEQ_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* PWM_PUBLISH_DMA_SEQ_READY: Publish configuration for event READY */
  #define PWM_PUBLISH_DMA_SEQ_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define PWM_PUBLISH_DMA_SEQ_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Msk (0x1UL << PWM_PUBLISH_DMA_SEQ_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define PWM_PUBLISH_DMA_SEQ_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* PWM_PUBLISH_DMA_SEQ_BUSERROR: Publish configuration for event BUSERROR */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Msk (0x1UL << PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define PWM_PUBLISH_DMA_SEQ_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */



/* ================================================= Struct PWM_PUBLISH_DMA ================================================== */
/**
  * @brief PUBLISH_DMA [PWM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_PWM_PUBLISH_DMA_SEQ_Type SEQ[2];         /*!< (@ 0x00000000) Publish configuration for events                      */
} NRF_PWM_PUBLISH_DMA_Type;                          /*!< Size = 24 (0x018)                                                    */


/* ===================================================== Struct PWM_SEQ ====================================================== */
/**
  * @brief SEQ [PWM_SEQ] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  REFRESH;                           /*!< (@ 0x00000008) Number of additional PWM periods between samples loaded
                                                                         into compare register*/
  __IOM uint32_t  ENDDELAY;                          /*!< (@ 0x0000000C) Time added after the sequence                         */
  __IM  uint32_t  RESERVED1[4];
} NRF_PWM_SEQ_Type;                                  /*!< Size = 32 (0x020)                                                    */
  #define PWM_SEQ_MaxCount (2UL)                     /*!< Size of SEQ[2] array.                                                */
  #define PWM_SEQ_MaxIndex (1UL)                     /*!< Max index of SEQ[2] array.                                           */
  #define PWM_SEQ_MinIndex (0UL)                     /*!< Min index of SEQ[2] array.                                           */

/* PWM_SEQ_REFRESH: Number of additional PWM periods between samples loaded into compare register */
  #define PWM_SEQ_REFRESH_ResetValue (0x00000001UL)  /*!< Reset value of REFRESH register.                                     */

/* CNT @Bits 0..23 : Number of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM
                     periods) */

  #define PWM_SEQ_REFRESH_CNT_Pos (0UL)              /*!< Position of CNT field.                                               */
  #define PWM_SEQ_REFRESH_CNT_Msk (0xFFFFFFUL << PWM_SEQ_REFRESH_CNT_Pos) /*!< Bit mask of CNT field.                          */
  #define PWM_SEQ_REFRESH_CNT_Min (0x0UL)            /*!< Min enumerator value of CNT field.                                   */
  #define PWM_SEQ_REFRESH_CNT_Max (0x0UL)            /*!< Max enumerator value of CNT field.                                   */
  #define PWM_SEQ_REFRESH_CNT_Continuous (0x000000UL) /*!< Update every PWM period                                             */


/* PWM_SEQ_ENDDELAY: Time added after the sequence */
  #define PWM_SEQ_ENDDELAY_ResetValue (0x00000000UL) /*!< Reset value of ENDDELAY register.                                    */

/* CNT @Bits 0..23 : Time added after the sequence in PWM periods */
  #define PWM_SEQ_ENDDELAY_CNT_Pos (0UL)             /*!< Position of CNT field.                                               */
  #define PWM_SEQ_ENDDELAY_CNT_Msk (0xFFFFFFUL << PWM_SEQ_ENDDELAY_CNT_Pos) /*!< Bit mask of CNT field.                        */



/* ===================================================== Struct PWM_PSEL ===================================================== */
/**
  * @brief PSEL [PWM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  OUT[4];                            /*!< (@ 0x00000000) Output pin select for PWM channel n                   */
} NRF_PWM_PSEL_Type;                                 /*!< Size = 16 (0x010)                                                    */

/* PWM_PSEL_OUT: Output pin select for PWM channel n */
  #define PWM_PSEL_OUT_MaxCount (4UL)                /*!< Max size of OUT[4] array.                                            */
  #define PWM_PSEL_OUT_MaxIndex (3UL)                /*!< Max index of OUT[4] array.                                           */
  #define PWM_PSEL_OUT_MinIndex (0UL)                /*!< Min index of OUT[4] array.                                           */
  #define PWM_PSEL_OUT_ResetValue (0xFFFFFFFFUL)     /*!< Reset value of OUT[4] register.                                      */

/* PIN @Bits 0..4 : Pin number */
  #define PWM_PSEL_OUT_PIN_Pos (0UL)                 /*!< Position of PIN field.                                               */
  #define PWM_PSEL_OUT_PIN_Msk (0x1FUL << PWM_PSEL_OUT_PIN_Pos) /*!< Bit mask of PIN field.                                    */
  #define PWM_PSEL_OUT_PIN_Min (0x00UL)              /*!< Min value of PIN field.                                              */
  #define PWM_PSEL_OUT_PIN_Max (0x1FUL)              /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define PWM_PSEL_OUT_PORT_Pos (5UL)                /*!< Position of PORT field.                                              */
  #define PWM_PSEL_OUT_PORT_Msk (0x7UL << PWM_PSEL_OUT_PORT_Pos) /*!< Bit mask of PORT field.                                  */
  #define PWM_PSEL_OUT_PORT_Min (0x0UL)              /*!< Min value of PORT field.                                             */
  #define PWM_PSEL_OUT_PORT_Max (0x7UL)              /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define PWM_PSEL_OUT_CONNECT_Pos (31UL)            /*!< Position of CONNECT field.                                           */
  #define PWM_PSEL_OUT_CONNECT_Msk (0x1UL << PWM_PSEL_OUT_CONNECT_Pos) /*!< Bit mask of CONNECT field.                         */
  #define PWM_PSEL_OUT_CONNECT_Min (0x0UL)           /*!< Min enumerator value of CONNECT field.                               */
  #define PWM_PSEL_OUT_CONNECT_Max (0x1UL)           /*!< Max enumerator value of CONNECT field.                               */
  #define PWM_PSEL_OUT_CONNECT_Disconnected (0x1UL)  /*!< Disconnect                                                           */
  #define PWM_PSEL_OUT_CONNECT_Connected (0x0UL)     /*!< Connect                                                              */



/* =================================================== Struct PWM_DMA_SEQ ==================================================== */
/**
  * @brief SEQ [PWM_DMA_SEQ] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event.*/
  __IM  uint32_t  CURRENTAMOUNT;                     /*!< (@ 0x00000010) Number of bytes transferred in the current transaction*/
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_PWM_DMA_SEQ_Type;                              /*!< Size = 36 (0x024)                                                    */
  #define PWM_DMA_SEQ_MaxCount (2UL)                 /*!< Size of SEQ[2] array.                                                */
  #define PWM_DMA_SEQ_MaxIndex (1UL)                 /*!< Max index of SEQ[2] array.                                           */
  #define PWM_DMA_SEQ_MinIndex (0UL)                 /*!< Min index of SEQ[2] array.                                           */

/* PWM_DMA_SEQ_PTR: RAM buffer start address */
  #define PWM_DMA_SEQ_PTR_ResetValue (0x00000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define PWM_DMA_SEQ_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define PWM_DMA_SEQ_PTR_PTR_Msk (0xFFFFFFFFUL << PWM_DMA_SEQ_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* PWM_DMA_SEQ_MAXCNT: Maximum number of bytes in channel buffer */
  #define PWM_DMA_SEQ_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..14 : Maximum number of bytes in channel buffer */
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Msk (0x7FFFUL << PWM_DMA_SEQ_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define PWM_DMA_SEQ_MAXCNT_MAXCNT_Max (0x7FFFUL)   /*!< Max size of MAXCNT field.                                            */


/* PWM_DMA_SEQ_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. */
  #define PWM_DMA_SEQ_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..14 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Msk (0x7FFFUL << PWM_DMA_SEQ_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define PWM_DMA_SEQ_AMOUNT_AMOUNT_Max (0x7FFFUL)   /*!< Max size of AMOUNT field.                                            */


/* PWM_DMA_SEQ_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define PWM_DMA_SEQ_CURRENTAMOUNT_ResetValue (0x00000000UL) /*!< Reset value of CURRENTAMOUNT register.                      */

/* AMOUNT @Bits 0..14 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field.                                            */
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Msk (0x7FFFUL << PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT
                                                                            field.*/
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Min (0x0001UL) /*!< Min value of AMOUNT field.                                      */
  #define PWM_DMA_SEQ_CURRENTAMOUNT_AMOUNT_Max (0x7FFFUL) /*!< Max size of AMOUNT field.                                       */


/* PWM_DMA_SEQ_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define PWM_DMA_SEQ_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* PWM_DMA_SEQ_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define PWM_DMA_SEQ_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define PWM_DMA_SEQ_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define PWM_DMA_SEQ_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << PWM_DMA_SEQ_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct PWM_DMA ====================================================== */
/**
  * @brief DMA [PWM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_PWM_DMA_SEQ_Type SEQ[2];                 /*!< (@ 0x00000000) (unspecified)                                         */
} NRF_PWM_DMA_Type;                                  /*!< Size = 72 (0x048)                                                    */

/* ======================================================= Struct PWM ======================================================== */
/**
  * @brief Pulse width modulation unit
  */
  typedef struct {                                   /*!< PWM Structure                                                        */
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stops PWM pulse generation on all channels at the end
                                                                         of current PWM period, and stops sequence playback*/
    __OM uint32_t TASKS_NEXTSTEP;                    /*!< (@ 0x00000008) Steps by one value in the current sequence on all
                                                                         enabled channels if DECODER.MODE=NextStep. Does not
                                                                         cause PWM generation to start if not running.*/
    __IM uint32_t RESERVED1;
    __OM NRF_PWM_TASKS_DMA_Type TASKS_DMA;           /*!< (@ 0x00000010) Peripheral tasks.                                     */
    __IM uint32_t RESERVED2[25];
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IOM uint32_t SUBSCRIBE_NEXTSTEP;               /*!< (@ 0x00000088) Subscribe configuration for task NEXTSTEP             */
    __IM uint32_t RESERVED3;
    __IOM NRF_PWM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA;  /*!< (@ 0x00000090) Subscribe configuration for tasks                     */
    __IM uint32_t RESERVED4[25];
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000104) Response to STOP task, emitted when PWM pulses are no
                                                                         longer generated*/
    __IOM uint32_t EVENTS_SEQSTARTED[2];             /*!< (@ 0x00000108) First PWM period started on sequence n                */
    __IOM uint32_t EVENTS_SEQEND[2];                 /*!< (@ 0x00000110) Emitted at end of every sequence n, when last value
                                                                         from RAM has been applied to wave counter*/
    __IOM uint32_t EVENTS_PWMPERIODEND;              /*!< (@ 0x00000118) Emitted at the end of each PWM period                 */
    __IOM uint32_t EVENTS_LOOPSDONE;                 /*!< (@ 0x0000011C) Concatenated sequences have been played the amount of
                                                                         times defined in LOOP.CNT*/
    __IOM uint32_t EVENTS_RAMUNDERFLOW;              /*!< (@ 0x00000120) Emitted when retrieving from RAM does not complete in
                                                                         time for the PWM module*/
    __IOM NRF_PWM_EVENTS_DMA_Type EVENTS_DMA;        /*!< (@ 0x00000124) Peripheral events.                                    */
    __IOM uint32_t EVENTS_COMPAREMATCH[4];           /*!< (@ 0x0000013C) This event is generated when the compare matches for
                                                                         the compare channel [n].*/
    __IM uint32_t RESERVED5[14];
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000184) Publish configuration for event STOPPED               */
    __IOM uint32_t PUBLISH_SEQSTARTED[2];            /*!< (@ 0x00000188) Publish configuration for event SEQSTARTED[n]         */
    __IOM uint32_t PUBLISH_SEQEND[2];                /*!< (@ 0x00000190) Publish configuration for event SEQEND[n]             */
    __IOM uint32_t PUBLISH_PWMPERIODEND;             /*!< (@ 0x00000198) Publish configuration for event PWMPERIODEND          */
    __IOM uint32_t PUBLISH_LOOPSDONE;                /*!< (@ 0x0000019C) Publish configuration for event LOOPSDONE             */
    __IOM uint32_t PUBLISH_RAMUNDERFLOW;             /*!< (@ 0x000001A0) Publish configuration for event RAMUNDERFLOW          */
    __IOM NRF_PWM_PUBLISH_DMA_Type PUBLISH_DMA;      /*!< (@ 0x000001A4) Publish configuration for events                      */
    __IOM uint32_t PUBLISH_COMPAREMATCH[4];          /*!< (@ 0x000001BC) Publish configuration for event COMPAREMATCH[n]       */
    __IM uint32_t RESERVED6[13];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED7[63];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND;                           /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IM uint32_t RESERVED8[124];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) PWM module enable register                            */
    __IOM uint32_t MODE;                             /*!< (@ 0x00000504) Selects operating mode of the wave counter            */
    __IOM uint32_t COUNTERTOP;                       /*!< (@ 0x00000508) Value up to which the pulse generator counter counts  */
    __IOM uint32_t PRESCALER;                        /*!< (@ 0x0000050C) Configuration for PWM_CLK                             */
    __IOM uint32_t DECODER;                          /*!< (@ 0x00000510) Configuration of the decoder                          */
    __IOM uint32_t LOOP;                             /*!< (@ 0x00000514) Number of playbacks of a loop                         */
    __IOM uint32_t IDLEOUT;                          /*!< (@ 0x00000518) Configure the output value on the PWM channel during
                                                                         idle*/
    __IM uint32_t RESERVED9;
    __IOM NRF_PWM_SEQ_Type SEQ[2];                   /*!< (@ 0x00000520) (unspecified)                                         */
    __IOM NRF_PWM_PSEL_Type PSEL;                    /*!< (@ 0x00000560) (unspecified)                                         */
    __IM uint32_t RESERVED10[100];
    __IOM NRF_PWM_DMA_Type DMA;                      /*!< (@ 0x00000700) (unspecified)                                         */
  } NRF_PWM_Type;                                    /*!< Size = 1864 (0x748)                                                  */

/* PWM_TASKS_STOP: Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback */
  #define PWM_TASKS_STOP_ResetValue (0x00000000UL)   /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback
                       */

  #define PWM_TASKS_STOP_TASKS_STOP_Pos (0UL)        /*!< Position of TASKS_STOP field.                                        */
  #define PWM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << PWM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.            */
  #define PWM_TASKS_STOP_TASKS_STOP_Min (0x1UL)      /*!< Min enumerator value of TASKS_STOP field.                            */
  #define PWM_TASKS_STOP_TASKS_STOP_Max (0x1UL)      /*!< Max enumerator value of TASKS_STOP field.                            */
  #define PWM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)  /*!< Trigger task                                                         */


/* PWM_TASKS_NEXTSTEP: Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not
                        cause PWM generation to start if not running. */

  #define PWM_TASKS_NEXTSTEP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_NEXTSTEP register.                            */

/* TASKS_NEXTSTEP @Bit 0 : Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not
                           cause PWM generation to start if not running. */

  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos (0UL) /*!< Position of TASKS_NEXTSTEP field.                                   */
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Msk (0x1UL << PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos) /*!< Bit mask of TASKS_NEXTSTEP
                                                                            field.*/
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Min (0x1UL) /*!< Min enumerator value of TASKS_NEXTSTEP field.                     */
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Max (0x1UL) /*!< Max enumerator value of TASKS_NEXTSTEP field.                     */
  #define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Trigger (0x1UL) /*!< Trigger task                                                  */


/* PWM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define PWM_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define PWM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define PWM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define PWM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define PWM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_STOP_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define PWM_SUBSCRIBE_STOP_EN_Msk (0x1UL << PWM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                            */
  #define PWM_SUBSCRIBE_STOP_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_STOP_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)     /*!< Disable subscription                                                 */
  #define PWM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)      /*!< Enable subscription                                                  */


/* PWM_SUBSCRIBE_NEXTSTEP: Subscribe configuration for task NEXTSTEP */
  #define PWM_SUBSCRIBE_NEXTSTEP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_NEXTSTEP register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task NEXTSTEP will subscribe to */
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Msk (0x1UL << PWM_SUBSCRIBE_NEXTSTEP_EN_Pos) /*!< Bit mask of EN field.                    */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define PWM_SUBSCRIBE_NEXTSTEP_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* PWM_EVENTS_STOPPED: Response to STOP task, emitted when PWM pulses are no longer generated */
  #define PWM_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                            */

/* EVENTS_STOPPED @Bit 0 : Response to STOP task, emitted when PWM pulses are no longer generated */
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                   */
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                     */
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                     */
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                             */


/* PWM_EVENTS_SEQSTARTED: First PWM period started on sequence n */
  #define PWM_EVENTS_SEQSTARTED_MaxCount (2UL)       /*!< Max size of EVENTS_SEQSTARTED[2] array.                              */
  #define PWM_EVENTS_SEQSTARTED_MaxIndex (1UL)       /*!< Max index of EVENTS_SEQSTARTED[2] array.                             */
  #define PWM_EVENTS_SEQSTARTED_MinIndex (0UL)       /*!< Min index of EVENTS_SEQSTARTED[2] array.                             */
  #define PWM_EVENTS_SEQSTARTED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SEQSTARTED[2] register.                   */

/* EVENTS_SEQSTARTED @Bit 0 : First PWM period started on sequence n */
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos (0UL) /*!< Position of EVENTS_SEQSTARTED field.                          */
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Msk (0x1UL << PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_SEQSTARTED field.*/
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_SEQSTARTED field.            */
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_SEQSTARTED field.            */
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Generated (0x1UL) /*!< Event generated                                       */


/* PWM_EVENTS_SEQEND: Emitted at end of every sequence n, when last value from RAM has been applied to wave counter */
  #define PWM_EVENTS_SEQEND_MaxCount (2UL)           /*!< Max size of EVENTS_SEQEND[2] array.                                  */
  #define PWM_EVENTS_SEQEND_MaxIndex (1UL)           /*!< Max index of EVENTS_SEQEND[2] array.                                 */
  #define PWM_EVENTS_SEQEND_MinIndex (0UL)           /*!< Min index of EVENTS_SEQEND[2] array.                                 */
  #define PWM_EVENTS_SEQEND_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SEQEND[2] register.                           */

/* EVENTS_SEQEND @Bit 0 : Emitted at end of every sequence n, when last value from RAM has been applied to wave counter */
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos (0UL)  /*!< Position of EVENTS_SEQEND field.                                     */
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Msk (0x1UL << PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos) /*!< Bit mask of EVENTS_SEQEND
                                                                            field.*/
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Min (0x0UL) /*!< Min enumerator value of EVENTS_SEQEND field.                        */
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Max (0x1UL) /*!< Max enumerator value of EVENTS_SEQEND field.                        */
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Generated (0x1UL) /*!< Event generated                                               */


/* PWM_EVENTS_PWMPERIODEND: Emitted at the end of each PWM period */
  #define PWM_EVENTS_PWMPERIODEND_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_PWMPERIODEND register.                  */

/* EVENTS_PWMPERIODEND @Bit 0 : Emitted at the end of each PWM period */
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos (0UL) /*!< Position of EVENTS_PWMPERIODEND field.                    */
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk (0x1UL << PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos) /*!< Bit
                                                                            mask of EVENTS_PWMPERIODEND field.*/
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Min (0x0UL) /*!< Min enumerator value of EVENTS_PWMPERIODEND field.      */
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Max (0x1UL) /*!< Max enumerator value of EVENTS_PWMPERIODEND field.      */
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated (0x0UL) /*!< Event not generated                            */
  #define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated (0x1UL) /*!< Event generated                                   */


/* PWM_EVENTS_LOOPSDONE: Concatenated sequences have been played the amount of times defined in LOOP.CNT */
  #define PWM_EVENTS_LOOPSDONE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_LOOPSDONE register.                        */

/* EVENTS_LOOPSDONE @Bit 0 : Concatenated sequences have been played the amount of times defined in LOOP.CNT */
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos (0UL) /*!< Position of EVENTS_LOOPSDONE field.                             */
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Msk (0x1UL << PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos) /*!< Bit mask of
                                                                            EVENTS_LOOPSDONE field.*/
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Min (0x0UL) /*!< Min enumerator value of EVENTS_LOOPSDONE field.               */
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Max (0x1UL) /*!< Max enumerator value of EVENTS_LOOPSDONE field.               */
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Generated (0x1UL) /*!< Event generated                                         */


/* PWM_EVENTS_RAMUNDERFLOW: Emitted when retrieving from RAM does not complete in time for the PWM module */
  #define PWM_EVENTS_RAMUNDERFLOW_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RAMUNDERFLOW register.                  */

/* EVENTS_RAMUNDERFLOW @Bit 0 : Emitted when retrieving from RAM does not complete in time for the PWM module */
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Pos (0UL) /*!< Position of EVENTS_RAMUNDERFLOW field.                    */
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Msk (0x1UL << PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Pos) /*!< Bit
                                                                            mask of EVENTS_RAMUNDERFLOW field.*/
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Min (0x0UL) /*!< Min enumerator value of EVENTS_RAMUNDERFLOW field.      */
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Max (0x1UL) /*!< Max enumerator value of EVENTS_RAMUNDERFLOW field.      */
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_NotGenerated (0x0UL) /*!< Event not generated                            */
  #define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Generated (0x1UL) /*!< Event generated                                   */


/* PWM_EVENTS_COMPAREMATCH: This event is generated when the compare matches for the compare channel [n]. */
  #define PWM_EVENTS_COMPAREMATCH_MaxCount (4UL)     /*!< Max size of EVENTS_COMPAREMATCH[4] array.                            */
  #define PWM_EVENTS_COMPAREMATCH_MaxIndex (3UL)     /*!< Max index of EVENTS_COMPAREMATCH[4] array.                           */
  #define PWM_EVENTS_COMPAREMATCH_MinIndex (0UL)     /*!< Min index of EVENTS_COMPAREMATCH[4] array.                           */
  #define PWM_EVENTS_COMPAREMATCH_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_COMPAREMATCH[4] register.               */

/* EVENTS_COMPAREMATCH @Bit 0 : This event is generated when the compare matches for the compare channel [n]. */
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Pos (0UL) /*!< Position of EVENTS_COMPAREMATCH field.                    */
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Msk (0x1UL << PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Pos) /*!< Bit
                                                                            mask of EVENTS_COMPAREMATCH field.*/
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Min (0x0UL) /*!< Min enumerator value of EVENTS_COMPAREMATCH field.      */
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Max (0x1UL) /*!< Max enumerator value of EVENTS_COMPAREMATCH field.      */
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_NotGenerated (0x0UL) /*!< Event not generated                            */
  #define PWM_EVENTS_COMPAREMATCH_EVENTS_COMPAREMATCH_Generated (0x1UL) /*!< Event generated                                   */


/* PWM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define PWM_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define PWM_PUBLISH_STOPPED_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define PWM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define PWM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_STOPPED_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_STOPPED_EN_Msk (0x1UL << PWM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                          */
  #define PWM_PUBLISH_STOPPED_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_STOPPED_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_STOPPED_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define PWM_PUBLISH_STOPPED_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* PWM_PUBLISH_SEQSTARTED: Publish configuration for event SEQSTARTED[n] */
  #define PWM_PUBLISH_SEQSTARTED_MaxCount (2UL)      /*!< Max size of PUBLISH_SEQSTARTED[2] array.                             */
  #define PWM_PUBLISH_SEQSTARTED_MaxIndex (1UL)      /*!< Max index of PUBLISH_SEQSTARTED[2] array.                            */
  #define PWM_PUBLISH_SEQSTARTED_MinIndex (0UL)      /*!< Min index of PUBLISH_SEQSTARTED[2] array.                            */
  #define PWM_PUBLISH_SEQSTARTED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SEQSTARTED[2] register.                 */

/* CHIDX @Bits 0..7 : DPPI channel that event SEQSTARTED[n] will publish to */
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_SEQSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define PWM_PUBLISH_SEQSTARTED_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_SEQSTARTED_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_SEQSTARTED_EN_Msk (0x1UL << PWM_PUBLISH_SEQSTARTED_EN_Pos) /*!< Bit mask of EN field.                    */
  #define PWM_PUBLISH_SEQSTARTED_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_SEQSTARTED_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_SEQSTARTED_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define PWM_PUBLISH_SEQSTARTED_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* PWM_PUBLISH_SEQEND: Publish configuration for event SEQEND[n] */
  #define PWM_PUBLISH_SEQEND_MaxCount (2UL)          /*!< Max size of PUBLISH_SEQEND[2] array.                                 */
  #define PWM_PUBLISH_SEQEND_MaxIndex (1UL)          /*!< Max index of PUBLISH_SEQEND[2] array.                                */
  #define PWM_PUBLISH_SEQEND_MinIndex (0UL)          /*!< Min index of PUBLISH_SEQEND[2] array.                                */
  #define PWM_PUBLISH_SEQEND_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SEQEND[2] register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event SEQEND[n] will publish to */
  #define PWM_PUBLISH_SEQEND_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_SEQEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_SEQEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define PWM_PUBLISH_SEQEND_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define PWM_PUBLISH_SEQEND_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_SEQEND_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_SEQEND_EN_Msk (0x1UL << PWM_PUBLISH_SEQEND_EN_Pos) /*!< Bit mask of EN field.                            */
  #define PWM_PUBLISH_SEQEND_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_SEQEND_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_SEQEND_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define PWM_PUBLISH_SEQEND_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* PWM_PUBLISH_PWMPERIODEND: Publish configuration for event PWMPERIODEND */
  #define PWM_PUBLISH_PWMPERIODEND_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_PWMPERIODEND register.                */

/* CHIDX @Bits 0..7 : DPPI channel that event PWMPERIODEND will publish to */
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_PWMPERIODEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define PWM_PUBLISH_PWMPERIODEND_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Msk (0x1UL << PWM_PUBLISH_PWMPERIODEND_EN_Pos) /*!< Bit mask of EN field.                */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define PWM_PUBLISH_PWMPERIODEND_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* PWM_PUBLISH_LOOPSDONE: Publish configuration for event LOOPSDONE */
  #define PWM_PUBLISH_LOOPSDONE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_LOOPSDONE register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that event LOOPSDONE will publish to */
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Msk (0xFFUL << PWM_PUBLISH_LOOPSDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define PWM_PUBLISH_LOOPSDONE_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_LOOPSDONE_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_LOOPSDONE_EN_Msk (0x1UL << PWM_PUBLISH_LOOPSDONE_EN_Pos) /*!< Bit mask of EN field.                      */
  #define PWM_PUBLISH_LOOPSDONE_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_LOOPSDONE_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_LOOPSDONE_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define PWM_PUBLISH_LOOPSDONE_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* PWM_PUBLISH_RAMUNDERFLOW: Publish configuration for event RAMUNDERFLOW */
  #define PWM_PUBLISH_RAMUNDERFLOW_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RAMUNDERFLOW register.                */

/* CHIDX @Bits 0..7 : DPPI channel that event RAMUNDERFLOW will publish to */
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Msk (0xFFUL << PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Msk (0x1UL << PWM_PUBLISH_RAMUNDERFLOW_EN_Pos) /*!< Bit mask of EN field.                */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define PWM_PUBLISH_RAMUNDERFLOW_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* PWM_PUBLISH_COMPAREMATCH: Publish configuration for event COMPAREMATCH[n] */
  #define PWM_PUBLISH_COMPAREMATCH_MaxCount (4UL)    /*!< Max size of PUBLISH_COMPAREMATCH[4] array.                           */
  #define PWM_PUBLISH_COMPAREMATCH_MaxIndex (3UL)    /*!< Max index of PUBLISH_COMPAREMATCH[4] array.                          */
  #define PWM_PUBLISH_COMPAREMATCH_MinIndex (0UL)    /*!< Min index of PUBLISH_COMPAREMATCH[4] array.                          */
  #define PWM_PUBLISH_COMPAREMATCH_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_COMPAREMATCH[4] register.             */

/* CHIDX @Bits 0..7 : DPPI channel that event COMPAREMATCH[n] will publish to */
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Msk (0xFFUL << PWM_PUBLISH_COMPAREMATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define PWM_PUBLISH_COMPAREMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Msk (0x1UL << PWM_PUBLISH_COMPAREMATCH_EN_Pos) /*!< Bit mask of EN field.                */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define PWM_PUBLISH_COMPAREMATCH_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* PWM_SHORTS: Shortcuts between local events and tasks */
  #define PWM_SHORTS_ResetValue (0x00000000UL)       /*!< Reset value of SHORTS register.                                      */

/* SEQEND0_STOP @Bit 0 : Shortcut between event SEQEND[n] and task STOP */
  #define PWM_SHORTS_SEQEND0_STOP_Pos (0UL)          /*!< Position of SEQEND0_STOP field.                                      */
  #define PWM_SHORTS_SEQEND0_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND0_STOP_Pos) /*!< Bit mask of SEQEND0_STOP field.              */
  #define PWM_SHORTS_SEQEND0_STOP_Min (0x0UL)        /*!< Min enumerator value of SEQEND0_STOP field.                          */
  #define PWM_SHORTS_SEQEND0_STOP_Max (0x1UL)        /*!< Max enumerator value of SEQEND0_STOP field.                          */
  #define PWM_SHORTS_SEQEND0_STOP_Disabled (0x0UL)   /*!< Disable shortcut                                                     */
  #define PWM_SHORTS_SEQEND0_STOP_Enabled (0x1UL)    /*!< Enable shortcut                                                      */

/* SEQEND1_STOP @Bit 1 : Shortcut between event SEQEND[n] and task STOP */
  #define PWM_SHORTS_SEQEND1_STOP_Pos (1UL)          /*!< Position of SEQEND1_STOP field.                                      */
  #define PWM_SHORTS_SEQEND1_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND1_STOP_Pos) /*!< Bit mask of SEQEND1_STOP field.              */
  #define PWM_SHORTS_SEQEND1_STOP_Min (0x0UL)        /*!< Min enumerator value of SEQEND1_STOP field.                          */
  #define PWM_SHORTS_SEQEND1_STOP_Max (0x1UL)        /*!< Max enumerator value of SEQEND1_STOP field.                          */
  #define PWM_SHORTS_SEQEND1_STOP_Disabled (0x0UL)   /*!< Disable shortcut                                                     */
  #define PWM_SHORTS_SEQEND1_STOP_Enabled (0x1UL)    /*!< Enable shortcut                                                      */

/* LOOPSDONE_DMA_SEQ0_START @Bit 2 : Shortcut between event LOOPSDONE and task DMA.SEQ[n].START */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Pos (2UL) /*!< Position of LOOPSDONE_DMA_SEQ0_START field.                       */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Pos) /*!< Bit mask of
                                                                            LOOPSDONE_DMA_SEQ0_START field.*/
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Min (0x0UL) /*!< Min enumerator value of LOOPSDONE_DMA_SEQ0_START field.         */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Max (0x1UL) /*!< Max enumerator value of LOOPSDONE_DMA_SEQ0_START field.         */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Disabled (0x0UL) /*!< Disable shortcut                                           */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Enabled (0x1UL) /*!< Enable shortcut                                             */

/* LOOPSDONE_DMA_SEQ1_START @Bit 3 : Shortcut between event LOOPSDONE and task DMA.SEQ[n].START */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Pos (3UL) /*!< Position of LOOPSDONE_DMA_SEQ1_START field.                       */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Pos) /*!< Bit mask of
                                                                            LOOPSDONE_DMA_SEQ1_START field.*/
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Min (0x0UL) /*!< Min enumerator value of LOOPSDONE_DMA_SEQ1_START field.         */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Max (0x1UL) /*!< Max enumerator value of LOOPSDONE_DMA_SEQ1_START field.         */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Disabled (0x0UL) /*!< Disable shortcut                                           */
  #define PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Enabled (0x1UL) /*!< Enable shortcut                                             */

/* LOOPSDONE_STOP @Bit 4 : Shortcut between event LOOPSDONE and task STOP */
  #define PWM_SHORTS_LOOPSDONE_STOP_Pos (4UL)        /*!< Position of LOOPSDONE_STOP field.                                    */
  #define PWM_SHORTS_LOOPSDONE_STOP_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_STOP_Pos) /*!< Bit mask of LOOPSDONE_STOP field.        */
  #define PWM_SHORTS_LOOPSDONE_STOP_Min (0x0UL)      /*!< Min enumerator value of LOOPSDONE_STOP field.                        */
  #define PWM_SHORTS_LOOPSDONE_STOP_Max (0x1UL)      /*!< Max enumerator value of LOOPSDONE_STOP field.                        */
  #define PWM_SHORTS_LOOPSDONE_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                     */
  #define PWM_SHORTS_LOOPSDONE_STOP_Enabled (0x1UL)  /*!< Enable shortcut                                                      */

/* RAMUNDERFLOW_STOP @Bit 5 : Shortcut between event RAMUNDERFLOW and task STOP */
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Pos (5UL)     /*!< Position of RAMUNDERFLOW_STOP field.                                 */
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Msk (0x1UL << PWM_SHORTS_RAMUNDERFLOW_STOP_Pos) /*!< Bit mask of RAMUNDERFLOW_STOP
                                                                            field.*/
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Min (0x0UL)   /*!< Min enumerator value of RAMUNDERFLOW_STOP field.                     */
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Max (0x1UL)   /*!< Max enumerator value of RAMUNDERFLOW_STOP field.                     */
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                  */
  #define PWM_SHORTS_RAMUNDERFLOW_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                    */

/* DMA_SEQ0_BUSERROR_STOP @Bit 6 : Shortcut between event DMA.SEQ[n].BUSERROR and task STOP */
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Pos (6UL) /*!< Position of DMA_SEQ0_BUSERROR_STOP field.                           */
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Msk (0x1UL << PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Pos) /*!< Bit mask of
                                                                            DMA_SEQ0_BUSERROR_STOP field.*/
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Min (0x0UL) /*!< Min enumerator value of DMA_SEQ0_BUSERROR_STOP field.             */
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Max (0x1UL) /*!< Max enumerator value of DMA_SEQ0_BUSERROR_STOP field.             */
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Disabled (0x0UL) /*!< Disable shortcut                                             */
  #define PWM_SHORTS_DMA_SEQ0_BUSERROR_STOP_Enabled (0x1UL) /*!< Enable shortcut                                               */

/* DMA_SEQ1_BUSERROR_STOP @Bit 7 : Shortcut between event DMA.SEQ[n].BUSERROR and task STOP */
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Pos (7UL) /*!< Position of DMA_SEQ1_BUSERROR_STOP field.                           */
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Msk (0x1UL << PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Pos) /*!< Bit mask of
                                                                            DMA_SEQ1_BUSERROR_STOP field.*/
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Min (0x0UL) /*!< Min enumerator value of DMA_SEQ1_BUSERROR_STOP field.             */
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Max (0x1UL) /*!< Max enumerator value of DMA_SEQ1_BUSERROR_STOP field.             */
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Disabled (0x0UL) /*!< Disable shortcut                                             */
  #define PWM_SHORTS_DMA_SEQ1_BUSERROR_STOP_Enabled (0x1UL) /*!< Enable shortcut                                               */


/* PWM_INTEN: Enable or disable interrupt */
  #define PWM_INTEN_ResetValue (0x00000000UL)        /*!< Reset value of INTEN register.                                       */

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define PWM_INTEN_STOPPED_Pos (1UL)                /*!< Position of STOPPED field.                                           */
  #define PWM_INTEN_STOPPED_Msk (0x1UL << PWM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field.                               */
  #define PWM_INTEN_STOPPED_Min (0x0UL)              /*!< Min enumerator value of STOPPED field.                               */
  #define PWM_INTEN_STOPPED_Max (0x1UL)              /*!< Max enumerator value of STOPPED field.                               */
  #define PWM_INTEN_STOPPED_Disabled (0x0UL)         /*!< Disable                                                              */
  #define PWM_INTEN_STOPPED_Enabled (0x1UL)          /*!< Enable                                                               */

/* SEQSTARTED0 @Bit 2 : Enable or disable interrupt for event SEQSTARTED[0] */
  #define PWM_INTEN_SEQSTARTED0_Pos (2UL)            /*!< Position of SEQSTARTED0 field.                                       */
  #define PWM_INTEN_SEQSTARTED0_Msk (0x1UL << PWM_INTEN_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field.                   */
  #define PWM_INTEN_SEQSTARTED0_Min (0x0UL)          /*!< Min enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTEN_SEQSTARTED0_Max (0x1UL)          /*!< Max enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTEN_SEQSTARTED0_Disabled (0x0UL)     /*!< Disable                                                              */
  #define PWM_INTEN_SEQSTARTED0_Enabled (0x1UL)      /*!< Enable                                                               */

/* SEQSTARTED1 @Bit 3 : Enable or disable interrupt for event SEQSTARTED[1] */
  #define PWM_INTEN_SEQSTARTED1_Pos (3UL)            /*!< Position of SEQSTARTED1 field.                                       */
  #define PWM_INTEN_SEQSTARTED1_Msk (0x1UL << PWM_INTEN_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field.                   */
  #define PWM_INTEN_SEQSTARTED1_Min (0x0UL)          /*!< Min enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTEN_SEQSTARTED1_Max (0x1UL)          /*!< Max enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTEN_SEQSTARTED1_Disabled (0x0UL)     /*!< Disable                                                              */
  #define PWM_INTEN_SEQSTARTED1_Enabled (0x1UL)      /*!< Enable                                                               */

/* SEQEND0 @Bit 4 : Enable or disable interrupt for event SEQEND[0] */
  #define PWM_INTEN_SEQEND0_Pos (4UL)                /*!< Position of SEQEND0 field.                                           */
  #define PWM_INTEN_SEQEND0_Msk (0x1UL << PWM_INTEN_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field.                               */
  #define PWM_INTEN_SEQEND0_Min (0x0UL)              /*!< Min enumerator value of SEQEND0 field.                               */
  #define PWM_INTEN_SEQEND0_Max (0x1UL)              /*!< Max enumerator value of SEQEND0 field.                               */
  #define PWM_INTEN_SEQEND0_Disabled (0x0UL)         /*!< Disable                                                              */
  #define PWM_INTEN_SEQEND0_Enabled (0x1UL)          /*!< Enable                                                               */

/* SEQEND1 @Bit 5 : Enable or disable interrupt for event SEQEND[1] */
  #define PWM_INTEN_SEQEND1_Pos (5UL)                /*!< Position of SEQEND1 field.                                           */
  #define PWM_INTEN_SEQEND1_Msk (0x1UL << PWM_INTEN_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field.                               */
  #define PWM_INTEN_SEQEND1_Min (0x0UL)              /*!< Min enumerator value of SEQEND1 field.                               */
  #define PWM_INTEN_SEQEND1_Max (0x1UL)              /*!< Max enumerator value of SEQEND1 field.                               */
  #define PWM_INTEN_SEQEND1_Disabled (0x0UL)         /*!< Disable                                                              */
  #define PWM_INTEN_SEQEND1_Enabled (0x1UL)          /*!< Enable                                                               */

/* PWMPERIODEND @Bit 6 : Enable or disable interrupt for event PWMPERIODEND */
  #define PWM_INTEN_PWMPERIODEND_Pos (6UL)           /*!< Position of PWMPERIODEND field.                                      */
  #define PWM_INTEN_PWMPERIODEND_Msk (0x1UL << PWM_INTEN_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.                */
  #define PWM_INTEN_PWMPERIODEND_Min (0x0UL)         /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTEN_PWMPERIODEND_Max (0x1UL)         /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTEN_PWMPERIODEND_Disabled (0x0UL)    /*!< Disable                                                              */
  #define PWM_INTEN_PWMPERIODEND_Enabled (0x1UL)     /*!< Enable                                                               */

/* LOOPSDONE @Bit 7 : Enable or disable interrupt for event LOOPSDONE */
  #define PWM_INTEN_LOOPSDONE_Pos (7UL)              /*!< Position of LOOPSDONE field.                                         */
  #define PWM_INTEN_LOOPSDONE_Msk (0x1UL << PWM_INTEN_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field.                         */
  #define PWM_INTEN_LOOPSDONE_Min (0x0UL)            /*!< Min enumerator value of LOOPSDONE field.                             */
  #define PWM_INTEN_LOOPSDONE_Max (0x1UL)            /*!< Max enumerator value of LOOPSDONE field.                             */
  #define PWM_INTEN_LOOPSDONE_Disabled (0x0UL)       /*!< Disable                                                              */
  #define PWM_INTEN_LOOPSDONE_Enabled (0x1UL)        /*!< Enable                                                               */

/* RAMUNDERFLOW @Bit 8 : Enable or disable interrupt for event RAMUNDERFLOW */
  #define PWM_INTEN_RAMUNDERFLOW_Pos (8UL)           /*!< Position of RAMUNDERFLOW field.                                      */
  #define PWM_INTEN_RAMUNDERFLOW_Msk (0x1UL << PWM_INTEN_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field.                */
  #define PWM_INTEN_RAMUNDERFLOW_Min (0x0UL)         /*!< Min enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTEN_RAMUNDERFLOW_Max (0x1UL)         /*!< Max enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTEN_RAMUNDERFLOW_Disabled (0x0UL)    /*!< Disable                                                              */
  #define PWM_INTEN_RAMUNDERFLOW_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMASEQ0END @Bit 9 : Enable or disable interrupt for event DMASEQ0END */
  #define PWM_INTEN_DMASEQ0END_Pos (9UL)             /*!< Position of DMASEQ0END field.                                        */
  #define PWM_INTEN_DMASEQ0END_Msk (0x1UL << PWM_INTEN_DMASEQ0END_Pos) /*!< Bit mask of DMASEQ0END field.                      */
  #define PWM_INTEN_DMASEQ0END_Min (0x0UL)           /*!< Min enumerator value of DMASEQ0END field.                            */
  #define PWM_INTEN_DMASEQ0END_Max (0x1UL)           /*!< Max enumerator value of DMASEQ0END field.                            */
  #define PWM_INTEN_DMASEQ0END_Disabled (0x0UL)      /*!< Disable                                                              */
  #define PWM_INTEN_DMASEQ0END_Enabled (0x1UL)       /*!< Enable                                                               */

/* DMASEQ0READY @Bit 10 : Enable or disable interrupt for event DMASEQ0READY */
  #define PWM_INTEN_DMASEQ0READY_Pos (10UL)          /*!< Position of DMASEQ0READY field.                                      */
  #define PWM_INTEN_DMASEQ0READY_Msk (0x1UL << PWM_INTEN_DMASEQ0READY_Pos) /*!< Bit mask of DMASEQ0READY field.                */
  #define PWM_INTEN_DMASEQ0READY_Min (0x0UL)         /*!< Min enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTEN_DMASEQ0READY_Max (0x1UL)         /*!< Max enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTEN_DMASEQ0READY_Disabled (0x0UL)    /*!< Disable                                                              */
  #define PWM_INTEN_DMASEQ0READY_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMASEQ0BUSERROR @Bit 11 : Enable or disable interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTEN_DMASEQ0BUSERROR_Pos (11UL)       /*!< Position of DMASEQ0BUSERROR field.                                   */
  #define PWM_INTEN_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTEN_DMASEQ0BUSERROR_Pos) /*!< Bit mask of DMASEQ0BUSERROR field.       */
  #define PWM_INTEN_DMASEQ0BUSERROR_Min (0x0UL)      /*!< Min enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTEN_DMASEQ0BUSERROR_Max (0x1UL)      /*!< Max enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTEN_DMASEQ0BUSERROR_Disabled (0x0UL) /*!< Disable                                                              */
  #define PWM_INTEN_DMASEQ0BUSERROR_Enabled (0x1UL)  /*!< Enable                                                               */

/* DMASEQ1END @Bit 12 : Enable or disable interrupt for event DMASEQ1END */
  #define PWM_INTEN_DMASEQ1END_Pos (12UL)            /*!< Position of DMASEQ1END field.                                        */
  #define PWM_INTEN_DMASEQ1END_Msk (0x1UL << PWM_INTEN_DMASEQ1END_Pos) /*!< Bit mask of DMASEQ1END field.                      */
  #define PWM_INTEN_DMASEQ1END_Min (0x0UL)           /*!< Min enumerator value of DMASEQ1END field.                            */
  #define PWM_INTEN_DMASEQ1END_Max (0x1UL)           /*!< Max enumerator value of DMASEQ1END field.                            */
  #define PWM_INTEN_DMASEQ1END_Disabled (0x0UL)      /*!< Disable                                                              */
  #define PWM_INTEN_DMASEQ1END_Enabled (0x1UL)       /*!< Enable                                                               */

/* DMASEQ1READY @Bit 13 : Enable or disable interrupt for event DMASEQ1READY */
  #define PWM_INTEN_DMASEQ1READY_Pos (13UL)          /*!< Position of DMASEQ1READY field.                                      */
  #define PWM_INTEN_DMASEQ1READY_Msk (0x1UL << PWM_INTEN_DMASEQ1READY_Pos) /*!< Bit mask of DMASEQ1READY field.                */
  #define PWM_INTEN_DMASEQ1READY_Min (0x0UL)         /*!< Min enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTEN_DMASEQ1READY_Max (0x1UL)         /*!< Max enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTEN_DMASEQ1READY_Disabled (0x0UL)    /*!< Disable                                                              */
  #define PWM_INTEN_DMASEQ1READY_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMASEQ1BUSERROR @Bit 14 : Enable or disable interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTEN_DMASEQ1BUSERROR_Pos (14UL)       /*!< Position of DMASEQ1BUSERROR field.                                   */
  #define PWM_INTEN_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTEN_DMASEQ1BUSERROR_Pos) /*!< Bit mask of DMASEQ1BUSERROR field.       */
  #define PWM_INTEN_DMASEQ1BUSERROR_Min (0x0UL)      /*!< Min enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTEN_DMASEQ1BUSERROR_Max (0x1UL)      /*!< Max enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTEN_DMASEQ1BUSERROR_Disabled (0x0UL) /*!< Disable                                                              */
  #define PWM_INTEN_DMASEQ1BUSERROR_Enabled (0x1UL)  /*!< Enable                                                               */

/* COMPAREMATCH0 @Bit 15 : Enable or disable interrupt for event COMPAREMATCH[0] */
  #define PWM_INTEN_COMPAREMATCH0_Pos (15UL)         /*!< Position of COMPAREMATCH0 field.                                     */
  #define PWM_INTEN_COMPAREMATCH0_Msk (0x1UL << PWM_INTEN_COMPAREMATCH0_Pos) /*!< Bit mask of COMPAREMATCH0 field.             */
  #define PWM_INTEN_COMPAREMATCH0_Min (0x0UL)        /*!< Min enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTEN_COMPAREMATCH0_Max (0x1UL)        /*!< Max enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTEN_COMPAREMATCH0_Disabled (0x0UL)   /*!< Disable                                                              */
  #define PWM_INTEN_COMPAREMATCH0_Enabled (0x1UL)    /*!< Enable                                                               */

/* COMPAREMATCH1 @Bit 16 : Enable or disable interrupt for event COMPAREMATCH[1] */
  #define PWM_INTEN_COMPAREMATCH1_Pos (16UL)         /*!< Position of COMPAREMATCH1 field.                                     */
  #define PWM_INTEN_COMPAREMATCH1_Msk (0x1UL << PWM_INTEN_COMPAREMATCH1_Pos) /*!< Bit mask of COMPAREMATCH1 field.             */
  #define PWM_INTEN_COMPAREMATCH1_Min (0x0UL)        /*!< Min enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTEN_COMPAREMATCH1_Max (0x1UL)        /*!< Max enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTEN_COMPAREMATCH1_Disabled (0x0UL)   /*!< Disable                                                              */
  #define PWM_INTEN_COMPAREMATCH1_Enabled (0x1UL)    /*!< Enable                                                               */

/* COMPAREMATCH2 @Bit 17 : Enable or disable interrupt for event COMPAREMATCH[2] */
  #define PWM_INTEN_COMPAREMATCH2_Pos (17UL)         /*!< Position of COMPAREMATCH2 field.                                     */
  #define PWM_INTEN_COMPAREMATCH2_Msk (0x1UL << PWM_INTEN_COMPAREMATCH2_Pos) /*!< Bit mask of COMPAREMATCH2 field.             */
  #define PWM_INTEN_COMPAREMATCH2_Min (0x0UL)        /*!< Min enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTEN_COMPAREMATCH2_Max (0x1UL)        /*!< Max enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTEN_COMPAREMATCH2_Disabled (0x0UL)   /*!< Disable                                                              */
  #define PWM_INTEN_COMPAREMATCH2_Enabled (0x1UL)    /*!< Enable                                                               */

/* COMPAREMATCH3 @Bit 18 : Enable or disable interrupt for event COMPAREMATCH[3] */
  #define PWM_INTEN_COMPAREMATCH3_Pos (18UL)         /*!< Position of COMPAREMATCH3 field.                                     */
  #define PWM_INTEN_COMPAREMATCH3_Msk (0x1UL << PWM_INTEN_COMPAREMATCH3_Pos) /*!< Bit mask of COMPAREMATCH3 field.             */
  #define PWM_INTEN_COMPAREMATCH3_Min (0x0UL)        /*!< Min enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTEN_COMPAREMATCH3_Max (0x1UL)        /*!< Max enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTEN_COMPAREMATCH3_Disabled (0x0UL)   /*!< Disable                                                              */
  #define PWM_INTEN_COMPAREMATCH3_Enabled (0x1UL)    /*!< Enable                                                               */


/* PWM_INTENSET: Enable interrupt */
  #define PWM_INTENSET_ResetValue (0x00000000UL)     /*!< Reset value of INTENSET register.                                    */

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define PWM_INTENSET_STOPPED_Pos (1UL)             /*!< Position of STOPPED field.                                           */
  #define PWM_INTENSET_STOPPED_Msk (0x1UL << PWM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                         */
  #define PWM_INTENSET_STOPPED_Min (0x0UL)           /*!< Min enumerator value of STOPPED field.                               */
  #define PWM_INTENSET_STOPPED_Max (0x1UL)           /*!< Max enumerator value of STOPPED field.                               */
  #define PWM_INTENSET_STOPPED_Set (0x1UL)           /*!< Enable                                                               */
  #define PWM_INTENSET_STOPPED_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_STOPPED_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* SEQSTARTED0 @Bit 2 : Write '1' to enable interrupt for event SEQSTARTED[0] */
  #define PWM_INTENSET_SEQSTARTED0_Pos (2UL)         /*!< Position of SEQSTARTED0 field.                                       */
  #define PWM_INTENSET_SEQSTARTED0_Msk (0x1UL << PWM_INTENSET_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field.             */
  #define PWM_INTENSET_SEQSTARTED0_Min (0x0UL)       /*!< Min enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTENSET_SEQSTARTED0_Max (0x1UL)       /*!< Max enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTENSET_SEQSTARTED0_Set (0x1UL)       /*!< Enable                                                               */
  #define PWM_INTENSET_SEQSTARTED0_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_SEQSTARTED0_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* SEQSTARTED1 @Bit 3 : Write '1' to enable interrupt for event SEQSTARTED[1] */
  #define PWM_INTENSET_SEQSTARTED1_Pos (3UL)         /*!< Position of SEQSTARTED1 field.                                       */
  #define PWM_INTENSET_SEQSTARTED1_Msk (0x1UL << PWM_INTENSET_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field.             */
  #define PWM_INTENSET_SEQSTARTED1_Min (0x0UL)       /*!< Min enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTENSET_SEQSTARTED1_Max (0x1UL)       /*!< Max enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTENSET_SEQSTARTED1_Set (0x1UL)       /*!< Enable                                                               */
  #define PWM_INTENSET_SEQSTARTED1_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_SEQSTARTED1_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* SEQEND0 @Bit 4 : Write '1' to enable interrupt for event SEQEND[0] */
  #define PWM_INTENSET_SEQEND0_Pos (4UL)             /*!< Position of SEQEND0 field.                                           */
  #define PWM_INTENSET_SEQEND0_Msk (0x1UL << PWM_INTENSET_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field.                         */
  #define PWM_INTENSET_SEQEND0_Min (0x0UL)           /*!< Min enumerator value of SEQEND0 field.                               */
  #define PWM_INTENSET_SEQEND0_Max (0x1UL)           /*!< Max enumerator value of SEQEND0 field.                               */
  #define PWM_INTENSET_SEQEND0_Set (0x1UL)           /*!< Enable                                                               */
  #define PWM_INTENSET_SEQEND0_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_SEQEND0_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* SEQEND1 @Bit 5 : Write '1' to enable interrupt for event SEQEND[1] */
  #define PWM_INTENSET_SEQEND1_Pos (5UL)             /*!< Position of SEQEND1 field.                                           */
  #define PWM_INTENSET_SEQEND1_Msk (0x1UL << PWM_INTENSET_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field.                         */
  #define PWM_INTENSET_SEQEND1_Min (0x0UL)           /*!< Min enumerator value of SEQEND1 field.                               */
  #define PWM_INTENSET_SEQEND1_Max (0x1UL)           /*!< Max enumerator value of SEQEND1 field.                               */
  #define PWM_INTENSET_SEQEND1_Set (0x1UL)           /*!< Enable                                                               */
  #define PWM_INTENSET_SEQEND1_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_SEQEND1_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PWMPERIODEND @Bit 6 : Write '1' to enable interrupt for event PWMPERIODEND */
  #define PWM_INTENSET_PWMPERIODEND_Pos (6UL)        /*!< Position of PWMPERIODEND field.                                      */
  #define PWM_INTENSET_PWMPERIODEND_Msk (0x1UL << PWM_INTENSET_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.          */
  #define PWM_INTENSET_PWMPERIODEND_Min (0x0UL)      /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTENSET_PWMPERIODEND_Max (0x1UL)      /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTENSET_PWMPERIODEND_Set (0x1UL)      /*!< Enable                                                               */
  #define PWM_INTENSET_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_PWMPERIODEND_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* LOOPSDONE @Bit 7 : Write '1' to enable interrupt for event LOOPSDONE */
  #define PWM_INTENSET_LOOPSDONE_Pos (7UL)           /*!< Position of LOOPSDONE field.                                         */
  #define PWM_INTENSET_LOOPSDONE_Msk (0x1UL << PWM_INTENSET_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field.                   */
  #define PWM_INTENSET_LOOPSDONE_Min (0x0UL)         /*!< Min enumerator value of LOOPSDONE field.                             */
  #define PWM_INTENSET_LOOPSDONE_Max (0x1UL)         /*!< Max enumerator value of LOOPSDONE field.                             */
  #define PWM_INTENSET_LOOPSDONE_Set (0x1UL)         /*!< Enable                                                               */
  #define PWM_INTENSET_LOOPSDONE_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_LOOPSDONE_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* RAMUNDERFLOW @Bit 8 : Write '1' to enable interrupt for event RAMUNDERFLOW */
  #define PWM_INTENSET_RAMUNDERFLOW_Pos (8UL)        /*!< Position of RAMUNDERFLOW field.                                      */
  #define PWM_INTENSET_RAMUNDERFLOW_Msk (0x1UL << PWM_INTENSET_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field.          */
  #define PWM_INTENSET_RAMUNDERFLOW_Min (0x0UL)      /*!< Min enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTENSET_RAMUNDERFLOW_Max (0x1UL)      /*!< Max enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTENSET_RAMUNDERFLOW_Set (0x1UL)      /*!< Enable                                                               */
  #define PWM_INTENSET_RAMUNDERFLOW_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_RAMUNDERFLOW_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMASEQ0END @Bit 9 : Write '1' to enable interrupt for event DMASEQ0END */
  #define PWM_INTENSET_DMASEQ0END_Pos (9UL)          /*!< Position of DMASEQ0END field.                                        */
  #define PWM_INTENSET_DMASEQ0END_Msk (0x1UL << PWM_INTENSET_DMASEQ0END_Pos) /*!< Bit mask of DMASEQ0END field.                */
  #define PWM_INTENSET_DMASEQ0END_Min (0x0UL)        /*!< Min enumerator value of DMASEQ0END field.                            */
  #define PWM_INTENSET_DMASEQ0END_Max (0x1UL)        /*!< Max enumerator value of DMASEQ0END field.                            */
  #define PWM_INTENSET_DMASEQ0END_Set (0x1UL)        /*!< Enable                                                               */
  #define PWM_INTENSET_DMASEQ0END_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_DMASEQ0END_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMASEQ0READY @Bit 10 : Write '1' to enable interrupt for event DMASEQ0READY */
  #define PWM_INTENSET_DMASEQ0READY_Pos (10UL)       /*!< Position of DMASEQ0READY field.                                      */
  #define PWM_INTENSET_DMASEQ0READY_Msk (0x1UL << PWM_INTENSET_DMASEQ0READY_Pos) /*!< Bit mask of DMASEQ0READY field.          */
  #define PWM_INTENSET_DMASEQ0READY_Min (0x0UL)      /*!< Min enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTENSET_DMASEQ0READY_Max (0x1UL)      /*!< Max enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTENSET_DMASEQ0READY_Set (0x1UL)      /*!< Enable                                                               */
  #define PWM_INTENSET_DMASEQ0READY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_DMASEQ0READY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMASEQ0BUSERROR @Bit 11 : Write '1' to enable interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Pos (11UL)    /*!< Position of DMASEQ0BUSERROR field.                                   */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTENSET_DMASEQ0BUSERROR_Pos) /*!< Bit mask of DMASEQ0BUSERROR field. */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Set (0x1UL)   /*!< Enable                                                               */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define PWM_INTENSET_DMASEQ0BUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* DMASEQ1END @Bit 12 : Write '1' to enable interrupt for event DMASEQ1END */
  #define PWM_INTENSET_DMASEQ1END_Pos (12UL)         /*!< Position of DMASEQ1END field.                                        */
  #define PWM_INTENSET_DMASEQ1END_Msk (0x1UL << PWM_INTENSET_DMASEQ1END_Pos) /*!< Bit mask of DMASEQ1END field.                */
  #define PWM_INTENSET_DMASEQ1END_Min (0x0UL)        /*!< Min enumerator value of DMASEQ1END field.                            */
  #define PWM_INTENSET_DMASEQ1END_Max (0x1UL)        /*!< Max enumerator value of DMASEQ1END field.                            */
  #define PWM_INTENSET_DMASEQ1END_Set (0x1UL)        /*!< Enable                                                               */
  #define PWM_INTENSET_DMASEQ1END_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_DMASEQ1END_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMASEQ1READY @Bit 13 : Write '1' to enable interrupt for event DMASEQ1READY */
  #define PWM_INTENSET_DMASEQ1READY_Pos (13UL)       /*!< Position of DMASEQ1READY field.                                      */
  #define PWM_INTENSET_DMASEQ1READY_Msk (0x1UL << PWM_INTENSET_DMASEQ1READY_Pos) /*!< Bit mask of DMASEQ1READY field.          */
  #define PWM_INTENSET_DMASEQ1READY_Min (0x0UL)      /*!< Min enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTENSET_DMASEQ1READY_Max (0x1UL)      /*!< Max enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTENSET_DMASEQ1READY_Set (0x1UL)      /*!< Enable                                                               */
  #define PWM_INTENSET_DMASEQ1READY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENSET_DMASEQ1READY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMASEQ1BUSERROR @Bit 14 : Write '1' to enable interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Pos (14UL)    /*!< Position of DMASEQ1BUSERROR field.                                   */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTENSET_DMASEQ1BUSERROR_Pos) /*!< Bit mask of DMASEQ1BUSERROR field. */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Set (0x1UL)   /*!< Enable                                                               */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define PWM_INTENSET_DMASEQ1BUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* COMPAREMATCH0 @Bit 15 : Write '1' to enable interrupt for event COMPAREMATCH[0] */
  #define PWM_INTENSET_COMPAREMATCH0_Pos (15UL)      /*!< Position of COMPAREMATCH0 field.                                     */
  #define PWM_INTENSET_COMPAREMATCH0_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH0_Pos) /*!< Bit mask of COMPAREMATCH0 field.       */
  #define PWM_INTENSET_COMPAREMATCH0_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTENSET_COMPAREMATCH0_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTENSET_COMPAREMATCH0_Set (0x1UL)     /*!< Enable                                                               */
  #define PWM_INTENSET_COMPAREMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENSET_COMPAREMATCH0_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* COMPAREMATCH1 @Bit 16 : Write '1' to enable interrupt for event COMPAREMATCH[1] */
  #define PWM_INTENSET_COMPAREMATCH1_Pos (16UL)      /*!< Position of COMPAREMATCH1 field.                                     */
  #define PWM_INTENSET_COMPAREMATCH1_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH1_Pos) /*!< Bit mask of COMPAREMATCH1 field.       */
  #define PWM_INTENSET_COMPAREMATCH1_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTENSET_COMPAREMATCH1_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTENSET_COMPAREMATCH1_Set (0x1UL)     /*!< Enable                                                               */
  #define PWM_INTENSET_COMPAREMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENSET_COMPAREMATCH1_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* COMPAREMATCH2 @Bit 17 : Write '1' to enable interrupt for event COMPAREMATCH[2] */
  #define PWM_INTENSET_COMPAREMATCH2_Pos (17UL)      /*!< Position of COMPAREMATCH2 field.                                     */
  #define PWM_INTENSET_COMPAREMATCH2_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH2_Pos) /*!< Bit mask of COMPAREMATCH2 field.       */
  #define PWM_INTENSET_COMPAREMATCH2_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTENSET_COMPAREMATCH2_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTENSET_COMPAREMATCH2_Set (0x1UL)     /*!< Enable                                                               */
  #define PWM_INTENSET_COMPAREMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENSET_COMPAREMATCH2_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* COMPAREMATCH3 @Bit 18 : Write '1' to enable interrupt for event COMPAREMATCH[3] */
  #define PWM_INTENSET_COMPAREMATCH3_Pos (18UL)      /*!< Position of COMPAREMATCH3 field.                                     */
  #define PWM_INTENSET_COMPAREMATCH3_Msk (0x1UL << PWM_INTENSET_COMPAREMATCH3_Pos) /*!< Bit mask of COMPAREMATCH3 field.       */
  #define PWM_INTENSET_COMPAREMATCH3_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTENSET_COMPAREMATCH3_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTENSET_COMPAREMATCH3_Set (0x1UL)     /*!< Enable                                                               */
  #define PWM_INTENSET_COMPAREMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENSET_COMPAREMATCH3_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* PWM_INTENCLR: Disable interrupt */
  #define PWM_INTENCLR_ResetValue (0x00000000UL)     /*!< Reset value of INTENCLR register.                                    */

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define PWM_INTENCLR_STOPPED_Pos (1UL)             /*!< Position of STOPPED field.                                           */
  #define PWM_INTENCLR_STOPPED_Msk (0x1UL << PWM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                         */
  #define PWM_INTENCLR_STOPPED_Min (0x0UL)           /*!< Min enumerator value of STOPPED field.                               */
  #define PWM_INTENCLR_STOPPED_Max (0x1UL)           /*!< Max enumerator value of STOPPED field.                               */
  #define PWM_INTENCLR_STOPPED_Clear (0x1UL)         /*!< Disable                                                              */
  #define PWM_INTENCLR_STOPPED_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_STOPPED_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* SEQSTARTED0 @Bit 2 : Write '1' to disable interrupt for event SEQSTARTED[0] */
  #define PWM_INTENCLR_SEQSTARTED0_Pos (2UL)         /*!< Position of SEQSTARTED0 field.                                       */
  #define PWM_INTENCLR_SEQSTARTED0_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field.             */
  #define PWM_INTENCLR_SEQSTARTED0_Min (0x0UL)       /*!< Min enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTENCLR_SEQSTARTED0_Max (0x1UL)       /*!< Max enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTENCLR_SEQSTARTED0_Clear (0x1UL)     /*!< Disable                                                              */
  #define PWM_INTENCLR_SEQSTARTED0_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_SEQSTARTED0_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* SEQSTARTED1 @Bit 3 : Write '1' to disable interrupt for event SEQSTARTED[1] */
  #define PWM_INTENCLR_SEQSTARTED1_Pos (3UL)         /*!< Position of SEQSTARTED1 field.                                       */
  #define PWM_INTENCLR_SEQSTARTED1_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field.             */
  #define PWM_INTENCLR_SEQSTARTED1_Min (0x0UL)       /*!< Min enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTENCLR_SEQSTARTED1_Max (0x1UL)       /*!< Max enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTENCLR_SEQSTARTED1_Clear (0x1UL)     /*!< Disable                                                              */
  #define PWM_INTENCLR_SEQSTARTED1_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_SEQSTARTED1_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* SEQEND0 @Bit 4 : Write '1' to disable interrupt for event SEQEND[0] */
  #define PWM_INTENCLR_SEQEND0_Pos (4UL)             /*!< Position of SEQEND0 field.                                           */
  #define PWM_INTENCLR_SEQEND0_Msk (0x1UL << PWM_INTENCLR_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field.                         */
  #define PWM_INTENCLR_SEQEND0_Min (0x0UL)           /*!< Min enumerator value of SEQEND0 field.                               */
  #define PWM_INTENCLR_SEQEND0_Max (0x1UL)           /*!< Max enumerator value of SEQEND0 field.                               */
  #define PWM_INTENCLR_SEQEND0_Clear (0x1UL)         /*!< Disable                                                              */
  #define PWM_INTENCLR_SEQEND0_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_SEQEND0_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* SEQEND1 @Bit 5 : Write '1' to disable interrupt for event SEQEND[1] */
  #define PWM_INTENCLR_SEQEND1_Pos (5UL)             /*!< Position of SEQEND1 field.                                           */
  #define PWM_INTENCLR_SEQEND1_Msk (0x1UL << PWM_INTENCLR_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field.                         */
  #define PWM_INTENCLR_SEQEND1_Min (0x0UL)           /*!< Min enumerator value of SEQEND1 field.                               */
  #define PWM_INTENCLR_SEQEND1_Max (0x1UL)           /*!< Max enumerator value of SEQEND1 field.                               */
  #define PWM_INTENCLR_SEQEND1_Clear (0x1UL)         /*!< Disable                                                              */
  #define PWM_INTENCLR_SEQEND1_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_SEQEND1_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PWMPERIODEND @Bit 6 : Write '1' to disable interrupt for event PWMPERIODEND */
  #define PWM_INTENCLR_PWMPERIODEND_Pos (6UL)        /*!< Position of PWMPERIODEND field.                                      */
  #define PWM_INTENCLR_PWMPERIODEND_Msk (0x1UL << PWM_INTENCLR_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.          */
  #define PWM_INTENCLR_PWMPERIODEND_Min (0x0UL)      /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTENCLR_PWMPERIODEND_Max (0x1UL)      /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTENCLR_PWMPERIODEND_Clear (0x1UL)    /*!< Disable                                                              */
  #define PWM_INTENCLR_PWMPERIODEND_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_PWMPERIODEND_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* LOOPSDONE @Bit 7 : Write '1' to disable interrupt for event LOOPSDONE */
  #define PWM_INTENCLR_LOOPSDONE_Pos (7UL)           /*!< Position of LOOPSDONE field.                                         */
  #define PWM_INTENCLR_LOOPSDONE_Msk (0x1UL << PWM_INTENCLR_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field.                   */
  #define PWM_INTENCLR_LOOPSDONE_Min (0x0UL)         /*!< Min enumerator value of LOOPSDONE field.                             */
  #define PWM_INTENCLR_LOOPSDONE_Max (0x1UL)         /*!< Max enumerator value of LOOPSDONE field.                             */
  #define PWM_INTENCLR_LOOPSDONE_Clear (0x1UL)       /*!< Disable                                                              */
  #define PWM_INTENCLR_LOOPSDONE_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_LOOPSDONE_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* RAMUNDERFLOW @Bit 8 : Write '1' to disable interrupt for event RAMUNDERFLOW */
  #define PWM_INTENCLR_RAMUNDERFLOW_Pos (8UL)        /*!< Position of RAMUNDERFLOW field.                                      */
  #define PWM_INTENCLR_RAMUNDERFLOW_Msk (0x1UL << PWM_INTENCLR_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field.          */
  #define PWM_INTENCLR_RAMUNDERFLOW_Min (0x0UL)      /*!< Min enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTENCLR_RAMUNDERFLOW_Max (0x1UL)      /*!< Max enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTENCLR_RAMUNDERFLOW_Clear (0x1UL)    /*!< Disable                                                              */
  #define PWM_INTENCLR_RAMUNDERFLOW_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_RAMUNDERFLOW_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMASEQ0END @Bit 9 : Write '1' to disable interrupt for event DMASEQ0END */
  #define PWM_INTENCLR_DMASEQ0END_Pos (9UL)          /*!< Position of DMASEQ0END field.                                        */
  #define PWM_INTENCLR_DMASEQ0END_Msk (0x1UL << PWM_INTENCLR_DMASEQ0END_Pos) /*!< Bit mask of DMASEQ0END field.                */
  #define PWM_INTENCLR_DMASEQ0END_Min (0x0UL)        /*!< Min enumerator value of DMASEQ0END field.                            */
  #define PWM_INTENCLR_DMASEQ0END_Max (0x1UL)        /*!< Max enumerator value of DMASEQ0END field.                            */
  #define PWM_INTENCLR_DMASEQ0END_Clear (0x1UL)      /*!< Disable                                                              */
  #define PWM_INTENCLR_DMASEQ0END_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_DMASEQ0END_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMASEQ0READY @Bit 10 : Write '1' to disable interrupt for event DMASEQ0READY */
  #define PWM_INTENCLR_DMASEQ0READY_Pos (10UL)       /*!< Position of DMASEQ0READY field.                                      */
  #define PWM_INTENCLR_DMASEQ0READY_Msk (0x1UL << PWM_INTENCLR_DMASEQ0READY_Pos) /*!< Bit mask of DMASEQ0READY field.          */
  #define PWM_INTENCLR_DMASEQ0READY_Min (0x0UL)      /*!< Min enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTENCLR_DMASEQ0READY_Max (0x1UL)      /*!< Max enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTENCLR_DMASEQ0READY_Clear (0x1UL)    /*!< Disable                                                              */
  #define PWM_INTENCLR_DMASEQ0READY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_DMASEQ0READY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMASEQ0BUSERROR @Bit 11 : Write '1' to disable interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Pos (11UL)    /*!< Position of DMASEQ0BUSERROR field.                                   */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTENCLR_DMASEQ0BUSERROR_Pos) /*!< Bit mask of DMASEQ0BUSERROR field. */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Clear (0x1UL) /*!< Disable                                                              */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define PWM_INTENCLR_DMASEQ0BUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* DMASEQ1END @Bit 12 : Write '1' to disable interrupt for event DMASEQ1END */
  #define PWM_INTENCLR_DMASEQ1END_Pos (12UL)         /*!< Position of DMASEQ1END field.                                        */
  #define PWM_INTENCLR_DMASEQ1END_Msk (0x1UL << PWM_INTENCLR_DMASEQ1END_Pos) /*!< Bit mask of DMASEQ1END field.                */
  #define PWM_INTENCLR_DMASEQ1END_Min (0x0UL)        /*!< Min enumerator value of DMASEQ1END field.                            */
  #define PWM_INTENCLR_DMASEQ1END_Max (0x1UL)        /*!< Max enumerator value of DMASEQ1END field.                            */
  #define PWM_INTENCLR_DMASEQ1END_Clear (0x1UL)      /*!< Disable                                                              */
  #define PWM_INTENCLR_DMASEQ1END_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_DMASEQ1END_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMASEQ1READY @Bit 13 : Write '1' to disable interrupt for event DMASEQ1READY */
  #define PWM_INTENCLR_DMASEQ1READY_Pos (13UL)       /*!< Position of DMASEQ1READY field.                                      */
  #define PWM_INTENCLR_DMASEQ1READY_Msk (0x1UL << PWM_INTENCLR_DMASEQ1READY_Pos) /*!< Bit mask of DMASEQ1READY field.          */
  #define PWM_INTENCLR_DMASEQ1READY_Min (0x0UL)      /*!< Min enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTENCLR_DMASEQ1READY_Max (0x1UL)      /*!< Max enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTENCLR_DMASEQ1READY_Clear (0x1UL)    /*!< Disable                                                              */
  #define PWM_INTENCLR_DMASEQ1READY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define PWM_INTENCLR_DMASEQ1READY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMASEQ1BUSERROR @Bit 14 : Write '1' to disable interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Pos (14UL)    /*!< Position of DMASEQ1BUSERROR field.                                   */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTENCLR_DMASEQ1BUSERROR_Pos) /*!< Bit mask of DMASEQ1BUSERROR field. */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Clear (0x1UL) /*!< Disable                                                              */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define PWM_INTENCLR_DMASEQ1BUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* COMPAREMATCH0 @Bit 15 : Write '1' to disable interrupt for event COMPAREMATCH[0] */
  #define PWM_INTENCLR_COMPAREMATCH0_Pos (15UL)      /*!< Position of COMPAREMATCH0 field.                                     */
  #define PWM_INTENCLR_COMPAREMATCH0_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH0_Pos) /*!< Bit mask of COMPAREMATCH0 field.       */
  #define PWM_INTENCLR_COMPAREMATCH0_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH0_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH0_Clear (0x1UL)   /*!< Disable                                                              */
  #define PWM_INTENCLR_COMPAREMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENCLR_COMPAREMATCH0_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* COMPAREMATCH1 @Bit 16 : Write '1' to disable interrupt for event COMPAREMATCH[1] */
  #define PWM_INTENCLR_COMPAREMATCH1_Pos (16UL)      /*!< Position of COMPAREMATCH1 field.                                     */
  #define PWM_INTENCLR_COMPAREMATCH1_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH1_Pos) /*!< Bit mask of COMPAREMATCH1 field.       */
  #define PWM_INTENCLR_COMPAREMATCH1_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH1_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH1_Clear (0x1UL)   /*!< Disable                                                              */
  #define PWM_INTENCLR_COMPAREMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENCLR_COMPAREMATCH1_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* COMPAREMATCH2 @Bit 17 : Write '1' to disable interrupt for event COMPAREMATCH[2] */
  #define PWM_INTENCLR_COMPAREMATCH2_Pos (17UL)      /*!< Position of COMPAREMATCH2 field.                                     */
  #define PWM_INTENCLR_COMPAREMATCH2_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH2_Pos) /*!< Bit mask of COMPAREMATCH2 field.       */
  #define PWM_INTENCLR_COMPAREMATCH2_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH2_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH2_Clear (0x1UL)   /*!< Disable                                                              */
  #define PWM_INTENCLR_COMPAREMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENCLR_COMPAREMATCH2_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* COMPAREMATCH3 @Bit 18 : Write '1' to disable interrupt for event COMPAREMATCH[3] */
  #define PWM_INTENCLR_COMPAREMATCH3_Pos (18UL)      /*!< Position of COMPAREMATCH3 field.                                     */
  #define PWM_INTENCLR_COMPAREMATCH3_Msk (0x1UL << PWM_INTENCLR_COMPAREMATCH3_Pos) /*!< Bit mask of COMPAREMATCH3 field.       */
  #define PWM_INTENCLR_COMPAREMATCH3_Min (0x0UL)     /*!< Min enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH3_Max (0x1UL)     /*!< Max enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTENCLR_COMPAREMATCH3_Clear (0x1UL)   /*!< Disable                                                              */
  #define PWM_INTENCLR_COMPAREMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define PWM_INTENCLR_COMPAREMATCH3_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* PWM_INTPEND: Pending interrupts */
  #define PWM_INTPEND_ResetValue (0x00000000UL)      /*!< Reset value of INTPEND register.                                     */

/* STOPPED @Bit 1 : Read pending status of interrupt for event STOPPED */
  #define PWM_INTPEND_STOPPED_Pos (1UL)              /*!< Position of STOPPED field.                                           */
  #define PWM_INTPEND_STOPPED_Msk (0x1UL << PWM_INTPEND_STOPPED_Pos) /*!< Bit mask of STOPPED field.                           */
  #define PWM_INTPEND_STOPPED_Min (0x0UL)            /*!< Min enumerator value of STOPPED field.                               */
  #define PWM_INTPEND_STOPPED_Max (0x1UL)            /*!< Max enumerator value of STOPPED field.                               */
  #define PWM_INTPEND_STOPPED_NotPending (0x0UL)     /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_STOPPED_Pending (0x1UL)        /*!< Read: Pending                                                        */

/* SEQSTARTED0 @Bit 2 : Read pending status of interrupt for event SEQSTARTED[0] */
  #define PWM_INTPEND_SEQSTARTED0_Pos (2UL)          /*!< Position of SEQSTARTED0 field.                                       */
  #define PWM_INTPEND_SEQSTARTED0_Msk (0x1UL << PWM_INTPEND_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field.               */
  #define PWM_INTPEND_SEQSTARTED0_Min (0x0UL)        /*!< Min enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTPEND_SEQSTARTED0_Max (0x1UL)        /*!< Max enumerator value of SEQSTARTED0 field.                           */
  #define PWM_INTPEND_SEQSTARTED0_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_SEQSTARTED0_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* SEQSTARTED1 @Bit 3 : Read pending status of interrupt for event SEQSTARTED[1] */
  #define PWM_INTPEND_SEQSTARTED1_Pos (3UL)          /*!< Position of SEQSTARTED1 field.                                       */
  #define PWM_INTPEND_SEQSTARTED1_Msk (0x1UL << PWM_INTPEND_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field.               */
  #define PWM_INTPEND_SEQSTARTED1_Min (0x0UL)        /*!< Min enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTPEND_SEQSTARTED1_Max (0x1UL)        /*!< Max enumerator value of SEQSTARTED1 field.                           */
  #define PWM_INTPEND_SEQSTARTED1_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_SEQSTARTED1_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* SEQEND0 @Bit 4 : Read pending status of interrupt for event SEQEND[0] */
  #define PWM_INTPEND_SEQEND0_Pos (4UL)              /*!< Position of SEQEND0 field.                                           */
  #define PWM_INTPEND_SEQEND0_Msk (0x1UL << PWM_INTPEND_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field.                           */
  #define PWM_INTPEND_SEQEND0_Min (0x0UL)            /*!< Min enumerator value of SEQEND0 field.                               */
  #define PWM_INTPEND_SEQEND0_Max (0x1UL)            /*!< Max enumerator value of SEQEND0 field.                               */
  #define PWM_INTPEND_SEQEND0_NotPending (0x0UL)     /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_SEQEND0_Pending (0x1UL)        /*!< Read: Pending                                                        */

/* SEQEND1 @Bit 5 : Read pending status of interrupt for event SEQEND[1] */
  #define PWM_INTPEND_SEQEND1_Pos (5UL)              /*!< Position of SEQEND1 field.                                           */
  #define PWM_INTPEND_SEQEND1_Msk (0x1UL << PWM_INTPEND_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field.                           */
  #define PWM_INTPEND_SEQEND1_Min (0x0UL)            /*!< Min enumerator value of SEQEND1 field.                               */
  #define PWM_INTPEND_SEQEND1_Max (0x1UL)            /*!< Max enumerator value of SEQEND1 field.                               */
  #define PWM_INTPEND_SEQEND1_NotPending (0x0UL)     /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_SEQEND1_Pending (0x1UL)        /*!< Read: Pending                                                        */

/* PWMPERIODEND @Bit 6 : Read pending status of interrupt for event PWMPERIODEND */
  #define PWM_INTPEND_PWMPERIODEND_Pos (6UL)         /*!< Position of PWMPERIODEND field.                                      */
  #define PWM_INTPEND_PWMPERIODEND_Msk (0x1UL << PWM_INTPEND_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field.            */
  #define PWM_INTPEND_PWMPERIODEND_Min (0x0UL)       /*!< Min enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTPEND_PWMPERIODEND_Max (0x1UL)       /*!< Max enumerator value of PWMPERIODEND field.                          */
  #define PWM_INTPEND_PWMPERIODEND_NotPending (0x0UL) /*!< Read: Not pending                                                   */
  #define PWM_INTPEND_PWMPERIODEND_Pending (0x1UL)   /*!< Read: Pending                                                        */

/* LOOPSDONE @Bit 7 : Read pending status of interrupt for event LOOPSDONE */
  #define PWM_INTPEND_LOOPSDONE_Pos (7UL)            /*!< Position of LOOPSDONE field.                                         */
  #define PWM_INTPEND_LOOPSDONE_Msk (0x1UL << PWM_INTPEND_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field.                     */
  #define PWM_INTPEND_LOOPSDONE_Min (0x0UL)          /*!< Min enumerator value of LOOPSDONE field.                             */
  #define PWM_INTPEND_LOOPSDONE_Max (0x1UL)          /*!< Max enumerator value of LOOPSDONE field.                             */
  #define PWM_INTPEND_LOOPSDONE_NotPending (0x0UL)   /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_LOOPSDONE_Pending (0x1UL)      /*!< Read: Pending                                                        */

/* RAMUNDERFLOW @Bit 8 : Read pending status of interrupt for event RAMUNDERFLOW */
  #define PWM_INTPEND_RAMUNDERFLOW_Pos (8UL)         /*!< Position of RAMUNDERFLOW field.                                      */
  #define PWM_INTPEND_RAMUNDERFLOW_Msk (0x1UL << PWM_INTPEND_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field.            */
  #define PWM_INTPEND_RAMUNDERFLOW_Min (0x0UL)       /*!< Min enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTPEND_RAMUNDERFLOW_Max (0x1UL)       /*!< Max enumerator value of RAMUNDERFLOW field.                          */
  #define PWM_INTPEND_RAMUNDERFLOW_NotPending (0x0UL) /*!< Read: Not pending                                                   */
  #define PWM_INTPEND_RAMUNDERFLOW_Pending (0x1UL)   /*!< Read: Pending                                                        */

/* DMASEQ0END @Bit 9 : Read pending status of interrupt for event DMASEQ0END */
  #define PWM_INTPEND_DMASEQ0END_Pos (9UL)           /*!< Position of DMASEQ0END field.                                        */
  #define PWM_INTPEND_DMASEQ0END_Msk (0x1UL << PWM_INTPEND_DMASEQ0END_Pos) /*!< Bit mask of DMASEQ0END field.                  */
  #define PWM_INTPEND_DMASEQ0END_Min (0x0UL)         /*!< Min enumerator value of DMASEQ0END field.                            */
  #define PWM_INTPEND_DMASEQ0END_Max (0x1UL)         /*!< Max enumerator value of DMASEQ0END field.                            */
  #define PWM_INTPEND_DMASEQ0END_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_DMASEQ0END_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* DMASEQ0READY @Bit 10 : Read pending status of interrupt for event DMASEQ0READY */
  #define PWM_INTPEND_DMASEQ0READY_Pos (10UL)        /*!< Position of DMASEQ0READY field.                                      */
  #define PWM_INTPEND_DMASEQ0READY_Msk (0x1UL << PWM_INTPEND_DMASEQ0READY_Pos) /*!< Bit mask of DMASEQ0READY field.            */
  #define PWM_INTPEND_DMASEQ0READY_Min (0x0UL)       /*!< Min enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTPEND_DMASEQ0READY_Max (0x1UL)       /*!< Max enumerator value of DMASEQ0READY field.                          */
  #define PWM_INTPEND_DMASEQ0READY_NotPending (0x0UL) /*!< Read: Not pending                                                   */
  #define PWM_INTPEND_DMASEQ0READY_Pending (0x1UL)   /*!< Read: Pending                                                        */

/* DMASEQ0BUSERROR @Bit 11 : Read pending status of interrupt for event DMASEQ0BUSERROR */
  #define PWM_INTPEND_DMASEQ0BUSERROR_Pos (11UL)     /*!< Position of DMASEQ0BUSERROR field.                                   */
  #define PWM_INTPEND_DMASEQ0BUSERROR_Msk (0x1UL << PWM_INTPEND_DMASEQ0BUSERROR_Pos) /*!< Bit mask of DMASEQ0BUSERROR field.   */
  #define PWM_INTPEND_DMASEQ0BUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTPEND_DMASEQ0BUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMASEQ0BUSERROR field.                       */
  #define PWM_INTPEND_DMASEQ0BUSERROR_NotPending (0x0UL) /*!< Read: Not pending                                                */
  #define PWM_INTPEND_DMASEQ0BUSERROR_Pending (0x1UL) /*!< Read: Pending                                                       */

/* DMASEQ1END @Bit 12 : Read pending status of interrupt for event DMASEQ1END */
  #define PWM_INTPEND_DMASEQ1END_Pos (12UL)          /*!< Position of DMASEQ1END field.                                        */
  #define PWM_INTPEND_DMASEQ1END_Msk (0x1UL << PWM_INTPEND_DMASEQ1END_Pos) /*!< Bit mask of DMASEQ1END field.                  */
  #define PWM_INTPEND_DMASEQ1END_Min (0x0UL)         /*!< Min enumerator value of DMASEQ1END field.                            */
  #define PWM_INTPEND_DMASEQ1END_Max (0x1UL)         /*!< Max enumerator value of DMASEQ1END field.                            */
  #define PWM_INTPEND_DMASEQ1END_NotPending (0x0UL)  /*!< Read: Not pending                                                    */
  #define PWM_INTPEND_DMASEQ1END_Pending (0x1UL)     /*!< Read: Pending                                                        */

/* DMASEQ1READY @Bit 13 : Read pending status of interrupt for event DMASEQ1READY */
  #define PWM_INTPEND_DMASEQ1READY_Pos (13UL)        /*!< Position of DMASEQ1READY field.                                      */
  #define PWM_INTPEND_DMASEQ1READY_Msk (0x1UL << PWM_INTPEND_DMASEQ1READY_Pos) /*!< Bit mask of DMASEQ1READY field.            */
  #define PWM_INTPEND_DMASEQ1READY_Min (0x0UL)       /*!< Min enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTPEND_DMASEQ1READY_Max (0x1UL)       /*!< Max enumerator value of DMASEQ1READY field.                          */
  #define PWM_INTPEND_DMASEQ1READY_NotPending (0x0UL) /*!< Read: Not pending                                                   */
  #define PWM_INTPEND_DMASEQ1READY_Pending (0x1UL)   /*!< Read: Pending                                                        */

/* DMASEQ1BUSERROR @Bit 14 : Read pending status of interrupt for event DMASEQ1BUSERROR */
  #define PWM_INTPEND_DMASEQ1BUSERROR_Pos (14UL)     /*!< Position of DMASEQ1BUSERROR field.                                   */
  #define PWM_INTPEND_DMASEQ1BUSERROR_Msk (0x1UL << PWM_INTPEND_DMASEQ1BUSERROR_Pos) /*!< Bit mask of DMASEQ1BUSERROR field.   */
  #define PWM_INTPEND_DMASEQ1BUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTPEND_DMASEQ1BUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMASEQ1BUSERROR field.                       */
  #define PWM_INTPEND_DMASEQ1BUSERROR_NotPending (0x0UL) /*!< Read: Not pending                                                */
  #define PWM_INTPEND_DMASEQ1BUSERROR_Pending (0x1UL) /*!< Read: Pending                                                       */

/* COMPAREMATCH0 @Bit 15 : Read pending status of interrupt for event COMPAREMATCH[0] */
  #define PWM_INTPEND_COMPAREMATCH0_Pos (15UL)       /*!< Position of COMPAREMATCH0 field.                                     */
  #define PWM_INTPEND_COMPAREMATCH0_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH0_Pos) /*!< Bit mask of COMPAREMATCH0 field.         */
  #define PWM_INTPEND_COMPAREMATCH0_Min (0x0UL)      /*!< Min enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTPEND_COMPAREMATCH0_Max (0x1UL)      /*!< Max enumerator value of COMPAREMATCH0 field.                         */
  #define PWM_INTPEND_COMPAREMATCH0_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define PWM_INTPEND_COMPAREMATCH0_Pending (0x1UL)  /*!< Read: Pending                                                        */

/* COMPAREMATCH1 @Bit 16 : Read pending status of interrupt for event COMPAREMATCH[1] */
  #define PWM_INTPEND_COMPAREMATCH1_Pos (16UL)       /*!< Position of COMPAREMATCH1 field.                                     */
  #define PWM_INTPEND_COMPAREMATCH1_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH1_Pos) /*!< Bit mask of COMPAREMATCH1 field.         */
  #define PWM_INTPEND_COMPAREMATCH1_Min (0x0UL)      /*!< Min enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTPEND_COMPAREMATCH1_Max (0x1UL)      /*!< Max enumerator value of COMPAREMATCH1 field.                         */
  #define PWM_INTPEND_COMPAREMATCH1_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define PWM_INTPEND_COMPAREMATCH1_Pending (0x1UL)  /*!< Read: Pending                                                        */

/* COMPAREMATCH2 @Bit 17 : Read pending status of interrupt for event COMPAREMATCH[2] */
  #define PWM_INTPEND_COMPAREMATCH2_Pos (17UL)       /*!< Position of COMPAREMATCH2 field.                                     */
  #define PWM_INTPEND_COMPAREMATCH2_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH2_Pos) /*!< Bit mask of COMPAREMATCH2 field.         */
  #define PWM_INTPEND_COMPAREMATCH2_Min (0x0UL)      /*!< Min enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTPEND_COMPAREMATCH2_Max (0x1UL)      /*!< Max enumerator value of COMPAREMATCH2 field.                         */
  #define PWM_INTPEND_COMPAREMATCH2_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define PWM_INTPEND_COMPAREMATCH2_Pending (0x1UL)  /*!< Read: Pending                                                        */

/* COMPAREMATCH3 @Bit 18 : Read pending status of interrupt for event COMPAREMATCH[3] */
  #define PWM_INTPEND_COMPAREMATCH3_Pos (18UL)       /*!< Position of COMPAREMATCH3 field.                                     */
  #define PWM_INTPEND_COMPAREMATCH3_Msk (0x1UL << PWM_INTPEND_COMPAREMATCH3_Pos) /*!< Bit mask of COMPAREMATCH3 field.         */
  #define PWM_INTPEND_COMPAREMATCH3_Min (0x0UL)      /*!< Min enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTPEND_COMPAREMATCH3_Max (0x1UL)      /*!< Max enumerator value of COMPAREMATCH3 field.                         */
  #define PWM_INTPEND_COMPAREMATCH3_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define PWM_INTPEND_COMPAREMATCH3_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* PWM_ENABLE: PWM module enable register */
  #define PWM_ENABLE_ResetValue (0x00000000UL)       /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bit 0 : Enable or disable PWM module */
  #define PWM_ENABLE_ENABLE_Pos (0UL)                /*!< Position of ENABLE field.                                            */
  #define PWM_ENABLE_ENABLE_Msk (0x1UL << PWM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                                */
  #define PWM_ENABLE_ENABLE_Min (0x0UL)              /*!< Min enumerator value of ENABLE field.                                */
  #define PWM_ENABLE_ENABLE_Max (0x1UL)              /*!< Max enumerator value of ENABLE field.                                */
  #define PWM_ENABLE_ENABLE_Disabled (0x0UL)         /*!< Disabled                                                             */
  #define PWM_ENABLE_ENABLE_Enabled (0x1UL)          /*!< Enable                                                               */


/* PWM_MODE: Selects operating mode of the wave counter */
  #define PWM_MODE_ResetValue (0x00000000UL)         /*!< Reset value of MODE register.                                        */

/* UPDOWN @Bit 0 : Selects up mode or up-and-down mode for the counter */
  #define PWM_MODE_UPDOWN_Pos (0UL)                  /*!< Position of UPDOWN field.                                            */
  #define PWM_MODE_UPDOWN_Msk (0x1UL << PWM_MODE_UPDOWN_Pos) /*!< Bit mask of UPDOWN field.                                    */
  #define PWM_MODE_UPDOWN_Min (0x0UL)                /*!< Min enumerator value of UPDOWN field.                                */
  #define PWM_MODE_UPDOWN_Max (0x1UL)                /*!< Max enumerator value of UPDOWN field.                                */
  #define PWM_MODE_UPDOWN_Up (0x0UL)                 /*!< Up counter, edge-aligned PWM duty cycle                              */
  #define PWM_MODE_UPDOWN_UpAndDown (0x1UL)          /*!< Up and down counter, center-aligned PWM duty cycle                   */


/* PWM_COUNTERTOP: Value up to which the pulse generator counter counts */
  #define PWM_COUNTERTOP_ResetValue (0x000003FFUL)   /*!< Reset value of COUNTERTOP register.                                  */

/* COUNTERTOP @Bits 0..14 : Value up to which the pulse generator counter counts. This register is ignored when
                            DECODER.MODE=WaveForm and only values from RAM are used. */

  #define PWM_COUNTERTOP_COUNTERTOP_Pos (0UL)        /*!< Position of COUNTERTOP field.                                        */
  #define PWM_COUNTERTOP_COUNTERTOP_Msk (0x7FFFUL << PWM_COUNTERTOP_COUNTERTOP_Pos) /*!< Bit mask of COUNTERTOP field.         */
  #define PWM_COUNTERTOP_COUNTERTOP_Min (0x0003UL)   /*!< Min value of COUNTERTOP field.                                       */
  #define PWM_COUNTERTOP_COUNTERTOP_Max (0x7FFFUL)   /*!< Max size of COUNTERTOP field.                                        */


/* PWM_PRESCALER: Configuration for PWM_CLK */
  #define PWM_PRESCALER_ResetValue (0x00000000UL)    /*!< Reset value of PRESCALER register.                                   */

/* PRESCALER @Bits 0..2 : Prescaler of PWM_CLK */
  #define PWM_PRESCALER_PRESCALER_Pos (0UL)          /*!< Position of PRESCALER field.                                         */
  #define PWM_PRESCALER_PRESCALER_Msk (0x7UL << PWM_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field.                 */
  #define PWM_PRESCALER_PRESCALER_Min (0x0UL)        /*!< Min enumerator value of PRESCALER field.                             */
  #define PWM_PRESCALER_PRESCALER_Max (0x7UL)        /*!< Max enumerator value of PRESCALER field.                             */
  #define PWM_PRESCALER_PRESCALER_DIV_1 (0x0UL)      /*!< Divide by 1 (16 MHz)                                                 */
  #define PWM_PRESCALER_PRESCALER_DIV_2 (0x1UL)      /*!< Divide by 2 (8 MHz)                                                  */
  #define PWM_PRESCALER_PRESCALER_DIV_4 (0x2UL)      /*!< Divide by 4 (4 MHz)                                                  */
  #define PWM_PRESCALER_PRESCALER_DIV_8 (0x3UL)      /*!< Divide by 8 (2 MHz)                                                  */
  #define PWM_PRESCALER_PRESCALER_DIV_16 (0x4UL)     /*!< Divide by 16 (1 MHz)                                                 */
  #define PWM_PRESCALER_PRESCALER_DIV_32 (0x5UL)     /*!< Divide by 32 (500 kHz)                                               */
  #define PWM_PRESCALER_PRESCALER_DIV_64 (0x6UL)     /*!< Divide by 64 (250 kHz)                                               */
  #define PWM_PRESCALER_PRESCALER_DIV_128 (0x7UL)    /*!< Divide by 128 (125 kHz)                                              */


/* PWM_DECODER: Configuration of the decoder */
  #define PWM_DECODER_ResetValue (0x00000000UL)      /*!< Reset value of DECODER register.                                     */

/* LOAD @Bits 0..1 : How a sequence is read from RAM and spread to the compare register */
  #define PWM_DECODER_LOAD_Pos (0UL)                 /*!< Position of LOAD field.                                              */
  #define PWM_DECODER_LOAD_Msk (0x3UL << PWM_DECODER_LOAD_Pos) /*!< Bit mask of LOAD field.                                    */
  #define PWM_DECODER_LOAD_Min (0x0UL)               /*!< Min enumerator value of LOAD field.                                  */
  #define PWM_DECODER_LOAD_Max (0x3UL)               /*!< Max enumerator value of LOAD field.                                  */
  #define PWM_DECODER_LOAD_Common (0x0UL)            /*!< 1st half word (16-bit) used in all PWM channels 0..3                 */
  #define PWM_DECODER_LOAD_Grouped (0x1UL)           /*!< 1st half word (16-bit) used in channel 0..1; 2nd word in channel 2..3*/
  #define PWM_DECODER_LOAD_Individual (0x2UL)        /*!< 1st half word (16-bit) in ch.0; 2nd in ch.1; ...; 4th in ch.3        */
  #define PWM_DECODER_LOAD_WaveForm (0x3UL)          /*!< 1st half word (16-bit) in ch.0; 2nd in ch.1; ...; 4th in COUNTERTOP  */

/* MODE @Bit 8 : Selects source for advancing the active sequence */
  #define PWM_DECODER_MODE_Pos (8UL)                 /*!< Position of MODE field.                                              */
  #define PWM_DECODER_MODE_Msk (0x1UL << PWM_DECODER_MODE_Pos) /*!< Bit mask of MODE field.                                    */
  #define PWM_DECODER_MODE_Min (0x0UL)               /*!< Min enumerator value of MODE field.                                  */
  #define PWM_DECODER_MODE_Max (0x1UL)               /*!< Max enumerator value of MODE field.                                  */
  #define PWM_DECODER_MODE_RefreshCount (0x0UL)      /*!< SEQ[n].REFRESH is used to determine loading internal compare
                                                          registers*/
  #define PWM_DECODER_MODE_NextStep (0x1UL)          /*!< NEXTSTEP task causes a new value to be loaded to internal compare
                                                          registers*/


/* PWM_LOOP: Number of playbacks of a loop */
  #define PWM_LOOP_ResetValue (0x00000000UL)         /*!< Reset value of LOOP register.                                        */

/* CNT @Bits 0..15 : Number of playbacks of pattern cycles */
  #define PWM_LOOP_CNT_Pos (0UL)                     /*!< Position of CNT field.                                               */
  #define PWM_LOOP_CNT_Msk (0xFFFFUL << PWM_LOOP_CNT_Pos) /*!< Bit mask of CNT field.                                          */
  #define PWM_LOOP_CNT_Min (0x0UL)                   /*!< Min enumerator value of CNT field.                                   */
  #define PWM_LOOP_CNT_Max (0x0UL)                   /*!< Max enumerator value of CNT field.                                   */
  #define PWM_LOOP_CNT_Disabled (0x0000UL)           /*!< Looping disabled (stop at the end of the sequence)                   */


/* PWM_IDLEOUT: Configure the output value on the PWM channel during idle */
  #define PWM_IDLEOUT_ResetValue (0x00000000UL)      /*!< Reset value of IDLEOUT register.                                     */

/* VAL0 @Bit 0 : Idle output value for PWM channel [0] */
  #define PWM_IDLEOUT_VAL0_Pos (0UL)                 /*!< Position of VAL0 field.                                              */
  #define PWM_IDLEOUT_VAL0_Msk (0x1UL << PWM_IDLEOUT_VAL0_Pos) /*!< Bit mask of VAL0 field.                                    */

/* VAL1 @Bit 1 : Idle output value for PWM channel [1] */
  #define PWM_IDLEOUT_VAL1_Pos (1UL)                 /*!< Position of VAL1 field.                                              */
  #define PWM_IDLEOUT_VAL1_Msk (0x1UL << PWM_IDLEOUT_VAL1_Pos) /*!< Bit mask of VAL1 field.                                    */

/* VAL2 @Bit 2 : Idle output value for PWM channel [2] */
  #define PWM_IDLEOUT_VAL2_Pos (2UL)                 /*!< Position of VAL2 field.                                              */
  #define PWM_IDLEOUT_VAL2_Msk (0x1UL << PWM_IDLEOUT_VAL2_Pos) /*!< Bit mask of VAL2 field.                                    */

/* VAL3 @Bit 3 : Idle output value for PWM channel [3] */
  #define PWM_IDLEOUT_VAL3_Pos (3UL)                 /*!< Position of VAL3 field.                                              */
  #define PWM_IDLEOUT_VAL3_Msk (0x1UL << PWM_IDLEOUT_VAL3_Pos) /*!< Bit mask of VAL3 field.                                    */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           QDEC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct QDEC_PSEL ===================================================== */
/**
  * @brief PSEL [QDEC_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  LED;                               /*!< (@ 0x00000000) Pin select for LED signal                             */
  __IOM uint32_t  A;                                 /*!< (@ 0x00000004) Pin select for A signal                               */
  __IOM uint32_t  B;                                 /*!< (@ 0x00000008) Pin select for B signal                               */
} NRF_QDEC_PSEL_Type;                                /*!< Size = 12 (0x00C)                                                    */

/* QDEC_PSEL_LED: Pin select for LED signal */
  #define QDEC_PSEL_LED_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of LED register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define QDEC_PSEL_LED_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define QDEC_PSEL_LED_PIN_Msk (0x1FUL << QDEC_PSEL_LED_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define QDEC_PSEL_LED_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define QDEC_PSEL_LED_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define QDEC_PSEL_LED_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define QDEC_PSEL_LED_PORT_Msk (0x7UL << QDEC_PSEL_LED_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define QDEC_PSEL_LED_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define QDEC_PSEL_LED_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define QDEC_PSEL_LED_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define QDEC_PSEL_LED_CONNECT_Msk (0x1UL << QDEC_PSEL_LED_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define QDEC_PSEL_LED_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define QDEC_PSEL_LED_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define QDEC_PSEL_LED_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define QDEC_PSEL_LED_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */


/* QDEC_PSEL_A: Pin select for A signal */
  #define QDEC_PSEL_A_ResetValue (0xFFFFFFFFUL)      /*!< Reset value of A register.                                           */

/* PIN @Bits 0..4 : Pin number */
  #define QDEC_PSEL_A_PIN_Pos (0UL)                  /*!< Position of PIN field.                                               */
  #define QDEC_PSEL_A_PIN_Msk (0x1FUL << QDEC_PSEL_A_PIN_Pos) /*!< Bit mask of PIN field.                                      */
  #define QDEC_PSEL_A_PIN_Min (0x00UL)               /*!< Min value of PIN field.                                              */
  #define QDEC_PSEL_A_PIN_Max (0x1FUL)               /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define QDEC_PSEL_A_PORT_Pos (5UL)                 /*!< Position of PORT field.                                              */
  #define QDEC_PSEL_A_PORT_Msk (0x7UL << QDEC_PSEL_A_PORT_Pos) /*!< Bit mask of PORT field.                                    */
  #define QDEC_PSEL_A_PORT_Min (0x0UL)               /*!< Min value of PORT field.                                             */
  #define QDEC_PSEL_A_PORT_Max (0x7UL)               /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define QDEC_PSEL_A_CONNECT_Pos (31UL)             /*!< Position of CONNECT field.                                           */
  #define QDEC_PSEL_A_CONNECT_Msk (0x1UL << QDEC_PSEL_A_CONNECT_Pos) /*!< Bit mask of CONNECT field.                           */
  #define QDEC_PSEL_A_CONNECT_Min (0x0UL)            /*!< Min enumerator value of CONNECT field.                               */
  #define QDEC_PSEL_A_CONNECT_Max (0x1UL)            /*!< Max enumerator value of CONNECT field.                               */
  #define QDEC_PSEL_A_CONNECT_Disconnected (0x1UL)   /*!< Disconnect                                                           */
  #define QDEC_PSEL_A_CONNECT_Connected (0x0UL)      /*!< Connect                                                              */


/* QDEC_PSEL_B: Pin select for B signal */
  #define QDEC_PSEL_B_ResetValue (0xFFFFFFFFUL)      /*!< Reset value of B register.                                           */

/* PIN @Bits 0..4 : Pin number */
  #define QDEC_PSEL_B_PIN_Pos (0UL)                  /*!< Position of PIN field.                                               */
  #define QDEC_PSEL_B_PIN_Msk (0x1FUL << QDEC_PSEL_B_PIN_Pos) /*!< Bit mask of PIN field.                                      */
  #define QDEC_PSEL_B_PIN_Min (0x00UL)               /*!< Min value of PIN field.                                              */
  #define QDEC_PSEL_B_PIN_Max (0x1FUL)               /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define QDEC_PSEL_B_PORT_Pos (5UL)                 /*!< Position of PORT field.                                              */
  #define QDEC_PSEL_B_PORT_Msk (0x7UL << QDEC_PSEL_B_PORT_Pos) /*!< Bit mask of PORT field.                                    */
  #define QDEC_PSEL_B_PORT_Min (0x0UL)               /*!< Min value of PORT field.                                             */
  #define QDEC_PSEL_B_PORT_Max (0x7UL)               /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define QDEC_PSEL_B_CONNECT_Pos (31UL)             /*!< Position of CONNECT field.                                           */
  #define QDEC_PSEL_B_CONNECT_Msk (0x1UL << QDEC_PSEL_B_CONNECT_Pos) /*!< Bit mask of CONNECT field.                           */
  #define QDEC_PSEL_B_CONNECT_Min (0x0UL)            /*!< Min enumerator value of CONNECT field.                               */
  #define QDEC_PSEL_B_CONNECT_Max (0x1UL)            /*!< Max enumerator value of CONNECT field.                               */
  #define QDEC_PSEL_B_CONNECT_Disconnected (0x1UL)   /*!< Disconnect                                                           */
  #define QDEC_PSEL_B_CONNECT_Connected (0x0UL)      /*!< Connect                                                              */


/* ======================================================= Struct QDEC ======================================================= */
/**
  * @brief Quadrature Decoder
  */
  typedef struct {                                   /*!< QDEC Structure                                                       */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Task starting the quadrature decoder                  */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Task stopping the quadrature decoder                  */
    __OM uint32_t TASKS_READCLRACC;                  /*!< (@ 0x00000008) Read and clear ACC and ACCDBL                         */
    __OM uint32_t TASKS_RDCLRACC;                    /*!< (@ 0x0000000C) Read and clear ACC                                    */
    __OM uint32_t TASKS_RDCLRDBL;                    /*!< (@ 0x00000010) Read and clear ACCDBL                                 */
    __IM uint32_t RESERVED[27];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IOM uint32_t SUBSCRIBE_READCLRACC;             /*!< (@ 0x00000088) Subscribe configuration for task READCLRACC           */
    __IOM uint32_t SUBSCRIBE_RDCLRACC;               /*!< (@ 0x0000008C) Subscribe configuration for task RDCLRACC             */
    __IOM uint32_t SUBSCRIBE_RDCLRDBL;               /*!< (@ 0x00000090) Subscribe configuration for task RDCLRDBL             */
    __IM uint32_t RESERVED1[27];
    __IOM uint32_t EVENTS_SAMPLERDY;                 /*!< (@ 0x00000100) Event being generated for every new sample value
                                                                         written to the SAMPLE register*/
    __IOM uint32_t EVENTS_REPORTRDY;                 /*!< (@ 0x00000104) Non-null report ready                                 */
    __IOM uint32_t EVENTS_ACCOF;                     /*!< (@ 0x00000108) ACC or ACCDBL register overflow                       */
    __IOM uint32_t EVENTS_DBLRDY;                    /*!< (@ 0x0000010C) Double displacement(s) detected                       */
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000110) QDEC has been stopped                                 */
    __IM uint32_t RESERVED2[27];
    __IOM uint32_t PUBLISH_SAMPLERDY;                /*!< (@ 0x00000180) Publish configuration for event SAMPLERDY             */
    __IOM uint32_t PUBLISH_REPORTRDY;                /*!< (@ 0x00000184) Publish configuration for event REPORTRDY             */
    __IOM uint32_t PUBLISH_ACCOF;                    /*!< (@ 0x00000188) Publish configuration for event ACCOF                 */
    __IOM uint32_t PUBLISH_DBLRDY;                   /*!< (@ 0x0000018C) Publish configuration for event DBLRDY                */
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000190) Publish configuration for event STOPPED               */
    __IM uint32_t RESERVED3[27];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED4[64];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED5[125];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable the quadrature decoder                         */
    __IOM uint32_t LEDPOL;                           /*!< (@ 0x00000504) LED output pin polarity                               */
    __IOM uint32_t SAMPLEPER;                        /*!< (@ 0x00000508) Sample period                                         */
    __IM int32_t  SAMPLE;                            /*!< (@ 0x0000050C) Motion sample value                                   */
    __IOM uint32_t REPORTPER;                        /*!< (@ 0x00000510) Number of samples to be taken before REPORTRDY and
                                                                         DBLRDY events can be generated*/
    __IM int32_t  ACC;                               /*!< (@ 0x00000514) Register accumulating the valid transitions           */
    __IM int32_t  ACCREAD;                           /*!< (@ 0x00000518) Snapshot of the ACC register, updated by the READCLRACC
                                                                         or RDCLRACC task*/
    __IOM NRF_QDEC_PSEL_Type PSEL;                   /*!< (@ 0x0000051C) (unspecified)                                         */
    __IOM uint32_t DBFEN;                            /*!< (@ 0x00000528) Enable input debounce filters                         */
    __IM uint32_t RESERVED6[5];
    __IOM uint32_t LEDPRE;                           /*!< (@ 0x00000540) Time period the LED is switched ON prior to sampling  */
    __IM uint32_t ACCDBL;                            /*!< (@ 0x00000544) Register accumulating the number of detected double
                                                                         transitions*/
    __IM uint32_t ACCDBLREAD;                        /*!< (@ 0x00000548) Snapshot of the ACCDBL, updated by the READCLRACC or
                                                                         RDCLRDBL task*/
  } NRF_QDEC_Type;                                   /*!< Size = 1356 (0x54C)                                                  */

/* QDEC_TASKS_START: Task starting the quadrature decoder */
  #define QDEC_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Task starting the quadrature decoder */
  #define QDEC_TASKS_START_TASKS_START_Pos (0UL)     /*!< Position of TASKS_START field.                                       */
  #define QDEC_TASKS_START_TASKS_START_Msk (0x1UL << QDEC_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.     */
  #define QDEC_TASKS_START_TASKS_START_Min (0x1UL)   /*!< Min enumerator value of TASKS_START field.                           */
  #define QDEC_TASKS_START_TASKS_START_Max (0x1UL)   /*!< Max enumerator value of TASKS_START field.                           */
  #define QDEC_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                       */


/* QDEC_TASKS_STOP: Task stopping the quadrature decoder */
  #define QDEC_TASKS_STOP_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Task stopping the quadrature decoder */
  #define QDEC_TASKS_STOP_TASKS_STOP_Pos (0UL)       /*!< Position of TASKS_STOP field.                                        */
  #define QDEC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << QDEC_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.          */
  #define QDEC_TASKS_STOP_TASKS_STOP_Min (0x1UL)     /*!< Min enumerator value of TASKS_STOP field.                            */
  #define QDEC_TASKS_STOP_TASKS_STOP_Max (0x1UL)     /*!< Max enumerator value of TASKS_STOP field.                            */
  #define QDEC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                         */


/* QDEC_TASKS_READCLRACC: Read and clear ACC and ACCDBL */
  #define QDEC_TASKS_READCLRACC_ResetValue (0x00000000UL) /*!< Reset value of TASKS_READCLRACC register.                       */

/* TASKS_READCLRACC @Bit 0 : Read and clear ACC and ACCDBL */
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos (0UL) /*!< Position of TASKS_READCLRACC field.                            */
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Msk (0x1UL << QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos) /*!< Bit mask of
                                                                            TASKS_READCLRACC field.*/
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Min (0x1UL) /*!< Min enumerator value of TASKS_READCLRACC field.              */
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Max (0x1UL) /*!< Max enumerator value of TASKS_READCLRACC field.              */
  #define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Trigger (0x1UL) /*!< Trigger task                                             */


/* QDEC_TASKS_RDCLRACC: Read and clear ACC */
  #define QDEC_TASKS_RDCLRACC_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RDCLRACC register.                           */

/* TASKS_RDCLRACC @Bit 0 : Read and clear ACC */
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos (0UL) /*!< Position of TASKS_RDCLRACC field.                                  */
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Msk (0x1UL << QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos) /*!< Bit mask of
                                                                            TASKS_RDCLRACC field.*/
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Min (0x1UL) /*!< Min enumerator value of TASKS_RDCLRACC field.                    */
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Max (0x1UL) /*!< Max enumerator value of TASKS_RDCLRACC field.                    */
  #define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Trigger (0x1UL) /*!< Trigger task                                                 */


/* QDEC_TASKS_RDCLRDBL: Read and clear ACCDBL */
  #define QDEC_TASKS_RDCLRDBL_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RDCLRDBL register.                           */

/* TASKS_RDCLRDBL @Bit 0 : Read and clear ACCDBL */
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos (0UL) /*!< Position of TASKS_RDCLRDBL field.                                  */
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Msk (0x1UL << QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos) /*!< Bit mask of
                                                                            TASKS_RDCLRDBL field.*/
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Min (0x1UL) /*!< Min enumerator value of TASKS_RDCLRDBL field.                    */
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Max (0x1UL) /*!< Max enumerator value of TASKS_RDCLRDBL field.                    */
  #define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Trigger (0x1UL) /*!< Trigger task                                                 */


/* QDEC_SUBSCRIBE_START: Subscribe configuration for task START */
  #define QDEC_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define QDEC_SUBSCRIBE_START_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define QDEC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define QDEC_SUBSCRIBE_START_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define QDEC_SUBSCRIBE_START_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_START_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define QDEC_SUBSCRIBE_START_EN_Msk (0x1UL << QDEC_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                        */
  #define QDEC_SUBSCRIBE_START_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_START_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_START_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define QDEC_SUBSCRIBE_START_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* QDEC_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define QDEC_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define QDEC_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_STOP_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define QDEC_SUBSCRIBE_STOP_EN_Msk (0x1UL << QDEC_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                          */
  #define QDEC_SUBSCRIBE_STOP_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_STOP_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_STOP_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define QDEC_SUBSCRIBE_STOP_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* QDEC_SUBSCRIBE_READCLRACC: Subscribe configuration for task READCLRACC */
  #define QDEC_SUBSCRIBE_READCLRACC_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_READCLRACC register.               */

/* CHIDX @Bits 0..7 : DPPI channel that task READCLRACC will subscribe to */
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_READCLRACC_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Msk (0x1UL << QDEC_SUBSCRIBE_READCLRACC_EN_Pos) /*!< Bit mask of EN field.              */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Disabled (0x0UL) /*!< Disable subscription                                              */
  #define QDEC_SUBSCRIBE_READCLRACC_EN_Enabled (0x1UL) /*!< Enable subscription                                                */


/* QDEC_SUBSCRIBE_RDCLRACC: Subscribe configuration for task RDCLRACC */
  #define QDEC_SUBSCRIBE_RDCLRACC_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RDCLRACC register.                   */

/* CHIDX @Bits 0..7 : DPPI channel that task RDCLRACC will subscribe to */
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Msk (0x1UL << QDEC_SUBSCRIBE_RDCLRACC_EN_Pos) /*!< Bit mask of EN field.                  */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define QDEC_SUBSCRIBE_RDCLRACC_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* QDEC_SUBSCRIBE_RDCLRDBL: Subscribe configuration for task RDCLRDBL */
  #define QDEC_SUBSCRIBE_RDCLRDBL_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RDCLRDBL register.                   */

/* CHIDX @Bits 0..7 : DPPI channel that task RDCLRDBL will subscribe to */
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Msk (0x1UL << QDEC_SUBSCRIBE_RDCLRDBL_EN_Pos) /*!< Bit mask of EN field.                  */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define QDEC_SUBSCRIBE_RDCLRDBL_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* QDEC_EVENTS_SAMPLERDY: Event being generated for every new sample value written to the SAMPLE register */
  #define QDEC_EVENTS_SAMPLERDY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SAMPLERDY register.                       */

/* EVENTS_SAMPLERDY @Bit 0 : Event being generated for every new sample value written to the SAMPLE register */
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos (0UL) /*!< Position of EVENTS_SAMPLERDY field.                            */
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Msk (0x1UL << QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos) /*!< Bit mask of
                                                                            EVENTS_SAMPLERDY field.*/
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Min (0x0UL) /*!< Min enumerator value of EVENTS_SAMPLERDY field.              */
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Max (0x1UL) /*!< Max enumerator value of EVENTS_SAMPLERDY field.              */
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_NotGenerated (0x0UL) /*!< Event not generated                                 */
  #define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Generated (0x1UL) /*!< Event generated                                        */


/* QDEC_EVENTS_REPORTRDY: Non-null report ready */
  #define QDEC_EVENTS_REPORTRDY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_REPORTRDY register.                       */

/* EVENTS_REPORTRDY @Bit 0 : Non-null report ready */
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos (0UL) /*!< Position of EVENTS_REPORTRDY field.                            */
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Msk (0x1UL << QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos) /*!< Bit mask of
                                                                            EVENTS_REPORTRDY field.*/
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Min (0x0UL) /*!< Min enumerator value of EVENTS_REPORTRDY field.              */
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Max (0x1UL) /*!< Max enumerator value of EVENTS_REPORTRDY field.              */
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_NotGenerated (0x0UL) /*!< Event not generated                                 */
  #define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Generated (0x1UL) /*!< Event generated                                        */


/* QDEC_EVENTS_ACCOF: ACC or ACCDBL register overflow */
  #define QDEC_EVENTS_ACCOF_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ACCOF register.                               */

/* EVENTS_ACCOF @Bit 0 : ACC or ACCDBL register overflow */
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos (0UL)   /*!< Position of EVENTS_ACCOF field.                                      */
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Msk (0x1UL << QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos) /*!< Bit mask of EVENTS_ACCOF field.*/
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Min (0x0UL) /*!< Min enumerator value of EVENTS_ACCOF field.                          */
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Max (0x1UL) /*!< Max enumerator value of EVENTS_ACCOF field.                          */
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Generated (0x1UL) /*!< Event generated                                                */


/* QDEC_EVENTS_DBLRDY: Double displacement(s) detected */
  #define QDEC_EVENTS_DBLRDY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DBLRDY register.                             */

/* EVENTS_DBLRDY @Bit 0 : Double displacement(s) detected */
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos (0UL) /*!< Position of EVENTS_DBLRDY field.                                     */
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Msk (0x1UL << QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos) /*!< Bit mask of EVENTS_DBLRDY
                                                                            field.*/
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Min (0x0UL) /*!< Min enumerator value of EVENTS_DBLRDY field.                       */
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Max (0x1UL) /*!< Max enumerator value of EVENTS_DBLRDY field.                       */
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_NotGenerated (0x0UL) /*!< Event not generated                                       */
  #define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Generated (0x1UL) /*!< Event generated                                              */


/* QDEC_EVENTS_STOPPED: QDEC has been stopped */
  #define QDEC_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                           */

/* EVENTS_STOPPED @Bit 0 : QDEC has been stopped */
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                  */
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                    */
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                    */
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                            */


/* QDEC_PUBLISH_SAMPLERDY: Publish configuration for event SAMPLERDY */
  #define QDEC_PUBLISH_SAMPLERDY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SAMPLERDY register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that event SAMPLERDY will publish to */
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_SAMPLERDY_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define QDEC_PUBLISH_SAMPLERDY_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Msk (0x1UL << QDEC_PUBLISH_SAMPLERDY_EN_Pos) /*!< Bit mask of EN field.                    */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define QDEC_PUBLISH_SAMPLERDY_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* QDEC_PUBLISH_REPORTRDY: Publish configuration for event REPORTRDY */
  #define QDEC_PUBLISH_REPORTRDY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_REPORTRDY register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that event REPORTRDY will publish to */
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_REPORTRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define QDEC_PUBLISH_REPORTRDY_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_REPORTRDY_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define QDEC_PUBLISH_REPORTRDY_EN_Msk (0x1UL << QDEC_PUBLISH_REPORTRDY_EN_Pos) /*!< Bit mask of EN field.                    */
  #define QDEC_PUBLISH_REPORTRDY_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_REPORTRDY_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_REPORTRDY_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define QDEC_PUBLISH_REPORTRDY_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* QDEC_PUBLISH_ACCOF: Publish configuration for event ACCOF */
  #define QDEC_PUBLISH_ACCOF_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ACCOF register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that event ACCOF will publish to */
  #define QDEC_PUBLISH_ACCOF_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define QDEC_PUBLISH_ACCOF_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_ACCOF_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define QDEC_PUBLISH_ACCOF_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define QDEC_PUBLISH_ACCOF_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_ACCOF_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define QDEC_PUBLISH_ACCOF_EN_Msk (0x1UL << QDEC_PUBLISH_ACCOF_EN_Pos) /*!< Bit mask of EN field.                            */
  #define QDEC_PUBLISH_ACCOF_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_ACCOF_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_ACCOF_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define QDEC_PUBLISH_ACCOF_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* QDEC_PUBLISH_DBLRDY: Publish configuration for event DBLRDY */
  #define QDEC_PUBLISH_DBLRDY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DBLRDY register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event DBLRDY will publish to */
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_DBLRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define QDEC_PUBLISH_DBLRDY_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_DBLRDY_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define QDEC_PUBLISH_DBLRDY_EN_Msk (0x1UL << QDEC_PUBLISH_DBLRDY_EN_Pos) /*!< Bit mask of EN field.                          */
  #define QDEC_PUBLISH_DBLRDY_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_DBLRDY_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_DBLRDY_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define QDEC_PUBLISH_DBLRDY_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* QDEC_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define QDEC_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define QDEC_PUBLISH_STOPPED_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define QDEC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define QDEC_PUBLISH_STOPPED_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define QDEC_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define QDEC_PUBLISH_STOPPED_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define QDEC_PUBLISH_STOPPED_EN_Msk (0x1UL << QDEC_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                        */
  #define QDEC_PUBLISH_STOPPED_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_STOPPED_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define QDEC_PUBLISH_STOPPED_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define QDEC_PUBLISH_STOPPED_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* QDEC_SHORTS: Shortcuts between local events and tasks */
  #define QDEC_SHORTS_ResetValue (0x00000000UL)      /*!< Reset value of SHORTS register.                                      */

/* REPORTRDY_READCLRACC @Bit 0 : Shortcut between event REPORTRDY and task READCLRACC */
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Pos (0UL) /*!< Position of REPORTRDY_READCLRACC field.                              */
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_READCLRACC_Pos) /*!< Bit mask of
                                                                            REPORTRDY_READCLRACC field.*/
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Min (0x0UL) /*!< Min enumerator value of REPORTRDY_READCLRACC field.                */
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Max (0x1UL) /*!< Max enumerator value of REPORTRDY_READCLRACC field.                */
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled (0x0UL) /*!< Disable shortcut                                              */
  #define QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled (0x1UL) /*!< Enable shortcut                                                */

/* SAMPLERDY_STOP @Bit 1 : Shortcut between event SAMPLERDY and task STOP */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Pos (1UL)       /*!< Position of SAMPLERDY_STOP field.                                    */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_STOP_Pos) /*!< Bit mask of SAMPLERDY_STOP field.      */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Min (0x0UL)     /*!< Min enumerator value of SAMPLERDY_STOP field.                        */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Max (0x1UL)     /*!< Max enumerator value of SAMPLERDY_STOP field.                        */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define QDEC_SHORTS_SAMPLERDY_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* REPORTRDY_RDCLRACC @Bit 2 : Shortcut between event REPORTRDY and task RDCLRACC */
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos (2UL)   /*!< Position of REPORTRDY_RDCLRACC field.                                */
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos) /*!< Bit mask of REPORTRDY_RDCLRACC
                                                                            field.*/
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Min (0x0UL) /*!< Min enumerator value of REPORTRDY_RDCLRACC field.                    */
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Max (0x1UL) /*!< Max enumerator value of REPORTRDY_RDCLRACC field.                    */
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Disabled (0x0UL) /*!< Disable shortcut                                                */
  #define QDEC_SHORTS_REPORTRDY_RDCLRACC_Enabled (0x1UL) /*!< Enable shortcut                                                  */

/* REPORTRDY_STOP @Bit 3 : Shortcut between event REPORTRDY and task STOP */
  #define QDEC_SHORTS_REPORTRDY_STOP_Pos (3UL)       /*!< Position of REPORTRDY_STOP field.                                    */
  #define QDEC_SHORTS_REPORTRDY_STOP_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_STOP_Pos) /*!< Bit mask of REPORTRDY_STOP field.      */
  #define QDEC_SHORTS_REPORTRDY_STOP_Min (0x0UL)     /*!< Min enumerator value of REPORTRDY_STOP field.                        */
  #define QDEC_SHORTS_REPORTRDY_STOP_Max (0x1UL)     /*!< Max enumerator value of REPORTRDY_STOP field.                        */
  #define QDEC_SHORTS_REPORTRDY_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define QDEC_SHORTS_REPORTRDY_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* DBLRDY_RDCLRDBL @Bit 4 : Shortcut between event DBLRDY and task RDCLRDBL */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos (4UL)      /*!< Position of DBLRDY_RDCLRDBL field.                                   */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Msk (0x1UL << QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos) /*!< Bit mask of DBLRDY_RDCLRDBL field.   */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Min (0x0UL)    /*!< Min enumerator value of DBLRDY_RDCLRDBL field.                       */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Max (0x1UL)    /*!< Max enumerator value of DBLRDY_RDCLRDBL field.                       */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define QDEC_SHORTS_DBLRDY_RDCLRDBL_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* DBLRDY_STOP @Bit 5 : Shortcut between event DBLRDY and task STOP */
  #define QDEC_SHORTS_DBLRDY_STOP_Pos (5UL)          /*!< Position of DBLRDY_STOP field.                                       */
  #define QDEC_SHORTS_DBLRDY_STOP_Msk (0x1UL << QDEC_SHORTS_DBLRDY_STOP_Pos) /*!< Bit mask of DBLRDY_STOP field.               */
  #define QDEC_SHORTS_DBLRDY_STOP_Min (0x0UL)        /*!< Min enumerator value of DBLRDY_STOP field.                           */
  #define QDEC_SHORTS_DBLRDY_STOP_Max (0x1UL)        /*!< Max enumerator value of DBLRDY_STOP field.                           */
  #define QDEC_SHORTS_DBLRDY_STOP_Disabled (0x0UL)   /*!< Disable shortcut                                                     */
  #define QDEC_SHORTS_DBLRDY_STOP_Enabled (0x1UL)    /*!< Enable shortcut                                                      */

/* SAMPLERDY_READCLRACC @Bit 6 : Shortcut between event SAMPLERDY and task READCLRACC */
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos (6UL) /*!< Position of SAMPLERDY_READCLRACC field.                              */
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos) /*!< Bit mask of
                                                                            SAMPLERDY_READCLRACC field.*/
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Min (0x0UL) /*!< Min enumerator value of SAMPLERDY_READCLRACC field.                */
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Max (0x1UL) /*!< Max enumerator value of SAMPLERDY_READCLRACC field.                */
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Disabled (0x0UL) /*!< Disable shortcut                                              */
  #define QDEC_SHORTS_SAMPLERDY_READCLRACC_Enabled (0x1UL) /*!< Enable shortcut                                                */


/* QDEC_INTENSET: Enable interrupt */
  #define QDEC_INTENSET_ResetValue (0x00000000UL)    /*!< Reset value of INTENSET register.                                    */

/* SAMPLERDY @Bit 0 : Write '1' to enable interrupt for event SAMPLERDY */
  #define QDEC_INTENSET_SAMPLERDY_Pos (0UL)          /*!< Position of SAMPLERDY field.                                         */
  #define QDEC_INTENSET_SAMPLERDY_Msk (0x1UL << QDEC_INTENSET_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field.                 */
  #define QDEC_INTENSET_SAMPLERDY_Min (0x0UL)        /*!< Min enumerator value of SAMPLERDY field.                             */
  #define QDEC_INTENSET_SAMPLERDY_Max (0x1UL)        /*!< Max enumerator value of SAMPLERDY field.                             */
  #define QDEC_INTENSET_SAMPLERDY_Set (0x1UL)        /*!< Enable                                                               */
  #define QDEC_INTENSET_SAMPLERDY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define QDEC_INTENSET_SAMPLERDY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* REPORTRDY @Bit 1 : Write '1' to enable interrupt for event REPORTRDY */
  #define QDEC_INTENSET_REPORTRDY_Pos (1UL)          /*!< Position of REPORTRDY field.                                         */
  #define QDEC_INTENSET_REPORTRDY_Msk (0x1UL << QDEC_INTENSET_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field.                 */
  #define QDEC_INTENSET_REPORTRDY_Min (0x0UL)        /*!< Min enumerator value of REPORTRDY field.                             */
  #define QDEC_INTENSET_REPORTRDY_Max (0x1UL)        /*!< Max enumerator value of REPORTRDY field.                             */
  #define QDEC_INTENSET_REPORTRDY_Set (0x1UL)        /*!< Enable                                                               */
  #define QDEC_INTENSET_REPORTRDY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define QDEC_INTENSET_REPORTRDY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* ACCOF @Bit 2 : Write '1' to enable interrupt for event ACCOF */
  #define QDEC_INTENSET_ACCOF_Pos (2UL)              /*!< Position of ACCOF field.                                             */
  #define QDEC_INTENSET_ACCOF_Msk (0x1UL << QDEC_INTENSET_ACCOF_Pos) /*!< Bit mask of ACCOF field.                             */
  #define QDEC_INTENSET_ACCOF_Min (0x0UL)            /*!< Min enumerator value of ACCOF field.                                 */
  #define QDEC_INTENSET_ACCOF_Max (0x1UL)            /*!< Max enumerator value of ACCOF field.                                 */
  #define QDEC_INTENSET_ACCOF_Set (0x1UL)            /*!< Enable                                                               */
  #define QDEC_INTENSET_ACCOF_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define QDEC_INTENSET_ACCOF_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* DBLRDY @Bit 3 : Write '1' to enable interrupt for event DBLRDY */
  #define QDEC_INTENSET_DBLRDY_Pos (3UL)             /*!< Position of DBLRDY field.                                            */
  #define QDEC_INTENSET_DBLRDY_Msk (0x1UL << QDEC_INTENSET_DBLRDY_Pos) /*!< Bit mask of DBLRDY field.                          */
  #define QDEC_INTENSET_DBLRDY_Min (0x0UL)           /*!< Min enumerator value of DBLRDY field.                                */
  #define QDEC_INTENSET_DBLRDY_Max (0x1UL)           /*!< Max enumerator value of DBLRDY field.                                */
  #define QDEC_INTENSET_DBLRDY_Set (0x1UL)           /*!< Enable                                                               */
  #define QDEC_INTENSET_DBLRDY_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define QDEC_INTENSET_DBLRDY_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* STOPPED @Bit 4 : Write '1' to enable interrupt for event STOPPED */
  #define QDEC_INTENSET_STOPPED_Pos (4UL)            /*!< Position of STOPPED field.                                           */
  #define QDEC_INTENSET_STOPPED_Msk (0x1UL << QDEC_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define QDEC_INTENSET_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define QDEC_INTENSET_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define QDEC_INTENSET_STOPPED_Set (0x1UL)          /*!< Enable                                                               */
  #define QDEC_INTENSET_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define QDEC_INTENSET_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */


/* QDEC_INTENCLR: Disable interrupt */
  #define QDEC_INTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of INTENCLR register.                                    */

/* SAMPLERDY @Bit 0 : Write '1' to disable interrupt for event SAMPLERDY */
  #define QDEC_INTENCLR_SAMPLERDY_Pos (0UL)          /*!< Position of SAMPLERDY field.                                         */
  #define QDEC_INTENCLR_SAMPLERDY_Msk (0x1UL << QDEC_INTENCLR_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field.                 */
  #define QDEC_INTENCLR_SAMPLERDY_Min (0x0UL)        /*!< Min enumerator value of SAMPLERDY field.                             */
  #define QDEC_INTENCLR_SAMPLERDY_Max (0x1UL)        /*!< Max enumerator value of SAMPLERDY field.                             */
  #define QDEC_INTENCLR_SAMPLERDY_Clear (0x1UL)      /*!< Disable                                                              */
  #define QDEC_INTENCLR_SAMPLERDY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define QDEC_INTENCLR_SAMPLERDY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* REPORTRDY @Bit 1 : Write '1' to disable interrupt for event REPORTRDY */
  #define QDEC_INTENCLR_REPORTRDY_Pos (1UL)          /*!< Position of REPORTRDY field.                                         */
  #define QDEC_INTENCLR_REPORTRDY_Msk (0x1UL << QDEC_INTENCLR_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field.                 */
  #define QDEC_INTENCLR_REPORTRDY_Min (0x0UL)        /*!< Min enumerator value of REPORTRDY field.                             */
  #define QDEC_INTENCLR_REPORTRDY_Max (0x1UL)        /*!< Max enumerator value of REPORTRDY field.                             */
  #define QDEC_INTENCLR_REPORTRDY_Clear (0x1UL)      /*!< Disable                                                              */
  #define QDEC_INTENCLR_REPORTRDY_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define QDEC_INTENCLR_REPORTRDY_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* ACCOF @Bit 2 : Write '1' to disable interrupt for event ACCOF */
  #define QDEC_INTENCLR_ACCOF_Pos (2UL)              /*!< Position of ACCOF field.                                             */
  #define QDEC_INTENCLR_ACCOF_Msk (0x1UL << QDEC_INTENCLR_ACCOF_Pos) /*!< Bit mask of ACCOF field.                             */
  #define QDEC_INTENCLR_ACCOF_Min (0x0UL)            /*!< Min enumerator value of ACCOF field.                                 */
  #define QDEC_INTENCLR_ACCOF_Max (0x1UL)            /*!< Max enumerator value of ACCOF field.                                 */
  #define QDEC_INTENCLR_ACCOF_Clear (0x1UL)          /*!< Disable                                                              */
  #define QDEC_INTENCLR_ACCOF_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define QDEC_INTENCLR_ACCOF_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* DBLRDY @Bit 3 : Write '1' to disable interrupt for event DBLRDY */
  #define QDEC_INTENCLR_DBLRDY_Pos (3UL)             /*!< Position of DBLRDY field.                                            */
  #define QDEC_INTENCLR_DBLRDY_Msk (0x1UL << QDEC_INTENCLR_DBLRDY_Pos) /*!< Bit mask of DBLRDY field.                          */
  #define QDEC_INTENCLR_DBLRDY_Min (0x0UL)           /*!< Min enumerator value of DBLRDY field.                                */
  #define QDEC_INTENCLR_DBLRDY_Max (0x1UL)           /*!< Max enumerator value of DBLRDY field.                                */
  #define QDEC_INTENCLR_DBLRDY_Clear (0x1UL)         /*!< Disable                                                              */
  #define QDEC_INTENCLR_DBLRDY_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define QDEC_INTENCLR_DBLRDY_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* STOPPED @Bit 4 : Write '1' to disable interrupt for event STOPPED */
  #define QDEC_INTENCLR_STOPPED_Pos (4UL)            /*!< Position of STOPPED field.                                           */
  #define QDEC_INTENCLR_STOPPED_Msk (0x1UL << QDEC_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define QDEC_INTENCLR_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define QDEC_INTENCLR_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define QDEC_INTENCLR_STOPPED_Clear (0x1UL)        /*!< Disable                                                              */
  #define QDEC_INTENCLR_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define QDEC_INTENCLR_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */


/* QDEC_ENABLE: Enable the quadrature decoder */
  #define QDEC_ENABLE_ResetValue (0x00000000UL)      /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bit 0 : Enable or disable the quadrature decoder */
  #define QDEC_ENABLE_ENABLE_Pos (0UL)               /*!< Position of ENABLE field.                                            */
  #define QDEC_ENABLE_ENABLE_Msk (0x1UL << QDEC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                              */
  #define QDEC_ENABLE_ENABLE_Min (0x0UL)             /*!< Min enumerator value of ENABLE field.                                */
  #define QDEC_ENABLE_ENABLE_Max (0x1UL)             /*!< Max enumerator value of ENABLE field.                                */
  #define QDEC_ENABLE_ENABLE_Disabled (0x0UL)        /*!< Disable                                                              */
  #define QDEC_ENABLE_ENABLE_Enabled (0x1UL)         /*!< Enable                                                               */


/* QDEC_LEDPOL: LED output pin polarity */
  #define QDEC_LEDPOL_ResetValue (0x00000000UL)      /*!< Reset value of LEDPOL register.                                      */

/* LEDPOL @Bit 0 : LED output pin polarity */
  #define QDEC_LEDPOL_LEDPOL_Pos (0UL)               /*!< Position of LEDPOL field.                                            */
  #define QDEC_LEDPOL_LEDPOL_Msk (0x1UL << QDEC_LEDPOL_LEDPOL_Pos) /*!< Bit mask of LEDPOL field.                              */
  #define QDEC_LEDPOL_LEDPOL_Min (0x0UL)             /*!< Min enumerator value of LEDPOL field.                                */
  #define QDEC_LEDPOL_LEDPOL_Max (0x1UL)             /*!< Max enumerator value of LEDPOL field.                                */
  #define QDEC_LEDPOL_LEDPOL_ActiveLow (0x0UL)       /*!< Led active on output pin low                                         */
  #define QDEC_LEDPOL_LEDPOL_ActiveHigh (0x1UL)      /*!< Led active on output pin high                                        */


/* QDEC_SAMPLEPER: Sample period */
  #define QDEC_SAMPLEPER_ResetValue (0x00000000UL)   /*!< Reset value of SAMPLEPER register.                                   */

/* SAMPLEPER @Bits 0..3 : Sample period. The SAMPLE register will be updated for every new sample */
  #define QDEC_SAMPLEPER_SAMPLEPER_Pos (0UL)         /*!< Position of SAMPLEPER field.                                         */
  #define QDEC_SAMPLEPER_SAMPLEPER_Msk (0xFUL << QDEC_SAMPLEPER_SAMPLEPER_Pos) /*!< Bit mask of SAMPLEPER field.               */
  #define QDEC_SAMPLEPER_SAMPLEPER_Min (0x0UL)       /*!< Min enumerator value of SAMPLEPER field.                             */
  #define QDEC_SAMPLEPER_SAMPLEPER_Max (0xAUL)       /*!< Max enumerator value of SAMPLEPER field.                             */
  #define QDEC_SAMPLEPER_SAMPLEPER_128us (0x0UL)     /*!< 128 us                                                               */
  #define QDEC_SAMPLEPER_SAMPLEPER_256us (0x1UL)     /*!< 256 us                                                               */
  #define QDEC_SAMPLEPER_SAMPLEPER_512us (0x2UL)     /*!< 512 us                                                               */
  #define QDEC_SAMPLEPER_SAMPLEPER_1024us (0x3UL)    /*!< 1024 us                                                              */
  #define QDEC_SAMPLEPER_SAMPLEPER_2048us (0x4UL)    /*!< 2048 us                                                              */
  #define QDEC_SAMPLEPER_SAMPLEPER_4096us (0x5UL)    /*!< 4096 us                                                              */
  #define QDEC_SAMPLEPER_SAMPLEPER_8192us (0x6UL)    /*!< 8192 us                                                              */
  #define QDEC_SAMPLEPER_SAMPLEPER_16384us (0x7UL)   /*!< 16384 us                                                             */
  #define QDEC_SAMPLEPER_SAMPLEPER_32ms (0x8UL)      /*!< 32768 us                                                             */
  #define QDEC_SAMPLEPER_SAMPLEPER_65ms (0x9UL)      /*!< 65536 us                                                             */
  #define QDEC_SAMPLEPER_SAMPLEPER_131ms (0xAUL)     /*!< 131072 us                                                            */


/* QDEC_SAMPLE: Motion sample value */
  #define QDEC_SAMPLE_ResetValue (0x00000000UL)      /*!< Reset value of SAMPLE register.                                      */

/* SAMPLE @Bits 0..31 : Last motion sample */
  #define QDEC_SAMPLE_SAMPLE_Pos (0UL)               /*!< Position of SAMPLE field.                                            */
  #define QDEC_SAMPLE_SAMPLE_Msk (0xFFFFFFFFUL << QDEC_SAMPLE_SAMPLE_Pos) /*!< Bit mask of SAMPLE field.                       */
  #define QDEC_SAMPLE_SAMPLE_Min (0xFFFFFFFFUL)      /*!< Min value of SAMPLE field.                                           */
  #define QDEC_SAMPLE_SAMPLE_Max (0x00000002UL)      /*!< Max size of SAMPLE field.                                            */


/* QDEC_REPORTPER: Number of samples to be taken before REPORTRDY and DBLRDY events can be generated */
  #define QDEC_REPORTPER_ResetValue (0x00000000UL)   /*!< Reset value of REPORTPER register.                                   */

/* REPORTPER @Bits 0..3 : Specifies the number of samples to be accumulated in the ACC register before the REPORTRDY and DBLRDY
                          events can be generated. */

  #define QDEC_REPORTPER_REPORTPER_Pos (0UL)         /*!< Position of REPORTPER field.                                         */
  #define QDEC_REPORTPER_REPORTPER_Msk (0xFUL << QDEC_REPORTPER_REPORTPER_Pos) /*!< Bit mask of REPORTPER field.               */
  #define QDEC_REPORTPER_REPORTPER_Min (0x0UL)       /*!< Min enumerator value of REPORTPER field.                             */
  #define QDEC_REPORTPER_REPORTPER_Max (0x8UL)       /*!< Max enumerator value of REPORTPER field.                             */
  #define QDEC_REPORTPER_REPORTPER_10Smpl (0x0UL)    /*!< 10 samples/report                                                    */
  #define QDEC_REPORTPER_REPORTPER_40Smpl (0x1UL)    /*!< 40 samples/report                                                    */
  #define QDEC_REPORTPER_REPORTPER_80Smpl (0x2UL)    /*!< 80 samples/report                                                    */
  #define QDEC_REPORTPER_REPORTPER_120Smpl (0x3UL)   /*!< 120 samples/report                                                   */
  #define QDEC_REPORTPER_REPORTPER_160Smpl (0x4UL)   /*!< 160 samples/report                                                   */
  #define QDEC_REPORTPER_REPORTPER_200Smpl (0x5UL)   /*!< 200 samples/report                                                   */
  #define QDEC_REPORTPER_REPORTPER_240Smpl (0x6UL)   /*!< 240 samples/report                                                   */
  #define QDEC_REPORTPER_REPORTPER_280Smpl (0x7UL)   /*!< 280 samples/report                                                   */
  #define QDEC_REPORTPER_REPORTPER_1Smpl (0x8UL)     /*!< 1 sample/report                                                      */


/* QDEC_ACC: Register accumulating the valid transitions */
  #define QDEC_ACC_ResetValue (0x00000000UL)         /*!< Reset value of ACC register.                                         */

/* ACC @Bits 0..31 : Register accumulating all valid samples (not double transition) read from the SAMPLE register. */
  #define QDEC_ACC_ACC_Pos (0UL)                     /*!< Position of ACC field.                                               */
  #define QDEC_ACC_ACC_Msk (0xFFFFFFFFUL << QDEC_ACC_ACC_Pos) /*!< Bit mask of ACC field.                                      */
  #define QDEC_ACC_ACC_Min (0xFFFFFC00UL)            /*!< Min value of ACC field.                                              */
  #define QDEC_ACC_ACC_Max (0x000003FFUL)            /*!< Max size of ACC field.                                               */


/* QDEC_ACCREAD: Snapshot of the ACC register, updated by the READCLRACC or RDCLRACC task */
  #define QDEC_ACCREAD_ResetValue (0x00000000UL)     /*!< Reset value of ACCREAD register.                                     */

/* ACCREAD @Bits 0..31 : Snapshot of the ACC register. */
  #define QDEC_ACCREAD_ACCREAD_Pos (0UL)             /*!< Position of ACCREAD field.                                           */
  #define QDEC_ACCREAD_ACCREAD_Msk (0xFFFFFFFFUL << QDEC_ACCREAD_ACCREAD_Pos) /*!< Bit mask of ACCREAD field.                  */
  #define QDEC_ACCREAD_ACCREAD_Min (0xFFFFFC00UL)    /*!< Min value of ACCREAD field.                                          */
  #define QDEC_ACCREAD_ACCREAD_Max (0x000003FFUL)    /*!< Max size of ACCREAD field.                                           */


/* QDEC_DBFEN: Enable input debounce filters */
  #define QDEC_DBFEN_ResetValue (0x00000000UL)       /*!< Reset value of DBFEN register.                                       */

/* DBFEN @Bit 0 : Enable input debounce filters */
  #define QDEC_DBFEN_DBFEN_Pos (0UL)                 /*!< Position of DBFEN field.                                             */
  #define QDEC_DBFEN_DBFEN_Msk (0x1UL << QDEC_DBFEN_DBFEN_Pos) /*!< Bit mask of DBFEN field.                                   */
  #define QDEC_DBFEN_DBFEN_Min (0x0UL)               /*!< Min enumerator value of DBFEN field.                                 */
  #define QDEC_DBFEN_DBFEN_Max (0x1UL)               /*!< Max enumerator value of DBFEN field.                                 */
  #define QDEC_DBFEN_DBFEN_Disabled (0x0UL)          /*!< Debounce input filters disabled                                      */
  #define QDEC_DBFEN_DBFEN_Enabled (0x1UL)           /*!< Debounce input filters enabled                                       */


/* QDEC_LEDPRE: Time period the LED is switched ON prior to sampling */
  #define QDEC_LEDPRE_ResetValue (0x00000010UL)      /*!< Reset value of LEDPRE register.                                      */

/* LEDPRE @Bits 0..8 : Period in us the LED is switched on prior to sampling */
  #define QDEC_LEDPRE_LEDPRE_Pos (0UL)               /*!< Position of LEDPRE field.                                            */
  #define QDEC_LEDPRE_LEDPRE_Msk (0x1FFUL << QDEC_LEDPRE_LEDPRE_Pos) /*!< Bit mask of LEDPRE field.                            */
  #define QDEC_LEDPRE_LEDPRE_Min (0x001UL)           /*!< Min value of LEDPRE field.                                           */
  #define QDEC_LEDPRE_LEDPRE_Max (0x1FFUL)           /*!< Max size of LEDPRE field.                                            */


/* QDEC_ACCDBL: Register accumulating the number of detected double transitions */
  #define QDEC_ACCDBL_ResetValue (0x00000000UL)      /*!< Reset value of ACCDBL register.                                      */

/* ACCDBL @Bits 0..3 : Register accumulating the number of detected double or illegal transitions. ( SAMPLE = 2 ). */
  #define QDEC_ACCDBL_ACCDBL_Pos (0UL)               /*!< Position of ACCDBL field.                                            */
  #define QDEC_ACCDBL_ACCDBL_Msk (0xFUL << QDEC_ACCDBL_ACCDBL_Pos) /*!< Bit mask of ACCDBL field.                              */
  #define QDEC_ACCDBL_ACCDBL_Min (0x0UL)             /*!< Min value of ACCDBL field.                                           */
  #define QDEC_ACCDBL_ACCDBL_Max (0xFUL)             /*!< Max size of ACCDBL field.                                            */


/* QDEC_ACCDBLREAD: Snapshot of the ACCDBL, updated by the READCLRACC or RDCLRDBL task */
  #define QDEC_ACCDBLREAD_ResetValue (0x00000000UL)  /*!< Reset value of ACCDBLREAD register.                                  */

/* ACCDBLREAD @Bits 0..3 : Snapshot of the ACCDBL register. This field is updated when the READCLRACC or RDCLRDBL task is
                           triggered. */

  #define QDEC_ACCDBLREAD_ACCDBLREAD_Pos (0UL)       /*!< Position of ACCDBLREAD field.                                        */
  #define QDEC_ACCDBLREAD_ACCDBLREAD_Msk (0xFUL << QDEC_ACCDBLREAD_ACCDBLREAD_Pos) /*!< Bit mask of ACCDBLREAD field.          */
  #define QDEC_ACCDBLREAD_ACCDBLREAD_Min (0x0UL)     /*!< Min value of ACCDBLREAD field.                                       */
  #define QDEC_ACCDBLREAD_ACCDBLREAD_Max (0xFUL)     /*!< Max size of ACCDBLREAD field.                                        */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ==================================================== Struct RADIO_PSEL ==================================================== */
/**
  * @brief PSEL [RADIO_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DFEGPIO[7];                        /*!< (@ 0x00000000) Pin select for DFE pin n                              */
} NRF_RADIO_PSEL_Type;                               /*!< Size = 28 (0x01C)                                                    */

/* RADIO_PSEL_DFEGPIO: Pin select for DFE pin n */
  #define RADIO_PSEL_DFEGPIO_MaxCount (7UL)          /*!< Max size of DFEGPIO[7] array.                                        */
  #define RADIO_PSEL_DFEGPIO_MaxIndex (6UL)          /*!< Max index of DFEGPIO[7] array.                                       */
  #define RADIO_PSEL_DFEGPIO_MinIndex (0UL)          /*!< Min index of DFEGPIO[7] array.                                       */
  #define RADIO_PSEL_DFEGPIO_ResetValue (0xFFFFFFFFUL) /*!< Reset value of DFEGPIO[7] register.                                */

/* PIN @Bits 0..4 : Pin number */
  #define RADIO_PSEL_DFEGPIO_PIN_Pos (0UL)           /*!< Position of PIN field.                                               */
  #define RADIO_PSEL_DFEGPIO_PIN_Msk (0x1FUL << RADIO_PSEL_DFEGPIO_PIN_Pos) /*!< Bit mask of PIN field.                        */
  #define RADIO_PSEL_DFEGPIO_PIN_Min (0x00UL)        /*!< Min value of PIN field.                                              */
  #define RADIO_PSEL_DFEGPIO_PIN_Max (0x1FUL)        /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..8 : Port number */
  #define RADIO_PSEL_DFEGPIO_PORT_Pos (5UL)          /*!< Position of PORT field.                                              */
  #define RADIO_PSEL_DFEGPIO_PORT_Msk (0xFUL << RADIO_PSEL_DFEGPIO_PORT_Pos) /*!< Bit mask of PORT field.                      */
  #define RADIO_PSEL_DFEGPIO_PORT_Min (0x0UL)        /*!< Min value of PORT field.                                             */
  #define RADIO_PSEL_DFEGPIO_PORT_Max (0xFUL)        /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Pos (31UL)      /*!< Position of CONNECT field.                                           */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Msk (0x1UL << RADIO_PSEL_DFEGPIO_CONNECT_Pos) /*!< Bit mask of CONNECT field.             */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Min (0x0UL)     /*!< Min enumerator value of CONNECT field.                               */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Max (0x1UL)     /*!< Max enumerator value of CONNECT field.                               */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                      */
  #define RADIO_PSEL_DFEGPIO_CONNECT_Connected (0x0UL) /*!< Connect                                                            */



/* ================================================= Struct RADIO_DFEPACKET ================================================== */
/**
  * @brief DFEPACKET [RADIO_DFEPACKET] DFE packet EasyDMA channel
  */
typedef struct {
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000000) Data pointer                                          */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000004) Maximum number of bytes to transfer                   */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x00000008) Number of bytes transferred in the last transaction   */
  __IM  uint32_t  CURRENTAMOUNT;                     /*!< (@ 0x0000000C) Number of bytes transferred in the current transaction*/
} NRF_RADIO_DFEPACKET_Type;                          /*!< Size = 16 (0x010)                                                    */

/* RADIO_DFEPACKET_PTR: Data pointer */
  #define RADIO_DFEPACKET_PTR_ResetValue (0x00000000UL) /*!< Reset value of PTR register.                                      */

/* PTR @Bits 0..31 : Data pointer */
  #define RADIO_DFEPACKET_PTR_PTR_Pos (0UL)          /*!< Position of PTR field.                                               */
  #define RADIO_DFEPACKET_PTR_PTR_Msk (0xFFFFFFFFUL << RADIO_DFEPACKET_PTR_PTR_Pos) /*!< Bit mask of PTR field.                */


/* RADIO_DFEPACKET_MAXCNT: Maximum number of bytes to transfer */
  #define RADIO_DFEPACKET_MAXCNT_ResetValue (0x00004000UL) /*!< Reset value of MAXCNT register.                                */

/* MAXCNT @Bits 0..15 : Maximum number of bytes to transfer */
  #define RADIO_DFEPACKET_MAXCNT_MAXCNT_Pos (0UL)    /*!< Position of MAXCNT field.                                            */
  #define RADIO_DFEPACKET_MAXCNT_MAXCNT_Msk (0xFFFFUL << RADIO_DFEPACKET_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.     */


/* RADIO_DFEPACKET_AMOUNT: Number of bytes transferred in the last transaction */
  #define RADIO_DFEPACKET_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction */
  #define RADIO_DFEPACKET_AMOUNT_AMOUNT_Pos (0UL)    /*!< Position of AMOUNT field.                                            */
  #define RADIO_DFEPACKET_AMOUNT_AMOUNT_Msk (0xFFFFUL << RADIO_DFEPACKET_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.     */


/* RADIO_DFEPACKET_CURRENTAMOUNT: Number of bytes transferred in the current transaction */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_ResetValue (0x00000000UL) /*!< Reset value of CURRENTAMOUNT register.                  */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the current transaction. Continuously updated. */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field.                                        */
  #define RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Msk (0xFFFFUL << RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of
                                                                            AMOUNT field.*/



/* ================================================== Struct RADIO_CSTONES =================================================== */
/**
  * @brief CSTONES [RADIO_CSTONES] (unspecified)
  */
typedef struct {
  __IOM uint32_t  MODE;                              /*!< (@ 0x00000000) Selects the mode(s) that are activated on the start
                                                                         signal*/
  __IOM uint32_t  NUMSAMPLES;                        /*!< (@ 0x00000004) Number of input samples at 2MHz sample rate           */
  __IOM uint32_t  NEXTFREQUENCY;                     /*!< (@ 0x00000008) The value of FREQUENCY that will be used in the next
                                                                         step*/
  __IOM uint32_t  FFOIN;                             /*!< (@ 0x0000000C) Override value of FFO (Fractional Frequency Offset) if
                                                                         not to be based on the frequency estimate derived from
                                                                         CnAcc (autocorrelation of the scaled input signal)
                                                                         value*/
  __IOM uint32_t  FFOSOURCE;                         /*!< (@ 0x00000010) Source of FFO                                         */
  __IOM uint32_t  FAEPEER;                           /*!< (@ 0x00000014) FAEPEER (Frequency Actuation Error) of peer if known.
                                                                         Used during Mode 0 steps.*/
  __IOM uint32_t  PHASESHIFT;                        /*!< (@ 0x00000018) Parameter used in TPM, provided by software           */
  __IOM uint32_t  NUMSAMPLESCOEFF;                   /*!< (@ 0x0000001C) Parameter used in TPM, provided by software           */
  __IM  uint32_t  PCT16;                             /*!< (@ 0x00000020) Mean magnitude and mean phase converted to IQ         */
  __IM  uint32_t  MAGPHASEMEAN;                      /*!< (@ 0x00000024) Mean magnitude and phase of the signal before it is
                                                                         converted to PCT16*/
  __IM  uint32_t  IQRAWMEAN;                         /*!< (@ 0x00000028) Mean of IQ values                                     */
  __IM  uint32_t  MAGSTD;                            /*!< (@ 0x0000002C) Magnitude standard deviation approximation            */
  __IM  uint32_t  CNACC;                             /*!< (@ 0x00000030) Output of the autocorrelation of the accumulated IQ
                                                                         signal*/
  __IM  uint32_t  FFOEST;                            /*!< (@ 0x00000034) FFO estimate                                          */
  __IOM uint32_t  DOWNSAMPLE;                        /*!< (@ 0x00000038) Turn on/off down sample of input IQ-signals           */
  __IM  uint32_t  FINETUNENEXT;                      /*!< (@ 0x0000003C) Number of full ADPLL finetune steps                   */
  __IM  uint32_t  CFOPHASE;                          /*!< (@ 0x00000040) Cordic output of CnAcc                                */
  __IM  uint32_t  FREQOFFSET;                        /*!< (@ 0x00000044) Frequency offset estimate                             */
  __IM  uint32_t  PCT11;                             /*!< (@ 0x00000048) Mean magnitude and mean phase converted to IQ. IQ
                                                                         values limited to [-1024,1023].*/
  __IM  uint32_t  LFAENEXT;                          /*!< (@ 0x0000004C) Quantization error between ADPLL frequency and the
                                                                         desired value of FFO * RF Frequency. Values limited to
                                                                         [-64,63] with units 7.6294 Hz.*/
} NRF_RADIO_CSTONES_Type;                            /*!< Size = 80 (0x050)                                                    */

/* RADIO_CSTONES_MODE: Selects the mode(s) that are activated on the start signal */
  #define RADIO_CSTONES_MODE_ResetValue (0x00000003UL) /*!< Reset value of MODE register.                                      */

/* TPM @Bit 0 : Enable or disable TPM */
  #define RADIO_CSTONES_MODE_TPM_Pos (0UL)           /*!< Position of TPM field.                                               */
  #define RADIO_CSTONES_MODE_TPM_Msk (0x1UL << RADIO_CSTONES_MODE_TPM_Pos) /*!< Bit mask of TPM field.                         */
  #define RADIO_CSTONES_MODE_TPM_Min (0x0UL)         /*!< Min enumerator value of TPM field.                                   */
  #define RADIO_CSTONES_MODE_TPM_Max (0x1UL)         /*!< Max enumerator value of TPM field.                                   */
  #define RADIO_CSTONES_MODE_TPM_Disabled (0x0UL)    /*!< TPM is disabled                                                      */
  #define RADIO_CSTONES_MODE_TPM_Enabled (0x1UL)     /*!< TPM is enabled                                                       */

/* TFM @Bit 1 : Enable or disable TFM */
  #define RADIO_CSTONES_MODE_TFM_Pos (1UL)           /*!< Position of TFM field.                                               */
  #define RADIO_CSTONES_MODE_TFM_Msk (0x1UL << RADIO_CSTONES_MODE_TFM_Pos) /*!< Bit mask of TFM field.                         */
  #define RADIO_CSTONES_MODE_TFM_Min (0x0UL)         /*!< Min enumerator value of TFM field.                                   */
  #define RADIO_CSTONES_MODE_TFM_Max (0x1UL)         /*!< Max enumerator value of TFM field.                                   */
  #define RADIO_CSTONES_MODE_TFM_Disabled (0x0UL)    /*!< TFM is disabled                                                      */
  #define RADIO_CSTONES_MODE_TFM_Enabled (0x1UL)     /*!< TFM is enabled                                                       */


/* RADIO_CSTONES_NUMSAMPLES: Number of input samples at 2MHz sample rate */
  #define RADIO_CSTONES_NUMSAMPLES_ResetValue (0x000000A0UL) /*!< Reset value of NUMSAMPLES register.                          */

/* NUMSAMPLES @Bits 0..7 : Maximum value supported is 160 */
  #define RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Pos (0UL) /*!< Position of NUMSAMPLES field.                                     */
  #define RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Msk (0xFFUL << RADIO_CSTONES_NUMSAMPLES_NUMSAMPLES_Pos) /*!< Bit mask of
                                                                            NUMSAMPLES field.*/


/* RADIO_CSTONES_NEXTFREQUENCY: The value of FREQUENCY that will be used in the next step */
  #define RADIO_CSTONES_NEXTFREQUENCY_ResetValue (0x00000000UL) /*!< Reset value of NEXTFREQUENCY register.                    */

/* NEXTFREQUENCY @Bits 0..6 : Frequency = 2400 + FREQUENCY (MHz) */
  #define RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Pos (0UL) /*!< Position of NEXTFREQUENCY field.                            */
  #define RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Msk (0x7FUL << RADIO_CSTONES_NEXTFREQUENCY_NEXTFREQUENCY_Pos) /*!< Bit mask
                                                                            of NEXTFREQUENCY field.*/


/* RADIO_CSTONES_FFOIN: Override value of FFO (Fractional Frequency Offset) if not to be based on the frequency estimate derived
                         from CnAcc (autocorrelation of the scaled input signal) value */

  #define RADIO_CSTONES_FFOIN_ResetValue (0x00000000UL) /*!< Reset value of FFOIN register.                                    */

/* FFFIN @Bits 0..11 : Units 62.5 ppb. Max range +/-100 ppm plus margin. */
  #define RADIO_CSTONES_FFOIN_FFFIN_Pos (0UL)        /*!< Position of FFFIN field.                                             */
  #define RADIO_CSTONES_FFOIN_FFFIN_Msk (0xFFFUL << RADIO_CSTONES_FFOIN_FFFIN_Pos) /*!< Bit mask of FFFIN field.               */


/* RADIO_CSTONES_FFOSOURCE: Source of FFO */
  #define RADIO_CSTONES_FFOSOURCE_ResetValue (0x00000001UL) /*!< Reset value of FFOSOURCE register.                            */

/* FFOSOURCE @Bit 0 : Use external or internal FFOSOURCE */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Pos (0UL) /*!< Position of FFOSOURCE field.                                        */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Msk (0x1UL << RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Pos) /*!< Bit mask of FFOSOURCE
                                                                            field.*/
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Min (0x0UL) /*!< Min enumerator value of FFOSOURCE field.                          */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Max (0x1UL) /*!< Max enumerator value of FFOSOURCE field.                          */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_External (0x0UL) /*!< Use FFOIN                                                    */
  #define RADIO_CSTONES_FFOSOURCE_FFOSOURCE_Internal (0x1UL) /*!< Calc FFO from CnAcc                                          */


/* RADIO_CSTONES_FAEPEER: FAEPEER (Frequency Actuation Error) of peer if known. Used during Mode 0 steps. */
  #define RADIO_CSTONES_FAEPEER_ResetValue (0x00000000UL) /*!< Reset value of FAEPEER register.                                */

/* FAEPEER @Bits 0..7 : Units 31.25 ppb. */
  #define RADIO_CSTONES_FAEPEER_FAEPEER_Pos (0UL)    /*!< Position of FAEPEER field.                                           */
  #define RADIO_CSTONES_FAEPEER_FAEPEER_Msk (0xFFUL << RADIO_CSTONES_FAEPEER_FAEPEER_Pos) /*!< Bit mask of FAEPEER field.      */


/* RADIO_CSTONES_PHASESHIFT: Parameter used in TPM, provided by software */
  #define RADIO_CSTONES_PHASESHIFT_ResetValue (0x00000000UL) /*!< Reset value of PHASESHIFT register.                          */

/* PHASESHIFT @Bits 0..15 : Phase shift used in TPM calculation */
  #define RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Pos (0UL) /*!< Position of PHASESHIFT field.                                     */
  #define RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Msk (0xFFFFUL << RADIO_CSTONES_PHASESHIFT_PHASESHIFT_Pos) /*!< Bit mask of
                                                                            PHASESHIFT field.*/


/* RADIO_CSTONES_NUMSAMPLESCOEFF: Parameter used in TPM, provided by software */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_ResetValue (0x0000199AUL) /*!< Reset value of NUMSAMPLESCOEFF register.                */

/* NUMSAMPLESCOEFF @Bits 0..15 : Coefficient 2**16/(numSamples/16) in Q1.15 format (Default numsamples value is 160) */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Pos (0UL) /*!< Position of NUMSAMPLESCOEFF field.                      */
  #define RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Msk (0xFFFFUL << RADIO_CSTONES_NUMSAMPLESCOEFF_NUMSAMPLESCOEFF_Pos) /*!<
                                                                            Bit mask of NUMSAMPLESCOEFF field.*/


/* RADIO_CSTONES_PCT16: Mean magnitude and mean phase converted to IQ */
  #define RADIO_CSTONES_PCT16_ResetValue (0x00000000UL) /*!< Reset value of PCT16 register.                                    */

/* PCT16I @Bits 0..15 : Inphase */
  #define RADIO_CSTONES_PCT16_PCT16I_Pos (0UL)       /*!< Position of PCT16I field.                                            */
  #define RADIO_CSTONES_PCT16_PCT16I_Msk (0xFFFFUL << RADIO_CSTONES_PCT16_PCT16I_Pos) /*!< Bit mask of PCT16I field.           */

/* PCT16Q @Bits 16..31 : Quadrature */
  #define RADIO_CSTONES_PCT16_PCT16Q_Pos (16UL)      /*!< Position of PCT16Q field.                                            */
  #define RADIO_CSTONES_PCT16_PCT16Q_Msk (0xFFFFUL << RADIO_CSTONES_PCT16_PCT16Q_Pos) /*!< Bit mask of PCT16Q field.           */


/* RADIO_CSTONES_MAGPHASEMEAN: Mean magnitude and phase of the signal before it is converted to PCT16 */
  #define RADIO_CSTONES_MAGPHASEMEAN_ResetValue (0x00000000UL) /*!< Reset value of MAGPHASEMEAN register.                      */

/* PHASE @Bits 0..15 : Mean phase */
  #define RADIO_CSTONES_MAGPHASEMEAN_PHASE_Pos (0UL) /*!< Position of PHASE field.                                             */
  #define RADIO_CSTONES_MAGPHASEMEAN_PHASE_Msk (0xFFFFUL << RADIO_CSTONES_MAGPHASEMEAN_PHASE_Pos) /*!< Bit mask of PHASE field.*/

/* MAG @Bits 16..31 : Mean magnitude */
  #define RADIO_CSTONES_MAGPHASEMEAN_MAG_Pos (16UL)  /*!< Position of MAG field.                                               */
  #define RADIO_CSTONES_MAGPHASEMEAN_MAG_Msk (0xFFFFUL << RADIO_CSTONES_MAGPHASEMEAN_MAG_Pos) /*!< Bit mask of MAG field.      */


/* RADIO_CSTONES_IQRAWMEAN: Mean of IQ values */
  #define RADIO_CSTONES_IQRAWMEAN_ResetValue (0x00000000UL) /*!< Reset value of IQRAWMEAN register.                            */

/* IQRAWMEANI @Bits 0..15 : Inphase */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Pos (0UL) /*!< Position of IQRAWMEANI field.                                      */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Msk (0xFFFFUL << RADIO_CSTONES_IQRAWMEAN_IQRAWMEANI_Pos) /*!< Bit mask of
                                                                            IQRAWMEANI field.*/

/* IQRAWMEANQ @Bits 16..31 : Quadrature */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Pos (16UL) /*!< Position of IQRAWMEANQ field.                                     */
  #define RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Msk (0xFFFFUL << RADIO_CSTONES_IQRAWMEAN_IQRAWMEANQ_Pos) /*!< Bit mask of
                                                                            IQRAWMEANQ field.*/


/* RADIO_CSTONES_MAGSTD: Magnitude standard deviation approximation */
  #define RADIO_CSTONES_MAGSTD_ResetValue (0x00000000UL) /*!< Reset value of MAGSTD register.                                  */

/* MAGSTD @Bits 0..15 : Magnitude standard deviation approximation */
  #define RADIO_CSTONES_MAGSTD_MAGSTD_Pos (0UL)      /*!< Position of MAGSTD field.                                            */
  #define RADIO_CSTONES_MAGSTD_MAGSTD_Msk (0xFFFFUL << RADIO_CSTONES_MAGSTD_MAGSTD_Pos) /*!< Bit mask of MAGSTD field.         */


/* RADIO_CSTONES_CNACC: Output of the autocorrelation of the accumulated IQ signal */
  #define RADIO_CSTONES_CNACC_ResetValue (0x00000000UL) /*!< Reset value of CNACC register.                                    */

/* CNACCI @Bits 0..15 : (unspecified) */
  #define RADIO_CSTONES_CNACC_CNACCI_Pos (0UL)       /*!< Position of CNACCI field.                                            */
  #define RADIO_CSTONES_CNACC_CNACCI_Msk (0xFFFFUL << RADIO_CSTONES_CNACC_CNACCI_Pos) /*!< Bit mask of CNACCI field.           */

/* CNACCQ @Bits 16..31 : (unspecified) */
  #define RADIO_CSTONES_CNACC_CNACCQ_Pos (16UL)      /*!< Position of CNACCQ field.                                            */
  #define RADIO_CSTONES_CNACC_CNACCQ_Msk (0xFFFFUL << RADIO_CSTONES_CNACC_CNACCQ_Pos) /*!< Bit mask of CNACCQ field.           */


/* RADIO_CSTONES_FFOEST: FFO estimate */
  #define RADIO_CSTONES_FFOEST_ResetValue (0x00000000UL) /*!< Reset value of FFOEST register.                                  */

/* FFOEST @Bits 0..11 : Units 62.5 ppb. Max range +/-100 ppm plus margin. */
  #define RADIO_CSTONES_FFOEST_FFOEST_Pos (0UL)      /*!< Position of FFOEST field.                                            */
  #define RADIO_CSTONES_FFOEST_FFOEST_Msk (0xFFFUL << RADIO_CSTONES_FFOEST_FFOEST_Pos) /*!< Bit mask of FFOEST field.          */


/* RADIO_CSTONES_DOWNSAMPLE: Turn on/off down sample of input IQ-signals */
  #define RADIO_CSTONES_DOWNSAMPLE_ResetValue (0x00000000UL) /*!< Reset value of DOWNSAMPLE register.                          */

/* ENABLEFILTER @Bit 0 : Turn on/off down sample of input IQ-signals */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Pos (0UL) /*!< Position of ENABLEFILTER field.                                 */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Msk (0x1UL << RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Pos) /*!< Bit mask of
                                                                            ENABLEFILTER field.*/
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Min (0x0UL) /*!< Min enumerator value of ENABLEFILTER field.                   */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_Max (0x1UL) /*!< Max enumerator value of ENABLEFILTER field.                   */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_OFF (0x0UL) /*!< Disable filter                                                */
  #define RADIO_CSTONES_DOWNSAMPLE_ENABLEFILTER_ON (0x1UL) /*!< Enable filter                                                  */

/* RATE @Bit 1 : Indicating if BLE1M or BLE2M is used */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Pos (1UL)    /*!< Position of RATE field.                                              */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Msk (0x1UL << RADIO_CSTONES_DOWNSAMPLE_RATE_Pos) /*!< Bit mask of RATE field.          */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Min (0x0UL)  /*!< Min enumerator value of RATE field.                                  */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_Max (0x1UL)  /*!< Max enumerator value of RATE field.                                  */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_BLE1M (0x0UL) /*!< Radio mode BLE1M is used                                            */
  #define RADIO_CSTONES_DOWNSAMPLE_RATE_BLE2m (0x1UL) /*!< Radio mode BLE2M is used                                            */


/* RADIO_CSTONES_FINETUNENEXT: Number of full ADPLL finetune steps */
  #define RADIO_CSTONES_FINETUNENEXT_ResetValue (0x00000000UL) /*!< Reset value of FINETUNENEXT register.                      */

/* FINETUNENEXT @Bits 0..12 : Units of 488.28125 Hz */
  #define RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Pos (0UL) /*!< Position of FINETUNENEXT field.                               */
  #define RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Msk (0x1FFFUL << RADIO_CSTONES_FINETUNENEXT_FINETUNENEXT_Pos) /*!< Bit mask of
                                                                            FINETUNENEXT field.*/


/* RADIO_CSTONES_CFOPHASE: Cordic output of CnAcc */
  #define RADIO_CSTONES_CFOPHASE_ResetValue (0x00000000UL) /*!< Reset value of CFOPHASE register.                              */

/* CFOPHASE @Bits 0..15 : (unspecified) */
  #define RADIO_CSTONES_CFOPHASE_CFOPHASE_Pos (0UL)  /*!< Position of CFOPHASE field.                                          */
  #define RADIO_CSTONES_CFOPHASE_CFOPHASE_Msk (0xFFFFUL << RADIO_CSTONES_CFOPHASE_CFOPHASE_Pos) /*!< Bit mask of CFOPHASE
                                                                            field.*/


/* RADIO_CSTONES_FREQOFFSET: Frequency offset estimate */
  #define RADIO_CSTONES_FREQOFFSET_ResetValue (0x00000000UL) /*!< Reset value of FREQOFFSET register.                          */

/* FREQOFFSET @Bits 0..13 : (unspecified) */
  #define RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Pos (0UL) /*!< Position of FREQOFFSET field.                                     */
  #define RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Msk (0x3FFFUL << RADIO_CSTONES_FREQOFFSET_FREQOFFSET_Pos) /*!< Bit mask of
                                                                            FREQOFFSET field.*/


/* RADIO_CSTONES_PCT11: Mean magnitude and mean phase converted to IQ. IQ values limited to [-1024,1023]. */
  #define RADIO_CSTONES_PCT11_ResetValue (0x00000000UL) /*!< Reset value of PCT11 register.                                    */

/* PCT11I @Bits 0..10 : Inphase */
  #define RADIO_CSTONES_PCT11_PCT11I_Pos (0UL)       /*!< Position of PCT11I field.                                            */
  #define RADIO_CSTONES_PCT11_PCT11I_Msk (0x7FFUL << RADIO_CSTONES_PCT11_PCT11I_Pos) /*!< Bit mask of PCT11I field.            */

/* PCT11Q @Bits 11..21 : Quadrature */
  #define RADIO_CSTONES_PCT11_PCT11Q_Pos (11UL)      /*!< Position of PCT11Q field.                                            */
  #define RADIO_CSTONES_PCT11_PCT11Q_Msk (0x7FFUL << RADIO_CSTONES_PCT11_PCT11Q_Pos) /*!< Bit mask of PCT11Q field.            */


/* RADIO_CSTONES_LFAENEXT: Quantization error between ADPLL frequency and the desired value of FFO * RF Frequency. Values
                            limited to [-64,63] with units 7.6294 Hz. */

  #define RADIO_CSTONES_LFAENEXT_ResetValue (0x00000000UL) /*!< Reset value of LFAENEXT register.                              */

/* LFAENEXT @Bits 0..6 : Inphase */
  #define RADIO_CSTONES_LFAENEXT_LFAENEXT_Pos (0UL)  /*!< Position of LFAENEXT field.                                          */
  #define RADIO_CSTONES_LFAENEXT_LFAENEXT_Msk (0x7FUL << RADIO_CSTONES_LFAENEXT_LFAENEXT_Pos) /*!< Bit mask of LFAENEXT field. */



/* ==================================================== Struct RADIO_RTT ===================================================== */
/**
  * @brief RTT [RADIO_RTT] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) RTT Config.                                           */
  __IOM uint32_t  SEGMENT01;                         /*!< (@ 0x00000004) RTT segments 0 and 1                                  */
  __IOM uint32_t  SEGMENT23;                         /*!< (@ 0x00000008) RTT segments 2 and 3                                  */
  __IOM uint32_t  SEGMENT45;                         /*!< (@ 0x0000000C) RTT segments 4 and 5                                  */
  __IOM uint32_t  SEGMENT67;                         /*!< (@ 0x00000010) RTT segments 6 and 7                                  */
} NRF_RADIO_RTT_Type;                                /*!< Size = 20 (0x014)                                                    */

/* RADIO_RTT_CONFIG: RTT Config. */
  #define RADIO_RTT_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                                      */

/* EN @Bit 0 : Enable RTT Functionality. Only valid for BLE 1MBPS and 2MBPS mode */
  #define RADIO_RTT_CONFIG_EN_Pos (0UL)              /*!< Position of EN field.                                                */
  #define RADIO_RTT_CONFIG_EN_Msk (0x1UL << RADIO_RTT_CONFIG_EN_Pos) /*!< Bit mask of EN field.                                */
  #define RADIO_RTT_CONFIG_EN_Min (0x0UL)            /*!< Min enumerator value of EN field.                                    */
  #define RADIO_RTT_CONFIG_EN_Max (0x1UL)            /*!< Max enumerator value of EN field.                                    */
  #define RADIO_RTT_CONFIG_EN_Disabled (0x0UL)       /*!< Disable RTT Block                                                    */
  #define RADIO_RTT_CONFIG_EN_Enabled (0x1UL)        /*!< Enable RTT Block                                                     */

/* ENFULLAA @Bit 1 : Enabling/Disable ping over the entire access address. */
  #define RADIO_RTT_CONFIG_ENFULLAA_Pos (1UL)        /*!< Position of ENFULLAA field.                                          */
  #define RADIO_RTT_CONFIG_ENFULLAA_Msk (0x1UL << RADIO_RTT_CONFIG_ENFULLAA_Pos) /*!< Bit mask of ENFULLAA field.              */
  #define RADIO_RTT_CONFIG_ENFULLAA_Min (0x0UL)      /*!< Min enumerator value of ENFULLAA field.                              */
  #define RADIO_RTT_CONFIG_ENFULLAA_Max (0x1UL)      /*!< Max enumerator value of ENFULLAA field.                              */
  #define RADIO_RTT_CONFIG_ENFULLAA_Disabled (0x0UL) /*!< Disable ping over the entire access address, i.e., enable only over
                                                          the first 16-bit access address*/
  #define RADIO_RTT_CONFIG_ENFULLAA_Enabled (0x1UL)  /*!< Enable ping over the entire access address                           */

/* ROLE @Bit 2 : Role as a Initiator or Reflector. */
  #define RADIO_RTT_CONFIG_ROLE_Pos (2UL)            /*!< Position of ROLE field.                                              */
  #define RADIO_RTT_CONFIG_ROLE_Msk (0x1UL << RADIO_RTT_CONFIG_ROLE_Pos) /*!< Bit mask of ROLE field.                          */
  #define RADIO_RTT_CONFIG_ROLE_Min (0x0UL)          /*!< Min enumerator value of ROLE field.                                  */
  #define RADIO_RTT_CONFIG_ROLE_Max (0x1UL)          /*!< Max enumerator value of ROLE field.                                  */
  #define RADIO_RTT_CONFIG_ROLE_Initiator (0x0UL)    /*!< Initiator                                                            */
  #define RADIO_RTT_CONFIG_ROLE_Reflector (0x1UL)    /*!< Reflector                                                            */

/* NUMSEGMENTS @Bits 3..6 : Number of 16bit payload segments available for ToA detection. Allowed values are 0, 2, 4, 6 and 8. */
  #define RADIO_RTT_CONFIG_NUMSEGMENTS_Pos (3UL)     /*!< Position of NUMSEGMENTS field.                                       */
  #define RADIO_RTT_CONFIG_NUMSEGMENTS_Msk (0xFUL << RADIO_RTT_CONFIG_NUMSEGMENTS_Pos) /*!< Bit mask of NUMSEGMENTS field.     */

/* EFSDELAY @Bits 8..16 : Early Frame Sync Delay, i.e., number of cycles to wait for access address to anchor correctly. For
                          2MBPSBLE mode, the EFSDELAY value is 64 (2us) and for 1MBPSBLE mode, it can be 256 (8us). */

  #define RADIO_RTT_CONFIG_EFSDELAY_Pos (8UL)        /*!< Position of EFSDELAY field.                                          */
  #define RADIO_RTT_CONFIG_EFSDELAY_Msk (0x1FFUL << RADIO_RTT_CONFIG_EFSDELAY_Pos) /*!< Bit mask of EFSDELAY field.            */


/* RADIO_RTT_SEGMENT01: RTT segments 0 and 1 */
  #define RADIO_RTT_SEGMENT01_ResetValue (0x00000000UL) /*!< Reset value of SEGMENT01 register.                                */

/* DATA @Bits 0..31 : Data Bits 31 - 0 */
  #define RADIO_RTT_SEGMENT01_DATA_Pos (0UL)         /*!< Position of DATA field.                                              */
  #define RADIO_RTT_SEGMENT01_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT01_DATA_Pos) /*!< Bit mask of DATA field.             */


/* RADIO_RTT_SEGMENT23: RTT segments 2 and 3 */
  #define RADIO_RTT_SEGMENT23_ResetValue (0x00000000UL) /*!< Reset value of SEGMENT23 register.                                */

/* DATA @Bits 0..31 : Data Bits 63 - 32 */
  #define RADIO_RTT_SEGMENT23_DATA_Pos (0UL)         /*!< Position of DATA field.                                              */
  #define RADIO_RTT_SEGMENT23_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT23_DATA_Pos) /*!< Bit mask of DATA field.             */


/* RADIO_RTT_SEGMENT45: RTT segments 4 and 5 */
  #define RADIO_RTT_SEGMENT45_ResetValue (0x00000000UL) /*!< Reset value of SEGMENT45 register.                                */

/* DATA @Bits 0..31 : Data Bits 95 - 64 */
  #define RADIO_RTT_SEGMENT45_DATA_Pos (0UL)         /*!< Position of DATA field.                                              */
  #define RADIO_RTT_SEGMENT45_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT45_DATA_Pos) /*!< Bit mask of DATA field.             */


/* RADIO_RTT_SEGMENT67: RTT segments 6 and 7 */
  #define RADIO_RTT_SEGMENT67_ResetValue (0x00000000UL) /*!< Reset value of SEGMENT67 register.                                */

/* DATA @Bits 0..31 : Data Bits 127 - 96 */
  #define RADIO_RTT_SEGMENT67_DATA_Pos (0UL)         /*!< Position of DATA field.                                              */
  #define RADIO_RTT_SEGMENT67_DATA_Msk (0xFFFFFFFFUL << RADIO_RTT_SEGMENT67_DATA_Pos) /*!< Bit mask of DATA field.             */


/* ====================================================== Struct RADIO ======================================================= */
/**
  * @brief 2.4 GHz radio
  */
  typedef struct {                                   /*!< RADIO Structure                                                      */
    __OM uint32_t TASKS_TXEN;                        /*!< (@ 0x00000000) Enable RADIO in TX mode                               */
    __OM uint32_t TASKS_RXEN;                        /*!< (@ 0x00000004) Enable RADIO in RX mode                               */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000008) Start RADIO                                           */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x0000000C) Stop RADIO                                            */
    __OM uint32_t TASKS_DISABLE;                     /*!< (@ 0x00000010) Disable RADIO                                         */
    __OM uint32_t TASKS_RSSISTART;                   /*!< (@ 0x00000014) Start the RSSI and take one single sample of the
                                                                         receive signal strength*/
    __OM uint32_t TASKS_BCSTART;                     /*!< (@ 0x00000018) Start the bit counter                                 */
    __OM uint32_t TASKS_BCSTOP;                      /*!< (@ 0x0000001C) Stop the bit counter                                  */
    __OM uint32_t TASKS_EDSTART;                     /*!< (@ 0x00000020) Start the energy detect measurement used in IEEE
                                                                         802.15.4 mode*/
    __OM uint32_t TASKS_EDSTOP;                      /*!< (@ 0x00000024) Stop the energy detect measurement                    */
    __OM uint32_t TASKS_CCASTART;                    /*!< (@ 0x00000028) Start the clear channel assessment used in IEEE
                                                                         802.15.4 mode*/
    __OM uint32_t TASKS_CCASTOP;                     /*!< (@ 0x0000002C) Stop the clear channel assessment                     */
    __IM uint32_t RESERVED[29];
    __OM uint32_t TASKS_SOFTRESET;                   /*!< (@ 0x000000A4) Reset all public registers, but with these exceptions:
                                                                         DMA registers and EVENT/INTEN/SUBSCRIBE/PUBLISH
                                                                         registers. Only to be used in DISABLED state.*/
    __IM uint32_t RESERVED1[22];
    __IOM uint32_t SUBSCRIBE_TXEN;                   /*!< (@ 0x00000100) Subscribe configuration for task TXEN                 */
    __IOM uint32_t SUBSCRIBE_RXEN;                   /*!< (@ 0x00000104) Subscribe configuration for task RXEN                 */
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000108) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x0000010C) Subscribe configuration for task STOP                 */
    __IOM uint32_t SUBSCRIBE_DISABLE;                /*!< (@ 0x00000110) Subscribe configuration for task DISABLE              */
    __IOM uint32_t SUBSCRIBE_RSSISTART;              /*!< (@ 0x00000114) Subscribe configuration for task RSSISTART            */
    __IOM uint32_t SUBSCRIBE_BCSTART;                /*!< (@ 0x00000118) Subscribe configuration for task BCSTART              */
    __IOM uint32_t SUBSCRIBE_BCSTOP;                 /*!< (@ 0x0000011C) Subscribe configuration for task BCSTOP               */
    __IOM uint32_t SUBSCRIBE_EDSTART;                /*!< (@ 0x00000120) Subscribe configuration for task EDSTART              */
    __IOM uint32_t SUBSCRIBE_EDSTOP;                 /*!< (@ 0x00000124) Subscribe configuration for task EDSTOP               */
    __IOM uint32_t SUBSCRIBE_CCASTART;               /*!< (@ 0x00000128) Subscribe configuration for task CCASTART             */
    __IOM uint32_t SUBSCRIBE_CCASTOP;                /*!< (@ 0x0000012C) Subscribe configuration for task CCASTOP              */
    __IM uint32_t RESERVED2[29];
    __IOM uint32_t SUBSCRIBE_SOFTRESET;              /*!< (@ 0x000001A4) Subscribe configuration for task SOFTRESET            */
    __IM uint32_t RESERVED3[22];
    __IOM uint32_t EVENTS_READY;                     /*!< (@ 0x00000200) RADIO has ramped up and is ready to be started        */
    __IOM uint32_t EVENTS_TXREADY;                   /*!< (@ 0x00000204) RADIO has ramped up and is ready to be started TX path*/
    __IOM uint32_t EVENTS_RXREADY;                   /*!< (@ 0x00000208) RADIO has ramped up and is ready to be started RX path*/
    __IOM uint32_t EVENTS_ADDRESS;                   /*!< (@ 0x0000020C) Address sent or received                              */
    __IOM uint32_t EVENTS_FRAMESTART;                /*!< (@ 0x00000210) IEEE 802.15.4 length field received                   */
    __IOM uint32_t EVENTS_PAYLOAD;                   /*!< (@ 0x00000214) Packet payload sent or received                       */
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000218) Memory access for packet data has been completed      */
    __IOM uint32_t EVENTS_PHYEND;                    /*!< (@ 0x0000021C) The last bit is sent on air or last bit is received   */
    __IOM uint32_t EVENTS_DISABLED;                  /*!< (@ 0x00000220) RADIO has been disabled                               */
    __IOM uint32_t EVENTS_DEVMATCH;                  /*!< (@ 0x00000224) A device address match occurred on the last received
                                                                         packet*/
    __IOM uint32_t EVENTS_DEVMISS;                   /*!< (@ 0x00000228) No device address match occurred on the last received
                                                                         packet*/
    __IOM uint32_t EVENTS_CRCOK;                     /*!< (@ 0x0000022C) Packet received with CRC ok                           */
    __IOM uint32_t EVENTS_CRCERROR;                  /*!< (@ 0x00000230) Packet received with CRC error                        */
    __IM uint32_t RESERVED4;
    __IOM uint32_t EVENTS_BCMATCH;                   /*!< (@ 0x00000238) Bit counter reached bit count value                   */
    __IOM uint32_t EVENTS_EDEND;                     /*!< (@ 0x0000023C) Sampling of energy detection complete (a new ED sample
                                                                         is ready for readout from the RADIO.EDSAMPLE register)*/
    __IOM uint32_t EVENTS_EDSTOPPED;                 /*!< (@ 0x00000240) The sampling of energy detection has stopped          */
    __IOM uint32_t EVENTS_CCAIDLE;                   /*!< (@ 0x00000244) Wireless medium in idle - clear to send               */
    __IOM uint32_t EVENTS_CCABUSY;                   /*!< (@ 0x00000248) Wireless medium busy - do not send                    */
    __IOM uint32_t EVENTS_CCASTOPPED;                /*!< (@ 0x0000024C) The CCA has stopped                                   */
    __IOM uint32_t EVENTS_RATEBOOST;                 /*!< (@ 0x00000250) Ble_LR CI field received, receive mode is changed from
                                                                         Ble_LR125Kbit to Ble_LR500Kbit*/
    __IOM uint32_t EVENTS_MHRMATCH;                  /*!< (@ 0x00000254) MAC header match found                                */
    __IOM uint32_t EVENTS_SYNC;                      /*!< (@ 0x00000258) Initial sync detected                                 */
    __IOM uint32_t EVENTS_CTEPRESENT;                /*!< (@ 0x0000025C) CTEInfo byte is received                              */
    __IM uint32_t RESERVED5[40];
    __IOM uint32_t PUBLISH_READY;                    /*!< (@ 0x00000300) Publish configuration for event READY                 */
    __IOM uint32_t PUBLISH_TXREADY;                  /*!< (@ 0x00000304) Publish configuration for event TXREADY               */
    __IOM uint32_t PUBLISH_RXREADY;                  /*!< (@ 0x00000308) Publish configuration for event RXREADY               */
    __IOM uint32_t PUBLISH_ADDRESS;                  /*!< (@ 0x0000030C) Publish configuration for event ADDRESS               */
    __IOM uint32_t PUBLISH_FRAMESTART;               /*!< (@ 0x00000310) Publish configuration for event FRAMESTART            */
    __IOM uint32_t PUBLISH_PAYLOAD;                  /*!< (@ 0x00000314) Publish configuration for event PAYLOAD               */
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000318) Publish configuration for event END                   */
    __IOM uint32_t PUBLISH_PHYEND;                   /*!< (@ 0x0000031C) Publish configuration for event PHYEND                */
    __IOM uint32_t PUBLISH_DISABLED;                 /*!< (@ 0x00000320) Publish configuration for event DISABLED              */
    __IOM uint32_t PUBLISH_DEVMATCH;                 /*!< (@ 0x00000324) Publish configuration for event DEVMATCH              */
    __IOM uint32_t PUBLISH_DEVMISS;                  /*!< (@ 0x00000328) Publish configuration for event DEVMISS               */
    __IOM uint32_t PUBLISH_CRCOK;                    /*!< (@ 0x0000032C) Publish configuration for event CRCOK                 */
    __IOM uint32_t PUBLISH_CRCERROR;                 /*!< (@ 0x00000330) Publish configuration for event CRCERROR              */
    __IM uint32_t RESERVED6;
    __IOM uint32_t PUBLISH_BCMATCH;                  /*!< (@ 0x00000338) Publish configuration for event BCMATCH               */
    __IOM uint32_t PUBLISH_EDEND;                    /*!< (@ 0x0000033C) Publish configuration for event EDEND                 */
    __IOM uint32_t PUBLISH_EDSTOPPED;                /*!< (@ 0x00000340) Publish configuration for event EDSTOPPED             */
    __IOM uint32_t PUBLISH_CCAIDLE;                  /*!< (@ 0x00000344) Publish configuration for event CCAIDLE               */
    __IOM uint32_t PUBLISH_CCABUSY;                  /*!< (@ 0x00000348) Publish configuration for event CCABUSY               */
    __IOM uint32_t PUBLISH_CCASTOPPED;               /*!< (@ 0x0000034C) Publish configuration for event CCASTOPPED            */
    __IOM uint32_t PUBLISH_RATEBOOST;                /*!< (@ 0x00000350) Publish configuration for event RATEBOOST             */
    __IOM uint32_t PUBLISH_MHRMATCH;                 /*!< (@ 0x00000354) Publish configuration for event MHRMATCH              */
    __IOM uint32_t PUBLISH_SYNC;                     /*!< (@ 0x00000358) Publish configuration for event SYNC                  */
    __IOM uint32_t PUBLISH_CTEPRESENT;               /*!< (@ 0x0000035C) Publish configuration for event CTEPRESENT            */
    __IM uint32_t RESERVED7[40];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000400) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED8[33];
    __IOM uint32_t INTENSET00;                       /*!< (@ 0x00000488) Enable interrupt                                      */
    __IM uint32_t RESERVED9;
    __IOM uint32_t INTENCLR00;                       /*!< (@ 0x00000490) Disable interrupt                                     */
    __IM uint32_t RESERVED10[5];
    __IOM uint32_t INTENSET10;                       /*!< (@ 0x000004A8) Enable interrupt                                      */
    __IM uint32_t RESERVED11;
    __IOM uint32_t INTENCLR10;                       /*!< (@ 0x000004B0) Disable interrupt                                     */
    __IM uint32_t RESERVED12[19];
    __IOM uint32_t MODE;                             /*!< (@ 0x00000500) Data rate and modulation                              */
    __IM uint32_t RESERVED13[7];
    __IM uint32_t STATE;                             /*!< (@ 0x00000520) Current radio state                                   */
    __IM uint32_t RESERVED14[3];
    __IOM uint32_t EDCTRL;                           /*!< (@ 0x00000530) IEEE 802.15.4 energy detect control                   */
    __IM uint32_t EDSAMPLE;                          /*!< (@ 0x00000534) IEEE 802.15.4 energy detect level                     */
    __IOM uint32_t CCACTRL;                          /*!< (@ 0x00000538) IEEE 802.15.4 clear channel assessment control        */
    __IM uint32_t RESERVED15;
    __IOM uint32_t DATAWHITE;                        /*!< (@ 0x00000540) Data whitening configuration                          */
    __IM uint32_t RESERVED16[112];
    __IOM uint32_t TIMING;                           /*!< (@ 0x00000704) Timing                                                */
    __IOM uint32_t FREQUENCY;                        /*!< (@ 0x00000708) Frequency                                             */
    __IM uint32_t RESERVED17;
    __IOM uint32_t TXPOWER;                          /*!< (@ 0x00000710) Output power                                          */
    __IOM uint32_t TIFS;                             /*!< (@ 0x00000714) Interframe spacing in us                              */
    __IM uint32_t RSSISAMPLE;                        /*!< (@ 0x00000718) RSSI sample                                           */
    __IM uint32_t RESERVED18[58];
    __IOM uint32_t FREQFINETUNE;                     /*!< (@ 0x00000804) Fine tuning of the RF frequency                       */
    __IM uint32_t RESERVED19[64];
    __IOM uint32_t FECONFIG;                         /*!< (@ 0x00000908) Config register                                       */
    __IM uint32_t RESERVED20[253];
    __IOM uint32_t DFEMODE;                          /*!< (@ 0x00000D00) Whether to use Angle-of-Arrival (AOA) or
                                                                         Angle-of-Departure (AOD)*/
    __IM uint32_t DFESTATUS;                         /*!< (@ 0x00000D04) DFE status information                                */
    __IM uint32_t RESERVED21[2];
    __IOM uint32_t DFECTRL1;                         /*!< (@ 0x00000D10) Various configuration for Direction finding           */
    __IOM uint32_t DFECTRL2;                         /*!< (@ 0x00000D14) Start offset for Direction finding                    */
    __IM uint32_t RESERVED22[4];
    __IOM uint32_t SWITCHPATTERN;                    /*!< (@ 0x00000D28) GPIO patterns to be used for each antenna             */
    __OM uint32_t CLEARPATTERN;                      /*!< (@ 0x00000D2C) Clear the GPIO pattern array for antenna control      */
    __IOM NRF_RADIO_PSEL_Type PSEL;                  /*!< (@ 0x00000D30) (unspecified)                                         */
    __IM uint32_t RESERVED23;
    __IOM NRF_RADIO_DFEPACKET_Type DFEPACKET;        /*!< (@ 0x00000D50) DFE packet EasyDMA channel                            */
    __IM uint32_t RESERVED24[43];
    __IM uint32_t CRCSTATUS;                         /*!< (@ 0x00000E0C) CRC status                                            */
    __IM uint32_t RXMATCH;                           /*!< (@ 0x00000E10) Received address                                      */
    __IM uint32_t RXCRC;                             /*!< (@ 0x00000E14) CRC field of previously received packet               */
    __IM uint32_t DAI;                               /*!< (@ 0x00000E18) Device address match index                            */
    __IM uint32_t PDUSTAT;                           /*!< (@ 0x00000E1C) Payload status                                        */
    __IOM uint32_t PCNF0;                            /*!< (@ 0x00000E20) Packet configuration register 0                       */
    __IM uint32_t RESERVED25;
    __IOM uint32_t PCNF1;                            /*!< (@ 0x00000E28) Packet configuration register 1                       */
    __IOM uint32_t BASE0;                            /*!< (@ 0x00000E2C) Base address 0                                        */
    __IOM uint32_t BASE1;                            /*!< (@ 0x00000E30) Base address 1                                        */
    __IOM uint32_t PREFIX0;                          /*!< (@ 0x00000E34) Prefixes bytes for logical addresses 0-3              */
    __IOM uint32_t PREFIX1;                          /*!< (@ 0x00000E38) Prefixes bytes for logical addresses 4-7              */
    __IOM uint32_t TXADDRESS;                        /*!< (@ 0x00000E3C) Transmit address select                               */
    __IOM uint32_t RXADDRESSES;                      /*!< (@ 0x00000E40) Receive address select                                */
    __IOM uint32_t CRCCNF;                           /*!< (@ 0x00000E44) CRC configuration                                     */
    __IOM uint32_t CRCPOLY;                          /*!< (@ 0x00000E48) CRC polynomial                                        */
    __IOM uint32_t CRCINIT;                          /*!< (@ 0x00000E4C) CRC initial value                                     */
    __IOM uint32_t DAB[8];                           /*!< (@ 0x00000E50) Device address base segment n                         */
    __IOM uint32_t DAP[8];                           /*!< (@ 0x00000E70) Device address prefix n                               */
    __IOM uint32_t DACNF;                            /*!< (@ 0x00000E90) Device address match configuration                    */
    __IOM uint32_t BCC;                              /*!< (@ 0x00000E94) Bit counter compare                                   */
    __IM uint32_t RESERVED26[3];
    __IM uint32_t CTESTATUS;                         /*!< (@ 0x00000EA4) CTEInfo parsed from received packet                   */
    __IM uint32_t RESERVED27[3];
    __IOM uint32_t MHRMATCHCONF;                     /*!< (@ 0x00000EB4) Search pattern configuration                          */
    __IOM uint32_t MHRMATCHMASK;                     /*!< (@ 0x00000EB8) Pattern mask                                          */
    __IOM uint32_t SFD;                              /*!< (@ 0x00000EBC) IEEE 802.15.4 start of frame delimiter                */
    __IOM uint32_t CTEINLINECONF;                    /*!< (@ 0x00000EC0) Configuration for CTE inline mode                     */
    __IM uint32_t RESERVED28[3];
    __IOM uint32_t PACKETPTR;                        /*!< (@ 0x00000ED0) Packet pointer                                        */
    __IM uint32_t RESERVED29[75];
    __IOM NRF_RADIO_CSTONES_Type CSTONES;            /*!< (@ 0x00001000) (unspecified)                                         */
    __IOM NRF_RADIO_RTT_Type RTT;                    /*!< (@ 0x00001050) (unspecified)                                         */
  } NRF_RADIO_Type;                                  /*!< Size = 4196 (0x1064)                                                 */

/* RADIO_TASKS_TXEN: Enable RADIO in TX mode */
  #define RADIO_TASKS_TXEN_ResetValue (0x00000000UL) /*!< Reset value of TASKS_TXEN register.                                  */

/* TASKS_TXEN @Bit 0 : Enable RADIO in TX mode */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Pos (0UL)      /*!< Position of TASKS_TXEN field.                                        */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Msk (0x1UL << RADIO_TASKS_TXEN_TASKS_TXEN_Pos) /*!< Bit mask of TASKS_TXEN field.        */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Min (0x1UL)    /*!< Min enumerator value of TASKS_TXEN field.                            */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Max (0x1UL)    /*!< Max enumerator value of TASKS_TXEN field.                            */
  #define RADIO_TASKS_TXEN_TASKS_TXEN_Trigger (0x1UL) /*!< Trigger task                                                        */


/* RADIO_TASKS_RXEN: Enable RADIO in RX mode */
  #define RADIO_TASKS_RXEN_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RXEN register.                                  */

/* TASKS_RXEN @Bit 0 : Enable RADIO in RX mode */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Pos (0UL)      /*!< Position of TASKS_RXEN field.                                        */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Msk (0x1UL << RADIO_TASKS_RXEN_TASKS_RXEN_Pos) /*!< Bit mask of TASKS_RXEN field.        */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Min (0x1UL)    /*!< Min enumerator value of TASKS_RXEN field.                            */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Max (0x1UL)    /*!< Max enumerator value of TASKS_RXEN field.                            */
  #define RADIO_TASKS_RXEN_TASKS_RXEN_Trigger (0x1UL) /*!< Trigger task                                                        */


/* RADIO_TASKS_START: Start RADIO */
  #define RADIO_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                */

/* TASKS_START @Bit 0 : Start RADIO */
  #define RADIO_TASKS_START_TASKS_START_Pos (0UL)    /*!< Position of TASKS_START field.                                       */
  #define RADIO_TASKS_START_TASKS_START_Msk (0x1UL << RADIO_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.   */
  #define RADIO_TASKS_START_TASKS_START_Min (0x1UL)  /*!< Min enumerator value of TASKS_START field.                           */
  #define RADIO_TASKS_START_TASKS_START_Max (0x1UL)  /*!< Max enumerator value of TASKS_START field.                           */
  #define RADIO_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                      */


/* RADIO_TASKS_STOP: Stop RADIO */
  #define RADIO_TASKS_STOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop RADIO */
  #define RADIO_TASKS_STOP_TASKS_STOP_Pos (0UL)      /*!< Position of TASKS_STOP field.                                        */
  #define RADIO_TASKS_STOP_TASKS_STOP_Msk (0x1UL << RADIO_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.        */
  #define RADIO_TASKS_STOP_TASKS_STOP_Min (0x1UL)    /*!< Min enumerator value of TASKS_STOP field.                            */
  #define RADIO_TASKS_STOP_TASKS_STOP_Max (0x1UL)    /*!< Max enumerator value of TASKS_STOP field.                            */
  #define RADIO_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                        */


/* RADIO_TASKS_DISABLE: Disable RADIO */
  #define RADIO_TASKS_DISABLE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_DISABLE register.                            */

/* TASKS_DISABLE @Bit 0 : Disable RADIO */
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos (0UL) /*!< Position of TASKS_DISABLE field.                                    */
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Msk (0x1UL << RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos) /*!< Bit mask of TASKS_DISABLE
                                                                            field.*/
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Min (0x1UL) /*!< Min enumerator value of TASKS_DISABLE field.                      */
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Max (0x1UL) /*!< Max enumerator value of TASKS_DISABLE field.                      */
  #define RADIO_TASKS_DISABLE_TASKS_DISABLE_Trigger (0x1UL) /*!< Trigger task                                                  */


/* RADIO_TASKS_RSSISTART: Start the RSSI and take one single sample of the receive signal strength */
  #define RADIO_TASKS_RSSISTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RSSISTART register.                        */

/* TASKS_RSSISTART @Bit 0 : Start the RSSI and take one single sample of the receive signal strength */
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos (0UL) /*!< Position of TASKS_RSSISTART field.                              */
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Msk (0x1UL << RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos) /*!< Bit mask of
                                                                            TASKS_RSSISTART field.*/
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Min (0x1UL) /*!< Min enumerator value of TASKS_RSSISTART field.                */
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Max (0x1UL) /*!< Max enumerator value of TASKS_RSSISTART field.                */
  #define RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Trigger (0x1UL) /*!< Trigger task                                              */


/* RADIO_TASKS_BCSTART: Start the bit counter */
  #define RADIO_TASKS_BCSTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_BCSTART register.                            */

/* TASKS_BCSTART @Bit 0 : Start the bit counter */
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos (0UL) /*!< Position of TASKS_BCSTART field.                                    */
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Msk (0x1UL << RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos) /*!< Bit mask of TASKS_BCSTART
                                                                            field.*/
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Min (0x1UL) /*!< Min enumerator value of TASKS_BCSTART field.                      */
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Max (0x1UL) /*!< Max enumerator value of TASKS_BCSTART field.                      */
  #define RADIO_TASKS_BCSTART_TASKS_BCSTART_Trigger (0x1UL) /*!< Trigger task                                                  */


/* RADIO_TASKS_BCSTOP: Stop the bit counter */
  #define RADIO_TASKS_BCSTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_BCSTOP register.                              */

/* TASKS_BCSTOP @Bit 0 : Stop the bit counter */
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos (0UL)  /*!< Position of TASKS_BCSTOP field.                                      */
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Msk (0x1UL << RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos) /*!< Bit mask of TASKS_BCSTOP
                                                                            field.*/
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_BCSTOP field.                         */
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_BCSTOP field.                         */
  #define RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Trigger (0x1UL) /*!< Trigger task                                                    */


/* RADIO_TASKS_EDSTART: Start the energy detect measurement used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_EDSTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_EDSTART register.                            */

/* TASKS_EDSTART @Bit 0 : Start the energy detect measurement used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos (0UL) /*!< Position of TASKS_EDSTART field.                                    */
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Msk (0x1UL << RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos) /*!< Bit mask of TASKS_EDSTART
                                                                            field.*/
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Min (0x1UL) /*!< Min enumerator value of TASKS_EDSTART field.                      */
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Max (0x1UL) /*!< Max enumerator value of TASKS_EDSTART field.                      */
  #define RADIO_TASKS_EDSTART_TASKS_EDSTART_Trigger (0x1UL) /*!< Trigger task                                                  */


/* RADIO_TASKS_EDSTOP: Stop the energy detect measurement */
  #define RADIO_TASKS_EDSTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_EDSTOP register.                              */

/* TASKS_EDSTOP @Bit 0 : Stop the energy detect measurement */
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos (0UL)  /*!< Position of TASKS_EDSTOP field.                                      */
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Msk (0x1UL << RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos) /*!< Bit mask of TASKS_EDSTOP
                                                                            field.*/
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_EDSTOP field.                         */
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_EDSTOP field.                         */
  #define RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Trigger (0x1UL) /*!< Trigger task                                                    */


/* RADIO_TASKS_CCASTART: Start the clear channel assessment used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_CCASTART_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CCASTART register.                          */

/* TASKS_CCASTART @Bit 0 : Start the clear channel assessment used in IEEE 802.15.4 mode */
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos (0UL) /*!< Position of TASKS_CCASTART field.                                 */
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Msk (0x1UL << RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos) /*!< Bit mask of
                                                                            TASKS_CCASTART field.*/
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Min (0x1UL) /*!< Min enumerator value of TASKS_CCASTART field.                   */
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Max (0x1UL) /*!< Max enumerator value of TASKS_CCASTART field.                   */
  #define RADIO_TASKS_CCASTART_TASKS_CCASTART_Trigger (0x1UL) /*!< Trigger task                                                */


/* RADIO_TASKS_CCASTOP: Stop the clear channel assessment */
  #define RADIO_TASKS_CCASTOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CCASTOP register.                            */

/* TASKS_CCASTOP @Bit 0 : Stop the clear channel assessment */
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos (0UL) /*!< Position of TASKS_CCASTOP field.                                    */
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Msk (0x1UL << RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos) /*!< Bit mask of TASKS_CCASTOP
                                                                            field.*/
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Min (0x1UL) /*!< Min enumerator value of TASKS_CCASTOP field.                      */
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Max (0x1UL) /*!< Max enumerator value of TASKS_CCASTOP field.                      */
  #define RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Trigger (0x1UL) /*!< Trigger task                                                  */


/* RADIO_TASKS_SOFTRESET: Reset all public registers, but with these exceptions: DMA registers and EVENT/INTEN/SUBSCRIBE/PUBLISH
                           registers. Only to be used in DISABLED state. */

  #define RADIO_TASKS_SOFTRESET_ResetValue (0x00000000UL) /*!< Reset value of TASKS_SOFTRESET register.                        */

/* TASKS_SOFTRESET @Bit 0 : Reset all public registers, but with these exceptions: DMA registers and
                            EVENT/INTEN/SUBSCRIBE/PUBLISH registers. Only to be used in DISABLED state. */

  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Pos (0UL) /*!< Position of TASKS_SOFTRESET field.                              */
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Msk (0x1UL << RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Pos) /*!< Bit mask of
                                                                            TASKS_SOFTRESET field.*/
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Min (0x1UL) /*!< Min enumerator value of TASKS_SOFTRESET field.                */
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Max (0x1UL) /*!< Max enumerator value of TASKS_SOFTRESET field.                */
  #define RADIO_TASKS_SOFTRESET_TASKS_SOFTRESET_Trigger (0x1UL) /*!< Trigger task                                              */


/* RADIO_SUBSCRIBE_TXEN: Subscribe configuration for task TXEN */
  #define RADIO_SUBSCRIBE_TXEN_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_TXEN register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task TXEN will subscribe to */
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_TXEN_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_TXEN_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_TXEN_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_TXEN_EN_Msk (0x1UL << RADIO_SUBSCRIBE_TXEN_EN_Pos) /*!< Bit mask of EN field.                        */
  #define RADIO_SUBSCRIBE_TXEN_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_TXEN_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_TXEN_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define RADIO_SUBSCRIBE_TXEN_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_RXEN: Subscribe configuration for task RXEN */
  #define RADIO_SUBSCRIBE_RXEN_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RXEN register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task RXEN will subscribe to */
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_RXEN_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_RXEN_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_RXEN_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_RXEN_EN_Msk (0x1UL << RADIO_SUBSCRIBE_RXEN_EN_Pos) /*!< Bit mask of EN field.                        */
  #define RADIO_SUBSCRIBE_RXEN_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_RXEN_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_RXEN_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define RADIO_SUBSCRIBE_RXEN_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_START: Subscribe configuration for task START */
  #define RADIO_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define RADIO_SUBSCRIBE_START_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_SUBSCRIBE_START_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_START_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_START_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_START_EN_Msk (0x1UL << RADIO_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_SUBSCRIBE_START_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_START_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_START_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define RADIO_SUBSCRIBE_START_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define RADIO_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_STOP_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_STOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                        */
  #define RADIO_SUBSCRIBE_STOP_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_STOP_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_STOP_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define RADIO_SUBSCRIBE_STOP_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_DISABLE: Subscribe configuration for task DISABLE */
  #define RADIO_SUBSCRIBE_DISABLE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_DISABLE register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLE will subscribe to */
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_DISABLE_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_DISABLE_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Msk (0x1UL << RADIO_SUBSCRIBE_DISABLE_EN_Pos) /*!< Bit mask of EN field.                  */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define RADIO_SUBSCRIBE_DISABLE_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_RSSISTART: Subscribe configuration for task RSSISTART */
  #define RADIO_SUBSCRIBE_RSSISTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RSSISTART register.                */

/* CHIDX @Bits 0..7 : DPPI channel that task RSSISTART will subscribe to */
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_RSSISTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define RADIO_SUBSCRIBE_RSSISTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_RSSISTART_EN_Pos) /*!< Bit mask of EN field.              */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Disabled (0x0UL) /*!< Disable subscription                                              */
  #define RADIO_SUBSCRIBE_RSSISTART_EN_Enabled (0x1UL) /*!< Enable subscription                                                */


/* RADIO_SUBSCRIBE_BCSTART: Subscribe configuration for task BCSTART */
  #define RADIO_SUBSCRIBE_BCSTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_BCSTART register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task BCSTART will subscribe to */
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_BCSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_BCSTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_BCSTART_EN_Pos) /*!< Bit mask of EN field.                  */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define RADIO_SUBSCRIBE_BCSTART_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_BCSTOP: Subscribe configuration for task BCSTOP */
  #define RADIO_SUBSCRIBE_BCSTOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_BCSTOP register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task BCSTOP will subscribe to */
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_BCSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_BCSTOP_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_BCSTOP_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define RADIO_SUBSCRIBE_BCSTOP_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_EDSTART: Subscribe configuration for task EDSTART */
  #define RADIO_SUBSCRIBE_EDSTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_EDSTART register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task EDSTART will subscribe to */
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_EDSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_EDSTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_EDSTART_EN_Pos) /*!< Bit mask of EN field.                  */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define RADIO_SUBSCRIBE_EDSTART_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_EDSTOP: Subscribe configuration for task EDSTOP */
  #define RADIO_SUBSCRIBE_EDSTOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_EDSTOP register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task EDSTOP will subscribe to */
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_EDSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_EDSTOP_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_EDSTOP_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define RADIO_SUBSCRIBE_EDSTOP_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_CCASTART: Subscribe configuration for task CCASTART */
  #define RADIO_SUBSCRIBE_CCASTART_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CCASTART register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that task CCASTART will subscribe to */
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_CCASTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define RADIO_SUBSCRIBE_CCASTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Msk (0x1UL << RADIO_SUBSCRIBE_CCASTART_EN_Pos) /*!< Bit mask of EN field.                */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Disabled (0x0UL) /*!< Disable subscription                                               */
  #define RADIO_SUBSCRIBE_CCASTART_EN_Enabled (0x1UL) /*!< Enable subscription                                                 */


/* RADIO_SUBSCRIBE_CCASTOP: Subscribe configuration for task CCASTOP */
  #define RADIO_SUBSCRIBE_CCASTOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CCASTOP register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task CCASTOP will subscribe to */
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_CCASTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define RADIO_SUBSCRIBE_CCASTOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Msk (0x1UL << RADIO_SUBSCRIBE_CCASTOP_EN_Pos) /*!< Bit mask of EN field.                  */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define RADIO_SUBSCRIBE_CCASTOP_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* RADIO_SUBSCRIBE_SOFTRESET: Subscribe configuration for task SOFTRESET */
  #define RADIO_SUBSCRIBE_SOFTRESET_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SOFTRESET register.                */

/* CHIDX @Bits 0..7 : DPPI channel that task SOFTRESET will subscribe to */
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Msk (0xFFUL << RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define RADIO_SUBSCRIBE_SOFTRESET_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Msk (0x1UL << RADIO_SUBSCRIBE_SOFTRESET_EN_Pos) /*!< Bit mask of EN field.              */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Disabled (0x0UL) /*!< Disable subscription                                              */
  #define RADIO_SUBSCRIBE_SOFTRESET_EN_Enabled (0x1UL) /*!< Enable subscription                                                */


/* RADIO_EVENTS_READY: RADIO has ramped up and is ready to be started */
  #define RADIO_EVENTS_READY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_READY register.                              */

/* EVENTS_READY @Bit 0 : RADIO has ramped up and is ready to be started */
  #define RADIO_EVENTS_READY_EVENTS_READY_Pos (0UL)  /*!< Position of EVENTS_READY field.                                      */
  #define RADIO_EVENTS_READY_EVENTS_READY_Msk (0x1UL << RADIO_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define RADIO_EVENTS_READY_EVENTS_READY_Min (0x0UL) /*!< Min enumerator value of EVENTS_READY field.                         */
  #define RADIO_EVENTS_READY_EVENTS_READY_Max (0x1UL) /*!< Max enumerator value of EVENTS_READY field.                         */
  #define RADIO_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define RADIO_EVENTS_READY_EVENTS_READY_Generated (0x1UL) /*!< Event generated                                               */


/* RADIO_EVENTS_TXREADY: RADIO has ramped up and is ready to be started TX path */
  #define RADIO_EVENTS_TXREADY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TXREADY register.                          */

/* EVENTS_TXREADY @Bit 0 : RADIO has ramped up and is ready to be started TX path */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos (0UL) /*!< Position of EVENTS_TXREADY field.                                 */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Msk (0x1UL << RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_TXREADY field.*/
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Min (0x0UL) /*!< Min enumerator value of EVENTS_TXREADY field.                   */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Max (0x1UL) /*!< Max enumerator value of EVENTS_TXREADY field.                   */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_RXREADY: RADIO has ramped up and is ready to be started RX path */
  #define RADIO_EVENTS_RXREADY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RXREADY register.                          */

/* EVENTS_RXREADY @Bit 0 : RADIO has ramped up and is ready to be started RX path */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos (0UL) /*!< Position of EVENTS_RXREADY field.                                 */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Msk (0x1UL << RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos) /*!< Bit mask of
                                                                            EVENTS_RXREADY field.*/
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Min (0x0UL) /*!< Min enumerator value of EVENTS_RXREADY field.                   */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Max (0x1UL) /*!< Max enumerator value of EVENTS_RXREADY field.                   */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_ADDRESS: Address sent or received */
  #define RADIO_EVENTS_ADDRESS_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ADDRESS register.                          */

/* EVENTS_ADDRESS @Bit 0 : Address sent or received */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos (0UL) /*!< Position of EVENTS_ADDRESS field.                                 */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Msk (0x1UL << RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos) /*!< Bit mask of
                                                                            EVENTS_ADDRESS field.*/
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Min (0x0UL) /*!< Min enumerator value of EVENTS_ADDRESS field.                   */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Max (0x1UL) /*!< Max enumerator value of EVENTS_ADDRESS field.                   */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_FRAMESTART: IEEE 802.15.4 length field received */
  #define RADIO_EVENTS_FRAMESTART_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_FRAMESTART register.                    */

/* EVENTS_FRAMESTART @Bit 0 : IEEE 802.15.4 length field received */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos (0UL) /*!< Position of EVENTS_FRAMESTART field.                        */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Msk (0x1UL << RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos) /*!< Bit mask
                                                                            of EVENTS_FRAMESTART field.*/
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Min (0x0UL) /*!< Min enumerator value of EVENTS_FRAMESTART field.          */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Max (0x1UL) /*!< Max enumerator value of EVENTS_FRAMESTART field.          */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Generated (0x1UL) /*!< Event generated                                     */


/* RADIO_EVENTS_PAYLOAD: Packet payload sent or received */
  #define RADIO_EVENTS_PAYLOAD_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_PAYLOAD register.                          */

/* EVENTS_PAYLOAD @Bit 0 : Packet payload sent or received */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos (0UL) /*!< Position of EVENTS_PAYLOAD field.                                 */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Msk (0x1UL << RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos) /*!< Bit mask of
                                                                            EVENTS_PAYLOAD field.*/
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Min (0x0UL) /*!< Min enumerator value of EVENTS_PAYLOAD field.                   */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Max (0x1UL) /*!< Max enumerator value of EVENTS_PAYLOAD field.                   */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_END: Memory access for packet data has been completed */
  #define RADIO_EVENTS_END_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : Memory access for packet data has been completed */
  #define RADIO_EVENTS_END_EVENTS_END_Pos (0UL)      /*!< Position of EVENTS_END field.                                        */
  #define RADIO_EVENTS_END_EVENTS_END_Msk (0x1UL << RADIO_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.        */
  #define RADIO_EVENTS_END_EVENTS_END_Min (0x0UL)    /*!< Min enumerator value of EVENTS_END field.                            */
  #define RADIO_EVENTS_END_EVENTS_END_Max (0x1UL)    /*!< Max enumerator value of EVENTS_END field.                            */
  #define RADIO_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                            */
  #define RADIO_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                   */


/* RADIO_EVENTS_PHYEND: The last bit is sent on air or last bit is received */
  #define RADIO_EVENTS_PHYEND_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_PHYEND register.                            */

/* EVENTS_PHYEND @Bit 0 : The last bit is sent on air or last bit is received */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos (0UL) /*!< Position of EVENTS_PHYEND field.                                    */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Msk (0x1UL << RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos) /*!< Bit mask of EVENTS_PHYEND
                                                                            field.*/
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Min (0x0UL) /*!< Min enumerator value of EVENTS_PHYEND field.                      */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Max (0x1UL) /*!< Max enumerator value of EVENTS_PHYEND field.                      */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Generated (0x1UL) /*!< Event generated                                             */


/* RADIO_EVENTS_DISABLED: RADIO has been disabled */
  #define RADIO_EVENTS_DISABLED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DISABLED register.                        */

/* EVENTS_DISABLED @Bit 0 : RADIO has been disabled */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos (0UL) /*!< Position of EVENTS_DISABLED field.                              */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Msk (0x1UL << RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos) /*!< Bit mask of
                                                                            EVENTS_DISABLED field.*/
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Min (0x0UL) /*!< Min enumerator value of EVENTS_DISABLED field.                */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Max (0x1UL) /*!< Max enumerator value of EVENTS_DISABLED field.                */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Generated (0x1UL) /*!< Event generated                                         */


/* RADIO_EVENTS_DEVMATCH: A device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMATCH_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DEVMATCH register.                        */

/* EVENTS_DEVMATCH @Bit 0 : A device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos (0UL) /*!< Position of EVENTS_DEVMATCH field.                              */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Msk (0x1UL << RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_DEVMATCH field.*/
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Min (0x0UL) /*!< Min enumerator value of EVENTS_DEVMATCH field.                */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Max (0x1UL) /*!< Max enumerator value of EVENTS_DEVMATCH field.                */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Generated (0x1UL) /*!< Event generated                                         */


/* RADIO_EVENTS_DEVMISS: No device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMISS_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DEVMISS register.                          */

/* EVENTS_DEVMISS @Bit 0 : No device address match occurred on the last received packet */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos (0UL) /*!< Position of EVENTS_DEVMISS field.                                 */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Msk (0x1UL << RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos) /*!< Bit mask of
                                                                            EVENTS_DEVMISS field.*/
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Min (0x0UL) /*!< Min enumerator value of EVENTS_DEVMISS field.                   */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Max (0x1UL) /*!< Max enumerator value of EVENTS_DEVMISS field.                   */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_CRCOK: Packet received with CRC ok */
  #define RADIO_EVENTS_CRCOK_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CRCOK register.                              */

/* EVENTS_CRCOK @Bit 0 : Packet received with CRC ok */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos (0UL)  /*!< Position of EVENTS_CRCOK field.                                      */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Msk (0x1UL << RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos) /*!< Bit mask of EVENTS_CRCOK
                                                                            field.*/
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Min (0x0UL) /*!< Min enumerator value of EVENTS_CRCOK field.                         */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Max (0x1UL) /*!< Max enumerator value of EVENTS_CRCOK field.                         */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Generated (0x1UL) /*!< Event generated                                               */


/* RADIO_EVENTS_CRCERROR: Packet received with CRC error */
  #define RADIO_EVENTS_CRCERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CRCERROR register.                        */

/* EVENTS_CRCERROR @Bit 0 : Packet received with CRC error */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos (0UL) /*!< Position of EVENTS_CRCERROR field.                              */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Msk (0x1UL << RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos) /*!< Bit mask of
                                                                            EVENTS_CRCERROR field.*/
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_CRCERROR field.                */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_CRCERROR field.                */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Generated (0x1UL) /*!< Event generated                                         */


/* RADIO_EVENTS_BCMATCH: Bit counter reached bit count value */
  #define RADIO_EVENTS_BCMATCH_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_BCMATCH register.                          */

/* EVENTS_BCMATCH @Bit 0 : Bit counter reached bit count value */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos (0UL) /*!< Position of EVENTS_BCMATCH field.                                 */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Msk (0x1UL << RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_BCMATCH field.*/
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Min (0x0UL) /*!< Min enumerator value of EVENTS_BCMATCH field.                   */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Max (0x1UL) /*!< Max enumerator value of EVENTS_BCMATCH field.                   */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_EDEND: Sampling of energy detection complete (a new ED sample is ready for readout from the RADIO.EDSAMPLE
                        register) */

  #define RADIO_EVENTS_EDEND_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_EDEND register.                              */

/* EVENTS_EDEND @Bit 0 : Sampling of energy detection complete (a new ED sample is ready for readout from the RADIO.EDSAMPLE
                         register) */

  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos (0UL)  /*!< Position of EVENTS_EDEND field.                                      */
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Msk (0x1UL << RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos) /*!< Bit mask of EVENTS_EDEND
                                                                            field.*/
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Min (0x0UL) /*!< Min enumerator value of EVENTS_EDEND field.                         */
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Max (0x1UL) /*!< Max enumerator value of EVENTS_EDEND field.                         */
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define RADIO_EVENTS_EDEND_EVENTS_EDEND_Generated (0x1UL) /*!< Event generated                                               */


/* RADIO_EVENTS_EDSTOPPED: The sampling of energy detection has stopped */
  #define RADIO_EVENTS_EDSTOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_EDSTOPPED register.                      */

/* EVENTS_EDSTOPPED @Bit 0 : The sampling of energy detection has stopped */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos (0UL) /*!< Position of EVENTS_EDSTOPPED field.                           */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Msk (0x1UL << RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_EDSTOPPED field.*/
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_EDSTOPPED field.             */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_EDSTOPPED field.             */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Generated (0x1UL) /*!< Event generated                                       */


/* RADIO_EVENTS_CCAIDLE: Wireless medium in idle - clear to send */
  #define RADIO_EVENTS_CCAIDLE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CCAIDLE register.                          */

/* EVENTS_CCAIDLE @Bit 0 : Wireless medium in idle - clear to send */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos (0UL) /*!< Position of EVENTS_CCAIDLE field.                                 */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Msk (0x1UL << RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos) /*!< Bit mask of
                                                                            EVENTS_CCAIDLE field.*/
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Min (0x0UL) /*!< Min enumerator value of EVENTS_CCAIDLE field.                   */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Max (0x1UL) /*!< Max enumerator value of EVENTS_CCAIDLE field.                   */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_CCABUSY: Wireless medium busy - do not send */
  #define RADIO_EVENTS_CCABUSY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CCABUSY register.                          */

/* EVENTS_CCABUSY @Bit 0 : Wireless medium busy - do not send */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos (0UL) /*!< Position of EVENTS_CCABUSY field.                                 */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Msk (0x1UL << RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos) /*!< Bit mask of
                                                                            EVENTS_CCABUSY field.*/
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Min (0x0UL) /*!< Min enumerator value of EVENTS_CCABUSY field.                   */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Max (0x1UL) /*!< Max enumerator value of EVENTS_CCABUSY field.                   */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Generated (0x1UL) /*!< Event generated                                           */


/* RADIO_EVENTS_CCASTOPPED: The CCA has stopped */
  #define RADIO_EVENTS_CCASTOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CCASTOPPED register.                    */

/* EVENTS_CCASTOPPED @Bit 0 : The CCA has stopped */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos (0UL) /*!< Position of EVENTS_CCASTOPPED field.                        */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Msk (0x1UL << RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos) /*!< Bit mask
                                                                            of EVENTS_CCASTOPPED field.*/
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_CCASTOPPED field.          */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_CCASTOPPED field.          */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Generated (0x1UL) /*!< Event generated                                     */


/* RADIO_EVENTS_RATEBOOST: Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit */
  #define RADIO_EVENTS_RATEBOOST_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RATEBOOST register.                      */

/* EVENTS_RATEBOOST @Bit 0 : Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos (0UL) /*!< Position of EVENTS_RATEBOOST field.                           */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Msk (0x1UL << RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos) /*!< Bit mask of
                                                                            EVENTS_RATEBOOST field.*/
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Min (0x0UL) /*!< Min enumerator value of EVENTS_RATEBOOST field.             */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Max (0x1UL) /*!< Max enumerator value of EVENTS_RATEBOOST field.             */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Generated (0x1UL) /*!< Event generated                                       */


/* RADIO_EVENTS_MHRMATCH: MAC header match found */
  #define RADIO_EVENTS_MHRMATCH_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_MHRMATCH register.                        */

/* EVENTS_MHRMATCH @Bit 0 : MAC header match found */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos (0UL) /*!< Position of EVENTS_MHRMATCH field.                              */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Msk (0x1UL << RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos) /*!< Bit mask of
                                                                            EVENTS_MHRMATCH field.*/
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Min (0x0UL) /*!< Min enumerator value of EVENTS_MHRMATCH field.                */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Max (0x1UL) /*!< Max enumerator value of EVENTS_MHRMATCH field.                */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Generated (0x1UL) /*!< Event generated                                         */


/* RADIO_EVENTS_SYNC: Initial sync detected */
  #define RADIO_EVENTS_SYNC_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SYNC register.                                */

/* EVENTS_SYNC @Bit 0 : Initial sync detected */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos (0UL)    /*!< Position of EVENTS_SYNC field.                                       */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Msk (0x1UL << RADIO_EVENTS_SYNC_EVENTS_SYNC_Pos) /*!< Bit mask of EVENTS_SYNC field.   */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Min (0x0UL)  /*!< Min enumerator value of EVENTS_SYNC field.                           */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Max (0x1UL)  /*!< Max enumerator value of EVENTS_SYNC field.                           */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define RADIO_EVENTS_SYNC_EVENTS_SYNC_Generated (0x1UL) /*!< Event generated                                                 */


/* RADIO_EVENTS_CTEPRESENT: CTEInfo byte is received */
  #define RADIO_EVENTS_CTEPRESENT_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CTEPRESENT register.                    */

/* EVENTS_CTEPRESENT @Bit 0 : CTEInfo byte is received */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Pos (0UL) /*!< Position of EVENTS_CTEPRESENT field.                        */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Msk (0x1UL << RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Pos) /*!< Bit mask
                                                                            of EVENTS_CTEPRESENT field.*/
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Min (0x0UL) /*!< Min enumerator value of EVENTS_CTEPRESENT field.          */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Max (0x1UL) /*!< Max enumerator value of EVENTS_CTEPRESENT field.          */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define RADIO_EVENTS_CTEPRESENT_EVENTS_CTEPRESENT_Generated (0x1UL) /*!< Event generated                                     */


/* RADIO_PUBLISH_READY: Publish configuration for event READY */
  #define RADIO_PUBLISH_READY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_READY register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define RADIO_PUBLISH_READY_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_READY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define RADIO_PUBLISH_READY_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_READY_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_READY_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_READY_EN_Msk (0x1UL << RADIO_PUBLISH_READY_EN_Pos) /*!< Bit mask of EN field.                          */
  #define RADIO_PUBLISH_READY_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_READY_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_READY_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_READY_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_TXREADY: Publish configuration for event TXREADY */
  #define RADIO_PUBLISH_TXREADY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_TXREADY register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event TXREADY will publish to */
  #define RADIO_PUBLISH_TXREADY_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_TXREADY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_TXREADY_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_TXREADY_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_TXREADY_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_TXREADY_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_TXREADY_EN_Msk (0x1UL << RADIO_PUBLISH_TXREADY_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_TXREADY_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_TXREADY_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_TXREADY_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_TXREADY_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_RXREADY: Publish configuration for event RXREADY */
  #define RADIO_PUBLISH_RXREADY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RXREADY register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event RXREADY will publish to */
  #define RADIO_PUBLISH_RXREADY_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_RXREADY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_RXREADY_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_RXREADY_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_RXREADY_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_RXREADY_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_RXREADY_EN_Msk (0x1UL << RADIO_PUBLISH_RXREADY_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_RXREADY_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_RXREADY_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_RXREADY_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_RXREADY_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_ADDRESS: Publish configuration for event ADDRESS */
  #define RADIO_PUBLISH_ADDRESS_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ADDRESS register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event ADDRESS will publish to */
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_ADDRESS_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_ADDRESS_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_ADDRESS_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_ADDRESS_EN_Msk (0x1UL << RADIO_PUBLISH_ADDRESS_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_ADDRESS_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_ADDRESS_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_ADDRESS_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_ADDRESS_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_FRAMESTART: Publish configuration for event FRAMESTART */
  #define RADIO_PUBLISH_FRAMESTART_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_FRAMESTART register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event FRAMESTART will publish to */
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_FRAMESTART_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define RADIO_PUBLISH_FRAMESTART_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_FRAMESTART_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_FRAMESTART_EN_Msk (0x1UL << RADIO_PUBLISH_FRAMESTART_EN_Pos) /*!< Bit mask of EN field.                */
  #define RADIO_PUBLISH_FRAMESTART_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_FRAMESTART_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_FRAMESTART_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define RADIO_PUBLISH_FRAMESTART_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* RADIO_PUBLISH_PAYLOAD: Publish configuration for event PAYLOAD */
  #define RADIO_PUBLISH_PAYLOAD_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_PAYLOAD register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event PAYLOAD will publish to */
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_PAYLOAD_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_PAYLOAD_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_PAYLOAD_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_PAYLOAD_EN_Msk (0x1UL << RADIO_PUBLISH_PAYLOAD_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_PAYLOAD_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_PAYLOAD_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_PAYLOAD_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_PAYLOAD_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_END: Publish configuration for event END */
  #define RADIO_PUBLISH_END_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_END register.                                */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define RADIO_PUBLISH_END_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_END_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define RADIO_PUBLISH_END_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_END_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_END_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_END_EN_Msk (0x1UL << RADIO_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                              */
  #define RADIO_PUBLISH_END_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_END_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_END_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_END_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_PHYEND: Publish configuration for event PHYEND */
  #define RADIO_PUBLISH_PHYEND_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_PHYEND register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event PHYEND will publish to */
  #define RADIO_PUBLISH_PHYEND_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_PHYEND_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_PHYEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define RADIO_PUBLISH_PHYEND_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_PHYEND_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_PHYEND_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_PHYEND_EN_Msk (0x1UL << RADIO_PUBLISH_PHYEND_EN_Pos) /*!< Bit mask of EN field.                        */
  #define RADIO_PUBLISH_PHYEND_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_PHYEND_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_PHYEND_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_PHYEND_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_DISABLED: Publish configuration for event DISABLED */
  #define RADIO_PUBLISH_DISABLED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DISABLED register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that event DISABLED will publish to */
  #define RADIO_PUBLISH_DISABLED_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_DISABLED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DISABLED_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RADIO_PUBLISH_DISABLED_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_DISABLED_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DISABLED_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_DISABLED_EN_Msk (0x1UL << RADIO_PUBLISH_DISABLED_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RADIO_PUBLISH_DISABLED_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_DISABLED_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_DISABLED_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_DISABLED_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_DEVMATCH: Publish configuration for event DEVMATCH */
  #define RADIO_PUBLISH_DEVMATCH_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DEVMATCH register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that event DEVMATCH will publish to */
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DEVMATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_DEVMATCH_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DEVMATCH_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_DEVMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_DEVMATCH_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RADIO_PUBLISH_DEVMATCH_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_DEVMATCH_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_DEVMATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_DEVMATCH_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_DEVMISS: Publish configuration for event DEVMISS */
  #define RADIO_PUBLISH_DEVMISS_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DEVMISS register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event DEVMISS will publish to */
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_DEVMISS_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_DEVMISS_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_DEVMISS_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_DEVMISS_EN_Msk (0x1UL << RADIO_PUBLISH_DEVMISS_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_DEVMISS_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_DEVMISS_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_DEVMISS_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_DEVMISS_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_CRCOK: Publish configuration for event CRCOK */
  #define RADIO_PUBLISH_CRCOK_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CRCOK register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that event CRCOK will publish to */
  #define RADIO_PUBLISH_CRCOK_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_CRCOK_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CRCOK_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define RADIO_PUBLISH_CRCOK_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_CRCOK_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CRCOK_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_CRCOK_EN_Msk (0x1UL << RADIO_PUBLISH_CRCOK_EN_Pos) /*!< Bit mask of EN field.                          */
  #define RADIO_PUBLISH_CRCOK_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CRCOK_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CRCOK_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_CRCOK_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_CRCERROR: Publish configuration for event CRCERROR */
  #define RADIO_PUBLISH_CRCERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CRCERROR register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that event CRCERROR will publish to */
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CRCERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_CRCERROR_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CRCERROR_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_CRCERROR_EN_Msk (0x1UL << RADIO_PUBLISH_CRCERROR_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RADIO_PUBLISH_CRCERROR_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CRCERROR_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CRCERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_CRCERROR_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_BCMATCH: Publish configuration for event BCMATCH */
  #define RADIO_PUBLISH_BCMATCH_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_BCMATCH register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BCMATCH will publish to */
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_BCMATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_BCMATCH_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_BCMATCH_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_BCMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_BCMATCH_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_BCMATCH_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_BCMATCH_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_BCMATCH_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_BCMATCH_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_EDEND: Publish configuration for event EDEND */
  #define RADIO_PUBLISH_EDEND_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_EDEND register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that event EDEND will publish to */
  #define RADIO_PUBLISH_EDEND_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_EDEND_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_EDEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define RADIO_PUBLISH_EDEND_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_EDEND_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_EDEND_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_EDEND_EN_Msk (0x1UL << RADIO_PUBLISH_EDEND_EN_Pos) /*!< Bit mask of EN field.                          */
  #define RADIO_PUBLISH_EDEND_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_EDEND_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_EDEND_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_EDEND_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_EDSTOPPED: Publish configuration for event EDSTOPPED */
  #define RADIO_PUBLISH_EDSTOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_EDSTOPPED register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that event EDSTOPPED will publish to */
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_EDSTOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_EDSTOPPED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Msk (0x1UL << RADIO_PUBLISH_EDSTOPPED_EN_Pos) /*!< Bit mask of EN field.                  */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define RADIO_PUBLISH_EDSTOPPED_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_CCAIDLE: Publish configuration for event CCAIDLE */
  #define RADIO_PUBLISH_CCAIDLE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CCAIDLE register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event CCAIDLE will publish to */
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCAIDLE_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_CCAIDLE_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCAIDLE_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_CCAIDLE_EN_Msk (0x1UL << RADIO_PUBLISH_CCAIDLE_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_CCAIDLE_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CCAIDLE_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CCAIDLE_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_CCAIDLE_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_CCABUSY: Publish configuration for event CCABUSY */
  #define RADIO_PUBLISH_CCABUSY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CCABUSY register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event CCABUSY will publish to */
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCABUSY_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_CCABUSY_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCABUSY_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_CCABUSY_EN_Msk (0x1UL << RADIO_PUBLISH_CCABUSY_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RADIO_PUBLISH_CCABUSY_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CCABUSY_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CCABUSY_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_CCABUSY_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_CCASTOPPED: Publish configuration for event CCASTOPPED */
  #define RADIO_PUBLISH_CCASTOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CCASTOPPED register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event CCASTOPPED will publish to */
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CCASTOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define RADIO_PUBLISH_CCASTOPPED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Msk (0x1UL << RADIO_PUBLISH_CCASTOPPED_EN_Pos) /*!< Bit mask of EN field.                */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define RADIO_PUBLISH_CCASTOPPED_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* RADIO_PUBLISH_RATEBOOST: Publish configuration for event RATEBOOST */
  #define RADIO_PUBLISH_RATEBOOST_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RATEBOOST register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that event RATEBOOST will publish to */
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_RATEBOOST_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_RATEBOOST_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_RATEBOOST_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_RATEBOOST_EN_Msk (0x1UL << RADIO_PUBLISH_RATEBOOST_EN_Pos) /*!< Bit mask of EN field.                  */
  #define RADIO_PUBLISH_RATEBOOST_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_RATEBOOST_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_RATEBOOST_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define RADIO_PUBLISH_RATEBOOST_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_MHRMATCH: Publish configuration for event MHRMATCH */
  #define RADIO_PUBLISH_MHRMATCH_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_MHRMATCH register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that event MHRMATCH will publish to */
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_MHRMATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_MHRMATCH_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_MHRMATCH_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_MHRMATCH_EN_Msk (0x1UL << RADIO_PUBLISH_MHRMATCH_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RADIO_PUBLISH_MHRMATCH_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_MHRMATCH_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_MHRMATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_MHRMATCH_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_SYNC: Publish configuration for event SYNC */
  #define RADIO_PUBLISH_SYNC_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SYNC register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event SYNC will publish to */
  #define RADIO_PUBLISH_SYNC_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_SYNC_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_SYNC_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define RADIO_PUBLISH_SYNC_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define RADIO_PUBLISH_SYNC_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_SYNC_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_SYNC_EN_Msk (0x1UL << RADIO_PUBLISH_SYNC_EN_Pos) /*!< Bit mask of EN field.                            */
  #define RADIO_PUBLISH_SYNC_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_SYNC_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_SYNC_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define RADIO_PUBLISH_SYNC_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* RADIO_PUBLISH_CTEPRESENT: Publish configuration for event CTEPRESENT */
  #define RADIO_PUBLISH_CTEPRESENT_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CTEPRESENT register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event CTEPRESENT will publish to */
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Msk (0xFFUL << RADIO_PUBLISH_CTEPRESENT_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define RADIO_PUBLISH_CTEPRESENT_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Msk (0x1UL << RADIO_PUBLISH_CTEPRESENT_EN_Pos) /*!< Bit mask of EN field.                */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define RADIO_PUBLISH_CTEPRESENT_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* RADIO_SHORTS: Shortcuts between local events and tasks */
  #define RADIO_SHORTS_ResetValue (0x00000000UL)     /*!< Reset value of SHORTS register.                                      */

/* READY_START @Bit 0 : Shortcut between event READY and task START */
  #define RADIO_SHORTS_READY_START_Pos (0UL)         /*!< Position of READY_START field.                                       */
  #define RADIO_SHORTS_READY_START_Msk (0x1UL << RADIO_SHORTS_READY_START_Pos) /*!< Bit mask of READY_START field.             */
  #define RADIO_SHORTS_READY_START_Min (0x0UL)       /*!< Min enumerator value of READY_START field.                           */
  #define RADIO_SHORTS_READY_START_Max (0x1UL)       /*!< Max enumerator value of READY_START field.                           */
  #define RADIO_SHORTS_READY_START_Disabled (0x0UL)  /*!< Disable shortcut                                                     */
  #define RADIO_SHORTS_READY_START_Enabled (0x1UL)   /*!< Enable shortcut                                                      */

/* DISABLED_TXEN @Bit 2 : Shortcut between event DISABLED and task TXEN */
  #define RADIO_SHORTS_DISABLED_TXEN_Pos (2UL)       /*!< Position of DISABLED_TXEN field.                                     */
  #define RADIO_SHORTS_DISABLED_TXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_TXEN_Pos) /*!< Bit mask of DISABLED_TXEN field.       */
  #define RADIO_SHORTS_DISABLED_TXEN_Min (0x0UL)     /*!< Min enumerator value of DISABLED_TXEN field.                         */
  #define RADIO_SHORTS_DISABLED_TXEN_Max (0x1UL)     /*!< Max enumerator value of DISABLED_TXEN field.                         */
  #define RADIO_SHORTS_DISABLED_TXEN_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define RADIO_SHORTS_DISABLED_TXEN_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* DISABLED_RXEN @Bit 3 : Shortcut between event DISABLED and task RXEN */
  #define RADIO_SHORTS_DISABLED_RXEN_Pos (3UL)       /*!< Position of DISABLED_RXEN field.                                     */
  #define RADIO_SHORTS_DISABLED_RXEN_Msk (0x1UL << RADIO_SHORTS_DISABLED_RXEN_Pos) /*!< Bit mask of DISABLED_RXEN field.       */
  #define RADIO_SHORTS_DISABLED_RXEN_Min (0x0UL)     /*!< Min enumerator value of DISABLED_RXEN field.                         */
  #define RADIO_SHORTS_DISABLED_RXEN_Max (0x1UL)     /*!< Max enumerator value of DISABLED_RXEN field.                         */
  #define RADIO_SHORTS_DISABLED_RXEN_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define RADIO_SHORTS_DISABLED_RXEN_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* ADDRESS_RSSISTART @Bit 4 : Shortcut between event ADDRESS and task RSSISTART */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Pos (4UL)   /*!< Position of ADDRESS_RSSISTART field.                                 */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_RSSISTART_Pos) /*!< Bit mask of ADDRESS_RSSISTART
                                                                            field.*/
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Min (0x0UL) /*!< Min enumerator value of ADDRESS_RSSISTART field.                     */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Max (0x1UL) /*!< Max enumerator value of ADDRESS_RSSISTART field.                     */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Disabled (0x0UL) /*!< Disable shortcut                                                */
  #define RADIO_SHORTS_ADDRESS_RSSISTART_Enabled (0x1UL) /*!< Enable shortcut                                                  */

/* END_START @Bit 5 : Shortcut between event END and task START */
  #define RADIO_SHORTS_END_START_Pos (5UL)           /*!< Position of END_START field.                                         */
  #define RADIO_SHORTS_END_START_Msk (0x1UL << RADIO_SHORTS_END_START_Pos) /*!< Bit mask of END_START field.                   */
  #define RADIO_SHORTS_END_START_Min (0x0UL)         /*!< Min enumerator value of END_START field.                             */
  #define RADIO_SHORTS_END_START_Max (0x1UL)         /*!< Max enumerator value of END_START field.                             */
  #define RADIO_SHORTS_END_START_Disabled (0x0UL)    /*!< Disable shortcut                                                     */
  #define RADIO_SHORTS_END_START_Enabled (0x1UL)     /*!< Enable shortcut                                                      */

/* ADDRESS_BCSTART @Bit 6 : Shortcut between event ADDRESS and task BCSTART */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Pos (6UL)     /*!< Position of ADDRESS_BCSTART field.                                   */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Msk (0x1UL << RADIO_SHORTS_ADDRESS_BCSTART_Pos) /*!< Bit mask of ADDRESS_BCSTART field. */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Min (0x0UL)   /*!< Min enumerator value of ADDRESS_BCSTART field.                       */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Max (0x1UL)   /*!< Max enumerator value of ADDRESS_BCSTART field.                       */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Disabled (0x0UL) /*!< Disable shortcut                                                  */
  #define RADIO_SHORTS_ADDRESS_BCSTART_Enabled (0x1UL) /*!< Enable shortcut                                                    */

/* RXREADY_CCASTART @Bit 10 : Shortcut between event RXREADY and task CCASTART */
  #define RADIO_SHORTS_RXREADY_CCASTART_Pos (10UL)   /*!< Position of RXREADY_CCASTART field.                                  */
  #define RADIO_SHORTS_RXREADY_CCASTART_Msk (0x1UL << RADIO_SHORTS_RXREADY_CCASTART_Pos) /*!< Bit mask of RXREADY_CCASTART
                                                                            field.*/
  #define RADIO_SHORTS_RXREADY_CCASTART_Min (0x0UL)  /*!< Min enumerator value of RXREADY_CCASTART field.                      */
  #define RADIO_SHORTS_RXREADY_CCASTART_Max (0x1UL)  /*!< Max enumerator value of RXREADY_CCASTART field.                      */
  #define RADIO_SHORTS_RXREADY_CCASTART_Disabled (0x0UL) /*!< Disable shortcut                                                 */
  #define RADIO_SHORTS_RXREADY_CCASTART_Enabled (0x1UL) /*!< Enable shortcut                                                   */

/* CCAIDLE_TXEN @Bit 11 : Shortcut between event CCAIDLE and task TXEN */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Pos (11UL)       /*!< Position of CCAIDLE_TXEN field.                                      */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Msk (0x1UL << RADIO_SHORTS_CCAIDLE_TXEN_Pos) /*!< Bit mask of CCAIDLE_TXEN field.          */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Min (0x0UL)      /*!< Min enumerator value of CCAIDLE_TXEN field.                          */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Max (0x1UL)      /*!< Max enumerator value of CCAIDLE_TXEN field.                          */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Disabled (0x0UL) /*!< Disable shortcut                                                     */
  #define RADIO_SHORTS_CCAIDLE_TXEN_Enabled (0x1UL)  /*!< Enable shortcut                                                      */

/* CCABUSY_DISABLE @Bit 12 : Shortcut between event CCABUSY and task DISABLE */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Pos (12UL)    /*!< Position of CCABUSY_DISABLE field.                                   */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Msk (0x1UL << RADIO_SHORTS_CCABUSY_DISABLE_Pos) /*!< Bit mask of CCABUSY_DISABLE field. */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Min (0x0UL)   /*!< Min enumerator value of CCABUSY_DISABLE field.                       */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Max (0x1UL)   /*!< Max enumerator value of CCABUSY_DISABLE field.                       */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Disabled (0x0UL) /*!< Disable shortcut                                                  */
  #define RADIO_SHORTS_CCABUSY_DISABLE_Enabled (0x1UL) /*!< Enable shortcut                                                    */

/* FRAMESTART_BCSTART @Bit 13 : Shortcut between event FRAMESTART and task BCSTART */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Pos (13UL) /*!< Position of FRAMESTART_BCSTART field.                                */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Msk (0x1UL << RADIO_SHORTS_FRAMESTART_BCSTART_Pos) /*!< Bit mask of FRAMESTART_BCSTART
                                                                            field.*/
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Min (0x0UL) /*!< Min enumerator value of FRAMESTART_BCSTART field.                   */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Max (0x1UL) /*!< Max enumerator value of FRAMESTART_BCSTART field.                   */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Disabled (0x0UL) /*!< Disable shortcut                                               */
  #define RADIO_SHORTS_FRAMESTART_BCSTART_Enabled (0x1UL) /*!< Enable shortcut                                                 */

/* READY_EDSTART @Bit 14 : Shortcut between event READY and task EDSTART */
  #define RADIO_SHORTS_READY_EDSTART_Pos (14UL)      /*!< Position of READY_EDSTART field.                                     */
  #define RADIO_SHORTS_READY_EDSTART_Msk (0x1UL << RADIO_SHORTS_READY_EDSTART_Pos) /*!< Bit mask of READY_EDSTART field.       */
  #define RADIO_SHORTS_READY_EDSTART_Min (0x0UL)     /*!< Min enumerator value of READY_EDSTART field.                         */
  #define RADIO_SHORTS_READY_EDSTART_Max (0x1UL)     /*!< Max enumerator value of READY_EDSTART field.                         */
  #define RADIO_SHORTS_READY_EDSTART_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define RADIO_SHORTS_READY_EDSTART_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* EDEND_DISABLE @Bit 15 : Shortcut between event EDEND and task DISABLE */
  #define RADIO_SHORTS_EDEND_DISABLE_Pos (15UL)      /*!< Position of EDEND_DISABLE field.                                     */
  #define RADIO_SHORTS_EDEND_DISABLE_Msk (0x1UL << RADIO_SHORTS_EDEND_DISABLE_Pos) /*!< Bit mask of EDEND_DISABLE field.       */
  #define RADIO_SHORTS_EDEND_DISABLE_Min (0x0UL)     /*!< Min enumerator value of EDEND_DISABLE field.                         */
  #define RADIO_SHORTS_EDEND_DISABLE_Max (0x1UL)     /*!< Max enumerator value of EDEND_DISABLE field.                         */
  #define RADIO_SHORTS_EDEND_DISABLE_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define RADIO_SHORTS_EDEND_DISABLE_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* CCAIDLE_STOP @Bit 16 : Shortcut between event CCAIDLE and task STOP */
  #define RADIO_SHORTS_CCAIDLE_STOP_Pos (16UL)       /*!< Position of CCAIDLE_STOP field.                                      */
  #define RADIO_SHORTS_CCAIDLE_STOP_Msk (0x1UL << RADIO_SHORTS_CCAIDLE_STOP_Pos) /*!< Bit mask of CCAIDLE_STOP field.          */
  #define RADIO_SHORTS_CCAIDLE_STOP_Min (0x0UL)      /*!< Min enumerator value of CCAIDLE_STOP field.                          */
  #define RADIO_SHORTS_CCAIDLE_STOP_Max (0x1UL)      /*!< Max enumerator value of CCAIDLE_STOP field.                          */
  #define RADIO_SHORTS_CCAIDLE_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                     */
  #define RADIO_SHORTS_CCAIDLE_STOP_Enabled (0x1UL)  /*!< Enable shortcut                                                      */

/* TXREADY_START @Bit 17 : Shortcut between event TXREADY and task START */
  #define RADIO_SHORTS_TXREADY_START_Pos (17UL)      /*!< Position of TXREADY_START field.                                     */
  #define RADIO_SHORTS_TXREADY_START_Msk (0x1UL << RADIO_SHORTS_TXREADY_START_Pos) /*!< Bit mask of TXREADY_START field.       */
  #define RADIO_SHORTS_TXREADY_START_Min (0x0UL)     /*!< Min enumerator value of TXREADY_START field.                         */
  #define RADIO_SHORTS_TXREADY_START_Max (0x1UL)     /*!< Max enumerator value of TXREADY_START field.                         */
  #define RADIO_SHORTS_TXREADY_START_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define RADIO_SHORTS_TXREADY_START_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* RXREADY_START @Bit 18 : Shortcut between event RXREADY and task START */
  #define RADIO_SHORTS_RXREADY_START_Pos (18UL)      /*!< Position of RXREADY_START field.                                     */
  #define RADIO_SHORTS_RXREADY_START_Msk (0x1UL << RADIO_SHORTS_RXREADY_START_Pos) /*!< Bit mask of RXREADY_START field.       */
  #define RADIO_SHORTS_RXREADY_START_Min (0x0UL)     /*!< Min enumerator value of RXREADY_START field.                         */
  #define RADIO_SHORTS_RXREADY_START_Max (0x1UL)     /*!< Max enumerator value of RXREADY_START field.                         */
  #define RADIO_SHORTS_RXREADY_START_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define RADIO_SHORTS_RXREADY_START_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* PHYEND_DISABLE @Bit 19 : Shortcut between event PHYEND and task DISABLE */
  #define RADIO_SHORTS_PHYEND_DISABLE_Pos (19UL)     /*!< Position of PHYEND_DISABLE field.                                    */
  #define RADIO_SHORTS_PHYEND_DISABLE_Msk (0x1UL << RADIO_SHORTS_PHYEND_DISABLE_Pos) /*!< Bit mask of PHYEND_DISABLE field.    */
  #define RADIO_SHORTS_PHYEND_DISABLE_Min (0x0UL)    /*!< Min enumerator value of PHYEND_DISABLE field.                        */
  #define RADIO_SHORTS_PHYEND_DISABLE_Max (0x1UL)    /*!< Max enumerator value of PHYEND_DISABLE field.                        */
  #define RADIO_SHORTS_PHYEND_DISABLE_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define RADIO_SHORTS_PHYEND_DISABLE_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* PHYEND_START @Bit 20 : Shortcut between event PHYEND and task START */
  #define RADIO_SHORTS_PHYEND_START_Pos (20UL)       /*!< Position of PHYEND_START field.                                      */
  #define RADIO_SHORTS_PHYEND_START_Msk (0x1UL << RADIO_SHORTS_PHYEND_START_Pos) /*!< Bit mask of PHYEND_START field.          */
  #define RADIO_SHORTS_PHYEND_START_Min (0x0UL)      /*!< Min enumerator value of PHYEND_START field.                          */
  #define RADIO_SHORTS_PHYEND_START_Max (0x1UL)      /*!< Max enumerator value of PHYEND_START field.                          */
  #define RADIO_SHORTS_PHYEND_START_Disabled (0x0UL) /*!< Disable shortcut                                                     */
  #define RADIO_SHORTS_PHYEND_START_Enabled (0x1UL)  /*!< Enable shortcut                                                      */


/* RADIO_INTENSET00: Enable interrupt */
  #define RADIO_INTENSET00_ResetValue (0x00000000UL) /*!< Reset value of INTENSET00 register.                                  */

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define RADIO_INTENSET00_READY_Pos (0UL)           /*!< Position of READY field.                                             */
  #define RADIO_INTENSET00_READY_Msk (0x1UL << RADIO_INTENSET00_READY_Pos) /*!< Bit mask of READY field.                       */
  #define RADIO_INTENSET00_READY_Min (0x0UL)         /*!< Min enumerator value of READY field.                                 */
  #define RADIO_INTENSET00_READY_Max (0x1UL)         /*!< Max enumerator value of READY field.                                 */
  #define RADIO_INTENSET00_READY_Set (0x1UL)         /*!< Enable                                                               */
  #define RADIO_INTENSET00_READY_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_READY_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* TXREADY @Bit 1 : Write '1' to enable interrupt for event TXREADY */
  #define RADIO_INTENSET00_TXREADY_Pos (1UL)         /*!< Position of TXREADY field.                                           */
  #define RADIO_INTENSET00_TXREADY_Msk (0x1UL << RADIO_INTENSET00_TXREADY_Pos) /*!< Bit mask of TXREADY field.                 */
  #define RADIO_INTENSET00_TXREADY_Min (0x0UL)       /*!< Min enumerator value of TXREADY field.                               */
  #define RADIO_INTENSET00_TXREADY_Max (0x1UL)       /*!< Max enumerator value of TXREADY field.                               */
  #define RADIO_INTENSET00_TXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_TXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_TXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RXREADY @Bit 2 : Write '1' to enable interrupt for event RXREADY */
  #define RADIO_INTENSET00_RXREADY_Pos (2UL)         /*!< Position of RXREADY field.                                           */
  #define RADIO_INTENSET00_RXREADY_Msk (0x1UL << RADIO_INTENSET00_RXREADY_Pos) /*!< Bit mask of RXREADY field.                 */
  #define RADIO_INTENSET00_RXREADY_Min (0x0UL)       /*!< Min enumerator value of RXREADY field.                               */
  #define RADIO_INTENSET00_RXREADY_Max (0x1UL)       /*!< Max enumerator value of RXREADY field.                               */
  #define RADIO_INTENSET00_RXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_RXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_RXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ADDRESS @Bit 3 : Write '1' to enable interrupt for event ADDRESS */
  #define RADIO_INTENSET00_ADDRESS_Pos (3UL)         /*!< Position of ADDRESS field.                                           */
  #define RADIO_INTENSET00_ADDRESS_Msk (0x1UL << RADIO_INTENSET00_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                 */
  #define RADIO_INTENSET00_ADDRESS_Min (0x0UL)       /*!< Min enumerator value of ADDRESS field.                               */
  #define RADIO_INTENSET00_ADDRESS_Max (0x1UL)       /*!< Max enumerator value of ADDRESS field.                               */
  #define RADIO_INTENSET00_ADDRESS_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_ADDRESS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_ADDRESS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* FRAMESTART @Bit 4 : Write '1' to enable interrupt for event FRAMESTART */
  #define RADIO_INTENSET00_FRAMESTART_Pos (4UL)      /*!< Position of FRAMESTART field.                                        */
  #define RADIO_INTENSET00_FRAMESTART_Msk (0x1UL << RADIO_INTENSET00_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field.        */
  #define RADIO_INTENSET00_FRAMESTART_Min (0x0UL)    /*!< Min enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENSET00_FRAMESTART_Max (0x1UL)    /*!< Max enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENSET00_FRAMESTART_Set (0x1UL)    /*!< Enable                                                               */
  #define RADIO_INTENSET00_FRAMESTART_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENSET00_FRAMESTART_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PAYLOAD @Bit 5 : Write '1' to enable interrupt for event PAYLOAD */
  #define RADIO_INTENSET00_PAYLOAD_Pos (5UL)         /*!< Position of PAYLOAD field.                                           */
  #define RADIO_INTENSET00_PAYLOAD_Msk (0x1UL << RADIO_INTENSET00_PAYLOAD_Pos) /*!< Bit mask of PAYLOAD field.                 */
  #define RADIO_INTENSET00_PAYLOAD_Min (0x0UL)       /*!< Min enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENSET00_PAYLOAD_Max (0x1UL)       /*!< Max enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENSET00_PAYLOAD_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_PAYLOAD_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_PAYLOAD_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* END @Bit 6 : Write '1' to enable interrupt for event END */
  #define RADIO_INTENSET00_END_Pos (6UL)             /*!< Position of END field.                                               */
  #define RADIO_INTENSET00_END_Msk (0x1UL << RADIO_INTENSET00_END_Pos) /*!< Bit mask of END field.                             */
  #define RADIO_INTENSET00_END_Min (0x0UL)           /*!< Min enumerator value of END field.                                   */
  #define RADIO_INTENSET00_END_Max (0x1UL)           /*!< Max enumerator value of END field.                                   */
  #define RADIO_INTENSET00_END_Set (0x1UL)           /*!< Enable                                                               */
  #define RADIO_INTENSET00_END_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_END_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PHYEND @Bit 7 : Write '1' to enable interrupt for event PHYEND */
  #define RADIO_INTENSET00_PHYEND_Pos (7UL)          /*!< Position of PHYEND field.                                            */
  #define RADIO_INTENSET00_PHYEND_Msk (0x1UL << RADIO_INTENSET00_PHYEND_Pos) /*!< Bit mask of PHYEND field.                    */
  #define RADIO_INTENSET00_PHYEND_Min (0x0UL)        /*!< Min enumerator value of PHYEND field.                                */
  #define RADIO_INTENSET00_PHYEND_Max (0x1UL)        /*!< Max enumerator value of PHYEND field.                                */
  #define RADIO_INTENSET00_PHYEND_Set (0x1UL)        /*!< Enable                                                               */
  #define RADIO_INTENSET00_PHYEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_PHYEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DISABLED @Bit 8 : Write '1' to enable interrupt for event DISABLED */
  #define RADIO_INTENSET00_DISABLED_Pos (8UL)        /*!< Position of DISABLED field.                                          */
  #define RADIO_INTENSET00_DISABLED_Msk (0x1UL << RADIO_INTENSET00_DISABLED_Pos) /*!< Bit mask of DISABLED field.              */
  #define RADIO_INTENSET00_DISABLED_Min (0x0UL)      /*!< Min enumerator value of DISABLED field.                              */
  #define RADIO_INTENSET00_DISABLED_Max (0x1UL)      /*!< Max enumerator value of DISABLED field.                              */
  #define RADIO_INTENSET00_DISABLED_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET00_DISABLED_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_DISABLED_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMATCH @Bit 9 : Write '1' to enable interrupt for event DEVMATCH */
  #define RADIO_INTENSET00_DEVMATCH_Pos (9UL)        /*!< Position of DEVMATCH field.                                          */
  #define RADIO_INTENSET00_DEVMATCH_Msk (0x1UL << RADIO_INTENSET00_DEVMATCH_Pos) /*!< Bit mask of DEVMATCH field.              */
  #define RADIO_INTENSET00_DEVMATCH_Min (0x0UL)      /*!< Min enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENSET00_DEVMATCH_Max (0x1UL)      /*!< Max enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENSET00_DEVMATCH_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET00_DEVMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_DEVMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMISS @Bit 10 : Write '1' to enable interrupt for event DEVMISS */
  #define RADIO_INTENSET00_DEVMISS_Pos (10UL)        /*!< Position of DEVMISS field.                                           */
  #define RADIO_INTENSET00_DEVMISS_Msk (0x1UL << RADIO_INTENSET00_DEVMISS_Pos) /*!< Bit mask of DEVMISS field.                 */
  #define RADIO_INTENSET00_DEVMISS_Min (0x0UL)       /*!< Min enumerator value of DEVMISS field.                               */
  #define RADIO_INTENSET00_DEVMISS_Max (0x1UL)       /*!< Max enumerator value of DEVMISS field.                               */
  #define RADIO_INTENSET00_DEVMISS_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_DEVMISS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_DEVMISS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CRCOK @Bit 11 : Write '1' to enable interrupt for event CRCOK */
  #define RADIO_INTENSET00_CRCOK_Pos (11UL)          /*!< Position of CRCOK field.                                             */
  #define RADIO_INTENSET00_CRCOK_Msk (0x1UL << RADIO_INTENSET00_CRCOK_Pos) /*!< Bit mask of CRCOK field.                       */
  #define RADIO_INTENSET00_CRCOK_Min (0x0UL)         /*!< Min enumerator value of CRCOK field.                                 */
  #define RADIO_INTENSET00_CRCOK_Max (0x1UL)         /*!< Max enumerator value of CRCOK field.                                 */
  #define RADIO_INTENSET00_CRCOK_Set (0x1UL)         /*!< Enable                                                               */
  #define RADIO_INTENSET00_CRCOK_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_CRCOK_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* CRCERROR @Bit 12 : Write '1' to enable interrupt for event CRCERROR */
  #define RADIO_INTENSET00_CRCERROR_Pos (12UL)       /*!< Position of CRCERROR field.                                          */
  #define RADIO_INTENSET00_CRCERROR_Msk (0x1UL << RADIO_INTENSET00_CRCERROR_Pos) /*!< Bit mask of CRCERROR field.              */
  #define RADIO_INTENSET00_CRCERROR_Min (0x0UL)      /*!< Min enumerator value of CRCERROR field.                              */
  #define RADIO_INTENSET00_CRCERROR_Max (0x1UL)      /*!< Max enumerator value of CRCERROR field.                              */
  #define RADIO_INTENSET00_CRCERROR_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET00_CRCERROR_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_CRCERROR_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* BCMATCH @Bit 14 : Write '1' to enable interrupt for event BCMATCH */
  #define RADIO_INTENSET00_BCMATCH_Pos (14UL)        /*!< Position of BCMATCH field.                                           */
  #define RADIO_INTENSET00_BCMATCH_Msk (0x1UL << RADIO_INTENSET00_BCMATCH_Pos) /*!< Bit mask of BCMATCH field.                 */
  #define RADIO_INTENSET00_BCMATCH_Min (0x0UL)       /*!< Min enumerator value of BCMATCH field.                               */
  #define RADIO_INTENSET00_BCMATCH_Max (0x1UL)       /*!< Max enumerator value of BCMATCH field.                               */
  #define RADIO_INTENSET00_BCMATCH_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_BCMATCH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_BCMATCH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* EDEND @Bit 15 : Write '1' to enable interrupt for event EDEND */
  #define RADIO_INTENSET00_EDEND_Pos (15UL)          /*!< Position of EDEND field.                                             */
  #define RADIO_INTENSET00_EDEND_Msk (0x1UL << RADIO_INTENSET00_EDEND_Pos) /*!< Bit mask of EDEND field.                       */
  #define RADIO_INTENSET00_EDEND_Min (0x0UL)         /*!< Min enumerator value of EDEND field.                                 */
  #define RADIO_INTENSET00_EDEND_Max (0x1UL)         /*!< Max enumerator value of EDEND field.                                 */
  #define RADIO_INTENSET00_EDEND_Set (0x1UL)         /*!< Enable                                                               */
  #define RADIO_INTENSET00_EDEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_EDEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* EDSTOPPED @Bit 16 : Write '1' to enable interrupt for event EDSTOPPED */
  #define RADIO_INTENSET00_EDSTOPPED_Pos (16UL)      /*!< Position of EDSTOPPED field.                                         */
  #define RADIO_INTENSET00_EDSTOPPED_Msk (0x1UL << RADIO_INTENSET00_EDSTOPPED_Pos) /*!< Bit mask of EDSTOPPED field.           */
  #define RADIO_INTENSET00_EDSTOPPED_Min (0x0UL)     /*!< Min enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENSET00_EDSTOPPED_Max (0x1UL)     /*!< Max enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENSET00_EDSTOPPED_Set (0x1UL)     /*!< Enable                                                               */
  #define RADIO_INTENSET00_EDSTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENSET00_EDSTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* CCAIDLE @Bit 17 : Write '1' to enable interrupt for event CCAIDLE */
  #define RADIO_INTENSET00_CCAIDLE_Pos (17UL)        /*!< Position of CCAIDLE field.                                           */
  #define RADIO_INTENSET00_CCAIDLE_Msk (0x1UL << RADIO_INTENSET00_CCAIDLE_Pos) /*!< Bit mask of CCAIDLE field.                 */
  #define RADIO_INTENSET00_CCAIDLE_Min (0x0UL)       /*!< Min enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENSET00_CCAIDLE_Max (0x1UL)       /*!< Max enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENSET00_CCAIDLE_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_CCAIDLE_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_CCAIDLE_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCABUSY @Bit 18 : Write '1' to enable interrupt for event CCABUSY */
  #define RADIO_INTENSET00_CCABUSY_Pos (18UL)        /*!< Position of CCABUSY field.                                           */
  #define RADIO_INTENSET00_CCABUSY_Msk (0x1UL << RADIO_INTENSET00_CCABUSY_Pos) /*!< Bit mask of CCABUSY field.                 */
  #define RADIO_INTENSET00_CCABUSY_Min (0x0UL)       /*!< Min enumerator value of CCABUSY field.                               */
  #define RADIO_INTENSET00_CCABUSY_Max (0x1UL)       /*!< Max enumerator value of CCABUSY field.                               */
  #define RADIO_INTENSET00_CCABUSY_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET00_CCABUSY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_CCABUSY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCASTOPPED @Bit 19 : Write '1' to enable interrupt for event CCASTOPPED */
  #define RADIO_INTENSET00_CCASTOPPED_Pos (19UL)     /*!< Position of CCASTOPPED field.                                        */
  #define RADIO_INTENSET00_CCASTOPPED_Msk (0x1UL << RADIO_INTENSET00_CCASTOPPED_Pos) /*!< Bit mask of CCASTOPPED field.        */
  #define RADIO_INTENSET00_CCASTOPPED_Min (0x0UL)    /*!< Min enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENSET00_CCASTOPPED_Max (0x1UL)    /*!< Max enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENSET00_CCASTOPPED_Set (0x1UL)    /*!< Enable                                                               */
  #define RADIO_INTENSET00_CCASTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENSET00_CCASTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* RATEBOOST @Bit 20 : Write '1' to enable interrupt for event RATEBOOST */
  #define RADIO_INTENSET00_RATEBOOST_Pos (20UL)      /*!< Position of RATEBOOST field.                                         */
  #define RADIO_INTENSET00_RATEBOOST_Msk (0x1UL << RADIO_INTENSET00_RATEBOOST_Pos) /*!< Bit mask of RATEBOOST field.           */
  #define RADIO_INTENSET00_RATEBOOST_Min (0x0UL)     /*!< Min enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENSET00_RATEBOOST_Max (0x1UL)     /*!< Max enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENSET00_RATEBOOST_Set (0x1UL)     /*!< Enable                                                               */
  #define RADIO_INTENSET00_RATEBOOST_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENSET00_RATEBOOST_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* MHRMATCH @Bit 21 : Write '1' to enable interrupt for event MHRMATCH */
  #define RADIO_INTENSET00_MHRMATCH_Pos (21UL)       /*!< Position of MHRMATCH field.                                          */
  #define RADIO_INTENSET00_MHRMATCH_Msk (0x1UL << RADIO_INTENSET00_MHRMATCH_Pos) /*!< Bit mask of MHRMATCH field.              */
  #define RADIO_INTENSET00_MHRMATCH_Min (0x0UL)      /*!< Min enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENSET00_MHRMATCH_Max (0x1UL)      /*!< Max enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENSET00_MHRMATCH_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET00_MHRMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_MHRMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* SYNC @Bit 22 : Write '1' to enable interrupt for event SYNC */
  #define RADIO_INTENSET00_SYNC_Pos (22UL)           /*!< Position of SYNC field.                                              */
  #define RADIO_INTENSET00_SYNC_Msk (0x1UL << RADIO_INTENSET00_SYNC_Pos) /*!< Bit mask of SYNC field.                          */
  #define RADIO_INTENSET00_SYNC_Min (0x0UL)          /*!< Min enumerator value of SYNC field.                                  */
  #define RADIO_INTENSET00_SYNC_Max (0x1UL)          /*!< Max enumerator value of SYNC field.                                  */
  #define RADIO_INTENSET00_SYNC_Set (0x1UL)          /*!< Enable                                                               */
  #define RADIO_INTENSET00_SYNC_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET00_SYNC_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* CTEPRESENT @Bit 23 : Write '1' to enable interrupt for event CTEPRESENT */
  #define RADIO_INTENSET00_CTEPRESENT_Pos (23UL)     /*!< Position of CTEPRESENT field.                                        */
  #define RADIO_INTENSET00_CTEPRESENT_Msk (0x1UL << RADIO_INTENSET00_CTEPRESENT_Pos) /*!< Bit mask of CTEPRESENT field.        */
  #define RADIO_INTENSET00_CTEPRESENT_Min (0x0UL)    /*!< Min enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENSET00_CTEPRESENT_Max (0x1UL)    /*!< Max enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENSET00_CTEPRESENT_Set (0x1UL)    /*!< Enable                                                               */
  #define RADIO_INTENSET00_CTEPRESENT_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENSET00_CTEPRESENT_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* RADIO_INTENCLR00: Disable interrupt */
  #define RADIO_INTENCLR00_ResetValue (0x00000000UL) /*!< Reset value of INTENCLR00 register.                                  */

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define RADIO_INTENCLR00_READY_Pos (0UL)           /*!< Position of READY field.                                             */
  #define RADIO_INTENCLR00_READY_Msk (0x1UL << RADIO_INTENCLR00_READY_Pos) /*!< Bit mask of READY field.                       */
  #define RADIO_INTENCLR00_READY_Min (0x0UL)         /*!< Min enumerator value of READY field.                                 */
  #define RADIO_INTENCLR00_READY_Max (0x1UL)         /*!< Max enumerator value of READY field.                                 */
  #define RADIO_INTENCLR00_READY_Clear (0x1UL)       /*!< Disable                                                              */
  #define RADIO_INTENCLR00_READY_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_READY_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* TXREADY @Bit 1 : Write '1' to disable interrupt for event TXREADY */
  #define RADIO_INTENCLR00_TXREADY_Pos (1UL)         /*!< Position of TXREADY field.                                           */
  #define RADIO_INTENCLR00_TXREADY_Msk (0x1UL << RADIO_INTENCLR00_TXREADY_Pos) /*!< Bit mask of TXREADY field.                 */
  #define RADIO_INTENCLR00_TXREADY_Min (0x0UL)       /*!< Min enumerator value of TXREADY field.                               */
  #define RADIO_INTENCLR00_TXREADY_Max (0x1UL)       /*!< Max enumerator value of TXREADY field.                               */
  #define RADIO_INTENCLR00_TXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_TXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_TXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RXREADY @Bit 2 : Write '1' to disable interrupt for event RXREADY */
  #define RADIO_INTENCLR00_RXREADY_Pos (2UL)         /*!< Position of RXREADY field.                                           */
  #define RADIO_INTENCLR00_RXREADY_Msk (0x1UL << RADIO_INTENCLR00_RXREADY_Pos) /*!< Bit mask of RXREADY field.                 */
  #define RADIO_INTENCLR00_RXREADY_Min (0x0UL)       /*!< Min enumerator value of RXREADY field.                               */
  #define RADIO_INTENCLR00_RXREADY_Max (0x1UL)       /*!< Max enumerator value of RXREADY field.                               */
  #define RADIO_INTENCLR00_RXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_RXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_RXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ADDRESS @Bit 3 : Write '1' to disable interrupt for event ADDRESS */
  #define RADIO_INTENCLR00_ADDRESS_Pos (3UL)         /*!< Position of ADDRESS field.                                           */
  #define RADIO_INTENCLR00_ADDRESS_Msk (0x1UL << RADIO_INTENCLR00_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                 */
  #define RADIO_INTENCLR00_ADDRESS_Min (0x0UL)       /*!< Min enumerator value of ADDRESS field.                               */
  #define RADIO_INTENCLR00_ADDRESS_Max (0x1UL)       /*!< Max enumerator value of ADDRESS field.                               */
  #define RADIO_INTENCLR00_ADDRESS_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_ADDRESS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_ADDRESS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* FRAMESTART @Bit 4 : Write '1' to disable interrupt for event FRAMESTART */
  #define RADIO_INTENCLR00_FRAMESTART_Pos (4UL)      /*!< Position of FRAMESTART field.                                        */
  #define RADIO_INTENCLR00_FRAMESTART_Msk (0x1UL << RADIO_INTENCLR00_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field.        */
  #define RADIO_INTENCLR00_FRAMESTART_Min (0x0UL)    /*!< Min enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENCLR00_FRAMESTART_Max (0x1UL)    /*!< Max enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENCLR00_FRAMESTART_Clear (0x1UL)  /*!< Disable                                                              */
  #define RADIO_INTENCLR00_FRAMESTART_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENCLR00_FRAMESTART_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PAYLOAD @Bit 5 : Write '1' to disable interrupt for event PAYLOAD */
  #define RADIO_INTENCLR00_PAYLOAD_Pos (5UL)         /*!< Position of PAYLOAD field.                                           */
  #define RADIO_INTENCLR00_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR00_PAYLOAD_Pos) /*!< Bit mask of PAYLOAD field.                 */
  #define RADIO_INTENCLR00_PAYLOAD_Min (0x0UL)       /*!< Min enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENCLR00_PAYLOAD_Max (0x1UL)       /*!< Max enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENCLR00_PAYLOAD_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_PAYLOAD_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_PAYLOAD_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* END @Bit 6 : Write '1' to disable interrupt for event END */
  #define RADIO_INTENCLR00_END_Pos (6UL)             /*!< Position of END field.                                               */
  #define RADIO_INTENCLR00_END_Msk (0x1UL << RADIO_INTENCLR00_END_Pos) /*!< Bit mask of END field.                             */
  #define RADIO_INTENCLR00_END_Min (0x0UL)           /*!< Min enumerator value of END field.                                   */
  #define RADIO_INTENCLR00_END_Max (0x1UL)           /*!< Max enumerator value of END field.                                   */
  #define RADIO_INTENCLR00_END_Clear (0x1UL)         /*!< Disable                                                              */
  #define RADIO_INTENCLR00_END_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_END_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PHYEND @Bit 7 : Write '1' to disable interrupt for event PHYEND */
  #define RADIO_INTENCLR00_PHYEND_Pos (7UL)          /*!< Position of PHYEND field.                                            */
  #define RADIO_INTENCLR00_PHYEND_Msk (0x1UL << RADIO_INTENCLR00_PHYEND_Pos) /*!< Bit mask of PHYEND field.                    */
  #define RADIO_INTENCLR00_PHYEND_Min (0x0UL)        /*!< Min enumerator value of PHYEND field.                                */
  #define RADIO_INTENCLR00_PHYEND_Max (0x1UL)        /*!< Max enumerator value of PHYEND field.                                */
  #define RADIO_INTENCLR00_PHYEND_Clear (0x1UL)      /*!< Disable                                                              */
  #define RADIO_INTENCLR00_PHYEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_PHYEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DISABLED @Bit 8 : Write '1' to disable interrupt for event DISABLED */
  #define RADIO_INTENCLR00_DISABLED_Pos (8UL)        /*!< Position of DISABLED field.                                          */
  #define RADIO_INTENCLR00_DISABLED_Msk (0x1UL << RADIO_INTENCLR00_DISABLED_Pos) /*!< Bit mask of DISABLED field.              */
  #define RADIO_INTENCLR00_DISABLED_Min (0x0UL)      /*!< Min enumerator value of DISABLED field.                              */
  #define RADIO_INTENCLR00_DISABLED_Max (0x1UL)      /*!< Max enumerator value of DISABLED field.                              */
  #define RADIO_INTENCLR00_DISABLED_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR00_DISABLED_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_DISABLED_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMATCH @Bit 9 : Write '1' to disable interrupt for event DEVMATCH */
  #define RADIO_INTENCLR00_DEVMATCH_Pos (9UL)        /*!< Position of DEVMATCH field.                                          */
  #define RADIO_INTENCLR00_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR00_DEVMATCH_Pos) /*!< Bit mask of DEVMATCH field.              */
  #define RADIO_INTENCLR00_DEVMATCH_Min (0x0UL)      /*!< Min enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENCLR00_DEVMATCH_Max (0x1UL)      /*!< Max enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENCLR00_DEVMATCH_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR00_DEVMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_DEVMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMISS @Bit 10 : Write '1' to disable interrupt for event DEVMISS */
  #define RADIO_INTENCLR00_DEVMISS_Pos (10UL)        /*!< Position of DEVMISS field.                                           */
  #define RADIO_INTENCLR00_DEVMISS_Msk (0x1UL << RADIO_INTENCLR00_DEVMISS_Pos) /*!< Bit mask of DEVMISS field.                 */
  #define RADIO_INTENCLR00_DEVMISS_Min (0x0UL)       /*!< Min enumerator value of DEVMISS field.                               */
  #define RADIO_INTENCLR00_DEVMISS_Max (0x1UL)       /*!< Max enumerator value of DEVMISS field.                               */
  #define RADIO_INTENCLR00_DEVMISS_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_DEVMISS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_DEVMISS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CRCOK @Bit 11 : Write '1' to disable interrupt for event CRCOK */
  #define RADIO_INTENCLR00_CRCOK_Pos (11UL)          /*!< Position of CRCOK field.                                             */
  #define RADIO_INTENCLR00_CRCOK_Msk (0x1UL << RADIO_INTENCLR00_CRCOK_Pos) /*!< Bit mask of CRCOK field.                       */
  #define RADIO_INTENCLR00_CRCOK_Min (0x0UL)         /*!< Min enumerator value of CRCOK field.                                 */
  #define RADIO_INTENCLR00_CRCOK_Max (0x1UL)         /*!< Max enumerator value of CRCOK field.                                 */
  #define RADIO_INTENCLR00_CRCOK_Clear (0x1UL)       /*!< Disable                                                              */
  #define RADIO_INTENCLR00_CRCOK_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_CRCOK_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* CRCERROR @Bit 12 : Write '1' to disable interrupt for event CRCERROR */
  #define RADIO_INTENCLR00_CRCERROR_Pos (12UL)       /*!< Position of CRCERROR field.                                          */
  #define RADIO_INTENCLR00_CRCERROR_Msk (0x1UL << RADIO_INTENCLR00_CRCERROR_Pos) /*!< Bit mask of CRCERROR field.              */
  #define RADIO_INTENCLR00_CRCERROR_Min (0x0UL)      /*!< Min enumerator value of CRCERROR field.                              */
  #define RADIO_INTENCLR00_CRCERROR_Max (0x1UL)      /*!< Max enumerator value of CRCERROR field.                              */
  #define RADIO_INTENCLR00_CRCERROR_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR00_CRCERROR_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_CRCERROR_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* BCMATCH @Bit 14 : Write '1' to disable interrupt for event BCMATCH */
  #define RADIO_INTENCLR00_BCMATCH_Pos (14UL)        /*!< Position of BCMATCH field.                                           */
  #define RADIO_INTENCLR00_BCMATCH_Msk (0x1UL << RADIO_INTENCLR00_BCMATCH_Pos) /*!< Bit mask of BCMATCH field.                 */
  #define RADIO_INTENCLR00_BCMATCH_Min (0x0UL)       /*!< Min enumerator value of BCMATCH field.                               */
  #define RADIO_INTENCLR00_BCMATCH_Max (0x1UL)       /*!< Max enumerator value of BCMATCH field.                               */
  #define RADIO_INTENCLR00_BCMATCH_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_BCMATCH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_BCMATCH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* EDEND @Bit 15 : Write '1' to disable interrupt for event EDEND */
  #define RADIO_INTENCLR00_EDEND_Pos (15UL)          /*!< Position of EDEND field.                                             */
  #define RADIO_INTENCLR00_EDEND_Msk (0x1UL << RADIO_INTENCLR00_EDEND_Pos) /*!< Bit mask of EDEND field.                       */
  #define RADIO_INTENCLR00_EDEND_Min (0x0UL)         /*!< Min enumerator value of EDEND field.                                 */
  #define RADIO_INTENCLR00_EDEND_Max (0x1UL)         /*!< Max enumerator value of EDEND field.                                 */
  #define RADIO_INTENCLR00_EDEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define RADIO_INTENCLR00_EDEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_EDEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* EDSTOPPED @Bit 16 : Write '1' to disable interrupt for event EDSTOPPED */
  #define RADIO_INTENCLR00_EDSTOPPED_Pos (16UL)      /*!< Position of EDSTOPPED field.                                         */
  #define RADIO_INTENCLR00_EDSTOPPED_Msk (0x1UL << RADIO_INTENCLR00_EDSTOPPED_Pos) /*!< Bit mask of EDSTOPPED field.           */
  #define RADIO_INTENCLR00_EDSTOPPED_Min (0x0UL)     /*!< Min enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENCLR00_EDSTOPPED_Max (0x1UL)     /*!< Max enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENCLR00_EDSTOPPED_Clear (0x1UL)   /*!< Disable                                                              */
  #define RADIO_INTENCLR00_EDSTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENCLR00_EDSTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* CCAIDLE @Bit 17 : Write '1' to disable interrupt for event CCAIDLE */
  #define RADIO_INTENCLR00_CCAIDLE_Pos (17UL)        /*!< Position of CCAIDLE field.                                           */
  #define RADIO_INTENCLR00_CCAIDLE_Msk (0x1UL << RADIO_INTENCLR00_CCAIDLE_Pos) /*!< Bit mask of CCAIDLE field.                 */
  #define RADIO_INTENCLR00_CCAIDLE_Min (0x0UL)       /*!< Min enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENCLR00_CCAIDLE_Max (0x1UL)       /*!< Max enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENCLR00_CCAIDLE_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_CCAIDLE_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_CCAIDLE_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCABUSY @Bit 18 : Write '1' to disable interrupt for event CCABUSY */
  #define RADIO_INTENCLR00_CCABUSY_Pos (18UL)        /*!< Position of CCABUSY field.                                           */
  #define RADIO_INTENCLR00_CCABUSY_Msk (0x1UL << RADIO_INTENCLR00_CCABUSY_Pos) /*!< Bit mask of CCABUSY field.                 */
  #define RADIO_INTENCLR00_CCABUSY_Min (0x0UL)       /*!< Min enumerator value of CCABUSY field.                               */
  #define RADIO_INTENCLR00_CCABUSY_Max (0x1UL)       /*!< Max enumerator value of CCABUSY field.                               */
  #define RADIO_INTENCLR00_CCABUSY_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR00_CCABUSY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_CCABUSY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCASTOPPED @Bit 19 : Write '1' to disable interrupt for event CCASTOPPED */
  #define RADIO_INTENCLR00_CCASTOPPED_Pos (19UL)     /*!< Position of CCASTOPPED field.                                        */
  #define RADIO_INTENCLR00_CCASTOPPED_Msk (0x1UL << RADIO_INTENCLR00_CCASTOPPED_Pos) /*!< Bit mask of CCASTOPPED field.        */
  #define RADIO_INTENCLR00_CCASTOPPED_Min (0x0UL)    /*!< Min enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENCLR00_CCASTOPPED_Max (0x1UL)    /*!< Max enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENCLR00_CCASTOPPED_Clear (0x1UL)  /*!< Disable                                                              */
  #define RADIO_INTENCLR00_CCASTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENCLR00_CCASTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* RATEBOOST @Bit 20 : Write '1' to disable interrupt for event RATEBOOST */
  #define RADIO_INTENCLR00_RATEBOOST_Pos (20UL)      /*!< Position of RATEBOOST field.                                         */
  #define RADIO_INTENCLR00_RATEBOOST_Msk (0x1UL << RADIO_INTENCLR00_RATEBOOST_Pos) /*!< Bit mask of RATEBOOST field.           */
  #define RADIO_INTENCLR00_RATEBOOST_Min (0x0UL)     /*!< Min enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENCLR00_RATEBOOST_Max (0x1UL)     /*!< Max enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENCLR00_RATEBOOST_Clear (0x1UL)   /*!< Disable                                                              */
  #define RADIO_INTENCLR00_RATEBOOST_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENCLR00_RATEBOOST_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* MHRMATCH @Bit 21 : Write '1' to disable interrupt for event MHRMATCH */
  #define RADIO_INTENCLR00_MHRMATCH_Pos (21UL)       /*!< Position of MHRMATCH field.                                          */
  #define RADIO_INTENCLR00_MHRMATCH_Msk (0x1UL << RADIO_INTENCLR00_MHRMATCH_Pos) /*!< Bit mask of MHRMATCH field.              */
  #define RADIO_INTENCLR00_MHRMATCH_Min (0x0UL)      /*!< Min enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENCLR00_MHRMATCH_Max (0x1UL)      /*!< Max enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENCLR00_MHRMATCH_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR00_MHRMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_MHRMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* SYNC @Bit 22 : Write '1' to disable interrupt for event SYNC */
  #define RADIO_INTENCLR00_SYNC_Pos (22UL)           /*!< Position of SYNC field.                                              */
  #define RADIO_INTENCLR00_SYNC_Msk (0x1UL << RADIO_INTENCLR00_SYNC_Pos) /*!< Bit mask of SYNC field.                          */
  #define RADIO_INTENCLR00_SYNC_Min (0x0UL)          /*!< Min enumerator value of SYNC field.                                  */
  #define RADIO_INTENCLR00_SYNC_Max (0x1UL)          /*!< Max enumerator value of SYNC field.                                  */
  #define RADIO_INTENCLR00_SYNC_Clear (0x1UL)        /*!< Disable                                                              */
  #define RADIO_INTENCLR00_SYNC_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR00_SYNC_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* CTEPRESENT @Bit 23 : Write '1' to disable interrupt for event CTEPRESENT */
  #define RADIO_INTENCLR00_CTEPRESENT_Pos (23UL)     /*!< Position of CTEPRESENT field.                                        */
  #define RADIO_INTENCLR00_CTEPRESENT_Msk (0x1UL << RADIO_INTENCLR00_CTEPRESENT_Pos) /*!< Bit mask of CTEPRESENT field.        */
  #define RADIO_INTENCLR00_CTEPRESENT_Min (0x0UL)    /*!< Min enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENCLR00_CTEPRESENT_Max (0x1UL)    /*!< Max enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENCLR00_CTEPRESENT_Clear (0x1UL)  /*!< Disable                                                              */
  #define RADIO_INTENCLR00_CTEPRESENT_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENCLR00_CTEPRESENT_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* RADIO_INTENSET10: Enable interrupt */
  #define RADIO_INTENSET10_ResetValue (0x00000000UL) /*!< Reset value of INTENSET10 register.                                  */

/* READY @Bit 0 : Write '1' to enable interrupt for event READY */
  #define RADIO_INTENSET10_READY_Pos (0UL)           /*!< Position of READY field.                                             */
  #define RADIO_INTENSET10_READY_Msk (0x1UL << RADIO_INTENSET10_READY_Pos) /*!< Bit mask of READY field.                       */
  #define RADIO_INTENSET10_READY_Min (0x0UL)         /*!< Min enumerator value of READY field.                                 */
  #define RADIO_INTENSET10_READY_Max (0x1UL)         /*!< Max enumerator value of READY field.                                 */
  #define RADIO_INTENSET10_READY_Set (0x1UL)         /*!< Enable                                                               */
  #define RADIO_INTENSET10_READY_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_READY_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* TXREADY @Bit 1 : Write '1' to enable interrupt for event TXREADY */
  #define RADIO_INTENSET10_TXREADY_Pos (1UL)         /*!< Position of TXREADY field.                                           */
  #define RADIO_INTENSET10_TXREADY_Msk (0x1UL << RADIO_INTENSET10_TXREADY_Pos) /*!< Bit mask of TXREADY field.                 */
  #define RADIO_INTENSET10_TXREADY_Min (0x0UL)       /*!< Min enumerator value of TXREADY field.                               */
  #define RADIO_INTENSET10_TXREADY_Max (0x1UL)       /*!< Max enumerator value of TXREADY field.                               */
  #define RADIO_INTENSET10_TXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_TXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_TXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RXREADY @Bit 2 : Write '1' to enable interrupt for event RXREADY */
  #define RADIO_INTENSET10_RXREADY_Pos (2UL)         /*!< Position of RXREADY field.                                           */
  #define RADIO_INTENSET10_RXREADY_Msk (0x1UL << RADIO_INTENSET10_RXREADY_Pos) /*!< Bit mask of RXREADY field.                 */
  #define RADIO_INTENSET10_RXREADY_Min (0x0UL)       /*!< Min enumerator value of RXREADY field.                               */
  #define RADIO_INTENSET10_RXREADY_Max (0x1UL)       /*!< Max enumerator value of RXREADY field.                               */
  #define RADIO_INTENSET10_RXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_RXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_RXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ADDRESS @Bit 3 : Write '1' to enable interrupt for event ADDRESS */
  #define RADIO_INTENSET10_ADDRESS_Pos (3UL)         /*!< Position of ADDRESS field.                                           */
  #define RADIO_INTENSET10_ADDRESS_Msk (0x1UL << RADIO_INTENSET10_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                 */
  #define RADIO_INTENSET10_ADDRESS_Min (0x0UL)       /*!< Min enumerator value of ADDRESS field.                               */
  #define RADIO_INTENSET10_ADDRESS_Max (0x1UL)       /*!< Max enumerator value of ADDRESS field.                               */
  #define RADIO_INTENSET10_ADDRESS_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_ADDRESS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_ADDRESS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* FRAMESTART @Bit 4 : Write '1' to enable interrupt for event FRAMESTART */
  #define RADIO_INTENSET10_FRAMESTART_Pos (4UL)      /*!< Position of FRAMESTART field.                                        */
  #define RADIO_INTENSET10_FRAMESTART_Msk (0x1UL << RADIO_INTENSET10_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field.        */
  #define RADIO_INTENSET10_FRAMESTART_Min (0x0UL)    /*!< Min enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENSET10_FRAMESTART_Max (0x1UL)    /*!< Max enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENSET10_FRAMESTART_Set (0x1UL)    /*!< Enable                                                               */
  #define RADIO_INTENSET10_FRAMESTART_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENSET10_FRAMESTART_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PAYLOAD @Bit 5 : Write '1' to enable interrupt for event PAYLOAD */
  #define RADIO_INTENSET10_PAYLOAD_Pos (5UL)         /*!< Position of PAYLOAD field.                                           */
  #define RADIO_INTENSET10_PAYLOAD_Msk (0x1UL << RADIO_INTENSET10_PAYLOAD_Pos) /*!< Bit mask of PAYLOAD field.                 */
  #define RADIO_INTENSET10_PAYLOAD_Min (0x0UL)       /*!< Min enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENSET10_PAYLOAD_Max (0x1UL)       /*!< Max enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENSET10_PAYLOAD_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_PAYLOAD_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_PAYLOAD_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* END @Bit 6 : Write '1' to enable interrupt for event END */
  #define RADIO_INTENSET10_END_Pos (6UL)             /*!< Position of END field.                                               */
  #define RADIO_INTENSET10_END_Msk (0x1UL << RADIO_INTENSET10_END_Pos) /*!< Bit mask of END field.                             */
  #define RADIO_INTENSET10_END_Min (0x0UL)           /*!< Min enumerator value of END field.                                   */
  #define RADIO_INTENSET10_END_Max (0x1UL)           /*!< Max enumerator value of END field.                                   */
  #define RADIO_INTENSET10_END_Set (0x1UL)           /*!< Enable                                                               */
  #define RADIO_INTENSET10_END_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_END_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PHYEND @Bit 7 : Write '1' to enable interrupt for event PHYEND */
  #define RADIO_INTENSET10_PHYEND_Pos (7UL)          /*!< Position of PHYEND field.                                            */
  #define RADIO_INTENSET10_PHYEND_Msk (0x1UL << RADIO_INTENSET10_PHYEND_Pos) /*!< Bit mask of PHYEND field.                    */
  #define RADIO_INTENSET10_PHYEND_Min (0x0UL)        /*!< Min enumerator value of PHYEND field.                                */
  #define RADIO_INTENSET10_PHYEND_Max (0x1UL)        /*!< Max enumerator value of PHYEND field.                                */
  #define RADIO_INTENSET10_PHYEND_Set (0x1UL)        /*!< Enable                                                               */
  #define RADIO_INTENSET10_PHYEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_PHYEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DISABLED @Bit 8 : Write '1' to enable interrupt for event DISABLED */
  #define RADIO_INTENSET10_DISABLED_Pos (8UL)        /*!< Position of DISABLED field.                                          */
  #define RADIO_INTENSET10_DISABLED_Msk (0x1UL << RADIO_INTENSET10_DISABLED_Pos) /*!< Bit mask of DISABLED field.              */
  #define RADIO_INTENSET10_DISABLED_Min (0x0UL)      /*!< Min enumerator value of DISABLED field.                              */
  #define RADIO_INTENSET10_DISABLED_Max (0x1UL)      /*!< Max enumerator value of DISABLED field.                              */
  #define RADIO_INTENSET10_DISABLED_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET10_DISABLED_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_DISABLED_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMATCH @Bit 9 : Write '1' to enable interrupt for event DEVMATCH */
  #define RADIO_INTENSET10_DEVMATCH_Pos (9UL)        /*!< Position of DEVMATCH field.                                          */
  #define RADIO_INTENSET10_DEVMATCH_Msk (0x1UL << RADIO_INTENSET10_DEVMATCH_Pos) /*!< Bit mask of DEVMATCH field.              */
  #define RADIO_INTENSET10_DEVMATCH_Min (0x0UL)      /*!< Min enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENSET10_DEVMATCH_Max (0x1UL)      /*!< Max enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENSET10_DEVMATCH_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET10_DEVMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_DEVMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMISS @Bit 10 : Write '1' to enable interrupt for event DEVMISS */
  #define RADIO_INTENSET10_DEVMISS_Pos (10UL)        /*!< Position of DEVMISS field.                                           */
  #define RADIO_INTENSET10_DEVMISS_Msk (0x1UL << RADIO_INTENSET10_DEVMISS_Pos) /*!< Bit mask of DEVMISS field.                 */
  #define RADIO_INTENSET10_DEVMISS_Min (0x0UL)       /*!< Min enumerator value of DEVMISS field.                               */
  #define RADIO_INTENSET10_DEVMISS_Max (0x1UL)       /*!< Max enumerator value of DEVMISS field.                               */
  #define RADIO_INTENSET10_DEVMISS_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_DEVMISS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_DEVMISS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CRCOK @Bit 11 : Write '1' to enable interrupt for event CRCOK */
  #define RADIO_INTENSET10_CRCOK_Pos (11UL)          /*!< Position of CRCOK field.                                             */
  #define RADIO_INTENSET10_CRCOK_Msk (0x1UL << RADIO_INTENSET10_CRCOK_Pos) /*!< Bit mask of CRCOK field.                       */
  #define RADIO_INTENSET10_CRCOK_Min (0x0UL)         /*!< Min enumerator value of CRCOK field.                                 */
  #define RADIO_INTENSET10_CRCOK_Max (0x1UL)         /*!< Max enumerator value of CRCOK field.                                 */
  #define RADIO_INTENSET10_CRCOK_Set (0x1UL)         /*!< Enable                                                               */
  #define RADIO_INTENSET10_CRCOK_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_CRCOK_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* CRCERROR @Bit 12 : Write '1' to enable interrupt for event CRCERROR */
  #define RADIO_INTENSET10_CRCERROR_Pos (12UL)       /*!< Position of CRCERROR field.                                          */
  #define RADIO_INTENSET10_CRCERROR_Msk (0x1UL << RADIO_INTENSET10_CRCERROR_Pos) /*!< Bit mask of CRCERROR field.              */
  #define RADIO_INTENSET10_CRCERROR_Min (0x0UL)      /*!< Min enumerator value of CRCERROR field.                              */
  #define RADIO_INTENSET10_CRCERROR_Max (0x1UL)      /*!< Max enumerator value of CRCERROR field.                              */
  #define RADIO_INTENSET10_CRCERROR_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET10_CRCERROR_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_CRCERROR_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* BCMATCH @Bit 14 : Write '1' to enable interrupt for event BCMATCH */
  #define RADIO_INTENSET10_BCMATCH_Pos (14UL)        /*!< Position of BCMATCH field.                                           */
  #define RADIO_INTENSET10_BCMATCH_Msk (0x1UL << RADIO_INTENSET10_BCMATCH_Pos) /*!< Bit mask of BCMATCH field.                 */
  #define RADIO_INTENSET10_BCMATCH_Min (0x0UL)       /*!< Min enumerator value of BCMATCH field.                               */
  #define RADIO_INTENSET10_BCMATCH_Max (0x1UL)       /*!< Max enumerator value of BCMATCH field.                               */
  #define RADIO_INTENSET10_BCMATCH_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_BCMATCH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_BCMATCH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* EDEND @Bit 15 : Write '1' to enable interrupt for event EDEND */
  #define RADIO_INTENSET10_EDEND_Pos (15UL)          /*!< Position of EDEND field.                                             */
  #define RADIO_INTENSET10_EDEND_Msk (0x1UL << RADIO_INTENSET10_EDEND_Pos) /*!< Bit mask of EDEND field.                       */
  #define RADIO_INTENSET10_EDEND_Min (0x0UL)         /*!< Min enumerator value of EDEND field.                                 */
  #define RADIO_INTENSET10_EDEND_Max (0x1UL)         /*!< Max enumerator value of EDEND field.                                 */
  #define RADIO_INTENSET10_EDEND_Set (0x1UL)         /*!< Enable                                                               */
  #define RADIO_INTENSET10_EDEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_EDEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* EDSTOPPED @Bit 16 : Write '1' to enable interrupt for event EDSTOPPED */
  #define RADIO_INTENSET10_EDSTOPPED_Pos (16UL)      /*!< Position of EDSTOPPED field.                                         */
  #define RADIO_INTENSET10_EDSTOPPED_Msk (0x1UL << RADIO_INTENSET10_EDSTOPPED_Pos) /*!< Bit mask of EDSTOPPED field.           */
  #define RADIO_INTENSET10_EDSTOPPED_Min (0x0UL)     /*!< Min enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENSET10_EDSTOPPED_Max (0x1UL)     /*!< Max enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENSET10_EDSTOPPED_Set (0x1UL)     /*!< Enable                                                               */
  #define RADIO_INTENSET10_EDSTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENSET10_EDSTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* CCAIDLE @Bit 17 : Write '1' to enable interrupt for event CCAIDLE */
  #define RADIO_INTENSET10_CCAIDLE_Pos (17UL)        /*!< Position of CCAIDLE field.                                           */
  #define RADIO_INTENSET10_CCAIDLE_Msk (0x1UL << RADIO_INTENSET10_CCAIDLE_Pos) /*!< Bit mask of CCAIDLE field.                 */
  #define RADIO_INTENSET10_CCAIDLE_Min (0x0UL)       /*!< Min enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENSET10_CCAIDLE_Max (0x1UL)       /*!< Max enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENSET10_CCAIDLE_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_CCAIDLE_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_CCAIDLE_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCABUSY @Bit 18 : Write '1' to enable interrupt for event CCABUSY */
  #define RADIO_INTENSET10_CCABUSY_Pos (18UL)        /*!< Position of CCABUSY field.                                           */
  #define RADIO_INTENSET10_CCABUSY_Msk (0x1UL << RADIO_INTENSET10_CCABUSY_Pos) /*!< Bit mask of CCABUSY field.                 */
  #define RADIO_INTENSET10_CCABUSY_Min (0x0UL)       /*!< Min enumerator value of CCABUSY field.                               */
  #define RADIO_INTENSET10_CCABUSY_Max (0x1UL)       /*!< Max enumerator value of CCABUSY field.                               */
  #define RADIO_INTENSET10_CCABUSY_Set (0x1UL)       /*!< Enable                                                               */
  #define RADIO_INTENSET10_CCABUSY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_CCABUSY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCASTOPPED @Bit 19 : Write '1' to enable interrupt for event CCASTOPPED */
  #define RADIO_INTENSET10_CCASTOPPED_Pos (19UL)     /*!< Position of CCASTOPPED field.                                        */
  #define RADIO_INTENSET10_CCASTOPPED_Msk (0x1UL << RADIO_INTENSET10_CCASTOPPED_Pos) /*!< Bit mask of CCASTOPPED field.        */
  #define RADIO_INTENSET10_CCASTOPPED_Min (0x0UL)    /*!< Min enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENSET10_CCASTOPPED_Max (0x1UL)    /*!< Max enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENSET10_CCASTOPPED_Set (0x1UL)    /*!< Enable                                                               */
  #define RADIO_INTENSET10_CCASTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENSET10_CCASTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* RATEBOOST @Bit 20 : Write '1' to enable interrupt for event RATEBOOST */
  #define RADIO_INTENSET10_RATEBOOST_Pos (20UL)      /*!< Position of RATEBOOST field.                                         */
  #define RADIO_INTENSET10_RATEBOOST_Msk (0x1UL << RADIO_INTENSET10_RATEBOOST_Pos) /*!< Bit mask of RATEBOOST field.           */
  #define RADIO_INTENSET10_RATEBOOST_Min (0x0UL)     /*!< Min enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENSET10_RATEBOOST_Max (0x1UL)     /*!< Max enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENSET10_RATEBOOST_Set (0x1UL)     /*!< Enable                                                               */
  #define RADIO_INTENSET10_RATEBOOST_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENSET10_RATEBOOST_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* MHRMATCH @Bit 21 : Write '1' to enable interrupt for event MHRMATCH */
  #define RADIO_INTENSET10_MHRMATCH_Pos (21UL)       /*!< Position of MHRMATCH field.                                          */
  #define RADIO_INTENSET10_MHRMATCH_Msk (0x1UL << RADIO_INTENSET10_MHRMATCH_Pos) /*!< Bit mask of MHRMATCH field.              */
  #define RADIO_INTENSET10_MHRMATCH_Min (0x0UL)      /*!< Min enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENSET10_MHRMATCH_Max (0x1UL)      /*!< Max enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENSET10_MHRMATCH_Set (0x1UL)      /*!< Enable                                                               */
  #define RADIO_INTENSET10_MHRMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_MHRMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* SYNC @Bit 22 : Write '1' to enable interrupt for event SYNC */
  #define RADIO_INTENSET10_SYNC_Pos (22UL)           /*!< Position of SYNC field.                                              */
  #define RADIO_INTENSET10_SYNC_Msk (0x1UL << RADIO_INTENSET10_SYNC_Pos) /*!< Bit mask of SYNC field.                          */
  #define RADIO_INTENSET10_SYNC_Min (0x0UL)          /*!< Min enumerator value of SYNC field.                                  */
  #define RADIO_INTENSET10_SYNC_Max (0x1UL)          /*!< Max enumerator value of SYNC field.                                  */
  #define RADIO_INTENSET10_SYNC_Set (0x1UL)          /*!< Enable                                                               */
  #define RADIO_INTENSET10_SYNC_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define RADIO_INTENSET10_SYNC_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* CTEPRESENT @Bit 23 : Write '1' to enable interrupt for event CTEPRESENT */
  #define RADIO_INTENSET10_CTEPRESENT_Pos (23UL)     /*!< Position of CTEPRESENT field.                                        */
  #define RADIO_INTENSET10_CTEPRESENT_Msk (0x1UL << RADIO_INTENSET10_CTEPRESENT_Pos) /*!< Bit mask of CTEPRESENT field.        */
  #define RADIO_INTENSET10_CTEPRESENT_Min (0x0UL)    /*!< Min enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENSET10_CTEPRESENT_Max (0x1UL)    /*!< Max enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENSET10_CTEPRESENT_Set (0x1UL)    /*!< Enable                                                               */
  #define RADIO_INTENSET10_CTEPRESENT_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENSET10_CTEPRESENT_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* RADIO_INTENCLR10: Disable interrupt */
  #define RADIO_INTENCLR10_ResetValue (0x00000000UL) /*!< Reset value of INTENCLR10 register.                                  */

/* READY @Bit 0 : Write '1' to disable interrupt for event READY */
  #define RADIO_INTENCLR10_READY_Pos (0UL)           /*!< Position of READY field.                                             */
  #define RADIO_INTENCLR10_READY_Msk (0x1UL << RADIO_INTENCLR10_READY_Pos) /*!< Bit mask of READY field.                       */
  #define RADIO_INTENCLR10_READY_Min (0x0UL)         /*!< Min enumerator value of READY field.                                 */
  #define RADIO_INTENCLR10_READY_Max (0x1UL)         /*!< Max enumerator value of READY field.                                 */
  #define RADIO_INTENCLR10_READY_Clear (0x1UL)       /*!< Disable                                                              */
  #define RADIO_INTENCLR10_READY_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_READY_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* TXREADY @Bit 1 : Write '1' to disable interrupt for event TXREADY */
  #define RADIO_INTENCLR10_TXREADY_Pos (1UL)         /*!< Position of TXREADY field.                                           */
  #define RADIO_INTENCLR10_TXREADY_Msk (0x1UL << RADIO_INTENCLR10_TXREADY_Pos) /*!< Bit mask of TXREADY field.                 */
  #define RADIO_INTENCLR10_TXREADY_Min (0x0UL)       /*!< Min enumerator value of TXREADY field.                               */
  #define RADIO_INTENCLR10_TXREADY_Max (0x1UL)       /*!< Max enumerator value of TXREADY field.                               */
  #define RADIO_INTENCLR10_TXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_TXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_TXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* RXREADY @Bit 2 : Write '1' to disable interrupt for event RXREADY */
  #define RADIO_INTENCLR10_RXREADY_Pos (2UL)         /*!< Position of RXREADY field.                                           */
  #define RADIO_INTENCLR10_RXREADY_Msk (0x1UL << RADIO_INTENCLR10_RXREADY_Pos) /*!< Bit mask of RXREADY field.                 */
  #define RADIO_INTENCLR10_RXREADY_Min (0x0UL)       /*!< Min enumerator value of RXREADY field.                               */
  #define RADIO_INTENCLR10_RXREADY_Max (0x1UL)       /*!< Max enumerator value of RXREADY field.                               */
  #define RADIO_INTENCLR10_RXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_RXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_RXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ADDRESS @Bit 3 : Write '1' to disable interrupt for event ADDRESS */
  #define RADIO_INTENCLR10_ADDRESS_Pos (3UL)         /*!< Position of ADDRESS field.                                           */
  #define RADIO_INTENCLR10_ADDRESS_Msk (0x1UL << RADIO_INTENCLR10_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                 */
  #define RADIO_INTENCLR10_ADDRESS_Min (0x0UL)       /*!< Min enumerator value of ADDRESS field.                               */
  #define RADIO_INTENCLR10_ADDRESS_Max (0x1UL)       /*!< Max enumerator value of ADDRESS field.                               */
  #define RADIO_INTENCLR10_ADDRESS_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_ADDRESS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_ADDRESS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* FRAMESTART @Bit 4 : Write '1' to disable interrupt for event FRAMESTART */
  #define RADIO_INTENCLR10_FRAMESTART_Pos (4UL)      /*!< Position of FRAMESTART field.                                        */
  #define RADIO_INTENCLR10_FRAMESTART_Msk (0x1UL << RADIO_INTENCLR10_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field.        */
  #define RADIO_INTENCLR10_FRAMESTART_Min (0x0UL)    /*!< Min enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENCLR10_FRAMESTART_Max (0x1UL)    /*!< Max enumerator value of FRAMESTART field.                            */
  #define RADIO_INTENCLR10_FRAMESTART_Clear (0x1UL)  /*!< Disable                                                              */
  #define RADIO_INTENCLR10_FRAMESTART_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENCLR10_FRAMESTART_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* PAYLOAD @Bit 5 : Write '1' to disable interrupt for event PAYLOAD */
  #define RADIO_INTENCLR10_PAYLOAD_Pos (5UL)         /*!< Position of PAYLOAD field.                                           */
  #define RADIO_INTENCLR10_PAYLOAD_Msk (0x1UL << RADIO_INTENCLR10_PAYLOAD_Pos) /*!< Bit mask of PAYLOAD field.                 */
  #define RADIO_INTENCLR10_PAYLOAD_Min (0x0UL)       /*!< Min enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENCLR10_PAYLOAD_Max (0x1UL)       /*!< Max enumerator value of PAYLOAD field.                               */
  #define RADIO_INTENCLR10_PAYLOAD_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_PAYLOAD_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_PAYLOAD_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* END @Bit 6 : Write '1' to disable interrupt for event END */
  #define RADIO_INTENCLR10_END_Pos (6UL)             /*!< Position of END field.                                               */
  #define RADIO_INTENCLR10_END_Msk (0x1UL << RADIO_INTENCLR10_END_Pos) /*!< Bit mask of END field.                             */
  #define RADIO_INTENCLR10_END_Min (0x0UL)           /*!< Min enumerator value of END field.                                   */
  #define RADIO_INTENCLR10_END_Max (0x1UL)           /*!< Max enumerator value of END field.                                   */
  #define RADIO_INTENCLR10_END_Clear (0x1UL)         /*!< Disable                                                              */
  #define RADIO_INTENCLR10_END_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_END_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* PHYEND @Bit 7 : Write '1' to disable interrupt for event PHYEND */
  #define RADIO_INTENCLR10_PHYEND_Pos (7UL)          /*!< Position of PHYEND field.                                            */
  #define RADIO_INTENCLR10_PHYEND_Msk (0x1UL << RADIO_INTENCLR10_PHYEND_Pos) /*!< Bit mask of PHYEND field.                    */
  #define RADIO_INTENCLR10_PHYEND_Min (0x0UL)        /*!< Min enumerator value of PHYEND field.                                */
  #define RADIO_INTENCLR10_PHYEND_Max (0x1UL)        /*!< Max enumerator value of PHYEND field.                                */
  #define RADIO_INTENCLR10_PHYEND_Clear (0x1UL)      /*!< Disable                                                              */
  #define RADIO_INTENCLR10_PHYEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_PHYEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DISABLED @Bit 8 : Write '1' to disable interrupt for event DISABLED */
  #define RADIO_INTENCLR10_DISABLED_Pos (8UL)        /*!< Position of DISABLED field.                                          */
  #define RADIO_INTENCLR10_DISABLED_Msk (0x1UL << RADIO_INTENCLR10_DISABLED_Pos) /*!< Bit mask of DISABLED field.              */
  #define RADIO_INTENCLR10_DISABLED_Min (0x0UL)      /*!< Min enumerator value of DISABLED field.                              */
  #define RADIO_INTENCLR10_DISABLED_Max (0x1UL)      /*!< Max enumerator value of DISABLED field.                              */
  #define RADIO_INTENCLR10_DISABLED_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR10_DISABLED_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_DISABLED_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMATCH @Bit 9 : Write '1' to disable interrupt for event DEVMATCH */
  #define RADIO_INTENCLR10_DEVMATCH_Pos (9UL)        /*!< Position of DEVMATCH field.                                          */
  #define RADIO_INTENCLR10_DEVMATCH_Msk (0x1UL << RADIO_INTENCLR10_DEVMATCH_Pos) /*!< Bit mask of DEVMATCH field.              */
  #define RADIO_INTENCLR10_DEVMATCH_Min (0x0UL)      /*!< Min enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENCLR10_DEVMATCH_Max (0x1UL)      /*!< Max enumerator value of DEVMATCH field.                              */
  #define RADIO_INTENCLR10_DEVMATCH_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR10_DEVMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_DEVMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DEVMISS @Bit 10 : Write '1' to disable interrupt for event DEVMISS */
  #define RADIO_INTENCLR10_DEVMISS_Pos (10UL)        /*!< Position of DEVMISS field.                                           */
  #define RADIO_INTENCLR10_DEVMISS_Msk (0x1UL << RADIO_INTENCLR10_DEVMISS_Pos) /*!< Bit mask of DEVMISS field.                 */
  #define RADIO_INTENCLR10_DEVMISS_Min (0x0UL)       /*!< Min enumerator value of DEVMISS field.                               */
  #define RADIO_INTENCLR10_DEVMISS_Max (0x1UL)       /*!< Max enumerator value of DEVMISS field.                               */
  #define RADIO_INTENCLR10_DEVMISS_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_DEVMISS_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_DEVMISS_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CRCOK @Bit 11 : Write '1' to disable interrupt for event CRCOK */
  #define RADIO_INTENCLR10_CRCOK_Pos (11UL)          /*!< Position of CRCOK field.                                             */
  #define RADIO_INTENCLR10_CRCOK_Msk (0x1UL << RADIO_INTENCLR10_CRCOK_Pos) /*!< Bit mask of CRCOK field.                       */
  #define RADIO_INTENCLR10_CRCOK_Min (0x0UL)         /*!< Min enumerator value of CRCOK field.                                 */
  #define RADIO_INTENCLR10_CRCOK_Max (0x1UL)         /*!< Max enumerator value of CRCOK field.                                 */
  #define RADIO_INTENCLR10_CRCOK_Clear (0x1UL)       /*!< Disable                                                              */
  #define RADIO_INTENCLR10_CRCOK_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_CRCOK_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* CRCERROR @Bit 12 : Write '1' to disable interrupt for event CRCERROR */
  #define RADIO_INTENCLR10_CRCERROR_Pos (12UL)       /*!< Position of CRCERROR field.                                          */
  #define RADIO_INTENCLR10_CRCERROR_Msk (0x1UL << RADIO_INTENCLR10_CRCERROR_Pos) /*!< Bit mask of CRCERROR field.              */
  #define RADIO_INTENCLR10_CRCERROR_Min (0x0UL)      /*!< Min enumerator value of CRCERROR field.                              */
  #define RADIO_INTENCLR10_CRCERROR_Max (0x1UL)      /*!< Max enumerator value of CRCERROR field.                              */
  #define RADIO_INTENCLR10_CRCERROR_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR10_CRCERROR_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_CRCERROR_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* BCMATCH @Bit 14 : Write '1' to disable interrupt for event BCMATCH */
  #define RADIO_INTENCLR10_BCMATCH_Pos (14UL)        /*!< Position of BCMATCH field.                                           */
  #define RADIO_INTENCLR10_BCMATCH_Msk (0x1UL << RADIO_INTENCLR10_BCMATCH_Pos) /*!< Bit mask of BCMATCH field.                 */
  #define RADIO_INTENCLR10_BCMATCH_Min (0x0UL)       /*!< Min enumerator value of BCMATCH field.                               */
  #define RADIO_INTENCLR10_BCMATCH_Max (0x1UL)       /*!< Max enumerator value of BCMATCH field.                               */
  #define RADIO_INTENCLR10_BCMATCH_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_BCMATCH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_BCMATCH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* EDEND @Bit 15 : Write '1' to disable interrupt for event EDEND */
  #define RADIO_INTENCLR10_EDEND_Pos (15UL)          /*!< Position of EDEND field.                                             */
  #define RADIO_INTENCLR10_EDEND_Msk (0x1UL << RADIO_INTENCLR10_EDEND_Pos) /*!< Bit mask of EDEND field.                       */
  #define RADIO_INTENCLR10_EDEND_Min (0x0UL)         /*!< Min enumerator value of EDEND field.                                 */
  #define RADIO_INTENCLR10_EDEND_Max (0x1UL)         /*!< Max enumerator value of EDEND field.                                 */
  #define RADIO_INTENCLR10_EDEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define RADIO_INTENCLR10_EDEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_EDEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* EDSTOPPED @Bit 16 : Write '1' to disable interrupt for event EDSTOPPED */
  #define RADIO_INTENCLR10_EDSTOPPED_Pos (16UL)      /*!< Position of EDSTOPPED field.                                         */
  #define RADIO_INTENCLR10_EDSTOPPED_Msk (0x1UL << RADIO_INTENCLR10_EDSTOPPED_Pos) /*!< Bit mask of EDSTOPPED field.           */
  #define RADIO_INTENCLR10_EDSTOPPED_Min (0x0UL)     /*!< Min enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENCLR10_EDSTOPPED_Max (0x1UL)     /*!< Max enumerator value of EDSTOPPED field.                             */
  #define RADIO_INTENCLR10_EDSTOPPED_Clear (0x1UL)   /*!< Disable                                                              */
  #define RADIO_INTENCLR10_EDSTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENCLR10_EDSTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* CCAIDLE @Bit 17 : Write '1' to disable interrupt for event CCAIDLE */
  #define RADIO_INTENCLR10_CCAIDLE_Pos (17UL)        /*!< Position of CCAIDLE field.                                           */
  #define RADIO_INTENCLR10_CCAIDLE_Msk (0x1UL << RADIO_INTENCLR10_CCAIDLE_Pos) /*!< Bit mask of CCAIDLE field.                 */
  #define RADIO_INTENCLR10_CCAIDLE_Min (0x0UL)       /*!< Min enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENCLR10_CCAIDLE_Max (0x1UL)       /*!< Max enumerator value of CCAIDLE field.                               */
  #define RADIO_INTENCLR10_CCAIDLE_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_CCAIDLE_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_CCAIDLE_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCABUSY @Bit 18 : Write '1' to disable interrupt for event CCABUSY */
  #define RADIO_INTENCLR10_CCABUSY_Pos (18UL)        /*!< Position of CCABUSY field.                                           */
  #define RADIO_INTENCLR10_CCABUSY_Msk (0x1UL << RADIO_INTENCLR10_CCABUSY_Pos) /*!< Bit mask of CCABUSY field.                 */
  #define RADIO_INTENCLR10_CCABUSY_Min (0x0UL)       /*!< Min enumerator value of CCABUSY field.                               */
  #define RADIO_INTENCLR10_CCABUSY_Max (0x1UL)       /*!< Max enumerator value of CCABUSY field.                               */
  #define RADIO_INTENCLR10_CCABUSY_Clear (0x1UL)     /*!< Disable                                                              */
  #define RADIO_INTENCLR10_CCABUSY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_CCABUSY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CCASTOPPED @Bit 19 : Write '1' to disable interrupt for event CCASTOPPED */
  #define RADIO_INTENCLR10_CCASTOPPED_Pos (19UL)     /*!< Position of CCASTOPPED field.                                        */
  #define RADIO_INTENCLR10_CCASTOPPED_Msk (0x1UL << RADIO_INTENCLR10_CCASTOPPED_Pos) /*!< Bit mask of CCASTOPPED field.        */
  #define RADIO_INTENCLR10_CCASTOPPED_Min (0x0UL)    /*!< Min enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENCLR10_CCASTOPPED_Max (0x1UL)    /*!< Max enumerator value of CCASTOPPED field.                            */
  #define RADIO_INTENCLR10_CCASTOPPED_Clear (0x1UL)  /*!< Disable                                                              */
  #define RADIO_INTENCLR10_CCASTOPPED_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENCLR10_CCASTOPPED_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* RATEBOOST @Bit 20 : Write '1' to disable interrupt for event RATEBOOST */
  #define RADIO_INTENCLR10_RATEBOOST_Pos (20UL)      /*!< Position of RATEBOOST field.                                         */
  #define RADIO_INTENCLR10_RATEBOOST_Msk (0x1UL << RADIO_INTENCLR10_RATEBOOST_Pos) /*!< Bit mask of RATEBOOST field.           */
  #define RADIO_INTENCLR10_RATEBOOST_Min (0x0UL)     /*!< Min enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENCLR10_RATEBOOST_Max (0x1UL)     /*!< Max enumerator value of RATEBOOST field.                             */
  #define RADIO_INTENCLR10_RATEBOOST_Clear (0x1UL)   /*!< Disable                                                              */
  #define RADIO_INTENCLR10_RATEBOOST_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RADIO_INTENCLR10_RATEBOOST_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* MHRMATCH @Bit 21 : Write '1' to disable interrupt for event MHRMATCH */
  #define RADIO_INTENCLR10_MHRMATCH_Pos (21UL)       /*!< Position of MHRMATCH field.                                          */
  #define RADIO_INTENCLR10_MHRMATCH_Msk (0x1UL << RADIO_INTENCLR10_MHRMATCH_Pos) /*!< Bit mask of MHRMATCH field.              */
  #define RADIO_INTENCLR10_MHRMATCH_Min (0x0UL)      /*!< Min enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENCLR10_MHRMATCH_Max (0x1UL)      /*!< Max enumerator value of MHRMATCH field.                              */
  #define RADIO_INTENCLR10_MHRMATCH_Clear (0x1UL)    /*!< Disable                                                              */
  #define RADIO_INTENCLR10_MHRMATCH_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_MHRMATCH_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* SYNC @Bit 22 : Write '1' to disable interrupt for event SYNC */
  #define RADIO_INTENCLR10_SYNC_Pos (22UL)           /*!< Position of SYNC field.                                              */
  #define RADIO_INTENCLR10_SYNC_Msk (0x1UL << RADIO_INTENCLR10_SYNC_Pos) /*!< Bit mask of SYNC field.                          */
  #define RADIO_INTENCLR10_SYNC_Min (0x0UL)          /*!< Min enumerator value of SYNC field.                                  */
  #define RADIO_INTENCLR10_SYNC_Max (0x1UL)          /*!< Max enumerator value of SYNC field.                                  */
  #define RADIO_INTENCLR10_SYNC_Clear (0x1UL)        /*!< Disable                                                              */
  #define RADIO_INTENCLR10_SYNC_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define RADIO_INTENCLR10_SYNC_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* CTEPRESENT @Bit 23 : Write '1' to disable interrupt for event CTEPRESENT */
  #define RADIO_INTENCLR10_CTEPRESENT_Pos (23UL)     /*!< Position of CTEPRESENT field.                                        */
  #define RADIO_INTENCLR10_CTEPRESENT_Msk (0x1UL << RADIO_INTENCLR10_CTEPRESENT_Pos) /*!< Bit mask of CTEPRESENT field.        */
  #define RADIO_INTENCLR10_CTEPRESENT_Min (0x0UL)    /*!< Min enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENCLR10_CTEPRESENT_Max (0x1UL)    /*!< Max enumerator value of CTEPRESENT field.                            */
  #define RADIO_INTENCLR10_CTEPRESENT_Clear (0x1UL)  /*!< Disable                                                              */
  #define RADIO_INTENCLR10_CTEPRESENT_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define RADIO_INTENCLR10_CTEPRESENT_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* RADIO_MODE: Data rate and modulation */
  #define RADIO_MODE_ResetValue (0x00000000UL)       /*!< Reset value of MODE register.                                        */

/* MODE @Bits 0..3 : Radio data rate and modulation setting. The radio supports frequency-shift keying (FSK) modulation. */
  #define RADIO_MODE_MODE_Pos (0UL)                  /*!< Position of MODE field.                                              */
  #define RADIO_MODE_MODE_Msk (0xFUL << RADIO_MODE_MODE_Pos) /*!< Bit mask of MODE field.                                      */
  #define RADIO_MODE_MODE_Min (0x0UL)                /*!< Min enumerator value of MODE field.                                  */
  #define RADIO_MODE_MODE_Max (0xFUL)                /*!< Max enumerator value of MODE field.                                  */
  #define RADIO_MODE_MODE_Nrf_1Mbit (0x0UL)          /*!< 1 Mbps Nordic proprietary radio mode                                 */
  #define RADIO_MODE_MODE_Nrf_2Mbit (0x1UL)          /*!< 2 Mbps Nordic proprietary radio mode                                 */
  #define RADIO_MODE_MODE_Ble_1Mbit (0x3UL)          /*!< 1 Mbps BLE                                                           */
  #define RADIO_MODE_MODE_Ble_2Mbit (0x4UL)          /*!< 2 Mbps BLE                                                           */
  #define RADIO_MODE_MODE_Ble_LR125Kbit (0x5UL)      /*!< Long range 125 kbps TX, 125 kbps and 500 kbps RX                     */
  #define RADIO_MODE_MODE_Ble_LR500Kbit (0x6UL)      /*!< Long range 500 kbps TX, 125 kbps and 500 kbps RX                     */
  #define RADIO_MODE_MODE_Nrf_4Mbit_0BT6 (0x9UL)     /*!< 4 Mbps Nordic proprietary radio mode (BT=0.6/h=0.5)                  */
  #define RADIO_MODE_MODE_Nrf_4Mbit_0BT4 (0xAUL)     /*!< 4 Mbps Nordic proprietary radio mode (BT=0.4/h=0.5)                  */
  #define RADIO_MODE_MODE_Ieee802154_250Kbit (0xFUL) /*!< IEEE 802.15.4-2006 250 kbps                                          */


/* RADIO_STATE: Current radio state */
  #define RADIO_STATE_ResetValue (0x00000000UL)      /*!< Reset value of STATE register.                                       */

/* STATE @Bits 0..3 : Current radio state */
  #define RADIO_STATE_STATE_Pos (0UL)                /*!< Position of STATE field.                                             */
  #define RADIO_STATE_STATE_Msk (0xFUL << RADIO_STATE_STATE_Pos) /*!< Bit mask of STATE field.                                 */
  #define RADIO_STATE_STATE_Min (0x0UL)              /*!< Min enumerator value of STATE field.                                 */
  #define RADIO_STATE_STATE_Max (0xCUL)              /*!< Max enumerator value of STATE field.                                 */
  #define RADIO_STATE_STATE_Disabled (0x0UL)         /*!< RADIO is in the DISABLED state                                       */
  #define RADIO_STATE_STATE_RxRu (0x1UL)             /*!< RADIO is in the RXRU state                                           */
  #define RADIO_STATE_STATE_RxIdle (0x2UL)           /*!< RADIO is in the RXIDLE state                                         */
  #define RADIO_STATE_STATE_Rx (0x3UL)               /*!< RADIO is in the RX state                                             */
  #define RADIO_STATE_STATE_RxDisable (0x4UL)        /*!< RADIO is in the RXDISABLE state                                      */
  #define RADIO_STATE_STATE_TxRu (0x9UL)             /*!< RADIO is in the TXRU state                                           */
  #define RADIO_STATE_STATE_TxIdle (0xAUL)           /*!< RADIO is in the TXIDLE state                                         */
  #define RADIO_STATE_STATE_Tx (0xBUL)               /*!< RADIO is in the TX state                                             */
  #define RADIO_STATE_STATE_TxDisable (0xCUL)        /*!< RADIO is in the TXDISABLE state                                      */


/* RADIO_EDCTRL: IEEE 802.15.4 energy detect control */
  #define RADIO_EDCTRL_ResetValue (0x20000000UL)     /*!< Reset value of EDCTRL register.                                      */

/* EDCNT @Bits 0..20 : IEEE 802.15.4 energy detect loop count */
  #define RADIO_EDCTRL_EDCNT_Pos (0UL)               /*!< Position of EDCNT field.                                             */
  #define RADIO_EDCTRL_EDCNT_Msk (0x1FFFFFUL << RADIO_EDCTRL_EDCNT_Pos) /*!< Bit mask of EDCNT field.                          */

/* EDPERIOD @Bits 24..29 : IEEE 802.15.4 energy detect period, 4us resolution, no averaging except the IEEE 802.15.4 ED range
                           128us (32) */

  #define RADIO_EDCTRL_EDPERIOD_Pos (24UL)           /*!< Position of EDPERIOD field.                                          */
  #define RADIO_EDCTRL_EDPERIOD_Msk (0x3FUL << RADIO_EDCTRL_EDPERIOD_Pos) /*!< Bit mask of EDPERIOD field.                     */
  #define RADIO_EDCTRL_EDPERIOD_Min (0x20UL)         /*!< Min enumerator value of EDPERIOD field.                              */
  #define RADIO_EDCTRL_EDPERIOD_Max (0x20UL)         /*!< Max enumerator value of EDPERIOD field.                              */
  #define RADIO_EDCTRL_EDPERIOD_Default (0x20UL)     /*!< (unspecified)                                                        */


/* RADIO_EDSAMPLE: IEEE 802.15.4 energy detect level */
  #define RADIO_EDSAMPLE_ResetValue (0x00000000UL)   /*!< Reset value of EDSAMPLE register.                                    */

/* EDLVL @Bits 0..7 : IEEE 802.15.4 energy detect level */
  #define RADIO_EDSAMPLE_EDLVL_Pos (0UL)             /*!< Position of EDLVL field.                                             */
  #define RADIO_EDSAMPLE_EDLVL_Msk (0xFFUL << RADIO_EDSAMPLE_EDLVL_Pos) /*!< Bit mask of EDLVL field.                          */
  #define RADIO_EDSAMPLE_EDLVL_Min (0x00UL)          /*!< Min value of EDLVL field.                                            */
  #define RADIO_EDSAMPLE_EDLVL_Max (0x7FUL)          /*!< Max size of EDLVL field.                                             */


/* RADIO_CCACTRL: IEEE 802.15.4 clear channel assessment control */
  #define RADIO_CCACTRL_ResetValue (0x052D0000UL)    /*!< Reset value of CCACTRL register.                                     */

/* CCAMODE @Bits 0..2 : CCA mode of operation */
  #define RADIO_CCACTRL_CCAMODE_Pos (0UL)            /*!< Position of CCAMODE field.                                           */
  #define RADIO_CCACTRL_CCAMODE_Msk (0x7UL << RADIO_CCACTRL_CCAMODE_Pos) /*!< Bit mask of CCAMODE field.                       */
  #define RADIO_CCACTRL_CCAMODE_Min (0x0UL)          /*!< Min enumerator value of CCAMODE field.                               */
  #define RADIO_CCACTRL_CCAMODE_Max (0x4UL)          /*!< Max enumerator value of CCAMODE field.                               */
  #define RADIO_CCACTRL_CCAMODE_EdMode (0x0UL)       /*!< Energy above threshold                                               */
  #define RADIO_CCACTRL_CCAMODE_CarrierMode (0x1UL)  /*!< Carrier seen                                                         */
  #define RADIO_CCACTRL_CCAMODE_CarrierAndEdMode (0x2UL) /*!< Energy above threshold AND carrier seen                          */
  #define RADIO_CCACTRL_CCAMODE_CarrierOrEdMode (0x3UL) /*!< Energy above threshold OR carrier seen                            */
  #define RADIO_CCACTRL_CCAMODE_EdModeTest1 (0x4UL)  /*!< Energy above threshold test mode that will abort when first ED
                                                          measurement over threshold is seen. No averaging.*/

/* CCAEDTHRES @Bits 8..15 : CCA energy busy threshold. Used in all the CCA modes except CarrierMode. */
  #define RADIO_CCACTRL_CCAEDTHRES_Pos (8UL)         /*!< Position of CCAEDTHRES field.                                        */
  #define RADIO_CCACTRL_CCAEDTHRES_Msk (0xFFUL << RADIO_CCACTRL_CCAEDTHRES_Pos) /*!< Bit mask of CCAEDTHRES field.             */

/* CCACORRTHRES @Bits 16..23 : CCA correlator busy threshold. Only relevant to CarrierMode, CarrierAndEdMode, and
                               CarrierOrEdMode. */

  #define RADIO_CCACTRL_CCACORRTHRES_Pos (16UL)      /*!< Position of CCACORRTHRES field.                                      */
  #define RADIO_CCACTRL_CCACORRTHRES_Msk (0xFFUL << RADIO_CCACTRL_CCACORRTHRES_Pos) /*!< Bit mask of CCACORRTHRES field.       */

/* CCACORRCNT @Bits 24..31 : Limit for occurances above CCACORRTHRES. When not equal to zero the corrolator based signal detect
                             is enabled. */

  #define RADIO_CCACTRL_CCACORRCNT_Pos (24UL)        /*!< Position of CCACORRCNT field.                                        */
  #define RADIO_CCACTRL_CCACORRCNT_Msk (0xFFUL << RADIO_CCACTRL_CCACORRCNT_Pos) /*!< Bit mask of CCACORRCNT field.             */


/* RADIO_DATAWHITE: Data whitening configuration */
  #define RADIO_DATAWHITE_ResetValue (0x00890040UL)  /*!< Reset value of DATAWHITE register.                                   */

/* IV @Bits 0..8 : Whitening initial value */
  #define RADIO_DATAWHITE_IV_Pos (0UL)               /*!< Position of IV field.                                                */
  #define RADIO_DATAWHITE_IV_Msk (0x1FFUL << RADIO_DATAWHITE_IV_Pos) /*!< Bit mask of IV field.                                */

/* POLY @Bits 16..25 : Whitening polynomial */
  #define RADIO_DATAWHITE_POLY_Pos (16UL)            /*!< Position of POLY field.                                              */
  #define RADIO_DATAWHITE_POLY_Msk (0x3FFUL << RADIO_DATAWHITE_POLY_Pos) /*!< Bit mask of POLY field.                          */


/* RADIO_TIMING: Timing */
  #define RADIO_TIMING_ResetValue (0x00000001UL)     /*!< Reset value of TIMING register.                                      */

/* RU @Bit 0 : Ramp-up time */
  #define RADIO_TIMING_RU_Pos (0UL)                  /*!< Position of RU field.                                                */
  #define RADIO_TIMING_RU_Msk (0x1UL << RADIO_TIMING_RU_Pos) /*!< Bit mask of RU field.                                        */
  #define RADIO_TIMING_RU_Min (0x0UL)                /*!< Min enumerator value of RU field.                                    */
  #define RADIO_TIMING_RU_Max (0x1UL)                /*!< Max enumerator value of RU field.                                    */
  #define RADIO_TIMING_RU_Legacy (0x0UL)             /*!< Legacy ramp-up time                                                  */
  #define RADIO_TIMING_RU_Fast (0x1UL)               /*!< Fast ramp-up (default)                                               */


/* RADIO_FREQUENCY: Frequency */
  #define RADIO_FREQUENCY_ResetValue (0x00000002UL)  /*!< Reset value of FREQUENCY register.                                   */

/* FREQUENCY @Bits 0..6 : Radio channel frequency. Frequency = 2400 + FREQUENCY (MHz). */
  #define RADIO_FREQUENCY_FREQUENCY_Pos (0UL)        /*!< Position of FREQUENCY field.                                         */
  #define RADIO_FREQUENCY_FREQUENCY_Msk (0x7FUL << RADIO_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field.            */

/* MAP @Bit 8 : Channel map selection. 0: Channel map between 2400 MHZ to 2500 MHz, Frequency = 2400 + FREQUENCY (MHz). 1:
                Channel map between 2360 MHZ to 2460 MHz, Frequency = 2360 + FREQUENCY (MHz). */

  #define RADIO_FREQUENCY_MAP_Pos (8UL)              /*!< Position of MAP field.                                               */
  #define RADIO_FREQUENCY_MAP_Msk (0x1UL << RADIO_FREQUENCY_MAP_Pos) /*!< Bit mask of MAP field.                               */


/* RADIO_TXPOWER: Output power */
  #define RADIO_TXPOWER_ResetValue (0x00000013UL)    /*!< Reset value of TXPOWER register.                                     */

/* TXPOWER @Bits 0..10 : RADIO output power */
  #define RADIO_TXPOWER_TXPOWER_Pos (0UL)            /*!< Position of TXPOWER field.                                           */
  #define RADIO_TXPOWER_TXPOWER_Msk (0x7FFUL << RADIO_TXPOWER_TXPOWER_Pos) /*!< Bit mask of TXPOWER field.                     */
  #define RADIO_TXPOWER_TXPOWER_Min (0x0UL)          /*!< Min enumerator value of TXPOWER field.                               */
  #define RADIO_TXPOWER_TXPOWER_Max (0x130UL)        /*!< Max enumerator value of TXPOWER field.                               */
  #define RADIO_TXPOWER_TXPOWER_MaxdBm (0x03FUL)     /*!< +8 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos8dBm (0x03FUL)    /*!< +8 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos7dBm (0x039UL)    /*!< +7 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos6dBm (0x033UL)    /*!< +6 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos5dBm (0x02DUL)    /*!< +5 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos4dBm (0x028UL)    /*!< +4 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos3dBm (0x023UL)    /*!< +3 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos2dBm (0x01FUL)    /*!< +2 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Pos1dBm (0x01BUL)    /*!< +1 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_0dBm (0x018UL)       /*!< 0 dBm                                                                */
  #define RADIO_TXPOWER_TXPOWER_Neg1dBm (0x015UL)    /*!< -1 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg2dBm (0x013UL)    /*!< -2 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg3dBm (0x011UL)    /*!< -3 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg4dBm (0x00FUL)    /*!< -4 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg5dBm (0x00DUL)    /*!< -5 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg6dBm (0x00BUL)    /*!< -6 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg7dBm (0x00AUL)    /*!< -7 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg8dBm (0x009UL)    /*!< -8 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg9dBm (0x008UL)    /*!< -9 dBm                                                               */
  #define RADIO_TXPOWER_TXPOWER_Neg10dBm (0x007UL)   /*!< -10 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg12dBm (0x006UL)   /*!< -12 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg14dBm (0x005UL)   /*!< -14 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg16dBm (0x004UL)   /*!< -16 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg18dBm (0x003UL)   /*!< -18 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg20dBm (0x002UL)   /*!< -20 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg22dBm (0x002UL)   /*!< -22 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg28dBm (0x001UL)   /*!< -28 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg40dBm (0x130UL)   /*!< -40 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_Neg46dBm (0x110UL)   /*!< -46 dBm                                                              */
  #define RADIO_TXPOWER_TXPOWER_MindBm (0x000UL)     /*!< Minimum output power                                                 */


/* RADIO_TIFS: Interframe spacing in us */
  #define RADIO_TIFS_ResetValue (0x00000000UL)       /*!< Reset value of TIFS register.                                        */

/* TIFS @Bits 0..9 : Interframe spacing in us. Interframe space is the time interval between two consecutive packets. It is
                     defined as the time, in microseconds, from the end of the last bit of the previous packet to the start of
                     the first bit of the subsequent packet. */

  #define RADIO_TIFS_TIFS_Pos (0UL)                  /*!< Position of TIFS field.                                              */
  #define RADIO_TIFS_TIFS_Msk (0x3FFUL << RADIO_TIFS_TIFS_Pos) /*!< Bit mask of TIFS field.                                    */


/* RADIO_RSSISAMPLE: RSSI sample */
  #define RADIO_RSSISAMPLE_ResetValue (0x0000007FUL) /*!< Reset value of RSSISAMPLE register.                                  */

/* RSSISAMPLE @Bits 0..6 : RSSI sample result. The value of this register is read as a positive value while the actual received
                           signal strength is a negative value. Actual received signal strength is therefore as follows:
                           received signal strength = -A dBm. */

  #define RADIO_RSSISAMPLE_RSSISAMPLE_Pos (0UL)      /*!< Position of RSSISAMPLE field.                                        */
  #define RADIO_RSSISAMPLE_RSSISAMPLE_Msk (0x7FUL << RADIO_RSSISAMPLE_RSSISAMPLE_Pos) /*!< Bit mask of RSSISAMPLE field.       */


/* RADIO_FREQFINETUNE: Fine tuning of the RF frequency */
  #define RADIO_FREQFINETUNE_ResetValue (0x00000000UL) /*!< Reset value of FREQFINETUNE register.                              */

/* FSFREQFINETUNE @Bits 0..12 : Twos-complement number for fine-tuning the frequency. The step size is 488.28125 Hz, giving a
                                range from -1 MHz to (one step short of) +1 MHz. */

  #define RADIO_FREQFINETUNE_FSFREQFINETUNE_Pos (0UL) /*!< Position of FSFREQFINETUNE field.                                   */
  #define RADIO_FREQFINETUNE_FSFREQFINETUNE_Msk (0x1FFFUL << RADIO_FREQFINETUNE_FSFREQFINETUNE_Pos) /*!< Bit mask of
                                                                            FSFREQFINETUNE field.*/


/* RADIO_FECONFIG: Config register */
  #define RADIO_FECONFIG_ResetValue (0x10800005UL)   /*!< Reset value of FECONFIG register.                                    */

/* SCALERMODE @Bit 20 : Mode for narrow scaling output. */
  #define RADIO_FECONFIG_SCALERMODE_Pos (20UL)       /*!< Position of SCALERMODE field.                                        */
  #define RADIO_FECONFIG_SCALERMODE_Msk (0x1UL << RADIO_FECONFIG_SCALERMODE_Pos) /*!< Bit mask of SCALERMODE field.            */
  #define RADIO_FECONFIG_SCALERMODE_Min (0x0UL)      /*!< Min enumerator value of SCALERMODE field.                            */
  #define RADIO_FECONFIG_SCALERMODE_Max (0x1UL)      /*!< Max enumerator value of SCALERMODE field.                            */
  #define RADIO_FECONFIG_SCALERMODE_Disabled (0x0UL) /*!< Classic log based scaling mode.                                      */
  #define RADIO_FECONFIG_SCALERMODE_Enabled (0x1UL)  /*!< LUT based scaling mode.                                              */


/* RADIO_DFEMODE: Whether to use Angle-of-Arrival (AOA) or Angle-of-Departure (AOD) */
  #define RADIO_DFEMODE_ResetValue (0x00000000UL)    /*!< Reset value of DFEMODE register.                                     */

/* DFEOPMODE @Bits 0..1 : Direction finding operation mode */
  #define RADIO_DFEMODE_DFEOPMODE_Pos (0UL)          /*!< Position of DFEOPMODE field.                                         */
  #define RADIO_DFEMODE_DFEOPMODE_Msk (0x3UL << RADIO_DFEMODE_DFEOPMODE_Pos) /*!< Bit mask of DFEOPMODE field.                 */
  #define RADIO_DFEMODE_DFEOPMODE_Min (0x0UL)        /*!< Min enumerator value of DFEOPMODE field.                             */
  #define RADIO_DFEMODE_DFEOPMODE_Max (0x3UL)        /*!< Max enumerator value of DFEOPMODE field.                             */
  #define RADIO_DFEMODE_DFEOPMODE_Disabled (0x0UL)   /*!< Direction finding mode disabled                                      */
  #define RADIO_DFEMODE_DFEOPMODE_AoD (0x2UL)        /*!< Direction finding mode set to AoD                                    */
  #define RADIO_DFEMODE_DFEOPMODE_AoA (0x3UL)        /*!< Direction finding mode set to AoA                                    */


/* RADIO_DFESTATUS: DFE status information */
  #define RADIO_DFESTATUS_ResetValue (0x00000000UL)  /*!< Reset value of DFESTATUS register.                                   */

/* SWITCHINGSTATE @Bits 0..2 : Internal state of switching state machine */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Pos (0UL)   /*!< Position of SWITCHINGSTATE field.                                    */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Msk (0x7UL << RADIO_DFESTATUS_SWITCHINGSTATE_Pos) /*!< Bit mask of SWITCHINGSTATE
                                                                            field.*/
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Min (0x0UL) /*!< Min enumerator value of SWITCHINGSTATE field.                        */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Max (0x5UL) /*!< Max enumerator value of SWITCHINGSTATE field.                        */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Idle (0x0UL) /*!< Switching state Idle                                                */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Offset (0x1UL) /*!< Switching state Offset                                            */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Guard (0x2UL) /*!< Switching state Guard                                              */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Ref (0x3UL) /*!< Switching state Ref                                                  */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Switching (0x4UL) /*!< Switching state Switching                                      */
  #define RADIO_DFESTATUS_SWITCHINGSTATE_Ending (0x5UL) /*!< Switching state Ending                                            */

/* SAMPLINGSTATE @Bit 4 : Internal state of sampling state machine */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Pos (4UL)    /*!< Position of SAMPLINGSTATE field.                                     */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Msk (0x1UL << RADIO_DFESTATUS_SAMPLINGSTATE_Pos) /*!< Bit mask of SAMPLINGSTATE field. */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Min (0x0UL)  /*!< Min enumerator value of SAMPLINGSTATE field.                         */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Max (0x1UL)  /*!< Max enumerator value of SAMPLINGSTATE field.                         */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Idle (0x0UL) /*!< Sampling state Idle                                                  */
  #define RADIO_DFESTATUS_SAMPLINGSTATE_Sampling (0x1UL) /*!< Sampling state Sampling                                          */


/* RADIO_DFECTRL1: Various configuration for Direction finding */
  #define RADIO_DFECTRL1_ResetValue (0x00023282UL)   /*!< Reset value of DFECTRL1 register.                                    */

/* NUMBEROF8US @Bits 0..5 : Length of the AoA/AoD procedure in number of 8 us units */
  #define RADIO_DFECTRL1_NUMBEROF8US_Pos (0UL)       /*!< Position of NUMBEROF8US field.                                       */
  #define RADIO_DFECTRL1_NUMBEROF8US_Msk (0x3FUL << RADIO_DFECTRL1_NUMBEROF8US_Pos) /*!< Bit mask of NUMBEROF8US field.        */

/* DFEINEXTENSION @Bit 7 : Add CTE extension and do antenna switching/sampling in this extension */
  #define RADIO_DFECTRL1_DFEINEXTENSION_Pos (7UL)    /*!< Position of DFEINEXTENSION field.                                    */
  #define RADIO_DFECTRL1_DFEINEXTENSION_Msk (0x1UL << RADIO_DFECTRL1_DFEINEXTENSION_Pos) /*!< Bit mask of DFEINEXTENSION field.*/
  #define RADIO_DFECTRL1_DFEINEXTENSION_Min (0x0UL)  /*!< Min enumerator value of DFEINEXTENSION field.                        */
  #define RADIO_DFECTRL1_DFEINEXTENSION_Max (0x1UL)  /*!< Max enumerator value of DFEINEXTENSION field.                        */
  #define RADIO_DFECTRL1_DFEINEXTENSION_CRC (0x1UL)  /*!< AoA/AoD procedure triggered at end of CRC                            */
  #define RADIO_DFECTRL1_DFEINEXTENSION_Payload (0x0UL) /*!< Antenna switching/sampling is done in the packet payload          */

/* TSWITCHSPACING @Bits 8..10 : Interval between every time the antenna is changed in the SWITCHING state */
  #define RADIO_DFECTRL1_TSWITCHSPACING_Pos (8UL)    /*!< Position of TSWITCHSPACING field.                                    */
  #define RADIO_DFECTRL1_TSWITCHSPACING_Msk (0x7UL << RADIO_DFECTRL1_TSWITCHSPACING_Pos) /*!< Bit mask of TSWITCHSPACING field.*/
  #define RADIO_DFECTRL1_TSWITCHSPACING_Min (0x1UL)  /*!< Min enumerator value of TSWITCHSPACING field.                        */
  #define RADIO_DFECTRL1_TSWITCHSPACING_Max (0x3UL)  /*!< Max enumerator value of TSWITCHSPACING field.                        */
  #define RADIO_DFECTRL1_TSWITCHSPACING_4us (0x1UL)  /*!< 4us                                                                  */
  #define RADIO_DFECTRL1_TSWITCHSPACING_2us (0x2UL)  /*!< 2us                                                                  */
  #define RADIO_DFECTRL1_TSWITCHSPACING_1us (0x3UL)  /*!< 1us                                                                  */

/* TSAMPLESPACINGREF @Bits 12..14 : Interval between samples in the REFERENCE period */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos (12UL) /*!< Position of TSAMPLESPACINGREF field.                                */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Msk (0x7UL << RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos) /*!< Bit mask of
                                                                            TSAMPLESPACINGREF field.*/
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Min (0x1UL) /*!< Min enumerator value of TSAMPLESPACINGREF field.                   */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_Max (0x6UL) /*!< Max enumerator value of TSAMPLESPACINGREF field.                   */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_4us (0x1UL) /*!< 4us                                                                */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_2us (0x2UL) /*!< 2us                                                                */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_1us (0x3UL) /*!< 1us                                                                */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_500ns (0x4UL) /*!< 0.5us                                                            */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_250ns (0x5UL) /*!< 0.25us                                                           */
  #define RADIO_DFECTRL1_TSAMPLESPACINGREF_125ns (0x6UL) /*!< 0.125us                                                          */

/* SAMPLETYPE @Bit 15 : Whether to sample I/Q or magnitude/phase */
  #define RADIO_DFECTRL1_SAMPLETYPE_Pos (15UL)       /*!< Position of SAMPLETYPE field.                                        */
  #define RADIO_DFECTRL1_SAMPLETYPE_Msk (0x1UL << RADIO_DFECTRL1_SAMPLETYPE_Pos) /*!< Bit mask of SAMPLETYPE field.            */
  #define RADIO_DFECTRL1_SAMPLETYPE_Min (0x0UL)      /*!< Min enumerator value of SAMPLETYPE field.                            */
  #define RADIO_DFECTRL1_SAMPLETYPE_Max (0x1UL)      /*!< Max enumerator value of SAMPLETYPE field.                            */
  #define RADIO_DFECTRL1_SAMPLETYPE_IQ (0x0UL)       /*!< Complex samples in I and Q                                           */
  #define RADIO_DFECTRL1_SAMPLETYPE_MagPhase (0x1UL) /*!< Complex samples as magnitude and phase                               */

/* TSAMPLESPACING @Bits 16..18 : Interval between samples in the SWITCHING period when CTEINLINECTRLEN is 0 */
  #define RADIO_DFECTRL1_TSAMPLESPACING_Pos (16UL)   /*!< Position of TSAMPLESPACING field.                                    */
  #define RADIO_DFECTRL1_TSAMPLESPACING_Msk (0x7UL << RADIO_DFECTRL1_TSAMPLESPACING_Pos) /*!< Bit mask of TSAMPLESPACING field.*/
  #define RADIO_DFECTRL1_TSAMPLESPACING_Min (0x1UL)  /*!< Min enumerator value of TSAMPLESPACING field.                        */
  #define RADIO_DFECTRL1_TSAMPLESPACING_Max (0x6UL)  /*!< Max enumerator value of TSAMPLESPACING field.                        */
  #define RADIO_DFECTRL1_TSAMPLESPACING_4us (0x1UL)  /*!< 4us                                                                  */
  #define RADIO_DFECTRL1_TSAMPLESPACING_2us (0x2UL)  /*!< 2us                                                                  */
  #define RADIO_DFECTRL1_TSAMPLESPACING_1us (0x3UL)  /*!< 1us                                                                  */
  #define RADIO_DFECTRL1_TSAMPLESPACING_500ns (0x4UL) /*!< 0.5us                                                               */
  #define RADIO_DFECTRL1_TSAMPLESPACING_250ns (0x5UL) /*!< 0.25us                                                              */
  #define RADIO_DFECTRL1_TSAMPLESPACING_125ns (0x6UL) /*!< 0.125us                                                             */

/* REPEATPATTERN @Bits 20..23 : Repeat every antenna pattern N times. */
  #define RADIO_DFECTRL1_REPEATPATTERN_Pos (20UL)    /*!< Position of REPEATPATTERN field.                                     */
  #define RADIO_DFECTRL1_REPEATPATTERN_Msk (0xFUL << RADIO_DFECTRL1_REPEATPATTERN_Pos) /*!< Bit mask of REPEATPATTERN field.   */
  #define RADIO_DFECTRL1_REPEATPATTERN_Min (0x0UL)   /*!< Min enumerator value of REPEATPATTERN field.                         */
  #define RADIO_DFECTRL1_REPEATPATTERN_Max (0x0UL)   /*!< Max enumerator value of REPEATPATTERN field.                         */
  #define RADIO_DFECTRL1_REPEATPATTERN_NoRepeat (0x0UL) /*!< Do not repeat (1 time in total)                                   */

/* AGCBACKOFFGAIN @Bits 24..27 : Gain will be lowered by the specified number of gain steps at the start of CTE */
  #define RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos (24UL)   /*!< Position of AGCBACKOFFGAIN field.                                    */
  #define RADIO_DFECTRL1_AGCBACKOFFGAIN_Msk (0xFUL << RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos) /*!< Bit mask of AGCBACKOFFGAIN field.*/


/* RADIO_DFECTRL2: Start offset for Direction finding */
  #define RADIO_DFECTRL2_ResetValue (0x00000000UL)   /*!< Reset value of DFECTRL2 register.                                    */

/* TSWITCHOFFSET @Bits 0..12 : Signed value offset after the end of the CRC before starting switching in number of 16M cycles */
  #define RADIO_DFECTRL2_TSWITCHOFFSET_Pos (0UL)     /*!< Position of TSWITCHOFFSET field.                                     */
  #define RADIO_DFECTRL2_TSWITCHOFFSET_Msk (0x1FFFUL << RADIO_DFECTRL2_TSWITCHOFFSET_Pos) /*!< Bit mask of TSWITCHOFFSET field.*/

/* TSAMPLEOFFSET @Bits 16..27 : Signed value offset before starting sampling in number of 16M cycles relative to the beginning
                                of the REFERENCE state - 12 us after switching start */

  #define RADIO_DFECTRL2_TSAMPLEOFFSET_Pos (16UL)    /*!< Position of TSAMPLEOFFSET field.                                     */
  #define RADIO_DFECTRL2_TSAMPLEOFFSET_Msk (0xFFFUL << RADIO_DFECTRL2_TSAMPLEOFFSET_Pos) /*!< Bit mask of TSAMPLEOFFSET field. */


/* RADIO_SWITCHPATTERN: GPIO patterns to be used for each antenna */
  #define RADIO_SWITCHPATTERN_ResetValue (0x00000000UL) /*!< Reset value of SWITCHPATTERN register.                            */

/* SWITCHPATTERN @Bits 0..7 : Fill array of GPIO patterns for antenna control */
  #define RADIO_SWITCHPATTERN_SWITCHPATTERN_Pos (0UL) /*!< Position of SWITCHPATTERN field.                                    */
  #define RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk (0xFFUL << RADIO_SWITCHPATTERN_SWITCHPATTERN_Pos) /*!< Bit mask of SWITCHPATTERN
                                                                            field.*/


/* RADIO_CLEARPATTERN: Clear the GPIO pattern array for antenna control */
  #define RADIO_CLEARPATTERN_ResetValue (0x00000000UL) /*!< Reset value of CLEARPATTERN register.                              */

/* CLEARPATTERN @Bit 0 : Clear the GPIO pattern array for antenna control Behaves as a task register, but does not have PPI nor
                         IRQ */

  #define RADIO_CLEARPATTERN_CLEARPATTERN_Pos (0UL)  /*!< Position of CLEARPATTERN field.                                      */
  #define RADIO_CLEARPATTERN_CLEARPATTERN_Msk (0x1UL << RADIO_CLEARPATTERN_CLEARPATTERN_Pos) /*!< Bit mask of CLEARPATTERN
                                                                            field.*/


/* RADIO_CRCSTATUS: CRC status */
  #define RADIO_CRCSTATUS_ResetValue (0x00000000UL)  /*!< Reset value of CRCSTATUS register.                                   */

/* CRCSTATUS @Bit 0 : CRC status of packet received */
  #define RADIO_CRCSTATUS_CRCSTATUS_Pos (0UL)        /*!< Position of CRCSTATUS field.                                         */
  #define RADIO_CRCSTATUS_CRCSTATUS_Msk (0x1UL << RADIO_CRCSTATUS_CRCSTATUS_Pos) /*!< Bit mask of CRCSTATUS field.             */
  #define RADIO_CRCSTATUS_CRCSTATUS_Min (0x0UL)      /*!< Min enumerator value of CRCSTATUS field.                             */
  #define RADIO_CRCSTATUS_CRCSTATUS_Max (0x1UL)      /*!< Max enumerator value of CRCSTATUS field.                             */
  #define RADIO_CRCSTATUS_CRCSTATUS_CRCError (0x0UL) /*!< Packet received with CRC error                                       */
  #define RADIO_CRCSTATUS_CRCSTATUS_CRCOk (0x1UL)    /*!< Packet received with CRC ok                                          */


/* RADIO_RXMATCH: Received address */
  #define RADIO_RXMATCH_ResetValue (0x00000000UL)    /*!< Reset value of RXMATCH register.                                     */

/* RXMATCH @Bits 0..2 : Received address */
  #define RADIO_RXMATCH_RXMATCH_Pos (0UL)            /*!< Position of RXMATCH field.                                           */
  #define RADIO_RXMATCH_RXMATCH_Msk (0x7UL << RADIO_RXMATCH_RXMATCH_Pos) /*!< Bit mask of RXMATCH field.                       */


/* RADIO_RXCRC: CRC field of previously received packet */
  #define RADIO_RXCRC_ResetValue (0x00000000UL)      /*!< Reset value of RXCRC register.                                       */

/* RXCRC @Bits 0..23 : CRC field of previously received packet */
  #define RADIO_RXCRC_RXCRC_Pos (0UL)                /*!< Position of RXCRC field.                                             */
  #define RADIO_RXCRC_RXCRC_Msk (0xFFFFFFUL << RADIO_RXCRC_RXCRC_Pos) /*!< Bit mask of RXCRC field.                            */


/* RADIO_DAI: Device address match index */
  #define RADIO_DAI_ResetValue (0x00000000UL)        /*!< Reset value of DAI register.                                         */

/* DAI @Bits 0..2 : Device address match index */
  #define RADIO_DAI_DAI_Pos (0UL)                    /*!< Position of DAI field.                                               */
  #define RADIO_DAI_DAI_Msk (0x7UL << RADIO_DAI_DAI_Pos) /*!< Bit mask of DAI field.                                           */


/* RADIO_PDUSTAT: Payload status */
  #define RADIO_PDUSTAT_ResetValue (0x00000000UL)    /*!< Reset value of PDUSTAT register.                                     */

/* PDUSTAT @Bit 0 : Status on payload length vs. PCNF1.MAXLEN */
  #define RADIO_PDUSTAT_PDUSTAT_Pos (0UL)            /*!< Position of PDUSTAT field.                                           */
  #define RADIO_PDUSTAT_PDUSTAT_Msk (0x1UL << RADIO_PDUSTAT_PDUSTAT_Pos) /*!< Bit mask of PDUSTAT field.                       */
  #define RADIO_PDUSTAT_PDUSTAT_Min (0x0UL)          /*!< Min enumerator value of PDUSTAT field.                               */
  #define RADIO_PDUSTAT_PDUSTAT_Max (0x1UL)          /*!< Max enumerator value of PDUSTAT field.                               */
  #define RADIO_PDUSTAT_PDUSTAT_LessThan (0x0UL)     /*!< Payload less than PCNF1.MAXLEN                                       */
  #define RADIO_PDUSTAT_PDUSTAT_GreaterThan (0x1UL)  /*!< Payload greater than PCNF1.MAXLEN                                    */

/* CISTAT @Bits 1..2 : Status on what rate packet is received with in Long Range */
  #define RADIO_PDUSTAT_CISTAT_Pos (1UL)             /*!< Position of CISTAT field.                                            */
  #define RADIO_PDUSTAT_CISTAT_Msk (0x3UL << RADIO_PDUSTAT_CISTAT_Pos) /*!< Bit mask of CISTAT field.                          */
  #define RADIO_PDUSTAT_CISTAT_Min (0x0UL)           /*!< Min enumerator value of CISTAT field.                                */
  #define RADIO_PDUSTAT_CISTAT_Max (0x1UL)           /*!< Max enumerator value of CISTAT field.                                */
  #define RADIO_PDUSTAT_CISTAT_LR125kbit (0x0UL)     /*!< Frame is received at 125 kbps                                        */
  #define RADIO_PDUSTAT_CISTAT_LR500kbit (0x1UL)     /*!< Frame is received at 500 kbps                                        */


/* RADIO_PCNF0: Packet configuration register 0 */
  #define RADIO_PCNF0_ResetValue (0x00000000UL)      /*!< Reset value of PCNF0 register.                                       */

/* LFLEN @Bits 0..3 : Length on air of LENGTH field in number of bits. */
  #define RADIO_PCNF0_LFLEN_Pos (0UL)                /*!< Position of LFLEN field.                                             */
  #define RADIO_PCNF0_LFLEN_Msk (0xFUL << RADIO_PCNF0_LFLEN_Pos) /*!< Bit mask of LFLEN field.                                 */

/* S0LEN @Bit 8 : Length on air of S0 field in number of bytes. */
  #define RADIO_PCNF0_S0LEN_Pos (8UL)                /*!< Position of S0LEN field.                                             */
  #define RADIO_PCNF0_S0LEN_Msk (0x1UL << RADIO_PCNF0_S0LEN_Pos) /*!< Bit mask of S0LEN field.                                 */

/* S1LEN @Bits 16..19 : Length on air of S1 field in number of bits. */
  #define RADIO_PCNF0_S1LEN_Pos (16UL)               /*!< Position of S1LEN field.                                             */
  #define RADIO_PCNF0_S1LEN_Msk (0xFUL << RADIO_PCNF0_S1LEN_Pos) /*!< Bit mask of S1LEN field.                                 */

/* S1INCL @Bits 20..21 : Include or exclude S1 field in RAM */
  #define RADIO_PCNF0_S1INCL_Pos (20UL)              /*!< Position of S1INCL field.                                            */
  #define RADIO_PCNF0_S1INCL_Msk (0x3UL << RADIO_PCNF0_S1INCL_Pos) /*!< Bit mask of S1INCL field.                              */
  #define RADIO_PCNF0_S1INCL_Min (0x0UL)             /*!< Min enumerator value of S1INCL field.                                */
  #define RADIO_PCNF0_S1INCL_Max (0x1UL)             /*!< Max enumerator value of S1INCL field.                                */
  #define RADIO_PCNF0_S1INCL_Automatic (0x0UL)       /*!< Include S1 field in RAM only if S1LEN > 0                            */
  #define RADIO_PCNF0_S1INCL_Include (0x1UL)         /*!< Always include S1 field in RAM independent of S1LEN                  */

/* CILEN @Bits 22..23 : Length of code indicator - long range */
  #define RADIO_PCNF0_CILEN_Pos (22UL)               /*!< Position of CILEN field.                                             */
  #define RADIO_PCNF0_CILEN_Msk (0x3UL << RADIO_PCNF0_CILEN_Pos) /*!< Bit mask of CILEN field.                                 */

/* PLEN @Bits 24..25 : Length of preamble on air. Decision point: TASKS_START task */
  #define RADIO_PCNF0_PLEN_Pos (24UL)                /*!< Position of PLEN field.                                              */
  #define RADIO_PCNF0_PLEN_Msk (0x3UL << RADIO_PCNF0_PLEN_Pos) /*!< Bit mask of PLEN field.                                    */
  #define RADIO_PCNF0_PLEN_Min (0x0UL)               /*!< Min enumerator value of PLEN field.                                  */
  #define RADIO_PCNF0_PLEN_Max (0x3UL)               /*!< Max enumerator value of PLEN field.                                  */
  #define RADIO_PCNF0_PLEN_8bit (0x0UL)              /*!< 8-bit preamble                                                       */
  #define RADIO_PCNF0_PLEN_16bit (0x1UL)             /*!< 16-bit preamble                                                      */
  #define RADIO_PCNF0_PLEN_32bitZero (0x2UL)         /*!< 32-bit zero preamble - used for IEEE 802.15.4                        */
  #define RADIO_PCNF0_PLEN_LongRange (0x3UL)         /*!< Preamble - used for BLE long range                                   */

/* CRCINC @Bit 26 : Indicates if LENGTH field contains CRC or not */
  #define RADIO_PCNF0_CRCINC_Pos (26UL)              /*!< Position of CRCINC field.                                            */
  #define RADIO_PCNF0_CRCINC_Msk (0x1UL << RADIO_PCNF0_CRCINC_Pos) /*!< Bit mask of CRCINC field.                              */
  #define RADIO_PCNF0_CRCINC_Min (0x0UL)             /*!< Min enumerator value of CRCINC field.                                */
  #define RADIO_PCNF0_CRCINC_Max (0x1UL)             /*!< Max enumerator value of CRCINC field.                                */
  #define RADIO_PCNF0_CRCINC_Exclude (0x0UL)         /*!< LENGTH does not contain CRC                                          */
  #define RADIO_PCNF0_CRCINC_Include (0x1UL)         /*!< LENGTH includes CRC                                                  */

/* TERMLEN @Bits 29..30 : Length of TERM field in Long Range operation */
  #define RADIO_PCNF0_TERMLEN_Pos (29UL)             /*!< Position of TERMLEN field.                                           */
  #define RADIO_PCNF0_TERMLEN_Msk (0x3UL << RADIO_PCNF0_TERMLEN_Pos) /*!< Bit mask of TERMLEN field.                           */


/* RADIO_PCNF1: Packet configuration register 1 */
  #define RADIO_PCNF1_ResetValue (0x00000000UL)      /*!< Reset value of PCNF1 register.                                       */

/* MAXLEN @Bits 0..7 : Maximum length of packet payload. If the packet payload is larger than MAXLEN, the radio will truncate
                       the payload to MAXLEN. */

  #define RADIO_PCNF1_MAXLEN_Pos (0UL)               /*!< Position of MAXLEN field.                                            */
  #define RADIO_PCNF1_MAXLEN_Msk (0xFFUL << RADIO_PCNF1_MAXLEN_Pos) /*!< Bit mask of MAXLEN field.                             */
  #define RADIO_PCNF1_MAXLEN_Min (0x00UL)            /*!< Min value of MAXLEN field.                                           */
  #define RADIO_PCNF1_MAXLEN_Max (0xFFUL)            /*!< Max size of MAXLEN field.                                            */

/* STATLEN @Bits 8..15 : Static length in number of bytes */
  #define RADIO_PCNF1_STATLEN_Pos (8UL)              /*!< Position of STATLEN field.                                           */
  #define RADIO_PCNF1_STATLEN_Msk (0xFFUL << RADIO_PCNF1_STATLEN_Pos) /*!< Bit mask of STATLEN field.                          */
  #define RADIO_PCNF1_STATLEN_Min (0x00UL)           /*!< Min value of STATLEN field.                                          */
  #define RADIO_PCNF1_STATLEN_Max (0xFFUL)           /*!< Max size of STATLEN field.                                           */

/* BALEN @Bits 16..18 : Base address length in number of bytes */
  #define RADIO_PCNF1_BALEN_Pos (16UL)               /*!< Position of BALEN field.                                             */
  #define RADIO_PCNF1_BALEN_Msk (0x7UL << RADIO_PCNF1_BALEN_Pos) /*!< Bit mask of BALEN field.                                 */
  #define RADIO_PCNF1_BALEN_Min (0x1UL)              /*!< Min value of BALEN field.                                            */
  #define RADIO_PCNF1_BALEN_Max (0x1UL)              /*!< Max size of BALEN field.                                             */

/* ENDIAN @Bit 24 : On-air endianness of packet, this applies to the S0, LENGTH, S1, and the PAYLOAD fields. */
  #define RADIO_PCNF1_ENDIAN_Pos (24UL)              /*!< Position of ENDIAN field.                                            */
  #define RADIO_PCNF1_ENDIAN_Msk (0x1UL << RADIO_PCNF1_ENDIAN_Pos) /*!< Bit mask of ENDIAN field.                              */
  #define RADIO_PCNF1_ENDIAN_Min (0x0UL)             /*!< Min enumerator value of ENDIAN field.                                */
  #define RADIO_PCNF1_ENDIAN_Max (0x1UL)             /*!< Max enumerator value of ENDIAN field.                                */
  #define RADIO_PCNF1_ENDIAN_Little (0x0UL)          /*!< Least significant bit on air first                                   */
  #define RADIO_PCNF1_ENDIAN_Big (0x1UL)             /*!< Most significant bit on air first                                    */

/* WHITEEN @Bit 25 : Enable or disable packet whitening */
  #define RADIO_PCNF1_WHITEEN_Pos (25UL)             /*!< Position of WHITEEN field.                                           */
  #define RADIO_PCNF1_WHITEEN_Msk (0x1UL << RADIO_PCNF1_WHITEEN_Pos) /*!< Bit mask of WHITEEN field.                           */
  #define RADIO_PCNF1_WHITEEN_Min (0x0UL)            /*!< Min enumerator value of WHITEEN field.                               */
  #define RADIO_PCNF1_WHITEEN_Max (0x1UL)            /*!< Max enumerator value of WHITEEN field.                               */
  #define RADIO_PCNF1_WHITEEN_Disabled (0x0UL)       /*!< Disable                                                              */
  #define RADIO_PCNF1_WHITEEN_Enabled (0x1UL)        /*!< Enable                                                               */

/* WHITEOFFSET @Bit 26 : If whitening is enabled S0 can be configured to be excluded from whitening */
  #define RADIO_PCNF1_WHITEOFFSET_Pos (26UL)         /*!< Position of WHITEOFFSET field.                                       */
  #define RADIO_PCNF1_WHITEOFFSET_Msk (0x1UL << RADIO_PCNF1_WHITEOFFSET_Pos) /*!< Bit mask of WHITEOFFSET field.               */
  #define RADIO_PCNF1_WHITEOFFSET_Min (0x0UL)        /*!< Min enumerator value of WHITEOFFSET field.                           */
  #define RADIO_PCNF1_WHITEOFFSET_Max (0x1UL)        /*!< Max enumerator value of WHITEOFFSET field.                           */
  #define RADIO_PCNF1_WHITEOFFSET_Include (0x0UL)    /*!< S0 included in whitening                                             */
  #define RADIO_PCNF1_WHITEOFFSET_Exclude (0x1UL)    /*!< S0 excluded from whitening                                           */


/* RADIO_BASE0: Base address 0 */
  #define RADIO_BASE0_ResetValue (0x00000000UL)      /*!< Reset value of BASE0 register.                                       */

/* BASE0 @Bits 0..31 : Base address 0 */
  #define RADIO_BASE0_BASE0_Pos (0UL)                /*!< Position of BASE0 field.                                             */
  #define RADIO_BASE0_BASE0_Msk (0xFFFFFFFFUL << RADIO_BASE0_BASE0_Pos) /*!< Bit mask of BASE0 field.                          */


/* RADIO_BASE1: Base address 1 */
  #define RADIO_BASE1_ResetValue (0x00000000UL)      /*!< Reset value of BASE1 register.                                       */

/* BASE1 @Bits 0..31 : Base address 1 */
  #define RADIO_BASE1_BASE1_Pos (0UL)                /*!< Position of BASE1 field.                                             */
  #define RADIO_BASE1_BASE1_Msk (0xFFFFFFFFUL << RADIO_BASE1_BASE1_Pos) /*!< Bit mask of BASE1 field.                          */


/* RADIO_PREFIX0: Prefixes bytes for logical addresses 0-3 */
  #define RADIO_PREFIX0_ResetValue (0x00000000UL)    /*!< Reset value of PREFIX0 register.                                     */

/* AP0 @Bits 0..7 : Address prefix 0 */
  #define RADIO_PREFIX0_AP0_Pos (0UL)                /*!< Position of AP0 field.                                               */
  #define RADIO_PREFIX0_AP0_Msk (0xFFUL << RADIO_PREFIX0_AP0_Pos) /*!< Bit mask of AP0 field.                                  */

/* AP1 @Bits 8..15 : Address prefix 1 */
  #define RADIO_PREFIX0_AP1_Pos (8UL)                /*!< Position of AP1 field.                                               */
  #define RADIO_PREFIX0_AP1_Msk (0xFFUL << RADIO_PREFIX0_AP1_Pos) /*!< Bit mask of AP1 field.                                  */

/* AP2 @Bits 16..23 : Address prefix 2 */
  #define RADIO_PREFIX0_AP2_Pos (16UL)               /*!< Position of AP2 field.                                               */
  #define RADIO_PREFIX0_AP2_Msk (0xFFUL << RADIO_PREFIX0_AP2_Pos) /*!< Bit mask of AP2 field.                                  */

/* AP3 @Bits 24..31 : Address prefix 3 */
  #define RADIO_PREFIX0_AP3_Pos (24UL)               /*!< Position of AP3 field.                                               */
  #define RADIO_PREFIX0_AP3_Msk (0xFFUL << RADIO_PREFIX0_AP3_Pos) /*!< Bit mask of AP3 field.                                  */


/* RADIO_PREFIX1: Prefixes bytes for logical addresses 4-7 */
  #define RADIO_PREFIX1_ResetValue (0x00000000UL)    /*!< Reset value of PREFIX1 register.                                     */

/* AP4 @Bits 0..7 : Address prefix 4 */
  #define RADIO_PREFIX1_AP4_Pos (0UL)                /*!< Position of AP4 field.                                               */
  #define RADIO_PREFIX1_AP4_Msk (0xFFUL << RADIO_PREFIX1_AP4_Pos) /*!< Bit mask of AP4 field.                                  */

/* AP5 @Bits 8..15 : Address prefix 5 */
  #define RADIO_PREFIX1_AP5_Pos (8UL)                /*!< Position of AP5 field.                                               */
  #define RADIO_PREFIX1_AP5_Msk (0xFFUL << RADIO_PREFIX1_AP5_Pos) /*!< Bit mask of AP5 field.                                  */

/* AP6 @Bits 16..23 : Address prefix 6 */
  #define RADIO_PREFIX1_AP6_Pos (16UL)               /*!< Position of AP6 field.                                               */
  #define RADIO_PREFIX1_AP6_Msk (0xFFUL << RADIO_PREFIX1_AP6_Pos) /*!< Bit mask of AP6 field.                                  */

/* AP7 @Bits 24..31 : Address prefix 7 */
  #define RADIO_PREFIX1_AP7_Pos (24UL)               /*!< Position of AP7 field.                                               */
  #define RADIO_PREFIX1_AP7_Msk (0xFFUL << RADIO_PREFIX1_AP7_Pos) /*!< Bit mask of AP7 field.                                  */


/* RADIO_TXADDRESS: Transmit address select */
  #define RADIO_TXADDRESS_ResetValue (0x00000000UL)  /*!< Reset value of TXADDRESS register.                                   */

/* TXADDRESS @Bits 0..2 : Transmit address select */
  #define RADIO_TXADDRESS_TXADDRESS_Pos (0UL)        /*!< Position of TXADDRESS field.                                         */
  #define RADIO_TXADDRESS_TXADDRESS_Msk (0x7UL << RADIO_TXADDRESS_TXADDRESS_Pos) /*!< Bit mask of TXADDRESS field.             */


/* RADIO_RXADDRESSES: Receive address select */
  #define RADIO_RXADDRESSES_ResetValue (0x00000000UL) /*!< Reset value of RXADDRESSES register.                                */

/* ADDR0 @Bit 0 : Enable or disable reception on logical address 0 */
  #define RADIO_RXADDRESSES_ADDR0_Pos (0UL)          /*!< Position of ADDR0 field.                                             */
  #define RADIO_RXADDRESSES_ADDR0_Msk (0x1UL << RADIO_RXADDRESSES_ADDR0_Pos) /*!< Bit mask of ADDR0 field.                     */
  #define RADIO_RXADDRESSES_ADDR0_Min (0x0UL)        /*!< Min enumerator value of ADDR0 field.                                 */
  #define RADIO_RXADDRESSES_ADDR0_Max (0x1UL)        /*!< Max enumerator value of ADDR0 field.                                 */
  #define RADIO_RXADDRESSES_ADDR0_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR0_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR1 @Bit 1 : Enable or disable reception on logical address 1 */
  #define RADIO_RXADDRESSES_ADDR1_Pos (1UL)          /*!< Position of ADDR1 field.                                             */
  #define RADIO_RXADDRESSES_ADDR1_Msk (0x1UL << RADIO_RXADDRESSES_ADDR1_Pos) /*!< Bit mask of ADDR1 field.                     */
  #define RADIO_RXADDRESSES_ADDR1_Min (0x0UL)        /*!< Min enumerator value of ADDR1 field.                                 */
  #define RADIO_RXADDRESSES_ADDR1_Max (0x1UL)        /*!< Max enumerator value of ADDR1 field.                                 */
  #define RADIO_RXADDRESSES_ADDR1_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR1_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR2 @Bit 2 : Enable or disable reception on logical address 2 */
  #define RADIO_RXADDRESSES_ADDR2_Pos (2UL)          /*!< Position of ADDR2 field.                                             */
  #define RADIO_RXADDRESSES_ADDR2_Msk (0x1UL << RADIO_RXADDRESSES_ADDR2_Pos) /*!< Bit mask of ADDR2 field.                     */
  #define RADIO_RXADDRESSES_ADDR2_Min (0x0UL)        /*!< Min enumerator value of ADDR2 field.                                 */
  #define RADIO_RXADDRESSES_ADDR2_Max (0x1UL)        /*!< Max enumerator value of ADDR2 field.                                 */
  #define RADIO_RXADDRESSES_ADDR2_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR2_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR3 @Bit 3 : Enable or disable reception on logical address 3 */
  #define RADIO_RXADDRESSES_ADDR3_Pos (3UL)          /*!< Position of ADDR3 field.                                             */
  #define RADIO_RXADDRESSES_ADDR3_Msk (0x1UL << RADIO_RXADDRESSES_ADDR3_Pos) /*!< Bit mask of ADDR3 field.                     */
  #define RADIO_RXADDRESSES_ADDR3_Min (0x0UL)        /*!< Min enumerator value of ADDR3 field.                                 */
  #define RADIO_RXADDRESSES_ADDR3_Max (0x1UL)        /*!< Max enumerator value of ADDR3 field.                                 */
  #define RADIO_RXADDRESSES_ADDR3_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR3_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR4 @Bit 4 : Enable or disable reception on logical address 4 */
  #define RADIO_RXADDRESSES_ADDR4_Pos (4UL)          /*!< Position of ADDR4 field.                                             */
  #define RADIO_RXADDRESSES_ADDR4_Msk (0x1UL << RADIO_RXADDRESSES_ADDR4_Pos) /*!< Bit mask of ADDR4 field.                     */
  #define RADIO_RXADDRESSES_ADDR4_Min (0x0UL)        /*!< Min enumerator value of ADDR4 field.                                 */
  #define RADIO_RXADDRESSES_ADDR4_Max (0x1UL)        /*!< Max enumerator value of ADDR4 field.                                 */
  #define RADIO_RXADDRESSES_ADDR4_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR4_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR5 @Bit 5 : Enable or disable reception on logical address 5 */
  #define RADIO_RXADDRESSES_ADDR5_Pos (5UL)          /*!< Position of ADDR5 field.                                             */
  #define RADIO_RXADDRESSES_ADDR5_Msk (0x1UL << RADIO_RXADDRESSES_ADDR5_Pos) /*!< Bit mask of ADDR5 field.                     */
  #define RADIO_RXADDRESSES_ADDR5_Min (0x0UL)        /*!< Min enumerator value of ADDR5 field.                                 */
  #define RADIO_RXADDRESSES_ADDR5_Max (0x1UL)        /*!< Max enumerator value of ADDR5 field.                                 */
  #define RADIO_RXADDRESSES_ADDR5_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR5_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR6 @Bit 6 : Enable or disable reception on logical address 6 */
  #define RADIO_RXADDRESSES_ADDR6_Pos (6UL)          /*!< Position of ADDR6 field.                                             */
  #define RADIO_RXADDRESSES_ADDR6_Msk (0x1UL << RADIO_RXADDRESSES_ADDR6_Pos) /*!< Bit mask of ADDR6 field.                     */
  #define RADIO_RXADDRESSES_ADDR6_Min (0x0UL)        /*!< Min enumerator value of ADDR6 field.                                 */
  #define RADIO_RXADDRESSES_ADDR6_Max (0x1UL)        /*!< Max enumerator value of ADDR6 field.                                 */
  #define RADIO_RXADDRESSES_ADDR6_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR6_Enabled (0x1UL)    /*!< Enable                                                               */

/* ADDR7 @Bit 7 : Enable or disable reception on logical address 7 */
  #define RADIO_RXADDRESSES_ADDR7_Pos (7UL)          /*!< Position of ADDR7 field.                                             */
  #define RADIO_RXADDRESSES_ADDR7_Msk (0x1UL << RADIO_RXADDRESSES_ADDR7_Pos) /*!< Bit mask of ADDR7 field.                     */
  #define RADIO_RXADDRESSES_ADDR7_Min (0x0UL)        /*!< Min enumerator value of ADDR7 field.                                 */
  #define RADIO_RXADDRESSES_ADDR7_Max (0x1UL)        /*!< Max enumerator value of ADDR7 field.                                 */
  #define RADIO_RXADDRESSES_ADDR7_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RADIO_RXADDRESSES_ADDR7_Enabled (0x1UL)    /*!< Enable                                                               */


/* RADIO_CRCCNF: CRC configuration */
  #define RADIO_CRCCNF_ResetValue (0x00000000UL)     /*!< Reset value of CRCCNF register.                                      */

/* LEN @Bits 0..1 : CRC length in number of bytes. */
  #define RADIO_CRCCNF_LEN_Pos (0UL)                 /*!< Position of LEN field.                                               */
  #define RADIO_CRCCNF_LEN_Msk (0x3UL << RADIO_CRCCNF_LEN_Pos) /*!< Bit mask of LEN field.                                     */
  #define RADIO_CRCCNF_LEN_Min (0x0UL)               /*!< Min enumerator value of LEN field.                                   */
  #define RADIO_CRCCNF_LEN_Max (0x3UL)               /*!< Max enumerator value of LEN field.                                   */
  #define RADIO_CRCCNF_LEN_Disabled (0x0UL)          /*!< CRC length is zero and CRC calculation is disabled                   */
  #define RADIO_CRCCNF_LEN_One (0x1UL)               /*!< CRC length is one byte and CRC calculation is enabled                */
  #define RADIO_CRCCNF_LEN_Two (0x2UL)               /*!< CRC length is two bytes and CRC calculation is enabled               */
  #define RADIO_CRCCNF_LEN_Three (0x3UL)             /*!< CRC length is three bytes and CRC calculation is enabled             */

/* SKIPADDR @Bits 8..10 : Control whether CRC calculation skips the address field. Other fields can also be skipped. */
  #define RADIO_CRCCNF_SKIPADDR_Pos (8UL)            /*!< Position of SKIPADDR field.                                          */
  #define RADIO_CRCCNF_SKIPADDR_Msk (0x7UL << RADIO_CRCCNF_SKIPADDR_Pos) /*!< Bit mask of SKIPADDR field.                      */
  #define RADIO_CRCCNF_SKIPADDR_Min (0x0UL)          /*!< Min enumerator value of SKIPADDR field.                              */
  #define RADIO_CRCCNF_SKIPADDR_Max (0x4UL)          /*!< Max enumerator value of SKIPADDR field.                              */
  #define RADIO_CRCCNF_SKIPADDR_Include (0x0UL)      /*!< CRC calculation includes address field                               */
  #define RADIO_CRCCNF_SKIPADDR_Skip (0x1UL)         /*!< CRC calculation starting at first byte after address field.          */
  #define RADIO_CRCCNF_SKIPADDR_Ieee802154 (0x2UL)   /*!< CRC calculation starting at first byte after length field (as per
                                                          802.15.4 standard).*/
  #define RADIO_CRCCNF_SKIPADDR_SkipS0 (0x3UL)       /*!< CRC calculation starting at first byte after S0 field.               */
  #define RADIO_CRCCNF_SKIPADDR_SkipS1 (0x4UL)       /*!< CRC calculation starting at first byte after S1 field.               */


/* RADIO_CRCPOLY: CRC polynomial */
  #define RADIO_CRCPOLY_ResetValue (0x00000000UL)    /*!< Reset value of CRCPOLY register.                                     */

/* CRCPOLY @Bits 0..23 : CRC polynomial */
  #define RADIO_CRCPOLY_CRCPOLY_Pos (0UL)            /*!< Position of CRCPOLY field.                                           */
  #define RADIO_CRCPOLY_CRCPOLY_Msk (0xFFFFFFUL << RADIO_CRCPOLY_CRCPOLY_Pos) /*!< Bit mask of CRCPOLY field.                  */


/* RADIO_CRCINIT: CRC initial value */
  #define RADIO_CRCINIT_ResetValue (0x00000000UL)    /*!< Reset value of CRCINIT register.                                     */

/* CRCINIT @Bits 0..23 : CRC initial value */
  #define RADIO_CRCINIT_CRCINIT_Pos (0UL)            /*!< Position of CRCINIT field.                                           */
  #define RADIO_CRCINIT_CRCINIT_Msk (0xFFFFFFUL << RADIO_CRCINIT_CRCINIT_Pos) /*!< Bit mask of CRCINIT field.                  */


/* RADIO_DAB: Device address base segment n */
  #define RADIO_DAB_MaxCount (8UL)                   /*!< Max size of DAB[8] array.                                            */
  #define RADIO_DAB_MaxIndex (7UL)                   /*!< Max index of DAB[8] array.                                           */
  #define RADIO_DAB_MinIndex (0UL)                   /*!< Min index of DAB[8] array.                                           */
  #define RADIO_DAB_ResetValue (0x00000000UL)        /*!< Reset value of DAB[8] register.                                      */

/* DAB @Bits 0..31 : Device address base segment n */
  #define RADIO_DAB_DAB_Pos (0UL)                    /*!< Position of DAB field.                                               */
  #define RADIO_DAB_DAB_Msk (0xFFFFFFFFUL << RADIO_DAB_DAB_Pos) /*!< Bit mask of DAB field.                                    */


/* RADIO_DAP: Device address prefix n */
  #define RADIO_DAP_MaxCount (8UL)                   /*!< Max size of DAP[8] array.                                            */
  #define RADIO_DAP_MaxIndex (7UL)                   /*!< Max index of DAP[8] array.                                           */
  #define RADIO_DAP_MinIndex (0UL)                   /*!< Min index of DAP[8] array.                                           */
  #define RADIO_DAP_ResetValue (0x00000000UL)        /*!< Reset value of DAP[8] register.                                      */

/* DAP @Bits 0..15 : Device address prefix n */
  #define RADIO_DAP_DAP_Pos (0UL)                    /*!< Position of DAP field.                                               */
  #define RADIO_DAP_DAP_Msk (0xFFFFUL << RADIO_DAP_DAP_Pos) /*!< Bit mask of DAP field.                                        */


/* RADIO_DACNF: Device address match configuration */
  #define RADIO_DACNF_ResetValue (0x00000000UL)      /*!< Reset value of DACNF register.                                       */

/* ENA0 @Bit 0 : Enable or disable device address matching using device address 0 */
  #define RADIO_DACNF_ENA0_Pos (0UL)                 /*!< Position of ENA0 field.                                              */
  #define RADIO_DACNF_ENA0_Msk (0x1UL << RADIO_DACNF_ENA0_Pos) /*!< Bit mask of ENA0 field.                                    */
  #define RADIO_DACNF_ENA0_Min (0x0UL)               /*!< Min enumerator value of ENA0 field.                                  */
  #define RADIO_DACNF_ENA0_Max (0x1UL)               /*!< Max enumerator value of ENA0 field.                                  */
  #define RADIO_DACNF_ENA0_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA0_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA1 @Bit 1 : Enable or disable device address matching using device address 1 */
  #define RADIO_DACNF_ENA1_Pos (1UL)                 /*!< Position of ENA1 field.                                              */
  #define RADIO_DACNF_ENA1_Msk (0x1UL << RADIO_DACNF_ENA1_Pos) /*!< Bit mask of ENA1 field.                                    */
  #define RADIO_DACNF_ENA1_Min (0x0UL)               /*!< Min enumerator value of ENA1 field.                                  */
  #define RADIO_DACNF_ENA1_Max (0x1UL)               /*!< Max enumerator value of ENA1 field.                                  */
  #define RADIO_DACNF_ENA1_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA1_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA2 @Bit 2 : Enable or disable device address matching using device address 2 */
  #define RADIO_DACNF_ENA2_Pos (2UL)                 /*!< Position of ENA2 field.                                              */
  #define RADIO_DACNF_ENA2_Msk (0x1UL << RADIO_DACNF_ENA2_Pos) /*!< Bit mask of ENA2 field.                                    */
  #define RADIO_DACNF_ENA2_Min (0x0UL)               /*!< Min enumerator value of ENA2 field.                                  */
  #define RADIO_DACNF_ENA2_Max (0x1UL)               /*!< Max enumerator value of ENA2 field.                                  */
  #define RADIO_DACNF_ENA2_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA2_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA3 @Bit 3 : Enable or disable device address matching using device address 3 */
  #define RADIO_DACNF_ENA3_Pos (3UL)                 /*!< Position of ENA3 field.                                              */
  #define RADIO_DACNF_ENA3_Msk (0x1UL << RADIO_DACNF_ENA3_Pos) /*!< Bit mask of ENA3 field.                                    */
  #define RADIO_DACNF_ENA3_Min (0x0UL)               /*!< Min enumerator value of ENA3 field.                                  */
  #define RADIO_DACNF_ENA3_Max (0x1UL)               /*!< Max enumerator value of ENA3 field.                                  */
  #define RADIO_DACNF_ENA3_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA3_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA4 @Bit 4 : Enable or disable device address matching using device address 4 */
  #define RADIO_DACNF_ENA4_Pos (4UL)                 /*!< Position of ENA4 field.                                              */
  #define RADIO_DACNF_ENA4_Msk (0x1UL << RADIO_DACNF_ENA4_Pos) /*!< Bit mask of ENA4 field.                                    */
  #define RADIO_DACNF_ENA4_Min (0x0UL)               /*!< Min enumerator value of ENA4 field.                                  */
  #define RADIO_DACNF_ENA4_Max (0x1UL)               /*!< Max enumerator value of ENA4 field.                                  */
  #define RADIO_DACNF_ENA4_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA4_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA5 @Bit 5 : Enable or disable device address matching using device address 5 */
  #define RADIO_DACNF_ENA5_Pos (5UL)                 /*!< Position of ENA5 field.                                              */
  #define RADIO_DACNF_ENA5_Msk (0x1UL << RADIO_DACNF_ENA5_Pos) /*!< Bit mask of ENA5 field.                                    */
  #define RADIO_DACNF_ENA5_Min (0x0UL)               /*!< Min enumerator value of ENA5 field.                                  */
  #define RADIO_DACNF_ENA5_Max (0x1UL)               /*!< Max enumerator value of ENA5 field.                                  */
  #define RADIO_DACNF_ENA5_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA5_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA6 @Bit 6 : Enable or disable device address matching using device address 6 */
  #define RADIO_DACNF_ENA6_Pos (6UL)                 /*!< Position of ENA6 field.                                              */
  #define RADIO_DACNF_ENA6_Msk (0x1UL << RADIO_DACNF_ENA6_Pos) /*!< Bit mask of ENA6 field.                                    */
  #define RADIO_DACNF_ENA6_Min (0x0UL)               /*!< Min enumerator value of ENA6 field.                                  */
  #define RADIO_DACNF_ENA6_Max (0x1UL)               /*!< Max enumerator value of ENA6 field.                                  */
  #define RADIO_DACNF_ENA6_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA6_Enabled (0x1UL)           /*!< Enabled                                                              */

/* ENA7 @Bit 7 : Enable or disable device address matching using device address 7 */
  #define RADIO_DACNF_ENA7_Pos (7UL)                 /*!< Position of ENA7 field.                                              */
  #define RADIO_DACNF_ENA7_Msk (0x1UL << RADIO_DACNF_ENA7_Pos) /*!< Bit mask of ENA7 field.                                    */
  #define RADIO_DACNF_ENA7_Min (0x0UL)               /*!< Min enumerator value of ENA7 field.                                  */
  #define RADIO_DACNF_ENA7_Max (0x1UL)               /*!< Max enumerator value of ENA7 field.                                  */
  #define RADIO_DACNF_ENA7_Disabled (0x0UL)          /*!< Disabled                                                             */
  #define RADIO_DACNF_ENA7_Enabled (0x1UL)           /*!< Enabled                                                              */

/* TXADD0 @Bit 8 : TxAdd for device address 0 */
  #define RADIO_DACNF_TXADD0_Pos (8UL)               /*!< Position of TXADD0 field.                                            */
  #define RADIO_DACNF_TXADD0_Msk (0x1UL << RADIO_DACNF_TXADD0_Pos) /*!< Bit mask of TXADD0 field.                              */

/* TXADD1 @Bit 9 : TxAdd for device address 1 */
  #define RADIO_DACNF_TXADD1_Pos (9UL)               /*!< Position of TXADD1 field.                                            */
  #define RADIO_DACNF_TXADD1_Msk (0x1UL << RADIO_DACNF_TXADD1_Pos) /*!< Bit mask of TXADD1 field.                              */

/* TXADD2 @Bit 10 : TxAdd for device address 2 */
  #define RADIO_DACNF_TXADD2_Pos (10UL)              /*!< Position of TXADD2 field.                                            */
  #define RADIO_DACNF_TXADD2_Msk (0x1UL << RADIO_DACNF_TXADD2_Pos) /*!< Bit mask of TXADD2 field.                              */

/* TXADD3 @Bit 11 : TxAdd for device address 3 */
  #define RADIO_DACNF_TXADD3_Pos (11UL)              /*!< Position of TXADD3 field.                                            */
  #define RADIO_DACNF_TXADD3_Msk (0x1UL << RADIO_DACNF_TXADD3_Pos) /*!< Bit mask of TXADD3 field.                              */

/* TXADD4 @Bit 12 : TxAdd for device address 4 */
  #define RADIO_DACNF_TXADD4_Pos (12UL)              /*!< Position of TXADD4 field.                                            */
  #define RADIO_DACNF_TXADD4_Msk (0x1UL << RADIO_DACNF_TXADD4_Pos) /*!< Bit mask of TXADD4 field.                              */

/* TXADD5 @Bit 13 : TxAdd for device address 5 */
  #define RADIO_DACNF_TXADD5_Pos (13UL)              /*!< Position of TXADD5 field.                                            */
  #define RADIO_DACNF_TXADD5_Msk (0x1UL << RADIO_DACNF_TXADD5_Pos) /*!< Bit mask of TXADD5 field.                              */

/* TXADD6 @Bit 14 : TxAdd for device address 6 */
  #define RADIO_DACNF_TXADD6_Pos (14UL)              /*!< Position of TXADD6 field.                                            */
  #define RADIO_DACNF_TXADD6_Msk (0x1UL << RADIO_DACNF_TXADD6_Pos) /*!< Bit mask of TXADD6 field.                              */

/* TXADD7 @Bit 15 : TxAdd for device address 7 */
  #define RADIO_DACNF_TXADD7_Pos (15UL)              /*!< Position of TXADD7 field.                                            */
  #define RADIO_DACNF_TXADD7_Msk (0x1UL << RADIO_DACNF_TXADD7_Pos) /*!< Bit mask of TXADD7 field.                              */


/* RADIO_BCC: Bit counter compare */
  #define RADIO_BCC_ResetValue (0x00000000UL)        /*!< Reset value of BCC register.                                         */

/* BCC @Bits 0..31 : Bit counter compare */
  #define RADIO_BCC_BCC_Pos (0UL)                    /*!< Position of BCC field.                                               */
  #define RADIO_BCC_BCC_Msk (0xFFFFFFFFUL << RADIO_BCC_BCC_Pos) /*!< Bit mask of BCC field.                                    */


/* RADIO_CTESTATUS: CTEInfo parsed from received packet */
  #define RADIO_CTESTATUS_ResetValue (0x00000000UL)  /*!< Reset value of CTESTATUS register.                                   */

/* CTETIME @Bits 0..4 : CTETime parsed from packet */
  #define RADIO_CTESTATUS_CTETIME_Pos (0UL)          /*!< Position of CTETIME field.                                           */
  #define RADIO_CTESTATUS_CTETIME_Msk (0x1FUL << RADIO_CTESTATUS_CTETIME_Pos) /*!< Bit mask of CTETIME field.                  */

/* RFU @Bit 5 : RFU parsed from packet */
  #define RADIO_CTESTATUS_RFU_Pos (5UL)              /*!< Position of RFU field.                                               */
  #define RADIO_CTESTATUS_RFU_Msk (0x1UL << RADIO_CTESTATUS_RFU_Pos) /*!< Bit mask of RFU field.                               */

/* CTETYPE @Bits 6..7 : CTEType parsed from packet */
  #define RADIO_CTESTATUS_CTETYPE_Pos (6UL)          /*!< Position of CTETYPE field.                                           */
  #define RADIO_CTESTATUS_CTETYPE_Msk (0x3UL << RADIO_CTESTATUS_CTETYPE_Pos) /*!< Bit mask of CTETYPE field.                   */


/* RADIO_MHRMATCHCONF: Search pattern configuration */
  #define RADIO_MHRMATCHCONF_ResetValue (0x00000000UL) /*!< Reset value of MHRMATCHCONF register.                              */

/* MHRMATCHCONF @Bits 0..31 : Search pattern configuration */
  #define RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos (0UL)  /*!< Position of MHRMATCHCONF field.                                      */
  #define RADIO_MHRMATCHCONF_MHRMATCHCONF_Msk (0xFFFFFFFFUL << RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos) /*!< Bit mask of
                                                                            MHRMATCHCONF field.*/


/* RADIO_MHRMATCHMASK: Pattern mask */
  #define RADIO_MHRMATCHMASK_ResetValue (0x00000000UL) /*!< Reset value of MHRMATCHMASK register.                              */

/* MHRMATCHMASK @Bits 0..31 : Pattern mask */
  #define RADIO_MHRMATCHMASK_MHRMATCHMASK_Pos (0UL)  /*!< Position of MHRMATCHMASK field.                                      */
  #define RADIO_MHRMATCHMASK_MHRMATCHMASK_Msk (0xFFFFFFFFUL << RADIO_MHRMATCHMASK_MHRMATCHMASK_Pos) /*!< Bit mask of
                                                                            MHRMATCHMASK field.*/


/* RADIO_SFD: IEEE 802.15.4 start of frame delimiter */
  #define RADIO_SFD_ResetValue (0x000000A7UL)        /*!< Reset value of SFD register.                                         */

/* SFD @Bits 0..7 : IEEE 802.15.4 start of frame delimiter. Note: the least significant 4 bits of the SFD cannot all be zeros. */
  #define RADIO_SFD_SFD_Pos (0UL)                    /*!< Position of SFD field.                                               */
  #define RADIO_SFD_SFD_Msk (0xFFUL << RADIO_SFD_SFD_Pos) /*!< Bit mask of SFD field.                                          */


/* RADIO_CTEINLINECONF: Configuration for CTE inline mode */
  #define RADIO_CTEINLINECONF_ResetValue (0x00002800UL) /*!< Reset value of CTEINLINECONF register.                            */

/* CTEINLINECTRLEN @Bit 0 : Enable parsing of CTEInfo from received packet in BLE modes */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos (0UL) /*!< Position of CTEINLINECTRLEN field.                                */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Msk (0x1UL << RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos) /*!< Bit mask of
                                                                            CTEINLINECTRLEN field.*/
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Min (0x0UL) /*!< Min enumerator value of CTEINLINECTRLEN field.                  */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Max (0x1UL) /*!< Max enumerator value of CTEINLINECTRLEN field.                  */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Enabled (0x1UL) /*!< Parsing of CTEInfo is enabled                               */
  #define RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled (0x0UL) /*!< Parsing of CTEInfo is disabled                             */

/* CTEINFOINS1 @Bit 3 : CTEInfo is S1 byte or not */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Pos (3UL)  /*!< Position of CTEINFOINS1 field.                                       */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Msk (0x1UL << RADIO_CTEINLINECONF_CTEINFOINS1_Pos) /*!< Bit mask of CTEINFOINS1
                                                                            field.*/
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Min (0x0UL) /*!< Min enumerator value of CTEINFOINS1 field.                          */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_Max (0x1UL) /*!< Max enumerator value of CTEINFOINS1 field.                          */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_InS1 (0x1UL) /*!< CTEInfo is in S1 byte (data PDU)                                   */
  #define RADIO_CTEINLINECONF_CTEINFOINS1_NotInS1 (0x0UL) /*!< CTEInfo is NOT in S1 byte (advertising PDU)                     */

/* CTEERRORHANDLING @Bit 4 : Sampling/switching if CRC is not OK */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos (4UL) /*!< Position of CTEERRORHANDLING field.                              */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Msk (0x1UL << RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos) /*!< Bit mask of
                                                                            CTEERRORHANDLING field.*/
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Min (0x0UL) /*!< Min enumerator value of CTEERRORHANDLING field.                */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Max (0x1UL) /*!< Max enumerator value of CTEERRORHANDLING field.                */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_Yes (0x1UL) /*!< Sampling and antenna switching also when CRC is not OK         */
  #define RADIO_CTEINLINECONF_CTEERRORHANDLING_No (0x0UL) /*!< No sampling and antenna switching when CRC is not OK            */

/* CTETIMEVALIDRANGE @Bits 6..7 : Max range of CTETime */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos (6UL) /*!< Position of CTETIMEVALIDRANGE field.                            */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Msk (0x3UL << RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos) /*!< Bit mask of
                                                                            CTETIMEVALIDRANGE field.*/
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Min (0x0UL) /*!< Min enumerator value of CTETIMEVALIDRANGE field.              */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Max (0x2UL) /*!< Max enumerator value of CTETIMEVALIDRANGE field.              */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_20 (0x0UL) /*!< 20 in 8us unit (default) Set to 20 if parsed CTETime is larger
                                                                han 20*/
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_31 (0x1UL) /*!< 31 in 8us unit                                                 */
  #define RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_63 (0x2UL) /*!< 63 in 8us unit                                                 */

/* CTEINLINERXMODE1US @Bits 10..12 : Spacing between samples for the samples in the SWITCHING period when CTEINLINEMODE is set */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos (10UL) /*!< Position of CTEINLINERXMODE1US field.                         */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Msk (0x7UL << RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos) /*!< Bit mask of
                                                                            CTEINLINERXMODE1US field.*/
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Min (0x1UL) /*!< Min enumerator value of CTEINLINERXMODE1US field.            */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Max (0x6UL) /*!< Max enumerator value of CTEINLINERXMODE1US field.            */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_4us (0x1UL) /*!< 4us                                                          */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_2us (0x2UL) /*!< 2us                                                          */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_1us (0x3UL) /*!< 1us                                                          */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_500ns (0x4UL) /*!< 0.5us                                                      */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_250ns (0x5UL) /*!< 0.25us                                                     */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE1US_125ns (0x6UL) /*!< 0.125us                                                    */

/* CTEINLINERXMODE2US @Bits 13..15 : Spacing between samples for the samples in the SWITCHING period when CTEINLINEMODE is set */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos (13UL) /*!< Position of CTEINLINERXMODE2US field.                         */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Msk (0x7UL << RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos) /*!< Bit mask of
                                                                            CTEINLINERXMODE2US field.*/
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Min (0x1UL) /*!< Min enumerator value of CTEINLINERXMODE2US field.            */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Max (0x6UL) /*!< Max enumerator value of CTEINLINERXMODE2US field.            */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_4us (0x1UL) /*!< 4us                                                          */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_2us (0x2UL) /*!< 2us                                                          */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_1us (0x3UL) /*!< 1us                                                          */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_500ns (0x4UL) /*!< 0.5us                                                      */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_250ns (0x5UL) /*!< 0.25us                                                     */
  #define RADIO_CTEINLINECONF_CTEINLINERXMODE2US_125ns (0x6UL) /*!< 0.125us                                                    */

/* S0CONF @Bits 16..23 : S0 bit pattern to match */
  #define RADIO_CTEINLINECONF_S0CONF_Pos (16UL)      /*!< Position of S0CONF field.                                            */
  #define RADIO_CTEINLINECONF_S0CONF_Msk (0xFFUL << RADIO_CTEINLINECONF_S0CONF_Pos) /*!< Bit mask of S0CONF field.             */

/* S0MASK @Bits 24..31 : S0 bit mask to set which bit to match */
  #define RADIO_CTEINLINECONF_S0MASK_Pos (24UL)      /*!< Position of S0MASK field.                                            */
  #define RADIO_CTEINLINECONF_S0MASK_Msk (0xFFUL << RADIO_CTEINLINECONF_S0MASK_Pos) /*!< Bit mask of S0MASK field.             */


/* RADIO_PACKETPTR: Packet pointer */
  #define RADIO_PACKETPTR_ResetValue (0x00000000UL)  /*!< Reset value of PACKETPTR register.                                   */

/* PTR @Bits 0..31 : Data pointer */
  #define RADIO_PACKETPTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define RADIO_PACKETPTR_PTR_Msk (0xFFFFFFFFUL << RADIO_PACKETPTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                        REGULATORS                                        ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* =============================================== Struct REGULATORS_VREGMAIN ================================================ */
/**
  * @brief VREGMAIN [REGULATORS_VREGMAIN] Register interface for main voltage regulator.
  */
typedef struct {
  __IOM uint32_t  DCDCEN;                            /*!< (@ 0x00000000) Enable DC/DC converter for better power efficiency    */
  __IM  uint32_t  INDUCTORDET;                       /*!< (@ 0x00000004) VREGMAIN inductor detection                           */
} NRF_REGULATORS_VREGMAIN_Type;                      /*!< Size = 8 (0x008)                                                     */

/* REGULATORS_VREGMAIN_DCDCEN: Enable DC/DC converter for better power efficiency */
  #define REGULATORS_VREGMAIN_DCDCEN_ResetValue (0x00000000UL) /*!< Reset value of DCDCEN register.                            */

/* VAL @Bit 0 : Enable DC/DC buck converter */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Pos (0UL)   /*!< Position of VAL field.                                               */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Msk (0x1UL << REGULATORS_VREGMAIN_DCDCEN_VAL_Pos) /*!< Bit mask of VAL field.         */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Min (0x0UL) /*!< Min enumerator value of VAL field.                                   */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Max (0x1UL) /*!< Max enumerator value of VAL field.                                   */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Disabled (0x0UL) /*!< Disable DC/DC converter and use LDO                             */
  #define REGULATORS_VREGMAIN_DCDCEN_VAL_Enabled (0x1UL) /*!< Enable DC/DC converter                                           */


/* REGULATORS_VREGMAIN_INDUCTORDET: VREGMAIN inductor detection */
  #define REGULATORS_VREGMAIN_INDUCTORDET_ResetValue (0x00000000UL) /*!< Reset value of INDUCTORDET register.                  */

/* DETECTED @Bit 0 : (unspecified) */
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Pos (0UL) /*!< Position of DETECTED field.                                  */
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Msk (0x1UL << REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Pos) /*!< Bit mask of
                                                                            DETECTED field.*/
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Min (0x0UL) /*!< Min enumerator value of DETECTED field.                    */
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_Max (0x1UL) /*!< Max enumerator value of DETECTED field.                    */
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_InductorNotDetected (0x0UL) /*!< VREGMAIN inductor not detected             */
  #define REGULATORS_VREGMAIN_INDUCTORDET_DETECTED_InductorDetected (0x1UL) /*!< VREGMAIN inductor detected                    */


/* ==================================================== Struct REGULATORS ==================================================== */
/**
  * @brief Voltage regulators
  */
  typedef struct {                                   /*!< REGULATORS Structure                                                 */
    __IM uint32_t RESERVED[320];
    __OM uint32_t SYSTEMOFF;                         /*!< (@ 0x00000500) System OFF register                                   */
    __IM uint32_t RESERVED1[11];
    __IOM uint32_t POFCON;                           /*!< (@ 0x00000530) Power-fail comparator configuration                   */
    __IM uint32_t POFSTAT;                           /*!< (@ 0x00000534) Power-fail comparator status register                 */
    __IM uint32_t RESERVED2[50];
    __IOM NRF_REGULATORS_VREGMAIN_Type VREGMAIN;     /*!< (@ 0x00000600) Register interface for main voltage regulator.        */
  } NRF_REGULATORS_Type;                             /*!< Size = 1544 (0x608)                                                  */

/* REGULATORS_SYSTEMOFF: System OFF register */
  #define REGULATORS_SYSTEMOFF_ResetValue (0x00000000UL) /*!< Reset value of SYSTEMOFF register.                               */

/* SYSTEMOFF @Bit 0 : Enable System OFF mode */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos (0UL)   /*!< Position of SYSTEMOFF field.                                         */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk (0x1UL << REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos) /*!< Bit mask of SYSTEMOFF field.   */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Min (0x1UL) /*!< Min enumerator value of SYSTEMOFF field.                             */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Max (0x1UL) /*!< Max enumerator value of SYSTEMOFF field.                             */
  #define REGULATORS_SYSTEMOFF_SYSTEMOFF_Enter (0x1UL) /*!< Enable System OFF mode                                             */


/* REGULATORS_POFCON: Power-fail comparator configuration */
  #define REGULATORS_POFCON_ResetValue (0x00000000UL) /*!< Reset value of POFCON register.                                     */

/* POF @Bit 0 : Enable or disable power-fail comparator */
  #define REGULATORS_POFCON_POF_Pos (0UL)            /*!< Position of POF field.                                               */
  #define REGULATORS_POFCON_POF_Msk (0x1UL << REGULATORS_POFCON_POF_Pos) /*!< Bit mask of POF field.                           */
  #define REGULATORS_POFCON_POF_Min (0x0UL)          /*!< Min enumerator value of POF field.                                   */
  #define REGULATORS_POFCON_POF_Max (0x1UL)          /*!< Max enumerator value of POF field.                                   */
  #define REGULATORS_POFCON_POF_Disabled (0x0UL)     /*!< Disable                                                              */
  #define REGULATORS_POFCON_POF_Enabled (0x1UL)      /*!< Enable                                                               */

/* THRESHOLD @Bits 1..4 : Power-fail comparator threshold setting */
  #define REGULATORS_POFCON_THRESHOLD_Pos (1UL)      /*!< Position of THRESHOLD field.                                         */
  #define REGULATORS_POFCON_THRESHOLD_Msk (0xFUL << REGULATORS_POFCON_THRESHOLD_Pos) /*!< Bit mask of THRESHOLD field.         */
  #define REGULATORS_POFCON_THRESHOLD_Min (0x0UL)    /*!< Min enumerator value of THRESHOLD field.                             */
  #define REGULATORS_POFCON_THRESHOLD_Max (0xFUL)    /*!< Max enumerator value of THRESHOLD field.                             */
  #define REGULATORS_POFCON_THRESHOLD_V17 (0x0UL)    /*!< Set threshold to 1.7 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V18 (0x1UL)    /*!< Set threshold to 1.8 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V19 (0x2UL)    /*!< Set threshold to 1.9 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V20 (0x3UL)    /*!< Set threshold to 2.0 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V21 (0x4UL)    /*!< Set threshold to 2.1 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V22 (0x5UL)    /*!< Set threshold to 2.2 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V23 (0x6UL)    /*!< Set threshold to 2.3 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V24 (0x7UL)    /*!< Set threshold to 2.4 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V25 (0x8UL)    /*!< Set threshold to 2.5 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V26 (0x9UL)    /*!< Set threshold to 2.6 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V27 (0xAUL)    /*!< Set threshold to 2.7 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V28 (0xBUL)    /*!< Set threshold to 2.8 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V29 (0xCUL)    /*!< Set threshold to 2.9 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V30 (0xDUL)    /*!< Set threshold to 3.0 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V31 (0xEUL)    /*!< Set threshold to 3.1 V for VDD                                       */
  #define REGULATORS_POFCON_THRESHOLD_V32 (0xFUL)    /*!< Set threshold to 3.2 V for VDD                                       */

/* EVENTDISABLE @Bit 7 : Disable the POFWARN power-fail warning event */
  #define REGULATORS_POFCON_EVENTDISABLE_Pos (7UL)   /*!< Position of EVENTDISABLE field.                                      */
  #define REGULATORS_POFCON_EVENTDISABLE_Msk (0x1UL << REGULATORS_POFCON_EVENTDISABLE_Pos) /*!< Bit mask of EVENTDISABLE field.*/
  #define REGULATORS_POFCON_EVENTDISABLE_Min (0x0UL) /*!< Min enumerator value of EVENTDISABLE field.                          */
  #define REGULATORS_POFCON_EVENTDISABLE_Max (0x1UL) /*!< Max enumerator value of EVENTDISABLE field.                          */
  #define REGULATORS_POFCON_EVENTDISABLE_Enabled (0x0UL) /*!< POFWARN event is generated                                       */
  #define REGULATORS_POFCON_EVENTDISABLE_Disabled (0x1UL) /*!< POFWARN event is not generated                                  */


/* REGULATORS_POFSTAT: Power-fail comparator status register */
  #define REGULATORS_POFSTAT_ResetValue (0x00000000UL) /*!< Reset value of POFSTAT register.                                   */

/* COMPARATOR @Bit 0 : Power-fail comparator status */
  #define REGULATORS_POFSTAT_COMPARATOR_Pos (0UL)    /*!< Position of COMPARATOR field.                                        */
  #define REGULATORS_POFSTAT_COMPARATOR_Msk (0x1UL << REGULATORS_POFSTAT_COMPARATOR_Pos) /*!< Bit mask of COMPARATOR field.    */
  #define REGULATORS_POFSTAT_COMPARATOR_Min (0x0UL)  /*!< Min enumerator value of COMPARATOR field.                            */
  #define REGULATORS_POFSTAT_COMPARATOR_Max (0x1UL)  /*!< Max enumerator value of COMPARATOR field.                            */
  #define REGULATORS_POFSTAT_COMPARATOR_Above (0x0UL) /*!< Voltage detected above VPOF threshold                               */
  #define REGULATORS_POFSTAT_COMPARATOR_Below (0x1UL) /*!< Voltage detected below VPOF threshold                               */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RESET                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct RESET ======================================================= */
/**
  * @brief Reset control
  */
  typedef struct {                                   /*!< RESET Structure                                                      */
    __IM uint32_t RESERVED[384];
    __IOM uint32_t RESETREAS;                        /*!< (@ 0x00000600) Reset reason                                          */
  } NRF_RESET_Type;                                  /*!< Size = 1540 (0x604)                                                  */

/* RESET_RESETREAS: Reset reason */
  #define RESET_RESETREAS_ResetValue (0x00000000UL)  /*!< Reset value of RESETREAS register.                                   */

/* RESETPIN @Bit 0 : Reset from pin reset detected */
  #define RESET_RESETREAS_RESETPIN_Pos (0UL)         /*!< Position of RESETPIN field.                                          */
  #define RESET_RESETREAS_RESETPIN_Msk (0x1UL << RESET_RESETREAS_RESETPIN_Pos) /*!< Bit mask of RESETPIN field.                */
  #define RESET_RESETREAS_RESETPIN_Min (0x0UL)       /*!< Min enumerator value of RESETPIN field.                              */
  #define RESET_RESETREAS_RESETPIN_Max (0x1UL)       /*!< Max enumerator value of RESETPIN field.                              */
  #define RESET_RESETREAS_RESETPIN_NotDetected (0x0UL) /*!< Not detected                                                       */
  #define RESET_RESETREAS_RESETPIN_Detected (0x1UL)  /*!< Detected                                                             */

/* DOG0 @Bit 1 : Reset from watchdog timer 0 detected */
  #define RESET_RESETREAS_DOG0_Pos (1UL)             /*!< Position of DOG0 field.                                              */
  #define RESET_RESETREAS_DOG0_Msk (0x1UL << RESET_RESETREAS_DOG0_Pos) /*!< Bit mask of DOG0 field.                            */
  #define RESET_RESETREAS_DOG0_Min (0x0UL)           /*!< Min enumerator value of DOG0 field.                                  */
  #define RESET_RESETREAS_DOG0_Max (0x1UL)           /*!< Max enumerator value of DOG0 field.                                  */
  #define RESET_RESETREAS_DOG0_NotDetected (0x0UL)   /*!< Not detected                                                         */
  #define RESET_RESETREAS_DOG0_Detected (0x1UL)      /*!< Detected                                                             */

/* DOG1 @Bit 2 : Reset from watchdog timer 1 detected */
  #define RESET_RESETREAS_DOG1_Pos (2UL)             /*!< Position of DOG1 field.                                              */
  #define RESET_RESETREAS_DOG1_Msk (0x1UL << RESET_RESETREAS_DOG1_Pos) /*!< Bit mask of DOG1 field.                            */
  #define RESET_RESETREAS_DOG1_Min (0x0UL)           /*!< Min enumerator value of DOG1 field.                                  */
  #define RESET_RESETREAS_DOG1_Max (0x1UL)           /*!< Max enumerator value of DOG1 field.                                  */
  #define RESET_RESETREAS_DOG1_NotDetected (0x0UL)   /*!< Not detected                                                         */
  #define RESET_RESETREAS_DOG1_Detected (0x1UL)      /*!< Detected                                                             */

/* CTRLAPSOFT @Bit 3 : Soft reset from CTRL-AP detected */
  #define RESET_RESETREAS_CTRLAPSOFT_Pos (3UL)       /*!< Position of CTRLAPSOFT field.                                        */
  #define RESET_RESETREAS_CTRLAPSOFT_Msk (0x1UL << RESET_RESETREAS_CTRLAPSOFT_Pos) /*!< Bit mask of CTRLAPSOFT field.          */
  #define RESET_RESETREAS_CTRLAPSOFT_Min (0x0UL)     /*!< Min enumerator value of CTRLAPSOFT field.                            */
  #define RESET_RESETREAS_CTRLAPSOFT_Max (0x1UL)     /*!< Max enumerator value of CTRLAPSOFT field.                            */
  #define RESET_RESETREAS_CTRLAPSOFT_NotDetected (0x0UL) /*!< Not detected                                                     */
  #define RESET_RESETREAS_CTRLAPSOFT_Detected (0x1UL) /*!< Detected                                                            */

/* CTRLAPHARD @Bit 4 : Reset due to CTRL-AP hard reset */
  #define RESET_RESETREAS_CTRLAPHARD_Pos (4UL)       /*!< Position of CTRLAPHARD field.                                        */
  #define RESET_RESETREAS_CTRLAPHARD_Msk (0x1UL << RESET_RESETREAS_CTRLAPHARD_Pos) /*!< Bit mask of CTRLAPHARD field.          */
  #define RESET_RESETREAS_CTRLAPHARD_Min (0x0UL)     /*!< Min enumerator value of CTRLAPHARD field.                            */
  #define RESET_RESETREAS_CTRLAPHARD_Max (0x1UL)     /*!< Max enumerator value of CTRLAPHARD field.                            */
  #define RESET_RESETREAS_CTRLAPHARD_NotDetected (0x0UL) /*!< Not detected                                                     */
  #define RESET_RESETREAS_CTRLAPHARD_Detected (0x1UL) /*!< Detected                                                            */

/* CTRLAPPIN @Bit 5 : Reset due to CTRL-AP pin reset */
  #define RESET_RESETREAS_CTRLAPPIN_Pos (5UL)        /*!< Position of CTRLAPPIN field.                                         */
  #define RESET_RESETREAS_CTRLAPPIN_Msk (0x1UL << RESET_RESETREAS_CTRLAPPIN_Pos) /*!< Bit mask of CTRLAPPIN field.             */
  #define RESET_RESETREAS_CTRLAPPIN_Min (0x0UL)      /*!< Min enumerator value of CTRLAPPIN field.                             */
  #define RESET_RESETREAS_CTRLAPPIN_Max (0x1UL)      /*!< Max enumerator value of CTRLAPPIN field.                             */
  #define RESET_RESETREAS_CTRLAPPIN_NotDetected (0x0UL) /*!< Not detected                                                      */
  #define RESET_RESETREAS_CTRLAPPIN_Detected (0x1UL) /*!< Detected                                                             */

/* SREQ @Bit 6 : Reset from soft reset detected */
  #define RESET_RESETREAS_SREQ_Pos (6UL)             /*!< Position of SREQ field.                                              */
  #define RESET_RESETREAS_SREQ_Msk (0x1UL << RESET_RESETREAS_SREQ_Pos) /*!< Bit mask of SREQ field.                            */
  #define RESET_RESETREAS_SREQ_Min (0x0UL)           /*!< Min enumerator value of SREQ field.                                  */
  #define RESET_RESETREAS_SREQ_Max (0x1UL)           /*!< Max enumerator value of SREQ field.                                  */
  #define RESET_RESETREAS_SREQ_NotDetected (0x0UL)   /*!< Not detected                                                         */
  #define RESET_RESETREAS_SREQ_Detected (0x1UL)      /*!< Detected                                                             */

/* LOCKUP @Bit 7 : Reset from CPU lockup detected */
  #define RESET_RESETREAS_LOCKUP_Pos (7UL)           /*!< Position of LOCKUP field.                                            */
  #define RESET_RESETREAS_LOCKUP_Msk (0x1UL << RESET_RESETREAS_LOCKUP_Pos) /*!< Bit mask of LOCKUP field.                      */
  #define RESET_RESETREAS_LOCKUP_Min (0x0UL)         /*!< Min enumerator value of LOCKUP field.                                */
  #define RESET_RESETREAS_LOCKUP_Max (0x1UL)         /*!< Max enumerator value of LOCKUP field.                                */
  #define RESET_RESETREAS_LOCKUP_NotDetected (0x0UL) /*!< Not detected                                                         */
  #define RESET_RESETREAS_LOCKUP_Detected (0x1UL)    /*!< Detected                                                             */

/* OFF @Bit 8 : Reset due to wakeup from System OFF mode when wakeup is triggered by DETECT signal from GPIO */
  #define RESET_RESETREAS_OFF_Pos (8UL)              /*!< Position of OFF field.                                               */
  #define RESET_RESETREAS_OFF_Msk (0x1UL << RESET_RESETREAS_OFF_Pos) /*!< Bit mask of OFF field.                               */
  #define RESET_RESETREAS_OFF_Min (0x0UL)            /*!< Min enumerator value of OFF field.                                   */
  #define RESET_RESETREAS_OFF_Max (0x1UL)            /*!< Max enumerator value of OFF field.                                   */
  #define RESET_RESETREAS_OFF_NotDetected (0x0UL)    /*!< Not detected                                                         */
  #define RESET_RESETREAS_OFF_Detected (0x1UL)       /*!< Detected                                                             */

/* LPCOMP @Bit 9 : Reset due to wakeup from System OFF mode when wakeup is triggered by ANADETECT signal from LPCOMP */
  #define RESET_RESETREAS_LPCOMP_Pos (9UL)           /*!< Position of LPCOMP field.                                            */
  #define RESET_RESETREAS_LPCOMP_Msk (0x1UL << RESET_RESETREAS_LPCOMP_Pos) /*!< Bit mask of LPCOMP field.                      */
  #define RESET_RESETREAS_LPCOMP_Min (0x0UL)         /*!< Min enumerator value of LPCOMP field.                                */
  #define RESET_RESETREAS_LPCOMP_Max (0x1UL)         /*!< Max enumerator value of LPCOMP field.                                */
  #define RESET_RESETREAS_LPCOMP_NotDetected (0x0UL) /*!< Not detected                                                         */
  #define RESET_RESETREAS_LPCOMP_Detected (0x1UL)    /*!< Detected                                                             */

/* DIF @Bit 10 : Reset triggered by Debug Interface */
  #define RESET_RESETREAS_DIF_Pos (10UL)             /*!< Position of DIF field.                                               */
  #define RESET_RESETREAS_DIF_Msk (0x1UL << RESET_RESETREAS_DIF_Pos) /*!< Bit mask of DIF field.                               */
  #define RESET_RESETREAS_DIF_Min (0x0UL)            /*!< Min enumerator value of DIF field.                                   */
  #define RESET_RESETREAS_DIF_Max (0x1UL)            /*!< Max enumerator value of DIF field.                                   */
  #define RESET_RESETREAS_DIF_NotDetected (0x0UL)    /*!< Not detected                                                         */
  #define RESET_RESETREAS_DIF_Detected (0x1UL)       /*!< Detected                                                             */

/* GRTC @Bit 11 : Reset due to wakeup from GRTC */
  #define RESET_RESETREAS_GRTC_Pos (11UL)            /*!< Position of GRTC field.                                              */
  #define RESET_RESETREAS_GRTC_Msk (0x1UL << RESET_RESETREAS_GRTC_Pos) /*!< Bit mask of GRTC field.                            */
  #define RESET_RESETREAS_GRTC_Min (0x0UL)           /*!< Min enumerator value of GRTC field.                                  */
  #define RESET_RESETREAS_GRTC_Max (0x1UL)           /*!< Max enumerator value of GRTC field.                                  */
  #define RESET_RESETREAS_GRTC_NotDetected (0x0UL)   /*!< Not detected                                                         */
  #define RESET_RESETREAS_GRTC_Detected (0x1UL)      /*!< Detected                                                             */

/* NFC @Bit 12 : Reset after wakeup from System OFF mode due to NFC field being detected */
  #define RESET_RESETREAS_NFC_Pos (12UL)             /*!< Position of NFC field.                                               */
  #define RESET_RESETREAS_NFC_Msk (0x1UL << RESET_RESETREAS_NFC_Pos) /*!< Bit mask of NFC field.                               */
  #define RESET_RESETREAS_NFC_Min (0x0UL)            /*!< Min enumerator value of NFC field.                                   */
  #define RESET_RESETREAS_NFC_Max (0x1UL)            /*!< Max enumerator value of NFC field.                                   */
  #define RESET_RESETREAS_NFC_NotDetected (0x0UL)    /*!< Not detected                                                         */
  #define RESET_RESETREAS_NFC_Detected (0x1UL)       /*!< Detected                                                             */

/* SECTAMPER @Bit 13 : Reset due to illegal tampering of the device */
  #define RESET_RESETREAS_SECTAMPER_Pos (13UL)       /*!< Position of SECTAMPER field.                                         */
  #define RESET_RESETREAS_SECTAMPER_Msk (0x1UL << RESET_RESETREAS_SECTAMPER_Pos) /*!< Bit mask of SECTAMPER field.             */
  #define RESET_RESETREAS_SECTAMPER_Min (0x0UL)      /*!< Min enumerator value of SECTAMPER field.                             */
  #define RESET_RESETREAS_SECTAMPER_Max (0x1UL)      /*!< Max enumerator value of SECTAMPER field.                             */
  #define RESET_RESETREAS_SECTAMPER_NotDetected (0x0UL) /*!< Not detected                                                      */
  #define RESET_RESETREAS_SECTAMPER_Detected (0x1UL) /*!< Detected                                                             */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           RRAMC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct RRAMC_BUFSTATUS ================================================== */
/**
  * @brief BUFSTATUS [RRAMC_BUFSTATUS] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IM  uint32_t  WRITEBUFEMPTY;                     /*!< (@ 0x00000008) Internal write-buffer is empty                        */
} NRF_RRAMC_BUFSTATUS_Type;                          /*!< Size = 12 (0x00C)                                                    */

/* RRAMC_BUFSTATUS_WRITEBUFEMPTY: Internal write-buffer is empty */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_ResetValue (0x00000000UL) /*!< Reset value of WRITEBUFEMPTY register.                  */

/* EMPTY @Bit 0 : (unspecified) */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Pos (0UL) /*!< Position of EMPTY field.                                          */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Msk (0x1UL << RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Pos) /*!< Bit mask of EMPTY
                                                                            field.*/
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Min (0x0UL) /*!< Min enumerator value of EMPTY field.                            */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Max (0x1UL) /*!< Max enumerator value of EMPTY field.                            */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_NotEmpty (0x0UL) /*!< The internal write-buffer has data that needs committing   */
  #define RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Empty (0x1UL) /*!< The internal write-buffer is empty and has no content that
                                                                 needs to be committed*/



/* ==================================================== Struct RRAMC_ECC ===================================================== */
/**
  * @brief ECC [RRAMC_ECC] (unspecified)
  */
typedef struct {
  __IM  uint32_t  ERRORADDR;                         /*!< (@ 0x00000000) Address of the first ECC error that could not be
                                                                         corrected*/
} NRF_RRAMC_ECC_Type;                                /*!< Size = 4 (0x004)                                                     */

/* RRAMC_ECC_ERRORADDR: Address of the first ECC error that could not be corrected */
  #define RRAMC_ECC_ERRORADDR_ResetValue (0x00FFFFFFUL) /*!< Reset value of ERRORADDR register.                                */

/* ADDRESS @Bits 0..31 : ECC error address */
  #define RRAMC_ECC_ERRORADDR_ADDRESS_Pos (0UL)      /*!< Position of ADDRESS field.                                           */
  #define RRAMC_ECC_ERRORADDR_ADDRESS_Msk (0xFFFFFFFFUL << RRAMC_ECC_ERRORADDR_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.    */



/* =================================================== Struct RRAMC_POWER ==================================================== */
/**
  * @brief POWER [RRAMC_POWER] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) Power configuration                                   */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  LOWPOWERCONFIG;                    /*!< (@ 0x00000008) Low power mode configuration                          */
} NRF_RRAMC_POWER_Type;                              /*!< Size = 12 (0x00C)                                                    */

/* RRAMC_POWER_CONFIG: Power configuration */
  #define RRAMC_POWER_CONFIG_ResetValue (0x00000100UL) /*!< Reset value of CONFIG register.                                    */

/* ACCESSTIMEOUT @Bits 0..15 : Access timeout, in 31.25 ns units, used for going into standby power mode or remain active on
                               wake up */

  #define RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Pos (0UL) /*!< Position of ACCESSTIMEOUT field.                                     */
  #define RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Msk (0xFFFFUL << RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Pos) /*!< Bit mask of ACCESSTIMEOUT
                                                                            field.*/

/* POF @Bit 16 : Power on failure warning handling configuration */
  #define RRAMC_POWER_CONFIG_POF_Pos (16UL)          /*!< Position of POF field.                                               */
  #define RRAMC_POWER_CONFIG_POF_Msk (0x1UL << RRAMC_POWER_CONFIG_POF_Pos) /*!< Bit mask of POF field.                         */
  #define RRAMC_POWER_CONFIG_POF_Min (0x0UL)         /*!< Min enumerator value of POF field.                                   */
  #define RRAMC_POWER_CONFIG_POF_Max (0x1UL)         /*!< Max enumerator value of POF field.                                   */
  #define RRAMC_POWER_CONFIG_POF_Wait (0x0UL)        /*!< Wait until the current RRAM write finishes                           */
  #define RRAMC_POWER_CONFIG_POF_Abort (0x1UL)       /*!< Abort the current RRAM write                                         */


/* RRAMC_POWER_LOWPOWERCONFIG: Low power mode configuration */
  #define RRAMC_POWER_LOWPOWERCONFIG_ResetValue (0x00000000UL) /*!< Reset value of LOWPOWERCONFIG register.                    */

/* MODE @Bits 0..1 : RRAM low power mode */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Pos (0UL)  /*!< Position of MODE field.                                              */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Msk (0x3UL << RRAMC_POWER_LOWPOWERCONFIG_MODE_Pos) /*!< Bit mask of MODE field.      */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Min (0x0UL) /*!< Min enumerator value of MODE field.                                 */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Max (0x3UL) /*!< Max enumerator value of MODE field.                                 */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_PowerDown (0x0UL) /*!< The RRAM goes into power down mode                            */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_Standby (0x1UL) /*!< The RRAM automatically goes into standby mode while the RRAM is
                                                               not being accessed*/
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_NAP (0x2UL) /*!< The RRAM goes into NAP mode                                         */
  #define RRAMC_POWER_LOWPOWERCONFIG_MODE_PowerOff (0x3UL) /*!< The RRAM is powered Off                                        */



/* =================================================== Struct RRAMC_ERASE ==================================================== */
/**
  * @brief ERASE [RRAMC_ERASE] (unspecified)
  */
typedef struct {
  __IOM uint32_t  ERASEALL;                          /*!< (@ 0x00000000) Erase RRAM, including UICR All information in SICR,
                                                                         including keys, are also erased*/
} NRF_RRAMC_ERASE_Type;                              /*!< Size = 4 (0x004)                                                     */

/* RRAMC_ERASE_ERASEALL: Erase RRAM, including UICR All information in SICR, including keys, are also erased */
  #define RRAMC_ERASE_ERASEALL_ResetValue (0x00000000UL) /*!< Reset value of ERASEALL register.                                */

/* ERASE @Bit 0 : Erase RRAM */
  #define RRAMC_ERASE_ERASEALL_ERASE_Pos (0UL)       /*!< Position of ERASE field.                                             */
  #define RRAMC_ERASE_ERASEALL_ERASE_Msk (0x1UL << RRAMC_ERASE_ERASEALL_ERASE_Pos) /*!< Bit mask of ERASE field.               */
  #define RRAMC_ERASE_ERASEALL_ERASE_Min (0x0UL)     /*!< Min enumerator value of ERASE field.                                 */
  #define RRAMC_ERASE_ERASEALL_ERASE_Max (0x1UL)     /*!< Max enumerator value of ERASE field.                                 */
  #define RRAMC_ERASE_ERASEALL_ERASE_NoOperation (0x0UL) /*!< No operation                                                     */
  #define RRAMC_ERASE_ERASEALL_ERASE_Erase (0x1UL)   /*!< Start erase of chip                                                  */



/* =================================================== Struct RRAMC_REGION =================================================== */
/**
  * @brief REGION [RRAMC_REGION] RRAMC can apply access privileges to regions of the RRAM. Some regions are dedicated for system
            use and are not available for configuration - refer to the instantiation table for details.

  */
typedef struct {
  __IOM uint32_t  ADDRESS;                           /*!< (@ 0x00000000) Region address                                        */
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000004) Region configuration                                  */
} NRF_RRAMC_REGION_Type;                             /*!< Size = 8 (0x008)                                                     */
  #define RRAMC_REGION_MaxCount (5UL)                /*!< Size of REGION[5] array.                                             */
  #define RRAMC_REGION_MaxIndex (4UL)                /*!< Max index of REGION[5] array.                                        */
  #define RRAMC_REGION_MinIndex (0UL)                /*!< Min index of REGION[5] array.                                        */

/* RRAMC_REGION_ADDRESS: Region address */
  #define RRAMC_REGION_ADDRESS_ResetValue (0x00000000UL) /*!< Reset value of ADDRESS register.                                 */

/* STARTADDR @Bits 0..31 : Start address of the region [n] */
  #define RRAMC_REGION_ADDRESS_STARTADDR_Pos (0UL)   /*!< Position of STARTADDR field.                                         */
  #define RRAMC_REGION_ADDRESS_STARTADDR_Msk (0xFFFFFFFFUL << RRAMC_REGION_ADDRESS_STARTADDR_Pos) /*!< Bit mask of STARTADDR
                                                                            field.*/


/* RRAMC_REGION_CONFIG: Region configuration */
  #define RRAMC_REGION_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                                   */

/* READ @Bit 0 : Read access */
  #define RRAMC_REGION_CONFIG_READ_Pos (0UL)         /*!< Position of READ field.                                              */
  #define RRAMC_REGION_CONFIG_READ_Msk (0x1UL << RRAMC_REGION_CONFIG_READ_Pos) /*!< Bit mask of READ field.                    */
  #define RRAMC_REGION_CONFIG_READ_Min (0x0UL)       /*!< Min enumerator value of READ field.                                  */
  #define RRAMC_REGION_CONFIG_READ_Max (0x1UL)       /*!< Max enumerator value of READ field.                                  */
  #define RRAMC_REGION_CONFIG_READ_NotAllowed (0x0UL) /*!< Read access to override region [n] is not allowed                   */
  #define RRAMC_REGION_CONFIG_READ_Allowed (0x1UL)   /*!< Read access to override region [n] is allowed                        */

/* WRITE @Bit 1 : Write access */
  #define RRAMC_REGION_CONFIG_WRITE_Pos (1UL)        /*!< Position of WRITE field.                                             */
  #define RRAMC_REGION_CONFIG_WRITE_Msk (0x1UL << RRAMC_REGION_CONFIG_WRITE_Pos) /*!< Bit mask of WRITE field.                 */
  #define RRAMC_REGION_CONFIG_WRITE_Min (0x0UL)      /*!< Min enumerator value of WRITE field.                                 */
  #define RRAMC_REGION_CONFIG_WRITE_Max (0x1UL)      /*!< Max enumerator value of WRITE field.                                 */
  #define RRAMC_REGION_CONFIG_WRITE_NotAllowed (0x0UL) /*!< Write access to override region [n] is not allowed                 */
  #define RRAMC_REGION_CONFIG_WRITE_Allowed (0x1UL)  /*!< Write access to override region [n] is allowed                       */

/* EXECUTE @Bit 2 : Execute access */
  #define RRAMC_REGION_CONFIG_EXECUTE_Pos (2UL)      /*!< Position of EXECUTE field.                                           */
  #define RRAMC_REGION_CONFIG_EXECUTE_Msk (0x1UL << RRAMC_REGION_CONFIG_EXECUTE_Pos) /*!< Bit mask of EXECUTE field.           */
  #define RRAMC_REGION_CONFIG_EXECUTE_Min (0x0UL)    /*!< Min enumerator value of EXECUTE field.                               */
  #define RRAMC_REGION_CONFIG_EXECUTE_Max (0x1UL)    /*!< Max enumerator value of EXECUTE field.                               */
  #define RRAMC_REGION_CONFIG_EXECUTE_NotAllowed (0x0UL) /*!< Execute access to override region [n] is not allowed             */
  #define RRAMC_REGION_CONFIG_EXECUTE_Allowed (0x1UL) /*!< Execute access to override region [n] is allowed                    */

/* SECURE @Bit 3 : Secure access */
  #define RRAMC_REGION_CONFIG_SECURE_Pos (3UL)       /*!< Position of SECURE field.                                            */
  #define RRAMC_REGION_CONFIG_SECURE_Msk (0x1UL << RRAMC_REGION_CONFIG_SECURE_Pos) /*!< Bit mask of SECURE field.              */
  #define RRAMC_REGION_CONFIG_SECURE_Min (0x0UL)     /*!< Min enumerator value of SECURE field.                                */
  #define RRAMC_REGION_CONFIG_SECURE_Max (0x1UL)     /*!< Max enumerator value of SECURE field.                                */
  #define RRAMC_REGION_CONFIG_SECURE_NonSecure (0x0UL) /*!< Both Secure and non-Secure access to override region [n] is allowed*/
  #define RRAMC_REGION_CONFIG_SECURE_Secure (0x1UL)  /*!< Only secure access to override region [n] is allowed                 */

/* OWNER @Bits 4..7 : Owner ID */
  #define RRAMC_REGION_CONFIG_OWNER_Pos (4UL)        /*!< Position of OWNER field.                                             */
  #define RRAMC_REGION_CONFIG_OWNER_Msk (0xFUL << RRAMC_REGION_CONFIG_OWNER_Pos) /*!< Bit mask of OWNER field.                 */
  #define RRAMC_REGION_CONFIG_OWNER_Min (0x0UL)      /*!< Min enumerator value of OWNER field.                                 */
  #define RRAMC_REGION_CONFIG_OWNER_Max (0x0UL)      /*!< Max enumerator value of OWNER field.                                 */
  #define RRAMC_REGION_CONFIG_OWNER_NotEnforced (0x0UL) /*!< Owner ID protection is not enforced                               */

/* WRITEONCE @Bit 12 : Write-once */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Pos (12UL)   /*!< Position of WRITEONCE field.                                         */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Msk (0x1UL << RRAMC_REGION_CONFIG_WRITEONCE_Pos) /*!< Bit mask of WRITEONCE field.     */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Min (0x0UL)  /*!< Min enumerator value of WRITEONCE field.                             */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Max (0x1UL)  /*!< Max enumerator value of WRITEONCE field.                             */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Disabled (0x0UL) /*!< Write-once disabled                                              */
  #define RRAMC_REGION_CONFIG_WRITEONCE_Enabled (0x1UL) /*!< Write-once enabled                                                */

/* LOCK @Bit 13 : Enable lock */
  #define RRAMC_REGION_CONFIG_LOCK_Pos (13UL)        /*!< Position of LOCK field.                                              */
  #define RRAMC_REGION_CONFIG_LOCK_Msk (0x1UL << RRAMC_REGION_CONFIG_LOCK_Pos) /*!< Bit mask of LOCK field.                    */
  #define RRAMC_REGION_CONFIG_LOCK_Min (0x0UL)       /*!< Min enumerator value of LOCK field.                                  */
  #define RRAMC_REGION_CONFIG_LOCK_Max (0x1UL)       /*!< Max enumerator value of LOCK field.                                  */
  #define RRAMC_REGION_CONFIG_LOCK_Disabled (0x0UL)  /*!< Lock disabled for region [n]                                         */
  #define RRAMC_REGION_CONFIG_LOCK_Enabled (0x1UL)   /*!< Lock enabled for region [n]                                          */

/* SIZE @Bits 16..25 : Size in KBytes of region [n] */
  #define RRAMC_REGION_CONFIG_SIZE_Pos (16UL)        /*!< Position of SIZE field.                                              */
  #define RRAMC_REGION_CONFIG_SIZE_Msk (0x3FFUL << RRAMC_REGION_CONFIG_SIZE_Pos) /*!< Bit mask of SIZE field.                  */


/* ====================================================== Struct RRAMC ======================================================= */
/**
  * @brief RRAM controller GLITCH detector
  */
  typedef struct {                                   /*!< RRAMC Structure                                                      */
    __OM uint32_t TASKS_WAKEUP;                      /*!< (@ 0x00000000) Wakeup the RRAM from low power mode                   */
    __OM uint32_t TASKS_CLRWRITEBUF;                 /*!< (@ 0x00000004) Clear internal write-buffer                           */
    __OM uint32_t TASKS_COMMITWRITEBUF;              /*!< (@ 0x00000008) Commits the data stored in internal write-buffer to
                                                                         RRAM*/
    __IM uint32_t RESERVED[29];
    __IOM uint32_t SUBSCRIBE_WAKEUP;                 /*!< (@ 0x00000080) Subscribe configuration for task WAKEUP               */
    __IOM uint32_t SUBSCRIBE_CLRWRITEBUF;            /*!< (@ 0x00000084) Subscribe configuration for task CLRWRITEBUF          */
    __IOM uint32_t SUBSCRIBE_COMMITWRITEBUF;         /*!< (@ 0x00000088) Subscribe configuration for task COMMITWRITEBUF       */
    __IM uint32_t RESERVED1[29];
    __IOM uint32_t EVENTS_WOKENUP;                   /*!< (@ 0x00000100) RRAMC is woken up from low power mode                 */
    __IOM uint32_t EVENTS_READY;                     /*!< (@ 0x00000104) RRAMC is ready                                        */
    __IOM uint32_t EVENTS_READYNEXT;                 /*!< (@ 0x00000108) Ready to accept a new write operation                 */
    __IOM uint32_t EVENTS_ACCESSERROR;               /*!< (@ 0x0000010C) RRAM access error                                     */
    __IM uint32_t RESERVED2[28];
    __IOM uint32_t PUBLISH_WOKENUP;                  /*!< (@ 0x00000180) Publish configuration for event WOKENUP               */
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND;                           /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IM uint32_t RESERVED4[60];
    __IM uint32_t READY;                             /*!< (@ 0x00000400) RRAMC ready status                                    */
    __IM uint32_t READYNEXT;                         /*!< (@ 0x00000404) Ready next flag                                       */
    __IM uint32_t ACCESSERRORADDR;                   /*!< (@ 0x00000408) Address of the first access error                     */
    __IM uint32_t RESERVED5;
    __IOM NRF_RRAMC_BUFSTATUS_Type BUFSTATUS;        /*!< (@ 0x00000410) (unspecified)                                         */
    __IM uint32_t RESERVED6;
    __IOM NRF_RRAMC_ECC_Type ECC;                    /*!< (@ 0x00000420) (unspecified)                                         */
    __IM uint32_t RESERVED7[55];
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000500) Configuration register                                */
    __IM uint32_t RESERVED8[2];
    __IOM uint32_t READYNEXTTIMEOUT;                 /*!< (@ 0x0000050C) Configuration for ready next timeout counter, in units
                                                                         of AXI clock frequency*/
    __IOM NRF_RRAMC_POWER_Type POWER;                /*!< (@ 0x00000510) (unspecified)                                         */
    __IM uint32_t RESERVED9[9];
    __IOM NRF_RRAMC_ERASE_Type ERASE;                /*!< (@ 0x00000540) (unspecified)                                         */
    __IM uint32_t RESERVED10[3];
    __IOM NRF_RRAMC_REGION_Type REGION[5];           /*!< (@ 0x00000550) RRAMC can apply access privileges to regions of the
                                                                         RRAM. Some regions are dedicated for system use and are
                                                                         not available for configuration - refer to the
                                                                         instantiation table for details.*/
  } NRF_RRAMC_Type;                                  /*!< Size = 1400 (0x578)                                                  */

/* RRAMC_TASKS_WAKEUP: Wakeup the RRAM from low power mode */
  #define RRAMC_TASKS_WAKEUP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_WAKEUP register.                              */

/* TASKS_WAKEUP @Bit 0 : Wakeup the RRAM from low power mode */
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Pos (0UL)  /*!< Position of TASKS_WAKEUP field.                                      */
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Msk (0x1UL << RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Pos) /*!< Bit mask of TASKS_WAKEUP
                                                                            field.*/
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Min (0x1UL) /*!< Min enumerator value of TASKS_WAKEUP field.                         */
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Max (0x1UL) /*!< Max enumerator value of TASKS_WAKEUP field.                         */
  #define RRAMC_TASKS_WAKEUP_TASKS_WAKEUP_Trigger (0x1UL) /*!< Trigger task                                                    */


/* RRAMC_TASKS_CLRWRITEBUF: Clear internal write-buffer */
  #define RRAMC_TASKS_CLRWRITEBUF_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CLRWRITEBUF register.                    */

/* TASKS_CLRWRITEBUF @Bit 0 : Clear internal write-buffer */
  #define RRAMC_TASKS_CLRWRITEBUF_TASKS_CLRWRITEBUF_Pos (0UL) /*!< Position of TASKS_CLRWRITEBUF field.                        */
  #define RRAMC_TASKS_CLRWRITEBUF_TASKS_CLRWRITEBUF_Msk (0x1UL << RRAMC_TASKS_CLRWRITEBUF_TASKS_CLRWRITEBUF_Pos) /*!< Bit mask
                                                                            of TASKS_CLRWRITEBUF field.*/
  #define RRAMC_TASKS_CLRWRITEBUF_TASKS_CLRWRITEBUF_Min (0x1UL) /*!< Min enumerator value of TASKS_CLRWRITEBUF field.          */
  #define RRAMC_TASKS_CLRWRITEBUF_TASKS_CLRWRITEBUF_Max (0x1UL) /*!< Max enumerator value of TASKS_CLRWRITEBUF field.          */
  #define RRAMC_TASKS_CLRWRITEBUF_TASKS_CLRWRITEBUF_Trigger (0x1UL) /*!< Trigger task                                          */


/* RRAMC_TASKS_COMMITWRITEBUF: Commits the data stored in internal write-buffer to RRAM */
  #define RRAMC_TASKS_COMMITWRITEBUF_ResetValue (0x00000000UL) /*!< Reset value of TASKS_COMMITWRITEBUF register.              */

/* TASKS_COMMITWRITEBUF @Bit 0 : Commits the data stored in internal write-buffer to RRAM */
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Pos (0UL) /*!< Position of TASKS_COMMITWRITEBUF field.               */
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Msk (0x1UL << RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Pos)
                                                                            /*!< Bit mask of TASKS_COMMITWRITEBUF field.*/
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Min (0x1UL) /*!< Min enumerator value of TASKS_COMMITWRITEBUF field. */
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Max (0x1UL) /*!< Max enumerator value of TASKS_COMMITWRITEBUF field. */
  #define RRAMC_TASKS_COMMITWRITEBUF_TASKS_COMMITWRITEBUF_Trigger (0x1UL) /*!< Trigger task                                    */


/* RRAMC_SUBSCRIBE_WAKEUP: Subscribe configuration for task WAKEUP */
  #define RRAMC_SUBSCRIBE_WAKEUP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_WAKEUP register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task WAKEUP will subscribe to */
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Msk (0xFFUL << RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define RRAMC_SUBSCRIBE_WAKEUP_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Msk (0x1UL << RRAMC_SUBSCRIBE_WAKEUP_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define RRAMC_SUBSCRIBE_WAKEUP_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* RRAMC_SUBSCRIBE_CLRWRITEBUF: Subscribe configuration for task CLRWRITEBUF */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CLRWRITEBUF register.            */

/* CHIDX @Bits 0..7 : DPPI channel that task CLRWRITEBUF will subscribe to */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_CHIDX_Msk (0xFFUL << RRAMC_SUBSCRIBE_CLRWRITEBUF_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Msk (0x1UL << RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Pos) /*!< Bit mask of EN field.          */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define RRAMC_SUBSCRIBE_CLRWRITEBUF_EN_Enabled (0x1UL) /*!< Enable subscription                                              */


/* RRAMC_SUBSCRIBE_COMMITWRITEBUF: Subscribe configuration for task COMMITWRITEBUF */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_COMMITWRITEBUF register.      */

/* CHIDX @Bits 0..7 : DPPI channel that task COMMITWRITEBUF will subscribe to */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                         */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Msk (0xFFUL << RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                     */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                      */

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Pos (31UL) /*!< Position of EN field.                                              */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Msk (0x1UL << RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Pos) /*!< Bit mask of EN field.    */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                 */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                 */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Disabled (0x0UL) /*!< Disable subscription                                         */
  #define RRAMC_SUBSCRIBE_COMMITWRITEBUF_EN_Enabled (0x1UL) /*!< Enable subscription                                           */


/* RRAMC_EVENTS_WOKENUP: RRAMC is woken up from low power mode */
  #define RRAMC_EVENTS_WOKENUP_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_WOKENUP register.                          */

/* EVENTS_WOKENUP @Bit 0 : RRAMC is woken up from low power mode */
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Pos (0UL) /*!< Position of EVENTS_WOKENUP field.                                 */
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Msk (0x1UL << RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Pos) /*!< Bit mask of
                                                                            EVENTS_WOKENUP field.*/
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Min (0x0UL) /*!< Min enumerator value of EVENTS_WOKENUP field.                   */
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Max (0x1UL) /*!< Max enumerator value of EVENTS_WOKENUP field.                   */
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define RRAMC_EVENTS_WOKENUP_EVENTS_WOKENUP_Generated (0x1UL) /*!< Event generated                                           */


/* RRAMC_EVENTS_READY: RRAMC is ready */
  #define RRAMC_EVENTS_READY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_READY register.                              */

/* EVENTS_READY @Bit 0 : RRAMC is ready */
  #define RRAMC_EVENTS_READY_EVENTS_READY_Pos (0UL)  /*!< Position of EVENTS_READY field.                                      */
  #define RRAMC_EVENTS_READY_EVENTS_READY_Msk (0x1UL << RRAMC_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY
                                                                            field.*/
  #define RRAMC_EVENTS_READY_EVENTS_READY_Min (0x0UL) /*!< Min enumerator value of EVENTS_READY field.                         */
  #define RRAMC_EVENTS_READY_EVENTS_READY_Max (0x1UL) /*!< Max enumerator value of EVENTS_READY field.                         */
  #define RRAMC_EVENTS_READY_EVENTS_READY_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define RRAMC_EVENTS_READY_EVENTS_READY_Generated (0x1UL) /*!< Event generated                                               */


/* RRAMC_EVENTS_READYNEXT: Ready to accept a new write operation */
  #define RRAMC_EVENTS_READYNEXT_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_READYNEXT register.                      */

/* EVENTS_READYNEXT @Bit 0 : Ready to accept a new write operation */
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Pos (0UL) /*!< Position of EVENTS_READYNEXT field.                           */
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Msk (0x1UL << RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Pos) /*!< Bit mask of
                                                                            EVENTS_READYNEXT field.*/
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Min (0x0UL) /*!< Min enumerator value of EVENTS_READYNEXT field.             */
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Max (0x1UL) /*!< Max enumerator value of EVENTS_READYNEXT field.             */
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define RRAMC_EVENTS_READYNEXT_EVENTS_READYNEXT_Generated (0x1UL) /*!< Event generated                                       */


/* RRAMC_EVENTS_ACCESSERROR: RRAM access error */
  #define RRAMC_EVENTS_ACCESSERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ACCESSERROR register.                  */

/* EVENTS_ACCESSERROR @Bit 0 : RRAM access error */
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Pos (0UL) /*!< Position of EVENTS_ACCESSERROR field.                     */
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Msk (0x1UL << RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Pos) /*!< Bit
                                                                            mask of EVENTS_ACCESSERROR field.*/
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_ACCESSERROR field.       */
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_ACCESSERROR field.       */
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_NotGenerated (0x0UL) /*!< Event not generated                            */
  #define RRAMC_EVENTS_ACCESSERROR_EVENTS_ACCESSERROR_Generated (0x1UL) /*!< Event generated                                   */


/* RRAMC_PUBLISH_WOKENUP: Publish configuration for event WOKENUP */
  #define RRAMC_PUBLISH_WOKENUP_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_WOKENUP register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event WOKENUP will publish to */
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Msk (0xFFUL << RRAMC_PUBLISH_WOKENUP_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define RRAMC_PUBLISH_WOKENUP_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define RRAMC_PUBLISH_WOKENUP_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define RRAMC_PUBLISH_WOKENUP_EN_Msk (0x1UL << RRAMC_PUBLISH_WOKENUP_EN_Pos) /*!< Bit mask of EN field.                      */
  #define RRAMC_PUBLISH_WOKENUP_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define RRAMC_PUBLISH_WOKENUP_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define RRAMC_PUBLISH_WOKENUP_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define RRAMC_PUBLISH_WOKENUP_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* RRAMC_INTEN: Enable or disable interrupt */
  #define RRAMC_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* WOKENUP @Bit 0 : Enable or disable interrupt for event WOKENUP */
  #define RRAMC_INTEN_WOKENUP_Pos (0UL)              /*!< Position of WOKENUP field.                                           */
  #define RRAMC_INTEN_WOKENUP_Msk (0x1UL << RRAMC_INTEN_WOKENUP_Pos) /*!< Bit mask of WOKENUP field.                           */
  #define RRAMC_INTEN_WOKENUP_Min (0x0UL)            /*!< Min enumerator value of WOKENUP field.                               */
  #define RRAMC_INTEN_WOKENUP_Max (0x1UL)            /*!< Max enumerator value of WOKENUP field.                               */
  #define RRAMC_INTEN_WOKENUP_Disabled (0x0UL)       /*!< Disable                                                              */
  #define RRAMC_INTEN_WOKENUP_Enabled (0x1UL)        /*!< Enable                                                               */

/* READY @Bit 1 : Enable or disable interrupt for event READY */
  #define RRAMC_INTEN_READY_Pos (1UL)                /*!< Position of READY field.                                             */
  #define RRAMC_INTEN_READY_Msk (0x1UL << RRAMC_INTEN_READY_Pos) /*!< Bit mask of READY field.                                 */
  #define RRAMC_INTEN_READY_Min (0x0UL)              /*!< Min enumerator value of READY field.                                 */
  #define RRAMC_INTEN_READY_Max (0x1UL)              /*!< Max enumerator value of READY field.                                 */
  #define RRAMC_INTEN_READY_Disabled (0x0UL)         /*!< Disable                                                              */
  #define RRAMC_INTEN_READY_Enabled (0x1UL)          /*!< Enable                                                               */

/* READYNEXT @Bit 2 : Enable or disable interrupt for event READYNEXT */
  #define RRAMC_INTEN_READYNEXT_Pos (2UL)            /*!< Position of READYNEXT field.                                         */
  #define RRAMC_INTEN_READYNEXT_Msk (0x1UL << RRAMC_INTEN_READYNEXT_Pos) /*!< Bit mask of READYNEXT field.                     */
  #define RRAMC_INTEN_READYNEXT_Min (0x0UL)          /*!< Min enumerator value of READYNEXT field.                             */
  #define RRAMC_INTEN_READYNEXT_Max (0x1UL)          /*!< Max enumerator value of READYNEXT field.                             */
  #define RRAMC_INTEN_READYNEXT_Disabled (0x0UL)     /*!< Disable                                                              */
  #define RRAMC_INTEN_READYNEXT_Enabled (0x1UL)      /*!< Enable                                                               */

/* ACCESSERROR @Bit 3 : Enable or disable interrupt for event ACCESSERROR */
  #define RRAMC_INTEN_ACCESSERROR_Pos (3UL)          /*!< Position of ACCESSERROR field.                                       */
  #define RRAMC_INTEN_ACCESSERROR_Msk (0x1UL << RRAMC_INTEN_ACCESSERROR_Pos) /*!< Bit mask of ACCESSERROR field.               */
  #define RRAMC_INTEN_ACCESSERROR_Min (0x0UL)        /*!< Min enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTEN_ACCESSERROR_Max (0x1UL)        /*!< Max enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTEN_ACCESSERROR_Disabled (0x0UL)   /*!< Disable                                                              */
  #define RRAMC_INTEN_ACCESSERROR_Enabled (0x1UL)    /*!< Enable                                                               */


/* RRAMC_INTENSET: Enable interrupt */
  #define RRAMC_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* WOKENUP @Bit 0 : Write '1' to enable interrupt for event WOKENUP */
  #define RRAMC_INTENSET_WOKENUP_Pos (0UL)           /*!< Position of WOKENUP field.                                           */
  #define RRAMC_INTENSET_WOKENUP_Msk (0x1UL << RRAMC_INTENSET_WOKENUP_Pos) /*!< Bit mask of WOKENUP field.                     */
  #define RRAMC_INTENSET_WOKENUP_Min (0x0UL)         /*!< Min enumerator value of WOKENUP field.                               */
  #define RRAMC_INTENSET_WOKENUP_Max (0x1UL)         /*!< Max enumerator value of WOKENUP field.                               */
  #define RRAMC_INTENSET_WOKENUP_Set (0x1UL)         /*!< Enable                                                               */
  #define RRAMC_INTENSET_WOKENUP_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RRAMC_INTENSET_WOKENUP_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* READY @Bit 1 : Write '1' to enable interrupt for event READY */
  #define RRAMC_INTENSET_READY_Pos (1UL)             /*!< Position of READY field.                                             */
  #define RRAMC_INTENSET_READY_Msk (0x1UL << RRAMC_INTENSET_READY_Pos) /*!< Bit mask of READY field.                           */
  #define RRAMC_INTENSET_READY_Min (0x0UL)           /*!< Min enumerator value of READY field.                                 */
  #define RRAMC_INTENSET_READY_Max (0x1UL)           /*!< Max enumerator value of READY field.                                 */
  #define RRAMC_INTENSET_READY_Set (0x1UL)           /*!< Enable                                                               */
  #define RRAMC_INTENSET_READY_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define RRAMC_INTENSET_READY_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* READYNEXT @Bit 2 : Write '1' to enable interrupt for event READYNEXT */
  #define RRAMC_INTENSET_READYNEXT_Pos (2UL)         /*!< Position of READYNEXT field.                                         */
  #define RRAMC_INTENSET_READYNEXT_Msk (0x1UL << RRAMC_INTENSET_READYNEXT_Pos) /*!< Bit mask of READYNEXT field.               */
  #define RRAMC_INTENSET_READYNEXT_Min (0x0UL)       /*!< Min enumerator value of READYNEXT field.                             */
  #define RRAMC_INTENSET_READYNEXT_Max (0x1UL)       /*!< Max enumerator value of READYNEXT field.                             */
  #define RRAMC_INTENSET_READYNEXT_Set (0x1UL)       /*!< Enable                                                               */
  #define RRAMC_INTENSET_READYNEXT_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RRAMC_INTENSET_READYNEXT_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ACCESSERROR @Bit 3 : Write '1' to enable interrupt for event ACCESSERROR */
  #define RRAMC_INTENSET_ACCESSERROR_Pos (3UL)       /*!< Position of ACCESSERROR field.                                       */
  #define RRAMC_INTENSET_ACCESSERROR_Msk (0x1UL << RRAMC_INTENSET_ACCESSERROR_Pos) /*!< Bit mask of ACCESSERROR field.         */
  #define RRAMC_INTENSET_ACCESSERROR_Min (0x0UL)     /*!< Min enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTENSET_ACCESSERROR_Max (0x1UL)     /*!< Max enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTENSET_ACCESSERROR_Set (0x1UL)     /*!< Enable                                                               */
  #define RRAMC_INTENSET_ACCESSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RRAMC_INTENSET_ACCESSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* RRAMC_INTENCLR: Disable interrupt */
  #define RRAMC_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* WOKENUP @Bit 0 : Write '1' to disable interrupt for event WOKENUP */
  #define RRAMC_INTENCLR_WOKENUP_Pos (0UL)           /*!< Position of WOKENUP field.                                           */
  #define RRAMC_INTENCLR_WOKENUP_Msk (0x1UL << RRAMC_INTENCLR_WOKENUP_Pos) /*!< Bit mask of WOKENUP field.                     */
  #define RRAMC_INTENCLR_WOKENUP_Min (0x0UL)         /*!< Min enumerator value of WOKENUP field.                               */
  #define RRAMC_INTENCLR_WOKENUP_Max (0x1UL)         /*!< Max enumerator value of WOKENUP field.                               */
  #define RRAMC_INTENCLR_WOKENUP_Clear (0x1UL)       /*!< Disable                                                              */
  #define RRAMC_INTENCLR_WOKENUP_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define RRAMC_INTENCLR_WOKENUP_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* READY @Bit 1 : Write '1' to disable interrupt for event READY */
  #define RRAMC_INTENCLR_READY_Pos (1UL)             /*!< Position of READY field.                                             */
  #define RRAMC_INTENCLR_READY_Msk (0x1UL << RRAMC_INTENCLR_READY_Pos) /*!< Bit mask of READY field.                           */
  #define RRAMC_INTENCLR_READY_Min (0x0UL)           /*!< Min enumerator value of READY field.                                 */
  #define RRAMC_INTENCLR_READY_Max (0x1UL)           /*!< Max enumerator value of READY field.                                 */
  #define RRAMC_INTENCLR_READY_Clear (0x1UL)         /*!< Disable                                                              */
  #define RRAMC_INTENCLR_READY_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define RRAMC_INTENCLR_READY_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* READYNEXT @Bit 2 : Write '1' to disable interrupt for event READYNEXT */
  #define RRAMC_INTENCLR_READYNEXT_Pos (2UL)         /*!< Position of READYNEXT field.                                         */
  #define RRAMC_INTENCLR_READYNEXT_Msk (0x1UL << RRAMC_INTENCLR_READYNEXT_Pos) /*!< Bit mask of READYNEXT field.               */
  #define RRAMC_INTENCLR_READYNEXT_Min (0x0UL)       /*!< Min enumerator value of READYNEXT field.                             */
  #define RRAMC_INTENCLR_READYNEXT_Max (0x1UL)       /*!< Max enumerator value of READYNEXT field.                             */
  #define RRAMC_INTENCLR_READYNEXT_Clear (0x1UL)     /*!< Disable                                                              */
  #define RRAMC_INTENCLR_READYNEXT_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define RRAMC_INTENCLR_READYNEXT_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* ACCESSERROR @Bit 3 : Write '1' to disable interrupt for event ACCESSERROR */
  #define RRAMC_INTENCLR_ACCESSERROR_Pos (3UL)       /*!< Position of ACCESSERROR field.                                       */
  #define RRAMC_INTENCLR_ACCESSERROR_Msk (0x1UL << RRAMC_INTENCLR_ACCESSERROR_Pos) /*!< Bit mask of ACCESSERROR field.         */
  #define RRAMC_INTENCLR_ACCESSERROR_Min (0x0UL)     /*!< Min enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTENCLR_ACCESSERROR_Max (0x1UL)     /*!< Max enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTENCLR_ACCESSERROR_Clear (0x1UL)   /*!< Disable                                                              */
  #define RRAMC_INTENCLR_ACCESSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define RRAMC_INTENCLR_ACCESSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                        */


/* RRAMC_INTPEND: Pending interrupts */
  #define RRAMC_INTPEND_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND register.                                     */

/* WOKENUP @Bit 0 : Read pending status of interrupt for event WOKENUP */
  #define RRAMC_INTPEND_WOKENUP_Pos (0UL)            /*!< Position of WOKENUP field.                                           */
  #define RRAMC_INTPEND_WOKENUP_Msk (0x1UL << RRAMC_INTPEND_WOKENUP_Pos) /*!< Bit mask of WOKENUP field.                       */
  #define RRAMC_INTPEND_WOKENUP_Min (0x0UL)          /*!< Min enumerator value of WOKENUP field.                               */
  #define RRAMC_INTPEND_WOKENUP_Max (0x1UL)          /*!< Max enumerator value of WOKENUP field.                               */
  #define RRAMC_INTPEND_WOKENUP_NotPending (0x0UL)   /*!< Read: Not pending                                                    */
  #define RRAMC_INTPEND_WOKENUP_Pending (0x1UL)      /*!< Read: Pending                                                        */

/* READY @Bit 1 : Read pending status of interrupt for event READY */
  #define RRAMC_INTPEND_READY_Pos (1UL)              /*!< Position of READY field.                                             */
  #define RRAMC_INTPEND_READY_Msk (0x1UL << RRAMC_INTPEND_READY_Pos) /*!< Bit mask of READY field.                             */
  #define RRAMC_INTPEND_READY_Min (0x0UL)            /*!< Min enumerator value of READY field.                                 */
  #define RRAMC_INTPEND_READY_Max (0x1UL)            /*!< Max enumerator value of READY field.                                 */
  #define RRAMC_INTPEND_READY_NotPending (0x0UL)     /*!< Read: Not pending                                                    */
  #define RRAMC_INTPEND_READY_Pending (0x1UL)        /*!< Read: Pending                                                        */

/* READYNEXT @Bit 2 : Read pending status of interrupt for event READYNEXT */
  #define RRAMC_INTPEND_READYNEXT_Pos (2UL)          /*!< Position of READYNEXT field.                                         */
  #define RRAMC_INTPEND_READYNEXT_Msk (0x1UL << RRAMC_INTPEND_READYNEXT_Pos) /*!< Bit mask of READYNEXT field.                 */
  #define RRAMC_INTPEND_READYNEXT_Min (0x0UL)        /*!< Min enumerator value of READYNEXT field.                             */
  #define RRAMC_INTPEND_READYNEXT_Max (0x1UL)        /*!< Max enumerator value of READYNEXT field.                             */
  #define RRAMC_INTPEND_READYNEXT_NotPending (0x0UL) /*!< Read: Not pending                                                    */
  #define RRAMC_INTPEND_READYNEXT_Pending (0x1UL)    /*!< Read: Pending                                                        */

/* ACCESSERROR @Bit 3 : Read pending status of interrupt for event ACCESSERROR */
  #define RRAMC_INTPEND_ACCESSERROR_Pos (3UL)        /*!< Position of ACCESSERROR field.                                       */
  #define RRAMC_INTPEND_ACCESSERROR_Msk (0x1UL << RRAMC_INTPEND_ACCESSERROR_Pos) /*!< Bit mask of ACCESSERROR field.           */
  #define RRAMC_INTPEND_ACCESSERROR_Min (0x0UL)      /*!< Min enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTPEND_ACCESSERROR_Max (0x1UL)      /*!< Max enumerator value of ACCESSERROR field.                           */
  #define RRAMC_INTPEND_ACCESSERROR_NotPending (0x0UL) /*!< Read: Not pending                                                  */
  #define RRAMC_INTPEND_ACCESSERROR_Pending (0x1UL)  /*!< Read: Pending                                                        */


/* RRAMC_READY: RRAMC ready status */
  #define RRAMC_READY_ResetValue (0x00000000UL)      /*!< Reset value of READY register.                                       */

/* READY @Bit 0 : RRAMC is ready or busy */
  #define RRAMC_READY_READY_Pos (0UL)                /*!< Position of READY field.                                             */
  #define RRAMC_READY_READY_Msk (0x1UL << RRAMC_READY_READY_Pos) /*!< Bit mask of READY field.                                 */
  #define RRAMC_READY_READY_Min (0x0UL)              /*!< Min enumerator value of READY field.                                 */
  #define RRAMC_READY_READY_Max (0x1UL)              /*!< Max enumerator value of READY field.                                 */
  #define RRAMC_READY_READY_Busy (0x0UL)             /*!< RRAMC is busy                                                        */
  #define RRAMC_READY_READY_Ready (0x1UL)            /*!< The current RRAMC operation is completed and RRAMC is ready          */


/* RRAMC_READYNEXT: Ready next flag */
  #define RRAMC_READYNEXT_ResetValue (0x00000000UL)  /*!< Reset value of READYNEXT register.                                   */

/* READYNEXT @Bit 0 : RRAMC can accept a new write operation */
  #define RRAMC_READYNEXT_READYNEXT_Pos (0UL)        /*!< Position of READYNEXT field.                                         */
  #define RRAMC_READYNEXT_READYNEXT_Msk (0x1UL << RRAMC_READYNEXT_READYNEXT_Pos) /*!< Bit mask of READYNEXT field.             */
  #define RRAMC_READYNEXT_READYNEXT_Min (0x0UL)      /*!< Min enumerator value of READYNEXT field.                             */
  #define RRAMC_READYNEXT_READYNEXT_Max (0x1UL)      /*!< Max enumerator value of READYNEXT field.                             */
  #define RRAMC_READYNEXT_READYNEXT_Busy (0x0UL)     /*!< RRAMC cannot accept any write operation now                          */
  #define RRAMC_READYNEXT_READYNEXT_Ready (0x1UL)    /*!< RRAMC is ready to accept a new write operation                       */


/* RRAMC_ACCESSERRORADDR: Address of the first access error */
  #define RRAMC_ACCESSERRORADDR_ResetValue (0x00FFFFFFUL) /*!< Reset value of ACCESSERRORADDR register.                        */

/* ADDRESS @Bits 0..31 : Access error address */
  #define RRAMC_ACCESSERRORADDR_ADDRESS_Pos (0UL)    /*!< Position of ADDRESS field.                                           */
  #define RRAMC_ACCESSERRORADDR_ADDRESS_Msk (0xFFFFFFFFUL << RRAMC_ACCESSERRORADDR_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.*/


/* RRAMC_CONFIG: Configuration register */
  #define RRAMC_CONFIG_ResetValue (0x00000000UL)     /*!< Reset value of CONFIG register.                                      */

/* WEN @Bit 0 : Write enable */
  #define RRAMC_CONFIG_WEN_Pos (0UL)                 /*!< Position of WEN field.                                               */
  #define RRAMC_CONFIG_WEN_Msk (0x1UL << RRAMC_CONFIG_WEN_Pos) /*!< Bit mask of WEN field.                                     */
  #define RRAMC_CONFIG_WEN_Min (0x0UL)               /*!< Min enumerator value of WEN field.                                   */
  #define RRAMC_CONFIG_WEN_Max (0x1UL)               /*!< Max enumerator value of WEN field.                                   */
  #define RRAMC_CONFIG_WEN_Disabled (0x0UL)          /*!< Write is disabled                                                    */
  #define RRAMC_CONFIG_WEN_Enabled (0x1UL)           /*!< Write is enabled                                                     */

/* WRITEBUFSIZE @Bits 8..13 : write-buffer size in number of 128-bit words */
  #define RRAMC_CONFIG_WRITEBUFSIZE_Pos (8UL)        /*!< Position of WRITEBUFSIZE field.                                      */
  #define RRAMC_CONFIG_WRITEBUFSIZE_Msk (0x3FUL << RRAMC_CONFIG_WRITEBUFSIZE_Pos) /*!< Bit mask of WRITEBUFSIZE field.         */
  #define RRAMC_CONFIG_WRITEBUFSIZE_Min (0x00UL)     /*!< Min value of WRITEBUFSIZE field.                                     */
  #define RRAMC_CONFIG_WRITEBUFSIZE_Max (0x08UL)     /*!< Max size of WRITEBUFSIZE field.                                      */
  #define RRAMC_CONFIG_WRITEBUFSIZE_Unbuffered (0x00UL) /*!< Disable buffering                                                 */


/* RRAMC_READYNEXTTIMEOUT: Configuration for ready next timeout counter, in units of AXI clock frequency */
  #define RRAMC_READYNEXTTIMEOUT_ResetValue (0x00000080UL) /*!< Reset value of READYNEXTTIMEOUT register.                      */

/* VALUE @Bits 0..11 : Preload value for waiting for a next write */
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Pos (0UL)     /*!< Position of VALUE field.                                             */
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Msk (0xFFFUL << RRAMC_READYNEXTTIMEOUT_VALUE_Pos) /*!< Bit mask of VALUE field.         */
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Min (0x000UL) /*!< Min value of VALUE field.                                            */
  #define RRAMC_READYNEXTTIMEOUT_VALUE_Max (0xFFFUL) /*!< Max size of VALUE field.                                             */

/* EN @Bit 31 : Enable ready next timeout */
  #define RRAMC_READYNEXTTIMEOUT_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define RRAMC_READYNEXTTIMEOUT_EN_Msk (0x1UL << RRAMC_READYNEXTTIMEOUT_EN_Pos) /*!< Bit mask of EN field.                    */
  #define RRAMC_READYNEXTTIMEOUT_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define RRAMC_READYNEXTTIMEOUT_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define RRAMC_READYNEXTTIMEOUT_EN_Disable (0x0UL)  /*!< Disable ready next timeout                                           */
  #define RRAMC_READYNEXTTIMEOUT_EN_Enable (0x1UL)   /*!< Enable ready next timeout                                            */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SAADC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================= Struct SAADC_EVENTS_CH ================================================== */
/**
  * @brief EVENTS_CH [SAADC_EVENTS_CH] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  LIMITH;                            /*!< (@ 0x00000000) Last results is equal or above CH[n].LIMIT.HIGH       */
  __IOM uint32_t  LIMITL;                            /*!< (@ 0x00000004) Last results is equal or below CH[n].LIMIT.LOW        */
} NRF_SAADC_EVENTS_CH_Type;                          /*!< Size = 8 (0x008)                                                     */
  #define SAADC_EVENTS_CH_MaxCount (8UL)             /*!< Size of EVENTS_CH[8] array.                                          */
  #define SAADC_EVENTS_CH_MaxIndex (7UL)             /*!< Max index of EVENTS_CH[8] array.                                     */
  #define SAADC_EVENTS_CH_MinIndex (0UL)             /*!< Min index of EVENTS_CH[8] array.                                     */

/* SAADC_EVENTS_CH_LIMITH: Last results is equal or above CH[n].LIMIT.HIGH */
  #define SAADC_EVENTS_CH_LIMITH_ResetValue (0x00000000UL) /*!< Reset value of LIMITH register.                                */

/* LIMITH @Bit 0 : Last results is equal or above CH[n].LIMIT.HIGH */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Pos (0UL)    /*!< Position of LIMITH field.                                            */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Msk (0x1UL << SAADC_EVENTS_CH_LIMITH_LIMITH_Pos) /*!< Bit mask of LIMITH field.        */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Min (0x0UL)  /*!< Min enumerator value of LIMITH field.                                */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Max (0x1UL)  /*!< Max enumerator value of LIMITH field.                                */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define SAADC_EVENTS_CH_LIMITH_LIMITH_Generated (0x1UL) /*!< Event generated                                                 */


/* SAADC_EVENTS_CH_LIMITL: Last results is equal or below CH[n].LIMIT.LOW */
  #define SAADC_EVENTS_CH_LIMITL_ResetValue (0x00000000UL) /*!< Reset value of LIMITL register.                                */

/* LIMITL @Bit 0 : Last results is equal or below CH[n].LIMIT.LOW */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Pos (0UL)    /*!< Position of LIMITL field.                                            */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Msk (0x1UL << SAADC_EVENTS_CH_LIMITL_LIMITL_Pos) /*!< Bit mask of LIMITL field.        */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Min (0x0UL)  /*!< Min enumerator value of LIMITL field.                                */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Max (0x1UL)  /*!< Max enumerator value of LIMITL field.                                */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define SAADC_EVENTS_CH_LIMITL_LIMITL_Generated (0x1UL) /*!< Event generated                                                 */



/* ================================================= Struct SAADC_PUBLISH_CH ================================================= */
/**
  * @brief PUBLISH_CH [SAADC_PUBLISH_CH] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  LIMITH;                            /*!< (@ 0x00000000) Publish configuration for event CH[n].LIMITH          */
  __IOM uint32_t  LIMITL;                            /*!< (@ 0x00000004) Publish configuration for event CH[n].LIMITL          */
} NRF_SAADC_PUBLISH_CH_Type;                         /*!< Size = 8 (0x008)                                                     */
  #define SAADC_PUBLISH_CH_MaxCount (8UL)            /*!< Size of PUBLISH_CH[8] array.                                         */
  #define SAADC_PUBLISH_CH_MaxIndex (7UL)            /*!< Max index of PUBLISH_CH[8] array.                                    */
  #define SAADC_PUBLISH_CH_MinIndex (0UL)            /*!< Min index of PUBLISH_CH[8] array.                                    */

/* SAADC_PUBLISH_CH_LIMITH: Publish configuration for event CH[n].LIMITH */
  #define SAADC_PUBLISH_CH_LIMITH_ResetValue (0x00000000UL) /*!< Reset value of LIMITH register.                               */

/* CHIDX @Bits 0..7 : DPPI channel that event CH[n].LIMITH will publish to */
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define SAADC_PUBLISH_CH_LIMITH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITH_EN_Pos) /*!< Bit mask of EN field.                  */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define SAADC_PUBLISH_CH_LIMITH_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* SAADC_PUBLISH_CH_LIMITL: Publish configuration for event CH[n].LIMITL */
  #define SAADC_PUBLISH_CH_LIMITL_ResetValue (0x00000000UL) /*!< Reset value of LIMITL register.                               */

/* CHIDX @Bits 0..7 : DPPI channel that event CH[n].LIMITL will publish to */
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define SAADC_PUBLISH_CH_LIMITL_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITL_EN_Pos) /*!< Bit mask of EN field.                  */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define SAADC_PUBLISH_CH_LIMITL_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */



/* ===================================================== Struct SAADC_CH ===================================================== */
/**
  * @brief CH [SAADC_CH] (unspecified)
  */
typedef struct {
  __IOM uint32_t  PSELP;                             /*!< (@ 0x00000000) Input positive pin selection for CH[n]                */
  __IOM uint32_t  PSELN;                             /*!< (@ 0x00000004) Input negative pin selection for CH[n]                */
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000008) Input configuration for CH[n]                         */
  __IOM uint32_t  LIMIT;                             /*!< (@ 0x0000000C) High/low limits for event monitoring a channel        */
} NRF_SAADC_CH_Type;                                 /*!< Size = 16 (0x010)                                                    */
  #define SAADC_CH_MaxCount (8UL)                    /*!< Size of CH[8] array.                                                 */
  #define SAADC_CH_MaxIndex (7UL)                    /*!< Max index of CH[8] array.                                            */
  #define SAADC_CH_MinIndex (0UL)                    /*!< Min index of CH[8] array.                                            */

/* SAADC_CH_PSELP: Input positive pin selection for CH[n] */
  #define SAADC_CH_PSELP_ResetValue (0x00000000UL)   /*!< Reset value of PSELP register.                                       */

/* PIN @Bits 0..4 : GPIO pin selection. */
  #define SAADC_CH_PSELP_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define SAADC_CH_PSELP_PIN_Msk (0x1FUL << SAADC_CH_PSELP_PIN_Pos) /*!< Bit mask of PIN field.                                */

/* PORT @Bits 8..11 : GPIO port selection */
  #define SAADC_CH_PSELP_PORT_Pos (8UL)              /*!< Position of PORT field.                                              */
  #define SAADC_CH_PSELP_PORT_Msk (0xFUL << SAADC_CH_PSELP_PORT_Pos) /*!< Bit mask of PORT field.                              */

/* INTERNAL @Bits 12..14 : Internal input selection for analog positive input when CH[n].PSELP.CONNECT = Internal */
  #define SAADC_CH_PSELP_INTERNAL_Pos (12UL)         /*!< Position of INTERNAL field.                                          */
  #define SAADC_CH_PSELP_INTERNAL_Msk (0x7UL << SAADC_CH_PSELP_INTERNAL_Pos) /*!< Bit mask of INTERNAL field.                  */
  #define SAADC_CH_PSELP_INTERNAL_Min (0x1UL)        /*!< Min enumerator value of INTERNAL field.                              */
  #define SAADC_CH_PSELP_INTERNAL_Max (0x4UL)        /*!< Max enumerator value of INTERNAL field.                              */
  #define SAADC_CH_PSELP_INTERNAL_VddL (0x1UL)       /*!< Connected to VDDL                                                    */
  #define SAADC_CH_PSELP_INTERNAL_Vss (0x4UL)        /*!< (unspecified)                                                        */

/* CONNECT @Bits 30..31 : Connection */
  #define SAADC_CH_PSELP_CONNECT_Pos (30UL)          /*!< Position of CONNECT field.                                           */
  #define SAADC_CH_PSELP_CONNECT_Msk (0x3UL << SAADC_CH_PSELP_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define SAADC_CH_PSELP_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define SAADC_CH_PSELP_CONNECT_Max (0x2UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define SAADC_CH_PSELP_CONNECT_NC (0x0UL)          /*!< Not connected                                                        */
  #define SAADC_CH_PSELP_CONNECT_AnalogInput (0x1UL) /*!< Select analog input                                                  */
  #define SAADC_CH_PSELP_CONNECT_Internal (0x2UL)    /*!< Selects internal inputs.                                             */


/* SAADC_CH_PSELN: Input negative pin selection for CH[n] */
  #define SAADC_CH_PSELN_ResetValue (0x00000000UL)   /*!< Reset value of PSELN register.                                       */

/* PIN @Bits 0..4 : GPIO pin selection. */
  #define SAADC_CH_PSELN_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define SAADC_CH_PSELN_PIN_Msk (0x1FUL << SAADC_CH_PSELN_PIN_Pos) /*!< Bit mask of PIN field.                                */

/* PORT @Bits 8..11 : GPIO Port selection */
  #define SAADC_CH_PSELN_PORT_Pos (8UL)              /*!< Position of PORT field.                                              */
  #define SAADC_CH_PSELN_PORT_Msk (0xFUL << SAADC_CH_PSELN_PORT_Pos) /*!< Bit mask of PORT field.                              */

/* INTERNAL @Bits 12..14 : Internal input selection for Analog negative input when CH[n].PSELN.CONNECT = Internal */
  #define SAADC_CH_PSELN_INTERNAL_Pos (12UL)         /*!< Position of INTERNAL field.                                          */
  #define SAADC_CH_PSELN_INTERNAL_Msk (0x7UL << SAADC_CH_PSELN_INTERNAL_Pos) /*!< Bit mask of INTERNAL field.                  */
  #define SAADC_CH_PSELN_INTERNAL_Min (0x0UL)        /*!< Min enumerator value of INTERNAL field.                              */
  #define SAADC_CH_PSELN_INTERNAL_Max (0x4UL)        /*!< Max enumerator value of INTERNAL field.                              */
  #define SAADC_CH_PSELN_INTERNAL_Dvdd (0x0UL)       /*!< Connected to the internal 0.9 V digital supply rail                  */
  #define SAADC_CH_PSELN_INTERNAL_VddL (0x1UL)       /*!< Connected to VDDL                                                    */
  #define SAADC_CH_PSELN_INTERNAL_Vdd (0x2UL)        /*!< Connected to VDD                                                     */
  #define SAADC_CH_PSELN_INTERNAL_Vss (0x4UL)        /*!< (unspecified)                                                        */

/* CONNECT @Bits 30..31 : Connection */
  #define SAADC_CH_PSELN_CONNECT_Pos (30UL)          /*!< Position of CONNECT field.                                           */
  #define SAADC_CH_PSELN_CONNECT_Msk (0x3UL << SAADC_CH_PSELN_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define SAADC_CH_PSELN_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define SAADC_CH_PSELN_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define SAADC_CH_PSELN_CONNECT_NC (0x0UL)          /*!< Not connected                                                        */
  #define SAADC_CH_PSELN_CONNECT_AnalogInput (0x1UL) /*!< Select analog input                                                  */


/* SAADC_CH_CONFIG: Input configuration for CH[n] */
  #define SAADC_CH_CONFIG_ResetValue (0x00020000UL)  /*!< Reset value of CONFIG register.                                      */

/* CHOPPING @Bit 0 : Enable chopping */
  #define SAADC_CH_CONFIG_CHOPPING_Pos (0UL)         /*!< Position of CHOPPING field.                                          */
  #define SAADC_CH_CONFIG_CHOPPING_Msk (0x1UL << SAADC_CH_CONFIG_CHOPPING_Pos) /*!< Bit mask of CHOPPING field.                */
  #define SAADC_CH_CONFIG_CHOPPING_Min (0x0UL)       /*!< Min enumerator value of CHOPPING field.                              */
  #define SAADC_CH_CONFIG_CHOPPING_Max (0x1UL)       /*!< Max enumerator value of CHOPPING field.                              */
  #define SAADC_CH_CONFIG_CHOPPING_Disabled (0x0UL)  /*!< Chopping is disabled                                                 */
  #define SAADC_CH_CONFIG_CHOPPING_Enabled (0x1UL)   /*!< Chopping is enabled                                                  */

/* VREFPLPFDISABLE @Bit 1 : Disable internal reference low pass filter */
  #define SAADC_CH_CONFIG_VREFPLPFDISABLE_Pos (1UL)  /*!< Position of VREFPLPFDISABLE field.                                   */
  #define SAADC_CH_CONFIG_VREFPLPFDISABLE_Msk (0x1UL << SAADC_CH_CONFIG_VREFPLPFDISABLE_Pos) /*!< Bit mask of VREFPLPFDISABLE
                                                                            field.*/

/* HIGHSPEED @Bit 4 : Use bootstrapped switches to enable high speed on input */
  #define SAADC_CH_CONFIG_HIGHSPEED_Pos (4UL)        /*!< Position of HIGHSPEED field.                                         */
  #define SAADC_CH_CONFIG_HIGHSPEED_Msk (0x1UL << SAADC_CH_CONFIG_HIGHSPEED_Pos) /*!< Bit mask of HIGHSPEED field.             */
  #define SAADC_CH_CONFIG_HIGHSPEED_Min (0x0UL)      /*!< Min enumerator value of HIGHSPEED field.                             */
  #define SAADC_CH_CONFIG_HIGHSPEED_Max (0x1UL)      /*!< Max enumerator value of HIGHSPEED field.                             */
  #define SAADC_CH_CONFIG_HIGHSPEED_Disabled (0x0UL) /*!< High speed is disabled                                               */
  #define SAADC_CH_CONFIG_HIGHSPEED_Enabled (0x1UL)  /*!< High speed is enabled                                                */

/* REFSEL @Bits 12..14 : Reference control */
  #define SAADC_CH_CONFIG_REFSEL_Pos (12UL)          /*!< Position of REFSEL field.                                            */
  #define SAADC_CH_CONFIG_REFSEL_Msk (0x7UL << SAADC_CH_CONFIG_REFSEL_Pos) /*!< Bit mask of REFSEL field.                      */
  #define SAADC_CH_CONFIG_REFSEL_Min (0x0UL)         /*!< Min enumerator value of REFSEL field.                                */
  #define SAADC_CH_CONFIG_REFSEL_Max (0x3UL)         /*!< Max enumerator value of REFSEL field.                                */
  #define SAADC_CH_CONFIG_REFSEL_Internal (0x0UL)    /*!< Internal 1.024 V reference                                           */
  #define SAADC_CH_CONFIG_REFSEL_External (0x1UL)    /*!< External reference voltage                                           */
  #define SAADC_CH_CONFIG_REFSEL_VddL (0x2UL)        /*!< Reference given at VDDL                                              */
  #define SAADC_CH_CONFIG_REFSEL_Vdd (0x3UL)         /*!< Reference given at VDD                                               */

/* MODE @Bit 15 : Enable differential mode */
  #define SAADC_CH_CONFIG_MODE_Pos (15UL)            /*!< Position of MODE field.                                              */
  #define SAADC_CH_CONFIG_MODE_Msk (0x1UL << SAADC_CH_CONFIG_MODE_Pos) /*!< Bit mask of MODE field.                            */
  #define SAADC_CH_CONFIG_MODE_Min (0x0UL)           /*!< Min enumerator value of MODE field.                                  */
  #define SAADC_CH_CONFIG_MODE_Max (0x1UL)           /*!< Max enumerator value of MODE field.                                  */
  #define SAADC_CH_CONFIG_MODE_SE (0x0UL)            /*!< Single ended, PSELN will be ignored, negative input to ADC shorted to
                                                          GND*/
  #define SAADC_CH_CONFIG_MODE_Diff (0x1UL)          /*!< Differential                                                         */

/* TACQ @Bits 16..24 : Acquisition time, the time the ADC uses to sample the input voltage. Resulting acquistion time is
                       ((TACQ+1) x 125 ns) */

  #define SAADC_CH_CONFIG_TACQ_Pos (16UL)            /*!< Position of TACQ field.                                              */
  #define SAADC_CH_CONFIG_TACQ_Msk (0x1FFUL << SAADC_CH_CONFIG_TACQ_Pos) /*!< Bit mask of TACQ field.                          */
  #define SAADC_CH_CONFIG_TACQ_Min (0x001UL)         /*!< Min value of TACQ field.                                             */
  #define SAADC_CH_CONFIG_TACQ_Max (0x13FUL)         /*!< Max size of TACQ field.                                              */

/* TCONV @Bits 28..30 : Conversion time. Resulting conversion time is ((TCONV+1) x 250 ns) */
  #define SAADC_CH_CONFIG_TCONV_Pos (28UL)           /*!< Position of TCONV field.                                             */
  #define SAADC_CH_CONFIG_TCONV_Msk (0x7UL << SAADC_CH_CONFIG_TCONV_Pos) /*!< Bit mask of TCONV field.                         */
  #define SAADC_CH_CONFIG_TCONV_Min (0x1UL)          /*!< Min value of TCONV field.                                            */
  #define SAADC_CH_CONFIG_TCONV_Max (0x7UL)          /*!< Max size of TCONV field.                                             */


/* SAADC_CH_LIMIT: High/low limits for event monitoring a channel */
  #define SAADC_CH_LIMIT_ResetValue (0x7FFF8000UL)   /*!< Reset value of LIMIT register.                                       */

/* LOW @Bits 0..15 : Low level limit */
  #define SAADC_CH_LIMIT_LOW_Pos (0UL)               /*!< Position of LOW field.                                               */
  #define SAADC_CH_LIMIT_LOW_Msk (0xFFFFUL << SAADC_CH_LIMIT_LOW_Pos) /*!< Bit mask of LOW field.                              */

/* HIGH @Bits 16..31 : High level limit */
  #define SAADC_CH_LIMIT_HIGH_Pos (16UL)             /*!< Position of HIGH field.                                              */
  #define SAADC_CH_LIMIT_HIGH_Msk (0xFFFFUL << SAADC_CH_LIMIT_HIGH_Pos) /*!< Bit mask of HIGH field.                           */



/* =================================================== Struct SAADC_RESULT =================================================== */
/**
  * @brief RESULT [SAADC_RESULT] RESULT EasyDMA channel
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) Data pointer                                          */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of buffer bytes to transfer            */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of buffer bytes transferred since last START,
                                                                         updated after the END or STOPPED events*/
  __IM  uint32_t  CURRENTAMOUNT;                     /*!< (@ 0x00000010) Number of buffer bytes transferred since last START,
                                                                         continuously updated*/
} NRF_SAADC_RESULT_Type;                             /*!< Size = 20 (0x014)                                                    */

/* SAADC_RESULT_PTR: Data pointer */
  #define SAADC_RESULT_PTR_ResetValue (0x00000000UL) /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..15 : Data pointer */
  #define SAADC_RESULT_PTR_PTR_Pos (0UL)             /*!< Position of PTR field.                                               */
  #define SAADC_RESULT_PTR_PTR_Msk (0xFFFFUL << SAADC_RESULT_PTR_PTR_Pos) /*!< Bit mask of PTR field.                          */


/* SAADC_RESULT_MAXCNT: Maximum number of buffer bytes to transfer */
  #define SAADC_RESULT_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                   */

/* MAXCNT @Bits 0..14 : Maximum number of buffer bytes to transfer */
  #define SAADC_RESULT_MAXCNT_MAXCNT_Pos (0UL)       /*!< Position of MAXCNT field.                                            */
  #define SAADC_RESULT_MAXCNT_MAXCNT_Msk (0x7FFFUL << SAADC_RESULT_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.           */


/* SAADC_RESULT_AMOUNT: Number of buffer bytes transferred since last START, updated after the END or STOPPED events */
  #define SAADC_RESULT_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                   */

/* AMOUNT @Bits 0..14 : Number of buffer bytes transferred since last START, updated after the END or STOPPED events. */
  #define SAADC_RESULT_AMOUNT_AMOUNT_Pos (0UL)       /*!< Position of AMOUNT field.                                            */
  #define SAADC_RESULT_AMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.           */


/* SAADC_RESULT_CURRENTAMOUNT: Number of buffer bytes transferred since last START, continuously updated */
  #define SAADC_RESULT_CURRENTAMOUNT_ResetValue (0x00000000UL) /*!< Reset value of CURRENTAMOUNT register.                     */

/* AMOUNT @Bits 0..14 : Number of buffer bytes transferred since last START, continuously updated. */
  #define SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field.                                           */
  #define SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_CURRENTAMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT
                                                                            field.*/


/* ====================================================== Struct SAADC ======================================================= */
/**
  * @brief Analog to Digital Converter
  */
  typedef struct {                                   /*!< SAADC Structure                                                      */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start the ADC and prepare the result buffer in RAM    */
    __OM uint32_t TASKS_SAMPLE;                      /*!< (@ 0x00000004) Take one ADC sample, if scan is enabled all channels
                                                                         are sampled. This task requires that SAADC has started,
                                                                         i.e. EVENTS_STARTED was set and EVENTS_STOPPED was
                                                                         not.*/
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000008) Stop the ADC and terminate any on-going conversion    */
    __OM uint32_t TASKS_CALIBRATEOFFSET;             /*!< (@ 0x0000000C) Starts offset auto-calibration                        */
    __IM uint32_t RESERVED[28];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_SAMPLE;                 /*!< (@ 0x00000084) Subscribe configuration for task SAMPLE               */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000088) Subscribe configuration for task STOP                 */
    __IOM uint32_t SUBSCRIBE_CALIBRATEOFFSET;        /*!< (@ 0x0000008C) Subscribe configuration for task CALIBRATEOFFSET      */
    __IM uint32_t RESERVED1[28];
    __IOM uint32_t EVENTS_STARTED;                   /*!< (@ 0x00000100) The ADC has started                                   */
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000104) The ADC has filled up the Result buffer               */
    __IOM uint32_t EVENTS_DONE;                      /*!< (@ 0x00000108) A conversion task has been completed. Depending on the
                                                                         mode, multiple conversions might be needed for a result
                                                                         to be transferred to RAM.*/
    __IOM uint32_t EVENTS_RESULTDONE;                /*!< (@ 0x0000010C) A result is ready to get transferred to RAM.          */
    __IOM uint32_t EVENTS_CALIBRATEDONE;             /*!< (@ 0x00000110) Calibration is complete                               */
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000114) The ADC has stopped                                   */
    __IOM NRF_SAADC_EVENTS_CH_Type EVENTS_CH[8];     /*!< (@ 0x00000118) Peripheral events.                                    */
    __IM uint32_t RESERVED2[10];
    __IOM uint32_t PUBLISH_STARTED;                  /*!< (@ 0x00000180) Publish configuration for event STARTED               */
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000184) Publish configuration for event END                   */
    __IOM uint32_t PUBLISH_DONE;                     /*!< (@ 0x00000188) Publish configuration for event DONE                  */
    __IOM uint32_t PUBLISH_RESULTDONE;               /*!< (@ 0x0000018C) Publish configuration for event RESULTDONE            */
    __IOM uint32_t PUBLISH_CALIBRATEDONE;            /*!< (@ 0x00000190) Publish configuration for event CALIBRATEDONE         */
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000194) Publish configuration for event STOPPED               */
    __IOM NRF_SAADC_PUBLISH_CH_Type PUBLISH_CH[8];   /*!< (@ 0x00000198) Publish configuration for events                      */
    __IM uint32_t RESERVED3[74];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED4[61];
    __IM uint32_t STATUS;                            /*!< (@ 0x00000400) Status                                                */
    __IM uint32_t RESERVED5[63];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable or disable ADC                                 */
    __IM uint32_t RESERVED6[3];
    __IOM NRF_SAADC_CH_Type CH[8];                   /*!< (@ 0x00000510) (unspecified)                                         */
    __IM uint32_t RESERVED7[22];
    __IOM uint32_t BURST;                            /*!< (@ 0x000005E8) Enable burst mode                                     */
    __IM uint32_t RESERVED8;
    __IOM uint32_t RESOLUTION;                       /*!< (@ 0x000005F0) Resolution configuration                              */
    __IOM uint32_t OVERSAMPLE;                       /*!< (@ 0x000005F4) Oversampling configuration. OVERSAMPLE should not be
                                                                         combined with SCAN. The RESOLUTION is applied before
                                                                         averaging, thus for high OVERSAMPLE a higher RESOLUTION
                                                                         should be used.*/
    __IOM uint32_t SAMPLERATE;                       /*!< (@ 0x000005F8) Controls normal or continuous sample rate             */
    __IM uint32_t RESERVED9[11];
    __IOM NRF_SAADC_RESULT_Type RESULT;              /*!< (@ 0x00000628) RESULT EasyDMA channel                                */
  } NRF_SAADC_Type;                                  /*!< Size = 1596 (0x63C)                                                  */

/* SAADC_TASKS_START: Start the ADC and prepare the result buffer in RAM */
  #define SAADC_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                */

/* TASKS_START @Bit 0 : Start the ADC and prepare the result buffer in RAM */
  #define SAADC_TASKS_START_TASKS_START_Pos (0UL)    /*!< Position of TASKS_START field.                                       */
  #define SAADC_TASKS_START_TASKS_START_Msk (0x1UL << SAADC_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.   */
  #define SAADC_TASKS_START_TASKS_START_Min (0x1UL)  /*!< Min enumerator value of TASKS_START field.                           */
  #define SAADC_TASKS_START_TASKS_START_Max (0x1UL)  /*!< Max enumerator value of TASKS_START field.                           */
  #define SAADC_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                      */


/* SAADC_TASKS_SAMPLE: Take one ADC sample, if scan is enabled all channels are sampled. This task requires that SAADC has
                        started, i.e. EVENTS_STARTED was set and EVENTS_STOPPED was not. */

  #define SAADC_TASKS_SAMPLE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_SAMPLE register.                              */

/* TASKS_SAMPLE @Bit 0 : Take one ADC sample, if scan is enabled all channels are sampled. This task requires that SAADC has
                         started, i.e. EVENTS_STARTED was set and EVENTS_STOPPED was not. */

  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL)  /*!< Position of TASKS_SAMPLE field.                                      */
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE
                                                                            field.*/
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Min (0x1UL) /*!< Min enumerator value of TASKS_SAMPLE field.                         */
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Max (0x1UL) /*!< Max enumerator value of TASKS_SAMPLE field.                         */
  #define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (0x1UL) /*!< Trigger task                                                    */


/* SAADC_TASKS_STOP: Stop the ADC and terminate any on-going conversion */
  #define SAADC_TASKS_STOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop the ADC and terminate any on-going conversion */
  #define SAADC_TASKS_STOP_TASKS_STOP_Pos (0UL)      /*!< Position of TASKS_STOP field.                                        */
  #define SAADC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SAADC_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.        */
  #define SAADC_TASKS_STOP_TASKS_STOP_Min (0x1UL)    /*!< Min enumerator value of TASKS_STOP field.                            */
  #define SAADC_TASKS_STOP_TASKS_STOP_Max (0x1UL)    /*!< Max enumerator value of TASKS_STOP field.                            */
  #define SAADC_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                        */


/* SAADC_TASKS_CALIBRATEOFFSET: Starts offset auto-calibration */
  #define SAADC_TASKS_CALIBRATEOFFSET_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CALIBRATEOFFSET register.            */

/* TASKS_CALIBRATEOFFSET @Bit 0 : Starts offset auto-calibration */
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos (0UL) /*!< Position of TASKS_CALIBRATEOFFSET field.            */
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Msk (0x1UL << SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos)
                                                                            /*!< Bit mask of TASKS_CALIBRATEOFFSET field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Min (0x1UL) /*!< Min enumerator value of TASKS_CALIBRATEOFFSET
                                                                            field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Max (0x1UL) /*!< Max enumerator value of TASKS_CALIBRATEOFFSET
                                                                            field.*/
  #define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Trigger (0x1UL) /*!< Trigger task                                  */


/* SAADC_SUBSCRIBE_START: Subscribe configuration for task START */
  #define SAADC_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define SAADC_SUBSCRIBE_START_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define SAADC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define SAADC_SUBSCRIBE_START_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define SAADC_SUBSCRIBE_START_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_START_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define SAADC_SUBSCRIBE_START_EN_Msk (0x1UL << SAADC_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                      */
  #define SAADC_SUBSCRIBE_START_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define SAADC_SUBSCRIBE_START_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define SAADC_SUBSCRIBE_START_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define SAADC_SUBSCRIBE_START_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* SAADC_SUBSCRIBE_SAMPLE: Subscribe configuration for task SAMPLE */
  #define SAADC_SUBSCRIBE_SAMPLE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SAMPLE register.                      */

/* CHIDX @Bits 0..7 : DPPI channel that task SAMPLE will subscribe to */
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << SAADC_SUBSCRIBE_SAMPLE_EN_Pos) /*!< Bit mask of EN field.                    */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define SAADC_SUBSCRIBE_SAMPLE_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* SAADC_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define SAADC_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define SAADC_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_STOP_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define SAADC_SUBSCRIBE_STOP_EN_Msk (0x1UL << SAADC_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                        */
  #define SAADC_SUBSCRIBE_STOP_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define SAADC_SUBSCRIBE_STOP_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define SAADC_SUBSCRIBE_STOP_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define SAADC_SUBSCRIBE_STOP_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* SAADC_SUBSCRIBE_CALIBRATEOFFSET: Subscribe configuration for task CALIBRATEOFFSET */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CALIBRATEOFFSET register.    */

/* CHIDX @Bits 0..7 : DPPI channel that task CALIBRATEOFFSET will subscribe to */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                        */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                    */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                     */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos (31UL) /*!< Position of EN field.                                             */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Msk (0x1UL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos) /*!< Bit mask of EN field.  */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Disabled (0x0UL) /*!< Disable subscription                                        */
  #define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Enabled (0x1UL) /*!< Enable subscription                                          */


/* SAADC_EVENTS_STARTED: The ADC has started */
  #define SAADC_EVENTS_STARTED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STARTED register.                          */

/* EVENTS_STARTED @Bit 0 : The ADC has started */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field.                                 */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STARTED field.                   */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STARTED field.                   */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define SAADC_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL) /*!< Event generated                                           */


/* SAADC_EVENTS_END: The ADC has filled up the Result buffer */
  #define SAADC_EVENTS_END_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : The ADC has filled up the Result buffer */
  #define SAADC_EVENTS_END_EVENTS_END_Pos (0UL)      /*!< Position of EVENTS_END field.                                        */
  #define SAADC_EVENTS_END_EVENTS_END_Msk (0x1UL << SAADC_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.        */
  #define SAADC_EVENTS_END_EVENTS_END_Min (0x0UL)    /*!< Min enumerator value of EVENTS_END field.                            */
  #define SAADC_EVENTS_END_EVENTS_END_Max (0x1UL)    /*!< Max enumerator value of EVENTS_END field.                            */
  #define SAADC_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                            */
  #define SAADC_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                   */


/* SAADC_EVENTS_DONE: A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a
                       result to be transferred to RAM. */

  #define SAADC_EVENTS_DONE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DONE register.                                */

/* EVENTS_DONE @Bit 0 : A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a
                        result to be transferred to RAM. */

  #define SAADC_EVENTS_DONE_EVENTS_DONE_Pos (0UL)    /*!< Position of EVENTS_DONE field.                                       */
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << SAADC_EVENTS_DONE_EVENTS_DONE_Pos) /*!< Bit mask of EVENTS_DONE field.   */
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Min (0x0UL)  /*!< Min enumerator value of EVENTS_DONE field.                           */
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Max (0x1UL)  /*!< Max enumerator value of EVENTS_DONE field.                           */
  #define SAADC_EVENTS_DONE_EVENTS_DONE_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define SAADC_EVENTS_DONE_EVENTS_DONE_Generated (0x1UL) /*!< Event generated                                                 */


/* SAADC_EVENTS_RESULTDONE: A result is ready to get transferred to RAM. */
  #define SAADC_EVENTS_RESULTDONE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RESULTDONE register.                    */

/* EVENTS_RESULTDONE @Bit 0 : A result is ready to get transferred to RAM. */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos (0UL) /*!< Position of EVENTS_RESULTDONE field.                        */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Msk (0x1UL << SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos) /*!< Bit mask
                                                                            of EVENTS_RESULTDONE field.*/
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Min (0x0UL) /*!< Min enumerator value of EVENTS_RESULTDONE field.          */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Max (0x1UL) /*!< Max enumerator value of EVENTS_RESULTDONE field.          */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Generated (0x1UL) /*!< Event generated                                     */


/* SAADC_EVENTS_CALIBRATEDONE: Calibration is complete */
  #define SAADC_EVENTS_CALIBRATEDONE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CALIBRATEDONE register.              */

/* EVENTS_CALIBRATEDONE @Bit 0 : Calibration is complete */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos (0UL) /*!< Position of EVENTS_CALIBRATEDONE field.               */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Msk (0x1UL << SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos)
                                                                            /*!< Bit mask of EVENTS_CALIBRATEDONE field.*/
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Min (0x0UL) /*!< Min enumerator value of EVENTS_CALIBRATEDONE field. */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Max (0x1UL) /*!< Max enumerator value of EVENTS_CALIBRATEDONE field. */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_NotGenerated (0x0UL) /*!< Event not generated                        */
  #define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Generated (0x1UL) /*!< Event generated                               */


/* SAADC_EVENTS_STOPPED: The ADC has stopped */
  #define SAADC_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                          */

/* EVENTS_STOPPED @Bit 0 : The ADC has stopped */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                 */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                   */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                   */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                           */


/* SAADC_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define SAADC_PUBLISH_STARTED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STARTED register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define SAADC_PUBLISH_STARTED_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define SAADC_PUBLISH_STARTED_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define SAADC_PUBLISH_STARTED_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_STARTED_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_STARTED_EN_Msk (0x1UL << SAADC_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field.                      */
  #define SAADC_PUBLISH_STARTED_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_STARTED_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_STARTED_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define SAADC_PUBLISH_STARTED_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* SAADC_PUBLISH_END: Publish configuration for event END */
  #define SAADC_PUBLISH_END_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_END register.                                */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SAADC_PUBLISH_END_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_END_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define SAADC_PUBLISH_END_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define SAADC_PUBLISH_END_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_END_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_END_EN_Msk (0x1UL << SAADC_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                              */
  #define SAADC_PUBLISH_END_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_END_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_END_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define SAADC_PUBLISH_END_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* SAADC_PUBLISH_DONE: Publish configuration for event DONE */
  #define SAADC_PUBLISH_DONE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DONE register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event DONE will publish to */
  #define SAADC_PUBLISH_DONE_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_DONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_DONE_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define SAADC_PUBLISH_DONE_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define SAADC_PUBLISH_DONE_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_DONE_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_DONE_EN_Msk (0x1UL << SAADC_PUBLISH_DONE_EN_Pos) /*!< Bit mask of EN field.                            */
  #define SAADC_PUBLISH_DONE_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_DONE_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_DONE_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define SAADC_PUBLISH_DONE_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* SAADC_PUBLISH_RESULTDONE: Publish configuration for event RESULTDONE */
  #define SAADC_PUBLISH_RESULTDONE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RESULTDONE register.                  */

/* CHIDX @Bits 0..7 : DPPI channel that event RESULTDONE will publish to */
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_RESULTDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define SAADC_PUBLISH_RESULTDONE_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_RESULTDONE_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_RESULTDONE_EN_Msk (0x1UL << SAADC_PUBLISH_RESULTDONE_EN_Pos) /*!< Bit mask of EN field.                */
  #define SAADC_PUBLISH_RESULTDONE_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_RESULTDONE_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_RESULTDONE_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define SAADC_PUBLISH_RESULTDONE_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* SAADC_PUBLISH_CALIBRATEDONE: Publish configuration for event CALIBRATEDONE */
  #define SAADC_PUBLISH_CALIBRATEDONE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CALIBRATEDONE register.            */

/* CHIDX @Bits 0..7 : DPPI channel that event CALIBRATEDONE will publish to */
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Msk (0x1UL << SAADC_PUBLISH_CALIBRATEDONE_EN_Pos) /*!< Bit mask of EN field.          */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Disabled (0x0UL) /*!< Disable publishing                                              */
  #define SAADC_PUBLISH_CALIBRATEDONE_EN_Enabled (0x1UL) /*!< Enable publishing                                                */


/* SAADC_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define SAADC_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define SAADC_PUBLISH_STOPPED_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define SAADC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define SAADC_PUBLISH_STOPPED_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define SAADC_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SAADC_PUBLISH_STOPPED_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define SAADC_PUBLISH_STOPPED_EN_Msk (0x1UL << SAADC_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                      */
  #define SAADC_PUBLISH_STOPPED_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_STOPPED_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define SAADC_PUBLISH_STOPPED_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define SAADC_PUBLISH_STOPPED_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* SAADC_INTEN: Enable or disable interrupt */
  #define SAADC_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* STARTED @Bit 0 : Enable or disable interrupt for event STARTED */
  #define SAADC_INTEN_STARTED_Pos (0UL)              /*!< Position of STARTED field.                                           */
  #define SAADC_INTEN_STARTED_Msk (0x1UL << SAADC_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field.                           */
  #define SAADC_INTEN_STARTED_Min (0x0UL)            /*!< Min enumerator value of STARTED field.                               */
  #define SAADC_INTEN_STARTED_Max (0x1UL)            /*!< Max enumerator value of STARTED field.                               */
  #define SAADC_INTEN_STARTED_Disabled (0x0UL)       /*!< Disable                                                              */
  #define SAADC_INTEN_STARTED_Enabled (0x1UL)        /*!< Enable                                                               */

/* END @Bit 1 : Enable or disable interrupt for event END */
  #define SAADC_INTEN_END_Pos (1UL)                  /*!< Position of END field.                                               */
  #define SAADC_INTEN_END_Msk (0x1UL << SAADC_INTEN_END_Pos) /*!< Bit mask of END field.                                       */
  #define SAADC_INTEN_END_Min (0x0UL)                /*!< Min enumerator value of END field.                                   */
  #define SAADC_INTEN_END_Max (0x1UL)                /*!< Max enumerator value of END field.                                   */
  #define SAADC_INTEN_END_Disabled (0x0UL)           /*!< Disable                                                              */
  #define SAADC_INTEN_END_Enabled (0x1UL)            /*!< Enable                                                               */

/* DONE @Bit 2 : Enable or disable interrupt for event DONE */
  #define SAADC_INTEN_DONE_Pos (2UL)                 /*!< Position of DONE field.                                              */
  #define SAADC_INTEN_DONE_Msk (0x1UL << SAADC_INTEN_DONE_Pos) /*!< Bit mask of DONE field.                                    */
  #define SAADC_INTEN_DONE_Min (0x0UL)               /*!< Min enumerator value of DONE field.                                  */
  #define SAADC_INTEN_DONE_Max (0x1UL)               /*!< Max enumerator value of DONE field.                                  */
  #define SAADC_INTEN_DONE_Disabled (0x0UL)          /*!< Disable                                                              */
  #define SAADC_INTEN_DONE_Enabled (0x1UL)           /*!< Enable                                                               */

/* RESULTDONE @Bit 3 : Enable or disable interrupt for event RESULTDONE */
  #define SAADC_INTEN_RESULTDONE_Pos (3UL)           /*!< Position of RESULTDONE field.                                        */
  #define SAADC_INTEN_RESULTDONE_Msk (0x1UL << SAADC_INTEN_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field.                  */
  #define SAADC_INTEN_RESULTDONE_Min (0x0UL)         /*!< Min enumerator value of RESULTDONE field.                            */
  #define SAADC_INTEN_RESULTDONE_Max (0x1UL)         /*!< Max enumerator value of RESULTDONE field.                            */
  #define SAADC_INTEN_RESULTDONE_Disabled (0x0UL)    /*!< Disable                                                              */
  #define SAADC_INTEN_RESULTDONE_Enabled (0x1UL)     /*!< Enable                                                               */

/* CALIBRATEDONE @Bit 4 : Enable or disable interrupt for event CALIBRATEDONE */
  #define SAADC_INTEN_CALIBRATEDONE_Pos (4UL)        /*!< Position of CALIBRATEDONE field.                                     */
  #define SAADC_INTEN_CALIBRATEDONE_Msk (0x1UL << SAADC_INTEN_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field.         */
  #define SAADC_INTEN_CALIBRATEDONE_Min (0x0UL)      /*!< Min enumerator value of CALIBRATEDONE field.                         */
  #define SAADC_INTEN_CALIBRATEDONE_Max (0x1UL)      /*!< Max enumerator value of CALIBRATEDONE field.                         */
  #define SAADC_INTEN_CALIBRATEDONE_Disabled (0x0UL) /*!< Disable                                                              */
  #define SAADC_INTEN_CALIBRATEDONE_Enabled (0x1UL)  /*!< Enable                                                               */

/* STOPPED @Bit 5 : Enable or disable interrupt for event STOPPED */
  #define SAADC_INTEN_STOPPED_Pos (5UL)              /*!< Position of STOPPED field.                                           */
  #define SAADC_INTEN_STOPPED_Msk (0x1UL << SAADC_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field.                           */
  #define SAADC_INTEN_STOPPED_Min (0x0UL)            /*!< Min enumerator value of STOPPED field.                               */
  #define SAADC_INTEN_STOPPED_Max (0x1UL)            /*!< Max enumerator value of STOPPED field.                               */
  #define SAADC_INTEN_STOPPED_Disabled (0x0UL)       /*!< Disable                                                              */
  #define SAADC_INTEN_STOPPED_Enabled (0x1UL)        /*!< Enable                                                               */

/* CH0LIMITH @Bit 6 : Enable or disable interrupt for event CH0LIMITH */
  #define SAADC_INTEN_CH0LIMITH_Pos (6UL)            /*!< Position of CH0LIMITH field.                                         */
  #define SAADC_INTEN_CH0LIMITH_Msk (0x1UL << SAADC_INTEN_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field.                     */
  #define SAADC_INTEN_CH0LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH0LIMITH field.                             */
  #define SAADC_INTEN_CH0LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH0LIMITH field.                             */
  #define SAADC_INTEN_CH0LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH0LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH0LIMITL @Bit 7 : Enable or disable interrupt for event CH0LIMITL */
  #define SAADC_INTEN_CH0LIMITL_Pos (7UL)            /*!< Position of CH0LIMITL field.                                         */
  #define SAADC_INTEN_CH0LIMITL_Msk (0x1UL << SAADC_INTEN_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field.                     */
  #define SAADC_INTEN_CH0LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH0LIMITL field.                             */
  #define SAADC_INTEN_CH0LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH0LIMITL field.                             */
  #define SAADC_INTEN_CH0LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH0LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH1LIMITH @Bit 8 : Enable or disable interrupt for event CH1LIMITH */
  #define SAADC_INTEN_CH1LIMITH_Pos (8UL)            /*!< Position of CH1LIMITH field.                                         */
  #define SAADC_INTEN_CH1LIMITH_Msk (0x1UL << SAADC_INTEN_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field.                     */
  #define SAADC_INTEN_CH1LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH1LIMITH field.                             */
  #define SAADC_INTEN_CH1LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH1LIMITH field.                             */
  #define SAADC_INTEN_CH1LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH1LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH1LIMITL @Bit 9 : Enable or disable interrupt for event CH1LIMITL */
  #define SAADC_INTEN_CH1LIMITL_Pos (9UL)            /*!< Position of CH1LIMITL field.                                         */
  #define SAADC_INTEN_CH1LIMITL_Msk (0x1UL << SAADC_INTEN_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field.                     */
  #define SAADC_INTEN_CH1LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH1LIMITL field.                             */
  #define SAADC_INTEN_CH1LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH1LIMITL field.                             */
  #define SAADC_INTEN_CH1LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH1LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH2LIMITH @Bit 10 : Enable or disable interrupt for event CH2LIMITH */
  #define SAADC_INTEN_CH2LIMITH_Pos (10UL)           /*!< Position of CH2LIMITH field.                                         */
  #define SAADC_INTEN_CH2LIMITH_Msk (0x1UL << SAADC_INTEN_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field.                     */
  #define SAADC_INTEN_CH2LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH2LIMITH field.                             */
  #define SAADC_INTEN_CH2LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH2LIMITH field.                             */
  #define SAADC_INTEN_CH2LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH2LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH2LIMITL @Bit 11 : Enable or disable interrupt for event CH2LIMITL */
  #define SAADC_INTEN_CH2LIMITL_Pos (11UL)           /*!< Position of CH2LIMITL field.                                         */
  #define SAADC_INTEN_CH2LIMITL_Msk (0x1UL << SAADC_INTEN_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field.                     */
  #define SAADC_INTEN_CH2LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH2LIMITL field.                             */
  #define SAADC_INTEN_CH2LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH2LIMITL field.                             */
  #define SAADC_INTEN_CH2LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH2LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH3LIMITH @Bit 12 : Enable or disable interrupt for event CH3LIMITH */
  #define SAADC_INTEN_CH3LIMITH_Pos (12UL)           /*!< Position of CH3LIMITH field.                                         */
  #define SAADC_INTEN_CH3LIMITH_Msk (0x1UL << SAADC_INTEN_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field.                     */
  #define SAADC_INTEN_CH3LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH3LIMITH field.                             */
  #define SAADC_INTEN_CH3LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH3LIMITH field.                             */
  #define SAADC_INTEN_CH3LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH3LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH3LIMITL @Bit 13 : Enable or disable interrupt for event CH3LIMITL */
  #define SAADC_INTEN_CH3LIMITL_Pos (13UL)           /*!< Position of CH3LIMITL field.                                         */
  #define SAADC_INTEN_CH3LIMITL_Msk (0x1UL << SAADC_INTEN_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field.                     */
  #define SAADC_INTEN_CH3LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH3LIMITL field.                             */
  #define SAADC_INTEN_CH3LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH3LIMITL field.                             */
  #define SAADC_INTEN_CH3LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH3LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH4LIMITH @Bit 14 : Enable or disable interrupt for event CH4LIMITH */
  #define SAADC_INTEN_CH4LIMITH_Pos (14UL)           /*!< Position of CH4LIMITH field.                                         */
  #define SAADC_INTEN_CH4LIMITH_Msk (0x1UL << SAADC_INTEN_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field.                     */
  #define SAADC_INTEN_CH4LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH4LIMITH field.                             */
  #define SAADC_INTEN_CH4LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH4LIMITH field.                             */
  #define SAADC_INTEN_CH4LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH4LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH4LIMITL @Bit 15 : Enable or disable interrupt for event CH4LIMITL */
  #define SAADC_INTEN_CH4LIMITL_Pos (15UL)           /*!< Position of CH4LIMITL field.                                         */
  #define SAADC_INTEN_CH4LIMITL_Msk (0x1UL << SAADC_INTEN_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field.                     */
  #define SAADC_INTEN_CH4LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH4LIMITL field.                             */
  #define SAADC_INTEN_CH4LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH4LIMITL field.                             */
  #define SAADC_INTEN_CH4LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH4LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH5LIMITH @Bit 16 : Enable or disable interrupt for event CH5LIMITH */
  #define SAADC_INTEN_CH5LIMITH_Pos (16UL)           /*!< Position of CH5LIMITH field.                                         */
  #define SAADC_INTEN_CH5LIMITH_Msk (0x1UL << SAADC_INTEN_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field.                     */
  #define SAADC_INTEN_CH5LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH5LIMITH field.                             */
  #define SAADC_INTEN_CH5LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH5LIMITH field.                             */
  #define SAADC_INTEN_CH5LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH5LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH5LIMITL @Bit 17 : Enable or disable interrupt for event CH5LIMITL */
  #define SAADC_INTEN_CH5LIMITL_Pos (17UL)           /*!< Position of CH5LIMITL field.                                         */
  #define SAADC_INTEN_CH5LIMITL_Msk (0x1UL << SAADC_INTEN_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field.                     */
  #define SAADC_INTEN_CH5LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH5LIMITL field.                             */
  #define SAADC_INTEN_CH5LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH5LIMITL field.                             */
  #define SAADC_INTEN_CH5LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH5LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH6LIMITH @Bit 18 : Enable or disable interrupt for event CH6LIMITH */
  #define SAADC_INTEN_CH6LIMITH_Pos (18UL)           /*!< Position of CH6LIMITH field.                                         */
  #define SAADC_INTEN_CH6LIMITH_Msk (0x1UL << SAADC_INTEN_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field.                     */
  #define SAADC_INTEN_CH6LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH6LIMITH field.                             */
  #define SAADC_INTEN_CH6LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH6LIMITH field.                             */
  #define SAADC_INTEN_CH6LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH6LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH6LIMITL @Bit 19 : Enable or disable interrupt for event CH6LIMITL */
  #define SAADC_INTEN_CH6LIMITL_Pos (19UL)           /*!< Position of CH6LIMITL field.                                         */
  #define SAADC_INTEN_CH6LIMITL_Msk (0x1UL << SAADC_INTEN_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field.                     */
  #define SAADC_INTEN_CH6LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH6LIMITL field.                             */
  #define SAADC_INTEN_CH6LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH6LIMITL field.                             */
  #define SAADC_INTEN_CH6LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH6LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH7LIMITH @Bit 20 : Enable or disable interrupt for event CH7LIMITH */
  #define SAADC_INTEN_CH7LIMITH_Pos (20UL)           /*!< Position of CH7LIMITH field.                                         */
  #define SAADC_INTEN_CH7LIMITH_Msk (0x1UL << SAADC_INTEN_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field.                     */
  #define SAADC_INTEN_CH7LIMITH_Min (0x0UL)          /*!< Min enumerator value of CH7LIMITH field.                             */
  #define SAADC_INTEN_CH7LIMITH_Max (0x1UL)          /*!< Max enumerator value of CH7LIMITH field.                             */
  #define SAADC_INTEN_CH7LIMITH_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH7LIMITH_Enabled (0x1UL)      /*!< Enable                                                               */

/* CH7LIMITL @Bit 21 : Enable or disable interrupt for event CH7LIMITL */
  #define SAADC_INTEN_CH7LIMITL_Pos (21UL)           /*!< Position of CH7LIMITL field.                                         */
  #define SAADC_INTEN_CH7LIMITL_Msk (0x1UL << SAADC_INTEN_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field.                     */
  #define SAADC_INTEN_CH7LIMITL_Min (0x0UL)          /*!< Min enumerator value of CH7LIMITL field.                             */
  #define SAADC_INTEN_CH7LIMITL_Max (0x1UL)          /*!< Max enumerator value of CH7LIMITL field.                             */
  #define SAADC_INTEN_CH7LIMITL_Disabled (0x0UL)     /*!< Disable                                                              */
  #define SAADC_INTEN_CH7LIMITL_Enabled (0x1UL)      /*!< Enable                                                               */


/* SAADC_INTENSET: Enable interrupt */
  #define SAADC_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define SAADC_INTENSET_STARTED_Pos (0UL)           /*!< Position of STARTED field.                                           */
  #define SAADC_INTENSET_STARTED_Msk (0x1UL << SAADC_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field.                     */
  #define SAADC_INTENSET_STARTED_Min (0x0UL)         /*!< Min enumerator value of STARTED field.                               */
  #define SAADC_INTENSET_STARTED_Max (0x1UL)         /*!< Max enumerator value of STARTED field.                               */
  #define SAADC_INTENSET_STARTED_Set (0x1UL)         /*!< Enable                                                               */
  #define SAADC_INTENSET_STARTED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_STARTED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define SAADC_INTENSET_END_Pos (1UL)               /*!< Position of END field.                                               */
  #define SAADC_INTENSET_END_Msk (0x1UL << SAADC_INTENSET_END_Pos) /*!< Bit mask of END field.                                 */
  #define SAADC_INTENSET_END_Min (0x0UL)             /*!< Min enumerator value of END field.                                   */
  #define SAADC_INTENSET_END_Max (0x1UL)             /*!< Max enumerator value of END field.                                   */
  #define SAADC_INTENSET_END_Set (0x1UL)             /*!< Enable                                                               */
  #define SAADC_INTENSET_END_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_END_Enabled (0x1UL)         /*!< Read: Enabled                                                        */

/* DONE @Bit 2 : Write '1' to enable interrupt for event DONE */
  #define SAADC_INTENSET_DONE_Pos (2UL)              /*!< Position of DONE field.                                              */
  #define SAADC_INTENSET_DONE_Msk (0x1UL << SAADC_INTENSET_DONE_Pos) /*!< Bit mask of DONE field.                              */
  #define SAADC_INTENSET_DONE_Min (0x0UL)            /*!< Min enumerator value of DONE field.                                  */
  #define SAADC_INTENSET_DONE_Max (0x1UL)            /*!< Max enumerator value of DONE field.                                  */
  #define SAADC_INTENSET_DONE_Set (0x1UL)            /*!< Enable                                                               */
  #define SAADC_INTENSET_DONE_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_DONE_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* RESULTDONE @Bit 3 : Write '1' to enable interrupt for event RESULTDONE */
  #define SAADC_INTENSET_RESULTDONE_Pos (3UL)        /*!< Position of RESULTDONE field.                                        */
  #define SAADC_INTENSET_RESULTDONE_Msk (0x1UL << SAADC_INTENSET_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field.            */
  #define SAADC_INTENSET_RESULTDONE_Min (0x0UL)      /*!< Min enumerator value of RESULTDONE field.                            */
  #define SAADC_INTENSET_RESULTDONE_Max (0x1UL)      /*!< Max enumerator value of RESULTDONE field.                            */
  #define SAADC_INTENSET_RESULTDONE_Set (0x1UL)      /*!< Enable                                                               */
  #define SAADC_INTENSET_RESULTDONE_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_RESULTDONE_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* CALIBRATEDONE @Bit 4 : Write '1' to enable interrupt for event CALIBRATEDONE */
  #define SAADC_INTENSET_CALIBRATEDONE_Pos (4UL)     /*!< Position of CALIBRATEDONE field.                                     */
  #define SAADC_INTENSET_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENSET_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field.   */
  #define SAADC_INTENSET_CALIBRATEDONE_Min (0x0UL)   /*!< Min enumerator value of CALIBRATEDONE field.                         */
  #define SAADC_INTENSET_CALIBRATEDONE_Max (0x1UL)   /*!< Max enumerator value of CALIBRATEDONE field.                         */
  #define SAADC_INTENSET_CALIBRATEDONE_Set (0x1UL)   /*!< Enable                                                               */
  #define SAADC_INTENSET_CALIBRATEDONE_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define SAADC_INTENSET_CALIBRATEDONE_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* STOPPED @Bit 5 : Write '1' to enable interrupt for event STOPPED */
  #define SAADC_INTENSET_STOPPED_Pos (5UL)           /*!< Position of STOPPED field.                                           */
  #define SAADC_INTENSET_STOPPED_Msk (0x1UL << SAADC_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                     */
  #define SAADC_INTENSET_STOPPED_Min (0x0UL)         /*!< Min enumerator value of STOPPED field.                               */
  #define SAADC_INTENSET_STOPPED_Max (0x1UL)         /*!< Max enumerator value of STOPPED field.                               */
  #define SAADC_INTENSET_STOPPED_Set (0x1UL)         /*!< Enable                                                               */
  #define SAADC_INTENSET_STOPPED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_STOPPED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* CH0LIMITH @Bit 6 : Write '1' to enable interrupt for event CH0LIMITH */
  #define SAADC_INTENSET_CH0LIMITH_Pos (6UL)         /*!< Position of CH0LIMITH field.                                         */
  #define SAADC_INTENSET_CH0LIMITH_Msk (0x1UL << SAADC_INTENSET_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field.               */
  #define SAADC_INTENSET_CH0LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH0LIMITH field.                             */
  #define SAADC_INTENSET_CH0LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH0LIMITH field.                             */
  #define SAADC_INTENSET_CH0LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH0LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH0LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH0LIMITL @Bit 7 : Write '1' to enable interrupt for event CH0LIMITL */
  #define SAADC_INTENSET_CH0LIMITL_Pos (7UL)         /*!< Position of CH0LIMITL field.                                         */
  #define SAADC_INTENSET_CH0LIMITL_Msk (0x1UL << SAADC_INTENSET_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field.               */
  #define SAADC_INTENSET_CH0LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH0LIMITL field.                             */
  #define SAADC_INTENSET_CH0LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH0LIMITL field.                             */
  #define SAADC_INTENSET_CH0LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH0LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH0LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH1LIMITH @Bit 8 : Write '1' to enable interrupt for event CH1LIMITH */
  #define SAADC_INTENSET_CH1LIMITH_Pos (8UL)         /*!< Position of CH1LIMITH field.                                         */
  #define SAADC_INTENSET_CH1LIMITH_Msk (0x1UL << SAADC_INTENSET_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field.               */
  #define SAADC_INTENSET_CH1LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH1LIMITH field.                             */
  #define SAADC_INTENSET_CH1LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH1LIMITH field.                             */
  #define SAADC_INTENSET_CH1LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH1LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH1LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH1LIMITL @Bit 9 : Write '1' to enable interrupt for event CH1LIMITL */
  #define SAADC_INTENSET_CH1LIMITL_Pos (9UL)         /*!< Position of CH1LIMITL field.                                         */
  #define SAADC_INTENSET_CH1LIMITL_Msk (0x1UL << SAADC_INTENSET_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field.               */
  #define SAADC_INTENSET_CH1LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH1LIMITL field.                             */
  #define SAADC_INTENSET_CH1LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH1LIMITL field.                             */
  #define SAADC_INTENSET_CH1LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH1LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH1LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH2LIMITH @Bit 10 : Write '1' to enable interrupt for event CH2LIMITH */
  #define SAADC_INTENSET_CH2LIMITH_Pos (10UL)        /*!< Position of CH2LIMITH field.                                         */
  #define SAADC_INTENSET_CH2LIMITH_Msk (0x1UL << SAADC_INTENSET_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field.               */
  #define SAADC_INTENSET_CH2LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH2LIMITH field.                             */
  #define SAADC_INTENSET_CH2LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH2LIMITH field.                             */
  #define SAADC_INTENSET_CH2LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH2LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH2LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH2LIMITL @Bit 11 : Write '1' to enable interrupt for event CH2LIMITL */
  #define SAADC_INTENSET_CH2LIMITL_Pos (11UL)        /*!< Position of CH2LIMITL field.                                         */
  #define SAADC_INTENSET_CH2LIMITL_Msk (0x1UL << SAADC_INTENSET_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field.               */
  #define SAADC_INTENSET_CH2LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH2LIMITL field.                             */
  #define SAADC_INTENSET_CH2LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH2LIMITL field.                             */
  #define SAADC_INTENSET_CH2LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH2LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH2LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH3LIMITH @Bit 12 : Write '1' to enable interrupt for event CH3LIMITH */
  #define SAADC_INTENSET_CH3LIMITH_Pos (12UL)        /*!< Position of CH3LIMITH field.                                         */
  #define SAADC_INTENSET_CH3LIMITH_Msk (0x1UL << SAADC_INTENSET_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field.               */
  #define SAADC_INTENSET_CH3LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH3LIMITH field.                             */
  #define SAADC_INTENSET_CH3LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH3LIMITH field.                             */
  #define SAADC_INTENSET_CH3LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH3LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH3LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH3LIMITL @Bit 13 : Write '1' to enable interrupt for event CH3LIMITL */
  #define SAADC_INTENSET_CH3LIMITL_Pos (13UL)        /*!< Position of CH3LIMITL field.                                         */
  #define SAADC_INTENSET_CH3LIMITL_Msk (0x1UL << SAADC_INTENSET_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field.               */
  #define SAADC_INTENSET_CH3LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH3LIMITL field.                             */
  #define SAADC_INTENSET_CH3LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH3LIMITL field.                             */
  #define SAADC_INTENSET_CH3LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH3LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH3LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH4LIMITH @Bit 14 : Write '1' to enable interrupt for event CH4LIMITH */
  #define SAADC_INTENSET_CH4LIMITH_Pos (14UL)        /*!< Position of CH4LIMITH field.                                         */
  #define SAADC_INTENSET_CH4LIMITH_Msk (0x1UL << SAADC_INTENSET_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field.               */
  #define SAADC_INTENSET_CH4LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH4LIMITH field.                             */
  #define SAADC_INTENSET_CH4LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH4LIMITH field.                             */
  #define SAADC_INTENSET_CH4LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH4LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH4LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH4LIMITL @Bit 15 : Write '1' to enable interrupt for event CH4LIMITL */
  #define SAADC_INTENSET_CH4LIMITL_Pos (15UL)        /*!< Position of CH4LIMITL field.                                         */
  #define SAADC_INTENSET_CH4LIMITL_Msk (0x1UL << SAADC_INTENSET_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field.               */
  #define SAADC_INTENSET_CH4LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH4LIMITL field.                             */
  #define SAADC_INTENSET_CH4LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH4LIMITL field.                             */
  #define SAADC_INTENSET_CH4LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH4LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH4LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH5LIMITH @Bit 16 : Write '1' to enable interrupt for event CH5LIMITH */
  #define SAADC_INTENSET_CH5LIMITH_Pos (16UL)        /*!< Position of CH5LIMITH field.                                         */
  #define SAADC_INTENSET_CH5LIMITH_Msk (0x1UL << SAADC_INTENSET_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field.               */
  #define SAADC_INTENSET_CH5LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH5LIMITH field.                             */
  #define SAADC_INTENSET_CH5LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH5LIMITH field.                             */
  #define SAADC_INTENSET_CH5LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH5LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH5LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH5LIMITL @Bit 17 : Write '1' to enable interrupt for event CH5LIMITL */
  #define SAADC_INTENSET_CH5LIMITL_Pos (17UL)        /*!< Position of CH5LIMITL field.                                         */
  #define SAADC_INTENSET_CH5LIMITL_Msk (0x1UL << SAADC_INTENSET_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field.               */
  #define SAADC_INTENSET_CH5LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH5LIMITL field.                             */
  #define SAADC_INTENSET_CH5LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH5LIMITL field.                             */
  #define SAADC_INTENSET_CH5LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH5LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH5LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH6LIMITH @Bit 18 : Write '1' to enable interrupt for event CH6LIMITH */
  #define SAADC_INTENSET_CH6LIMITH_Pos (18UL)        /*!< Position of CH6LIMITH field.                                         */
  #define SAADC_INTENSET_CH6LIMITH_Msk (0x1UL << SAADC_INTENSET_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field.               */
  #define SAADC_INTENSET_CH6LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH6LIMITH field.                             */
  #define SAADC_INTENSET_CH6LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH6LIMITH field.                             */
  #define SAADC_INTENSET_CH6LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH6LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH6LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH6LIMITL @Bit 19 : Write '1' to enable interrupt for event CH6LIMITL */
  #define SAADC_INTENSET_CH6LIMITL_Pos (19UL)        /*!< Position of CH6LIMITL field.                                         */
  #define SAADC_INTENSET_CH6LIMITL_Msk (0x1UL << SAADC_INTENSET_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field.               */
  #define SAADC_INTENSET_CH6LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH6LIMITL field.                             */
  #define SAADC_INTENSET_CH6LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH6LIMITL field.                             */
  #define SAADC_INTENSET_CH6LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH6LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH6LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH7LIMITH @Bit 20 : Write '1' to enable interrupt for event CH7LIMITH */
  #define SAADC_INTENSET_CH7LIMITH_Pos (20UL)        /*!< Position of CH7LIMITH field.                                         */
  #define SAADC_INTENSET_CH7LIMITH_Msk (0x1UL << SAADC_INTENSET_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field.               */
  #define SAADC_INTENSET_CH7LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH7LIMITH field.                             */
  #define SAADC_INTENSET_CH7LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH7LIMITH field.                             */
  #define SAADC_INTENSET_CH7LIMITH_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH7LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH7LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH7LIMITL @Bit 21 : Write '1' to enable interrupt for event CH7LIMITL */
  #define SAADC_INTENSET_CH7LIMITL_Pos (21UL)        /*!< Position of CH7LIMITL field.                                         */
  #define SAADC_INTENSET_CH7LIMITL_Msk (0x1UL << SAADC_INTENSET_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field.               */
  #define SAADC_INTENSET_CH7LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH7LIMITL field.                             */
  #define SAADC_INTENSET_CH7LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH7LIMITL field.                             */
  #define SAADC_INTENSET_CH7LIMITL_Set (0x1UL)       /*!< Enable                                                               */
  #define SAADC_INTENSET_CH7LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENSET_CH7LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */


/* SAADC_INTENCLR: Disable interrupt */
  #define SAADC_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define SAADC_INTENCLR_STARTED_Pos (0UL)           /*!< Position of STARTED field.                                           */
  #define SAADC_INTENCLR_STARTED_Msk (0x1UL << SAADC_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field.                     */
  #define SAADC_INTENCLR_STARTED_Min (0x0UL)         /*!< Min enumerator value of STARTED field.                               */
  #define SAADC_INTENCLR_STARTED_Max (0x1UL)         /*!< Max enumerator value of STARTED field.                               */
  #define SAADC_INTENCLR_STARTED_Clear (0x1UL)       /*!< Disable                                                              */
  #define SAADC_INTENCLR_STARTED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_STARTED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define SAADC_INTENCLR_END_Pos (1UL)               /*!< Position of END field.                                               */
  #define SAADC_INTENCLR_END_Msk (0x1UL << SAADC_INTENCLR_END_Pos) /*!< Bit mask of END field.                                 */
  #define SAADC_INTENCLR_END_Min (0x0UL)             /*!< Min enumerator value of END field.                                   */
  #define SAADC_INTENCLR_END_Max (0x1UL)             /*!< Max enumerator value of END field.                                   */
  #define SAADC_INTENCLR_END_Clear (0x1UL)           /*!< Disable                                                              */
  #define SAADC_INTENCLR_END_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_END_Enabled (0x1UL)         /*!< Read: Enabled                                                        */

/* DONE @Bit 2 : Write '1' to disable interrupt for event DONE */
  #define SAADC_INTENCLR_DONE_Pos (2UL)              /*!< Position of DONE field.                                              */
  #define SAADC_INTENCLR_DONE_Msk (0x1UL << SAADC_INTENCLR_DONE_Pos) /*!< Bit mask of DONE field.                              */
  #define SAADC_INTENCLR_DONE_Min (0x0UL)            /*!< Min enumerator value of DONE field.                                  */
  #define SAADC_INTENCLR_DONE_Max (0x1UL)            /*!< Max enumerator value of DONE field.                                  */
  #define SAADC_INTENCLR_DONE_Clear (0x1UL)          /*!< Disable                                                              */
  #define SAADC_INTENCLR_DONE_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_DONE_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* RESULTDONE @Bit 3 : Write '1' to disable interrupt for event RESULTDONE */
  #define SAADC_INTENCLR_RESULTDONE_Pos (3UL)        /*!< Position of RESULTDONE field.                                        */
  #define SAADC_INTENCLR_RESULTDONE_Msk (0x1UL << SAADC_INTENCLR_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field.            */
  #define SAADC_INTENCLR_RESULTDONE_Min (0x0UL)      /*!< Min enumerator value of RESULTDONE field.                            */
  #define SAADC_INTENCLR_RESULTDONE_Max (0x1UL)      /*!< Max enumerator value of RESULTDONE field.                            */
  #define SAADC_INTENCLR_RESULTDONE_Clear (0x1UL)    /*!< Disable                                                              */
  #define SAADC_INTENCLR_RESULTDONE_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_RESULTDONE_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* CALIBRATEDONE @Bit 4 : Write '1' to disable interrupt for event CALIBRATEDONE */
  #define SAADC_INTENCLR_CALIBRATEDONE_Pos (4UL)     /*!< Position of CALIBRATEDONE field.                                     */
  #define SAADC_INTENCLR_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENCLR_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field.   */
  #define SAADC_INTENCLR_CALIBRATEDONE_Min (0x0UL)   /*!< Min enumerator value of CALIBRATEDONE field.                         */
  #define SAADC_INTENCLR_CALIBRATEDONE_Max (0x1UL)   /*!< Max enumerator value of CALIBRATEDONE field.                         */
  #define SAADC_INTENCLR_CALIBRATEDONE_Clear (0x1UL) /*!< Disable                                                              */
  #define SAADC_INTENCLR_CALIBRATEDONE_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define SAADC_INTENCLR_CALIBRATEDONE_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* STOPPED @Bit 5 : Write '1' to disable interrupt for event STOPPED */
  #define SAADC_INTENCLR_STOPPED_Pos (5UL)           /*!< Position of STOPPED field.                                           */
  #define SAADC_INTENCLR_STOPPED_Msk (0x1UL << SAADC_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                     */
  #define SAADC_INTENCLR_STOPPED_Min (0x0UL)         /*!< Min enumerator value of STOPPED field.                               */
  #define SAADC_INTENCLR_STOPPED_Max (0x1UL)         /*!< Max enumerator value of STOPPED field.                               */
  #define SAADC_INTENCLR_STOPPED_Clear (0x1UL)       /*!< Disable                                                              */
  #define SAADC_INTENCLR_STOPPED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_STOPPED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* CH0LIMITH @Bit 6 : Write '1' to disable interrupt for event CH0LIMITH */
  #define SAADC_INTENCLR_CH0LIMITH_Pos (6UL)         /*!< Position of CH0LIMITH field.                                         */
  #define SAADC_INTENCLR_CH0LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field.               */
  #define SAADC_INTENCLR_CH0LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH0LIMITH field.                             */
  #define SAADC_INTENCLR_CH0LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH0LIMITH field.                             */
  #define SAADC_INTENCLR_CH0LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH0LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH0LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH0LIMITL @Bit 7 : Write '1' to disable interrupt for event CH0LIMITL */
  #define SAADC_INTENCLR_CH0LIMITL_Pos (7UL)         /*!< Position of CH0LIMITL field.                                         */
  #define SAADC_INTENCLR_CH0LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field.               */
  #define SAADC_INTENCLR_CH0LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH0LIMITL field.                             */
  #define SAADC_INTENCLR_CH0LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH0LIMITL field.                             */
  #define SAADC_INTENCLR_CH0LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH0LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH0LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH1LIMITH @Bit 8 : Write '1' to disable interrupt for event CH1LIMITH */
  #define SAADC_INTENCLR_CH1LIMITH_Pos (8UL)         /*!< Position of CH1LIMITH field.                                         */
  #define SAADC_INTENCLR_CH1LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field.               */
  #define SAADC_INTENCLR_CH1LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH1LIMITH field.                             */
  #define SAADC_INTENCLR_CH1LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH1LIMITH field.                             */
  #define SAADC_INTENCLR_CH1LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH1LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH1LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH1LIMITL @Bit 9 : Write '1' to disable interrupt for event CH1LIMITL */
  #define SAADC_INTENCLR_CH1LIMITL_Pos (9UL)         /*!< Position of CH1LIMITL field.                                         */
  #define SAADC_INTENCLR_CH1LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field.               */
  #define SAADC_INTENCLR_CH1LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH1LIMITL field.                             */
  #define SAADC_INTENCLR_CH1LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH1LIMITL field.                             */
  #define SAADC_INTENCLR_CH1LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH1LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH1LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH2LIMITH @Bit 10 : Write '1' to disable interrupt for event CH2LIMITH */
  #define SAADC_INTENCLR_CH2LIMITH_Pos (10UL)        /*!< Position of CH2LIMITH field.                                         */
  #define SAADC_INTENCLR_CH2LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field.               */
  #define SAADC_INTENCLR_CH2LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH2LIMITH field.                             */
  #define SAADC_INTENCLR_CH2LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH2LIMITH field.                             */
  #define SAADC_INTENCLR_CH2LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH2LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH2LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH2LIMITL @Bit 11 : Write '1' to disable interrupt for event CH2LIMITL */
  #define SAADC_INTENCLR_CH2LIMITL_Pos (11UL)        /*!< Position of CH2LIMITL field.                                         */
  #define SAADC_INTENCLR_CH2LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field.               */
  #define SAADC_INTENCLR_CH2LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH2LIMITL field.                             */
  #define SAADC_INTENCLR_CH2LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH2LIMITL field.                             */
  #define SAADC_INTENCLR_CH2LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH2LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH2LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH3LIMITH @Bit 12 : Write '1' to disable interrupt for event CH3LIMITH */
  #define SAADC_INTENCLR_CH3LIMITH_Pos (12UL)        /*!< Position of CH3LIMITH field.                                         */
  #define SAADC_INTENCLR_CH3LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field.               */
  #define SAADC_INTENCLR_CH3LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH3LIMITH field.                             */
  #define SAADC_INTENCLR_CH3LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH3LIMITH field.                             */
  #define SAADC_INTENCLR_CH3LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH3LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH3LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH3LIMITL @Bit 13 : Write '1' to disable interrupt for event CH3LIMITL */
  #define SAADC_INTENCLR_CH3LIMITL_Pos (13UL)        /*!< Position of CH3LIMITL field.                                         */
  #define SAADC_INTENCLR_CH3LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field.               */
  #define SAADC_INTENCLR_CH3LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH3LIMITL field.                             */
  #define SAADC_INTENCLR_CH3LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH3LIMITL field.                             */
  #define SAADC_INTENCLR_CH3LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH3LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH3LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH4LIMITH @Bit 14 : Write '1' to disable interrupt for event CH4LIMITH */
  #define SAADC_INTENCLR_CH4LIMITH_Pos (14UL)        /*!< Position of CH4LIMITH field.                                         */
  #define SAADC_INTENCLR_CH4LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field.               */
  #define SAADC_INTENCLR_CH4LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH4LIMITH field.                             */
  #define SAADC_INTENCLR_CH4LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH4LIMITH field.                             */
  #define SAADC_INTENCLR_CH4LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH4LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH4LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH4LIMITL @Bit 15 : Write '1' to disable interrupt for event CH4LIMITL */
  #define SAADC_INTENCLR_CH4LIMITL_Pos (15UL)        /*!< Position of CH4LIMITL field.                                         */
  #define SAADC_INTENCLR_CH4LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field.               */
  #define SAADC_INTENCLR_CH4LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH4LIMITL field.                             */
  #define SAADC_INTENCLR_CH4LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH4LIMITL field.                             */
  #define SAADC_INTENCLR_CH4LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH4LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH4LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH5LIMITH @Bit 16 : Write '1' to disable interrupt for event CH5LIMITH */
  #define SAADC_INTENCLR_CH5LIMITH_Pos (16UL)        /*!< Position of CH5LIMITH field.                                         */
  #define SAADC_INTENCLR_CH5LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field.               */
  #define SAADC_INTENCLR_CH5LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH5LIMITH field.                             */
  #define SAADC_INTENCLR_CH5LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH5LIMITH field.                             */
  #define SAADC_INTENCLR_CH5LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH5LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH5LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH5LIMITL @Bit 17 : Write '1' to disable interrupt for event CH5LIMITL */
  #define SAADC_INTENCLR_CH5LIMITL_Pos (17UL)        /*!< Position of CH5LIMITL field.                                         */
  #define SAADC_INTENCLR_CH5LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field.               */
  #define SAADC_INTENCLR_CH5LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH5LIMITL field.                             */
  #define SAADC_INTENCLR_CH5LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH5LIMITL field.                             */
  #define SAADC_INTENCLR_CH5LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH5LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH5LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH6LIMITH @Bit 18 : Write '1' to disable interrupt for event CH6LIMITH */
  #define SAADC_INTENCLR_CH6LIMITH_Pos (18UL)        /*!< Position of CH6LIMITH field.                                         */
  #define SAADC_INTENCLR_CH6LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field.               */
  #define SAADC_INTENCLR_CH6LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH6LIMITH field.                             */
  #define SAADC_INTENCLR_CH6LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH6LIMITH field.                             */
  #define SAADC_INTENCLR_CH6LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH6LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH6LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH6LIMITL @Bit 19 : Write '1' to disable interrupt for event CH6LIMITL */
  #define SAADC_INTENCLR_CH6LIMITL_Pos (19UL)        /*!< Position of CH6LIMITL field.                                         */
  #define SAADC_INTENCLR_CH6LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field.               */
  #define SAADC_INTENCLR_CH6LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH6LIMITL field.                             */
  #define SAADC_INTENCLR_CH6LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH6LIMITL field.                             */
  #define SAADC_INTENCLR_CH6LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH6LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH6LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH7LIMITH @Bit 20 : Write '1' to disable interrupt for event CH7LIMITH */
  #define SAADC_INTENCLR_CH7LIMITH_Pos (20UL)        /*!< Position of CH7LIMITH field.                                         */
  #define SAADC_INTENCLR_CH7LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field.               */
  #define SAADC_INTENCLR_CH7LIMITH_Min (0x0UL)       /*!< Min enumerator value of CH7LIMITH field.                             */
  #define SAADC_INTENCLR_CH7LIMITH_Max (0x1UL)       /*!< Max enumerator value of CH7LIMITH field.                             */
  #define SAADC_INTENCLR_CH7LIMITH_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH7LIMITH_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH7LIMITH_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* CH7LIMITL @Bit 21 : Write '1' to disable interrupt for event CH7LIMITL */
  #define SAADC_INTENCLR_CH7LIMITL_Pos (21UL)        /*!< Position of CH7LIMITL field.                                         */
  #define SAADC_INTENCLR_CH7LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field.               */
  #define SAADC_INTENCLR_CH7LIMITL_Min (0x0UL)       /*!< Min enumerator value of CH7LIMITL field.                             */
  #define SAADC_INTENCLR_CH7LIMITL_Max (0x1UL)       /*!< Max enumerator value of CH7LIMITL field.                             */
  #define SAADC_INTENCLR_CH7LIMITL_Clear (0x1UL)     /*!< Disable                                                              */
  #define SAADC_INTENCLR_CH7LIMITL_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SAADC_INTENCLR_CH7LIMITL_Enabled (0x1UL)   /*!< Read: Enabled                                                        */


/* SAADC_STATUS: Status */
  #define SAADC_STATUS_ResetValue (0x00000000UL)     /*!< Reset value of STATUS register.                                      */

/* STATUS @Bit 0 : Status */
  #define SAADC_STATUS_STATUS_Pos (0UL)              /*!< Position of STATUS field.                                            */
  #define SAADC_STATUS_STATUS_Msk (0x1UL << SAADC_STATUS_STATUS_Pos) /*!< Bit mask of STATUS field.                            */
  #define SAADC_STATUS_STATUS_Min (0x0UL)            /*!< Min enumerator value of STATUS field.                                */
  #define SAADC_STATUS_STATUS_Max (0x1UL)            /*!< Max enumerator value of STATUS field.                                */
  #define SAADC_STATUS_STATUS_Ready (0x0UL)          /*!< ADC is ready. No on-going conversion.                                */
  #define SAADC_STATUS_STATUS_Busy (0x1UL)           /*!< ADC is busy. Single conversion in progress.                          */


/* SAADC_ENABLE: Enable or disable ADC */
  #define SAADC_ENABLE_ResetValue (0x00000000UL)     /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bit 0 : Enable or disable ADC */
  #define SAADC_ENABLE_ENABLE_Pos (0UL)              /*!< Position of ENABLE field.                                            */
  #define SAADC_ENABLE_ENABLE_Msk (0x1UL << SAADC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                            */
  #define SAADC_ENABLE_ENABLE_Min (0x0UL)            /*!< Min enumerator value of ENABLE field.                                */
  #define SAADC_ENABLE_ENABLE_Max (0x1UL)            /*!< Max enumerator value of ENABLE field.                                */
  #define SAADC_ENABLE_ENABLE_Disabled (0x0UL)       /*!< Disable ADC                                                          */
  #define SAADC_ENABLE_ENABLE_Enabled (0x1UL)        /*!< Enable ADC                                                           */


/* SAADC_BURST: Enable burst mode */
  #define SAADC_BURST_ResetValue (0x00000000UL)      /*!< Reset value of BURST register.                                       */

/* BURST @Bit 0 : Enable burst mode */
  #define SAADC_BURST_BURST_Pos (0UL)                /*!< Position of BURST field.                                             */
  #define SAADC_BURST_BURST_Msk (0x1UL << SAADC_BURST_BURST_Pos) /*!< Bit mask of BURST field.                                 */
  #define SAADC_BURST_BURST_Min (0x0UL)              /*!< Min enumerator value of BURST field.                                 */
  #define SAADC_BURST_BURST_Max (0x1UL)              /*!< Max enumerator value of BURST field.                                 */
  #define SAADC_BURST_BURST_Disabled (0x0UL)         /*!< Burst mode is disabled (normal operation)                            */
  #define SAADC_BURST_BURST_Enabled (0x1UL)          /*!< Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples and
                                                          sends the average to Data RAM.*/


/* SAADC_RESOLUTION: Resolution configuration */
  #define SAADC_RESOLUTION_ResetValue (0x00000001UL) /*!< Reset value of RESOLUTION register.                                  */

/* VAL @Bits 0..2 : Set the resolution */
  #define SAADC_RESOLUTION_VAL_Pos (0UL)             /*!< Position of VAL field.                                               */
  #define SAADC_RESOLUTION_VAL_Msk (0x7UL << SAADC_RESOLUTION_VAL_Pos) /*!< Bit mask of VAL field.                             */
  #define SAADC_RESOLUTION_VAL_Min (0x0UL)           /*!< Min enumerator value of VAL field.                                   */
  #define SAADC_RESOLUTION_VAL_Max (0x3UL)           /*!< Max enumerator value of VAL field.                                   */
  #define SAADC_RESOLUTION_VAL_8bit (0x0UL)          /*!< 8 bit                                                                */
  #define SAADC_RESOLUTION_VAL_10bit (0x1UL)         /*!< 10 bit                                                               */
  #define SAADC_RESOLUTION_VAL_12bit (0x2UL)         /*!< 12 bit                                                               */
  #define SAADC_RESOLUTION_VAL_14bit (0x3UL)         /*!< 14 bit                                                               */


/* SAADC_OVERSAMPLE: Oversampling configuration. OVERSAMPLE should not be combined with SCAN. The RESOLUTION is applied before
                      averaging, thus for high OVERSAMPLE a higher RESOLUTION should be used. */

  #define SAADC_OVERSAMPLE_ResetValue (0x00000000UL) /*!< Reset value of OVERSAMPLE register.                                  */

/* OVERSAMPLE @Bits 0..3 : Oversample control */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Pos (0UL)      /*!< Position of OVERSAMPLE field.                                        */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Msk (0xFUL << SAADC_OVERSAMPLE_OVERSAMPLE_Pos) /*!< Bit mask of OVERSAMPLE field.        */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Min (0x0UL)    /*!< Min enumerator value of OVERSAMPLE field.                            */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Max (0x8UL)    /*!< Max enumerator value of OVERSAMPLE field.                            */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Bypass (0x0UL) /*!< Bypass oversampling                                                  */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over2x (0x1UL) /*!< Oversample 2x                                                        */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over4x (0x2UL) /*!< Oversample 4x                                                        */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over8x (0x3UL) /*!< Oversample 8x                                                        */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over16x (0x4UL) /*!< Oversample 16x                                                      */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over32x (0x5UL) /*!< Oversample 32x                                                      */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over64x (0x6UL) /*!< Oversample 64x                                                      */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over128x (0x7UL) /*!< Oversample 128x                                                    */
  #define SAADC_OVERSAMPLE_OVERSAMPLE_Over256x (0x8UL) /*!< Oversample 256x                                                    */


/* SAADC_SAMPLERATE: Controls normal or continuous sample rate */
  #define SAADC_SAMPLERATE_ResetValue (0x00000000UL) /*!< Reset value of SAMPLERATE register.                                  */

/* CC @Bits 0..10 : Capture and compare value. Sample rate is 16 MHz/CC */
  #define SAADC_SAMPLERATE_CC_Pos (0UL)              /*!< Position of CC field.                                                */
  #define SAADC_SAMPLERATE_CC_Msk (0x7FFUL << SAADC_SAMPLERATE_CC_Pos) /*!< Bit mask of CC field.                              */
  #define SAADC_SAMPLERATE_CC_Min (0x010UL)          /*!< Min value of CC field.                                               */
  #define SAADC_SAMPLERATE_CC_Max (0x7FFUL)          /*!< Max size of CC field.                                                */

/* MODE @Bit 12 : Select mode for sample rate control */
  #define SAADC_SAMPLERATE_MODE_Pos (12UL)           /*!< Position of MODE field.                                              */
  #define SAADC_SAMPLERATE_MODE_Msk (0x1UL << SAADC_SAMPLERATE_MODE_Pos) /*!< Bit mask of MODE field.                          */
  #define SAADC_SAMPLERATE_MODE_Min (0x0UL)          /*!< Min enumerator value of MODE field.                                  */
  #define SAADC_SAMPLERATE_MODE_Max (0x1UL)          /*!< Max enumerator value of MODE field.                                  */
  #define SAADC_SAMPLERATE_MODE_Task (0x0UL)         /*!< Rate is controlled from SAMPLE task                                  */
  #define SAADC_SAMPLERATE_MODE_Timers (0x1UL)       /*!< Rate is controlled from local timer (use CC to control the rate)     */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SPIM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct SPIM_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [SPIM_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_SPIM_TASKS_DMA_RX_Type;                        /*!< Size = 32 (0x020)                                                    */

/* SPIM_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                                  */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                                 */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                                 */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.                 */

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL) /*!< Position of ENABLEMATCH field.                              */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL) /*!< Min enumerator value of ENABLEMATCH field.                */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL) /*!< Max enumerator value of ENABLEMATCH field.                */
  #define SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                          */


/* SPIM_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                                */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                               */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                               */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.               */

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL) /*!< Position of DISABLEMATCH field.                           */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL) /*!< Min enumerator value of DISABLEMATCH field.             */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL) /*!< Max enumerator value of DISABLEMATCH field.             */
  #define SPIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                        */



/* ================================================== Struct SPIM_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [SPIM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __OM  NRF_SPIM_TASKS_DMA_RX_Type RX;               /*!< (@ 0x00000008) Peripheral tasks.                                     */
} NRF_SPIM_TASKS_DMA_Type;                           /*!< Size = 40 (0x028)                                                    */


/* ============================================== Struct SPIM_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [SPIM_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Subscribe configuration for task ENABLEMATCH[n]       */
  __IOM uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Subscribe configuration for task DISABLEMATCH[n]      */
} NRF_SPIM_SUBSCRIBE_DMA_RX_Type;                    /*!< Size = 32 (0x020)                                                    */

/* SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                              */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                             */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                             */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.             */

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                      */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                  */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                   */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                           */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                              */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                              */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                      */
  #define SPIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                        */


/* SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                            */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                           */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                           */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.           */

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                     */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                 */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                  */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                          */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                             */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                             */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                     */
  #define SPIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                       */



/* ================================================ Struct SPIM_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [SPIM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM NRF_SPIM_SUBSCRIBE_DMA_RX_Type RX;           /*!< (@ 0x00000008) Subscribe configuration for tasks                     */
} NRF_SPIM_SUBSCRIBE_DMA_Type;                       /*!< Size = 40 (0x028)                                                    */


/* ================================================ Struct SPIM_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [SPIM_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Pattern match is detected on the DMA data bus.        */
} NRF_SPIM_EVENTS_DMA_RX_Type;                       /*!< Size = 28 (0x01C)                                                    */

/* SPIM_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_RX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define SPIM_EVENTS_DMA_RX_END_END_Msk (0x1UL << SPIM_EVENTS_DMA_RX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define SPIM_EVENTS_DMA_RX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define SPIM_EVENTS_DMA_RX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define SPIM_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define SPIM_EVENTS_DMA_RX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* SPIM_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_RX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define SPIM_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << SPIM_EVENTS_DMA_RX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define SPIM_EVENTS_DMA_RX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define SPIM_EVENTS_DMA_RX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define SPIM_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define SPIM_EVENTS_DMA_RX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* SPIM_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define SPIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */


/* SPIM_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define SPIM_EVENTS_DMA_RX_MATCH_MaxCount (4UL)    /*!< Max size of MATCH[4] array.                                          */
  #define SPIM_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)    /*!< Max index of MATCH[4] array.                                         */
  #define SPIM_EVENTS_DMA_RX_MATCH_MinIndex (0UL)    /*!< Min index of MATCH[4] array.                                         */
  #define SPIM_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                            */

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)   /*!< Position of MATCH field.                                             */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << SPIM_EVENTS_DMA_RX_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field.       */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL) /*!< Min enumerator value of MATCH field.                                 */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL) /*!< Max enumerator value of MATCH field.                                 */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define SPIM_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL) /*!< Event generated                                                */



/* ================================================ Struct SPIM_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [SPIM_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
} NRF_SPIM_EVENTS_DMA_TX_Type;                       /*!< Size = 12 (0x00C)                                                    */

/* SPIM_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIM_EVENTS_DMA_TX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define SPIM_EVENTS_DMA_TX_END_END_Msk (0x1UL << SPIM_EVENTS_DMA_TX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define SPIM_EVENTS_DMA_TX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define SPIM_EVENTS_DMA_TX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define SPIM_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define SPIM_EVENTS_DMA_TX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* SPIM_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIM_EVENTS_DMA_TX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define SPIM_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << SPIM_EVENTS_DMA_TX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define SPIM_EVENTS_DMA_TX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define SPIM_EVENTS_DMA_TX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define SPIM_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define SPIM_EVENTS_DMA_TX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* SPIM_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define SPIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */



/* ================================================= Struct SPIM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [SPIM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_SPIM_EVENTS_DMA_RX_Type RX;              /*!< (@ 0x00000000) Peripheral events.                                    */
  __IOM NRF_SPIM_EVENTS_DMA_TX_Type TX;              /*!< (@ 0x0000001C) Peripheral events.                                    */
} NRF_SPIM_EVENTS_DMA_Type;                          /*!< Size = 40 (0x028)                                                    */


/* =============================================== Struct SPIM_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [SPIM_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Publish configuration for event MATCH[n]              */
} NRF_SPIM_PUBLISH_DMA_RX_Type;                      /*!< Size = 28 (0x01C)                                                    */

/* SPIM_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define SPIM_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define SPIM_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define SPIM_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* SPIM_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define SPIM_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define SPIM_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define SPIM_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* SPIM_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define SPIM_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */


/* SPIM_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define SPIM_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)   /*!< Max size of MATCH[4] array.                                          */
  #define SPIM_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)   /*!< Max index of MATCH[4] array.                                         */
  #define SPIM_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)   /*!< Min index of MATCH[4] array.                                         */
  #define SPIM_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define SPIM_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_RX_MATCH_EN_Pos) /*!< Bit mask of EN field.              */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define SPIM_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */



/* =============================================== Struct SPIM_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [SPIM_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
} NRF_SPIM_PUBLISH_DMA_TX_Type;                      /*!< Size = 12 (0x00C)                                                    */

/* SPIM_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define SPIM_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define SPIM_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define SPIM_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* SPIM_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define SPIM_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define SPIM_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define SPIM_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* SPIM_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define SPIM_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */



/* ================================================= Struct SPIM_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [SPIM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_SPIM_PUBLISH_DMA_RX_Type RX;             /*!< (@ 0x00000000) Publish configuration for events                      */
  __IOM NRF_SPIM_PUBLISH_DMA_TX_Type TX;             /*!< (@ 0x0000001C) Publish configuration for events                      */
} NRF_SPIM_PUBLISH_DMA_Type;                         /*!< Size = 40 (0x028)                                                    */


/* ================================================== Struct SPIM_IFTIMING =================================================== */
/**
  * @brief IFTIMING [SPIM_IFTIMING] (unspecified)
  */
typedef struct {
  __IOM uint32_t  RXDELAY;                           /*!< (@ 0x00000000) Sample delay for input serial data on SDI             */
  __IOM uint32_t  CSNDUR;                            /*!< (@ 0x00000004) Minimum duration between edge of CSN and edge of SCK.
                                                                         When SHORTS.END_START is used, this is also the minimum
                                                                         duration CSN must stay high between transactions.*/
} NRF_SPIM_IFTIMING_Type;                            /*!< Size = 8 (0x008)                                                     */

/* SPIM_IFTIMING_RXDELAY: Sample delay for input serial data on SDI */
  #define SPIM_IFTIMING_RXDELAY_ResetValue (0x00000002UL) /*!< Reset value of RXDELAY register.                                */

/* RXDELAY @Bits 0..2 : Sample delay for input serial data on SDI. The value specifies the number of SPIM core clock cycles
                        delay from the the sampling edge of SCK (leading edge for CONFIG.CPHA = 0, trailing edge for CONFIG.CPHA
                        = 1) until the input serial data is sampled. As en example, if RXDELAY = 0 and CONFIG.CPHA = 0, the
                        input serial data is sampled on the rising edge of SCK. */

  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Pos (0UL)    /*!< Position of RXDELAY field.                                           */
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Msk (0x7UL << SPIM_IFTIMING_RXDELAY_RXDELAY_Pos) /*!< Bit mask of RXDELAY field.       */
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Min (0x0UL)  /*!< Min value of RXDELAY field.                                          */
  #define SPIM_IFTIMING_RXDELAY_RXDELAY_Max (0x7UL)  /*!< Max size of RXDELAY field.                                           */


/* SPIM_IFTIMING_CSNDUR: Minimum duration between edge of CSN and edge of SCK. When SHORTS.END_START is used, this is also the
                          minimum duration CSN must stay high between transactions. */

  #define SPIM_IFTIMING_CSNDUR_ResetValue (0x00000002UL) /*!< Reset value of CSNDUR register.                                  */

/* CSNDUR @Bits 0..7 : Minimum duration between edge of CSN and edge of SCK. When SHORTS.END_START is used, this is the minimum
                       duration CSN must stay high between transactions. The value is specified in number of SPIM core clock
                       cycles. */

  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Pos (0UL)      /*!< Position of CSNDUR field.                                            */
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Msk (0xFFUL << SPIM_IFTIMING_CSNDUR_CSNDUR_Pos) /*!< Bit mask of CSNDUR field.           */
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Min (0x00UL)   /*!< Min value of CSNDUR field.                                           */
  #define SPIM_IFTIMING_CSNDUR_CSNDUR_Max (0xFFUL)   /*!< Max size of CSNDUR field.                                            */



/* ==================================================== Struct SPIM_PSEL ===================================================== */
/**
  * @brief PSEL [SPIM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;                               /*!< (@ 0x00000000) Pin select for SCK                                    */
  __IOM uint32_t  MOSI;                              /*!< (@ 0x00000004) Pin select for SDO signal                             */
  __IOM uint32_t  MISO;                              /*!< (@ 0x00000008) Pin select for SDI signal                             */
  __IOM uint32_t  DCX;                               /*!< (@ 0x0000000C) Pin select for DCX signal                             */
  __IOM uint32_t  CSN;                               /*!< (@ 0x00000010) Pin select for CSN                                    */
} NRF_SPIM_PSEL_Type;                                /*!< Size = 20 (0x014)                                                    */

/* SPIM_PSEL_SCK: Pin select for SCK */
  #define SPIM_PSEL_SCK_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of SCK register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_SCK_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define SPIM_PSEL_SCK_PIN_Msk (0x1FUL << SPIM_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define SPIM_PSEL_SCK_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define SPIM_PSEL_SCK_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_SCK_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define SPIM_PSEL_SCK_PORT_Msk (0x7UL << SPIM_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define SPIM_PSEL_SCK_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define SPIM_PSEL_SCK_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_SCK_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define SPIM_PSEL_SCK_CONNECT_Msk (0x1UL << SPIM_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define SPIM_PSEL_SCK_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_SCK_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_SCK_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define SPIM_PSEL_SCK_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */


/* SPIM_PSEL_MOSI: Pin select for SDO signal */
  #define SPIM_PSEL_MOSI_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of MOSI register.                                        */

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_MOSI_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define SPIM_PSEL_MOSI_PIN_Msk (0x1FUL << SPIM_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define SPIM_PSEL_MOSI_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define SPIM_PSEL_MOSI_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_MOSI_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define SPIM_PSEL_MOSI_PORT_Msk (0x7UL << SPIM_PSEL_MOSI_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define SPIM_PSEL_MOSI_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define SPIM_PSEL_MOSI_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_MOSI_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define SPIM_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIM_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define SPIM_PSEL_MOSI_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_MOSI_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_MOSI_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define SPIM_PSEL_MOSI_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* SPIM_PSEL_MISO: Pin select for SDI signal */
  #define SPIM_PSEL_MISO_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of MISO register.                                        */

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_MISO_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define SPIM_PSEL_MISO_PIN_Msk (0x1FUL << SPIM_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define SPIM_PSEL_MISO_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define SPIM_PSEL_MISO_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_MISO_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define SPIM_PSEL_MISO_PORT_Msk (0x7UL << SPIM_PSEL_MISO_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define SPIM_PSEL_MISO_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define SPIM_PSEL_MISO_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_MISO_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define SPIM_PSEL_MISO_CONNECT_Msk (0x1UL << SPIM_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define SPIM_PSEL_MISO_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_MISO_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_MISO_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define SPIM_PSEL_MISO_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* SPIM_PSEL_DCX: Pin select for DCX signal */
  #define SPIM_PSEL_DCX_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of DCX register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_DCX_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define SPIM_PSEL_DCX_PIN_Msk (0x1FUL << SPIM_PSEL_DCX_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define SPIM_PSEL_DCX_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define SPIM_PSEL_DCX_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_DCX_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define SPIM_PSEL_DCX_PORT_Msk (0x7UL << SPIM_PSEL_DCX_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define SPIM_PSEL_DCX_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define SPIM_PSEL_DCX_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_DCX_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define SPIM_PSEL_DCX_CONNECT_Msk (0x1UL << SPIM_PSEL_DCX_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define SPIM_PSEL_DCX_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_DCX_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_DCX_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define SPIM_PSEL_DCX_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */


/* SPIM_PSEL_CSN: Pin select for CSN */
  #define SPIM_PSEL_CSN_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of CSN register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define SPIM_PSEL_CSN_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define SPIM_PSEL_CSN_PIN_Msk (0x1FUL << SPIM_PSEL_CSN_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define SPIM_PSEL_CSN_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define SPIM_PSEL_CSN_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIM_PSEL_CSN_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define SPIM_PSEL_CSN_PORT_Msk (0x7UL << SPIM_PSEL_CSN_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define SPIM_PSEL_CSN_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define SPIM_PSEL_CSN_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIM_PSEL_CSN_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define SPIM_PSEL_CSN_CONNECT_Msk (0x1UL << SPIM_PSEL_CSN_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define SPIM_PSEL_CSN_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_CSN_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define SPIM_PSEL_CSN_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define SPIM_PSEL_CSN_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */



/* ================================================ Struct SPIM_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [SPIM_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) Configure individual match events                     */
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_SPIM_DMA_RX_MATCH_Type;                        /*!< Size = 20 (0x014)                                                    */

/* SPIM_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define SPIM_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                              */

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL) /*!< Position of ENABLE0 field.                                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0 field. */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL) /*!< Min enumerator value of ENABLE0 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL) /*!< Max enumerator value of ENABLE0 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL) /*!< Position of ENABLE1 field.                                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1 field. */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL) /*!< Min enumerator value of ENABLE1 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL) /*!< Max enumerator value of ENABLE1 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL) /*!< Position of ENABLE2 field.                                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2 field. */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL) /*!< Min enumerator value of ENABLE2 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL) /*!< Max enumerator value of ENABLE2 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL) /*!< Position of ENABLE3 field.                                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3 field. */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL) /*!< Min enumerator value of ENABLE3 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL) /*!< Max enumerator value of ENABLE3 field.                             */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL) /*!< Position of ONESHOT0 field.                                        */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL) /*!< Min enumerator value of ONESHOT0 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL) /*!< Max enumerator value of ONESHOT0 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL) /*!< Position of ONESHOT1 field.                                        */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL) /*!< Min enumerator value of ONESHOT1 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL) /*!< Max enumerator value of ONESHOT1 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL) /*!< Position of ONESHOT2 field.                                        */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL) /*!< Min enumerator value of ONESHOT2 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL) /*!< Max enumerator value of ONESHOT2 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL) /*!< Position of ONESHOT3 field.                                        */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL) /*!< Min enumerator value of ONESHOT3 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL) /*!< Max enumerator value of ONESHOT3 field.                           */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */


/* SPIM_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL) /*!< Max size of CANDIDATE[4] array.                                      */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL) /*!< Max index of CANDIDATE[4] array.                                     */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL) /*!< Min index of CANDIDATE[4] array.                                     */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL) /*!< Reset value of CANDIDATE[4] register.                     */

/* DATA @Bits 0..31 : Data to look for */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL) /*!< Position of DATA field.                                              */
  #define SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct SPIM_DMA_RX ==================================================== */
/**
  * @brief RX [SPIM_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  LIST;                              /*!< (@ 0x00000014) EasyDMA list type                                     */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_SPIM_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_SPIM_DMA_RX_Type;                              /*!< Size = 56 (0x038)                                                    */

/* SPIM_DMA_RX_PTR: RAM buffer start address */
  #define SPIM_DMA_RX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIM_DMA_RX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define SPIM_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* SPIM_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIM_DMA_RX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_DMA_RX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define SPIM_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* SPIM_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIM_DMA_RX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_DMA_RX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define SPIM_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* SPIM_DMA_RX_LIST: EasyDMA list type */
  #define SPIM_DMA_RX_LIST_ResetValue (0x00000000UL) /*!< Reset value of LIST register.                                        */

/* TYPE @Bits 0..2 : List type */
  #define SPIM_DMA_RX_LIST_TYPE_Pos (0UL)            /*!< Position of TYPE field.                                              */
  #define SPIM_DMA_RX_LIST_TYPE_Msk (0x7UL << SPIM_DMA_RX_LIST_TYPE_Pos) /*!< Bit mask of TYPE field.                          */
  #define SPIM_DMA_RX_LIST_TYPE_Min (0x0UL)          /*!< Min enumerator value of TYPE field.                                  */
  #define SPIM_DMA_RX_LIST_TYPE_Max (0x1UL)          /*!< Max enumerator value of TYPE field.                                  */
  #define SPIM_DMA_RX_LIST_TYPE_Disabled (0x0UL)     /*!< Disable EasyDMA list                                                 */
  #define SPIM_DMA_RX_LIST_TYPE_ArrayList (0x1UL)    /*!< Use array list                                                       */


/* SPIM_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* SPIM_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct SPIM_DMA_TX ==================================================== */
/**
  * @brief TX [SPIM_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  LIST;                              /*!< (@ 0x00000014) EasyDMA list type                                     */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_SPIM_DMA_TX_Type;                              /*!< Size = 36 (0x024)                                                    */

/* SPIM_DMA_TX_PTR: RAM buffer start address */
  #define SPIM_DMA_TX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIM_DMA_TX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define SPIM_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_DMA_TX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* SPIM_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIM_DMA_TX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_DMA_TX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define SPIM_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* SPIM_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIM_DMA_TX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_DMA_TX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define SPIM_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* SPIM_DMA_TX_LIST: EasyDMA list type */
  #define SPIM_DMA_TX_LIST_ResetValue (0x00000000UL) /*!< Reset value of LIST register.                                        */

/* TYPE @Bits 0..2 : List type */
  #define SPIM_DMA_TX_LIST_TYPE_Pos (0UL)            /*!< Position of TYPE field.                                              */
  #define SPIM_DMA_TX_LIST_TYPE_Msk (0x7UL << SPIM_DMA_TX_LIST_TYPE_Pos) /*!< Bit mask of TYPE field.                          */
  #define SPIM_DMA_TX_LIST_TYPE_Min (0x0UL)          /*!< Min enumerator value of TYPE field.                                  */
  #define SPIM_DMA_TX_LIST_TYPE_Max (0x1UL)          /*!< Max enumerator value of TYPE field.                                  */
  #define SPIM_DMA_TX_LIST_TYPE_Disabled (0x0UL)     /*!< Disable EasyDMA list                                                 */
  #define SPIM_DMA_TX_LIST_TYPE_ArrayList (0x1UL)    /*!< Use array list                                                       */


/* SPIM_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* SPIM_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct SPIM_DMA ===================================================== */
/**
  * @brief DMA [SPIM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_SPIM_DMA_RX_Type RX;                     /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_SPIM_DMA_TX_Type TX;                     /*!< (@ 0x00000038) (unspecified)                                         */
} NRF_SPIM_DMA_Type;                                 /*!< Size = 92 (0x05C)                                                    */

/* ======================================================= Struct SPIM ======================================================= */
/**
  * @brief Serial Peripheral Interface Master with EasyDMA
  */
  typedef struct {                                   /*!< SPIM Structure                                                       */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start SPI transaction                                 */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop SPI transaction                                  */
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_SUSPEND;                     /*!< (@ 0x0000000C) Suspend SPI transaction                               */
    __OM uint32_t TASKS_RESUME;                      /*!< (@ 0x00000010) Resume SPI transaction                                */
    __IM uint32_t RESERVED1[5];
    __OM NRF_SPIM_TASKS_DMA_Type TASKS_DMA;          /*!< (@ 0x00000028) Peripheral tasks.                                     */
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED3;
    __IOM uint32_t SUBSCRIBE_SUSPEND;                /*!< (@ 0x0000008C) Subscribe configuration for task SUSPEND              */
    __IOM uint32_t SUBSCRIBE_RESUME;                 /*!< (@ 0x00000090) Subscribe configuration for task RESUME               */
    __IM uint32_t RESERVED4[5];
    __IOM NRF_SPIM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA; /*!< (@ 0x000000A8) Subscribe configuration for tasks                     */
    __IM uint32_t RESERVED5[12];
    __IOM uint32_t EVENTS_STARTED;                   /*!< (@ 0x00000100) SPI transaction has started                           */
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000104) SPI transaction has stopped                           */
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000108) End of RXD buffer and TXD buffer reached              */
    __IM uint32_t RESERVED6[16];
    __IOM NRF_SPIM_EVENTS_DMA_Type EVENTS_DMA;       /*!< (@ 0x0000014C) Peripheral events.                                    */
    __IM uint32_t RESERVED7[3];
    __IOM uint32_t PUBLISH_STARTED;                  /*!< (@ 0x00000180) Publish configuration for event STARTED               */
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000184) Publish configuration for event STOPPED               */
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000188) Publish configuration for event END                   */
    __IM uint32_t RESERVED8[16];
    __IOM NRF_SPIM_PUBLISH_DMA_Type PUBLISH_DMA;     /*!< (@ 0x000001CC) Publish configuration for events                      */
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED10[64];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED11[125];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable SPIM                                           */
    __IM uint32_t RESERVED12[10];
    __IOM uint32_t PRESCALER;                        /*!< (@ 0x0000052C) The prescaler is used to set the SPI frequency.       */
    __IM uint32_t RESERVED13[9];
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000554) Configuration register                                */
    __IM uint32_t RESERVED14[21];
    __IOM NRF_SPIM_IFTIMING_Type IFTIMING;           /*!< (@ 0x000005AC) (unspecified)                                         */
    __IOM uint32_t DCXCNT;                           /*!< (@ 0x000005B4) DCX configuration                                     */
    __IOM uint32_t CSNPOL;                           /*!< (@ 0x000005B8) Polarity of CSN output                                */
    __IM uint32_t RESERVED15;
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Byte transmitted after TXD.MAXCNT bytes have been
                                                                         transmitted in the case when RXD.MAXCNT is greater than
                                                                         TXD.MAXCNT*/
    __IM uint32_t RESERVED16[15];
    __IOM NRF_SPIM_PSEL_Type PSEL;                   /*!< (@ 0x00000600) (unspecified)                                         */
    __IM uint32_t RESERVED17[59];
    __IOM NRF_SPIM_DMA_Type DMA;                     /*!< (@ 0x00000700) (unspecified)                                         */
  } NRF_SPIM_Type;                                   /*!< Size = 1884 (0x75C)                                                  */

/* SPIM_TASKS_START: Start SPI transaction */
  #define SPIM_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start SPI transaction */
  #define SPIM_TASKS_START_TASKS_START_Pos (0UL)     /*!< Position of TASKS_START field.                                       */
  #define SPIM_TASKS_START_TASKS_START_Msk (0x1UL << SPIM_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.     */
  #define SPIM_TASKS_START_TASKS_START_Min (0x1UL)   /*!< Min enumerator value of TASKS_START field.                           */
  #define SPIM_TASKS_START_TASKS_START_Max (0x1UL)   /*!< Max enumerator value of TASKS_START field.                           */
  #define SPIM_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                       */


/* SPIM_TASKS_STOP: Stop SPI transaction */
  #define SPIM_TASKS_STOP_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop SPI transaction */
  #define SPIM_TASKS_STOP_TASKS_STOP_Pos (0UL)       /*!< Position of TASKS_STOP field.                                        */
  #define SPIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SPIM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.          */
  #define SPIM_TASKS_STOP_TASKS_STOP_Min (0x1UL)     /*!< Min enumerator value of TASKS_STOP field.                            */
  #define SPIM_TASKS_STOP_TASKS_STOP_Max (0x1UL)     /*!< Max enumerator value of TASKS_STOP field.                            */
  #define SPIM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                         */


/* SPIM_TASKS_SUSPEND: Suspend SPI transaction */
  #define SPIM_TASKS_SUSPEND_ResetValue (0x00000000UL) /*!< Reset value of TASKS_SUSPEND register.                             */

/* TASKS_SUSPEND @Bit 0 : Suspend SPI transaction */
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field.                                     */
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL) /*!< Min enumerator value of TASKS_SUSPEND field.                       */
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL) /*!< Max enumerator value of TASKS_SUSPEND field.                       */
  #define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL) /*!< Trigger task                                                   */


/* SPIM_TASKS_RESUME: Resume SPI transaction */
  #define SPIM_TASKS_RESUME_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RESUME register.                               */

/* TASKS_RESUME @Bit 0 : Resume SPI transaction */
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL)   /*!< Position of TASKS_RESUME field.                                      */
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << SPIM_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field.*/
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Min (0x1UL) /*!< Min enumerator value of TASKS_RESUME field.                          */
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Max (0x1UL) /*!< Max enumerator value of TASKS_RESUME field.                          */
  #define SPIM_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL) /*!< Trigger task                                                     */


/* SPIM_SUBSCRIBE_START: Subscribe configuration for task START */
  #define SPIM_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define SPIM_SUBSCRIBE_START_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define SPIM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define SPIM_SUBSCRIBE_START_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define SPIM_SUBSCRIBE_START_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_START_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define SPIM_SUBSCRIBE_START_EN_Msk (0x1UL << SPIM_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                        */
  #define SPIM_SUBSCRIBE_START_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_START_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_START_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define SPIM_SUBSCRIBE_START_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* SPIM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define SPIM_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define SPIM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_STOP_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define SPIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << SPIM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                          */
  #define SPIM_SUBSCRIBE_STOP_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_STOP_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define SPIM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* SPIM_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define SPIM_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SUSPEND register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << SPIM_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field.                    */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define SPIM_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* SPIM_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define SPIM_SUBSCRIBE_RESUME_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RESUME register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define SPIM_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_SUBSCRIBE_RESUME_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define SPIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << SPIM_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field.                      */
  #define SPIM_SUBSCRIBE_RESUME_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_RESUME_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define SPIM_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define SPIM_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* SPIM_EVENTS_STARTED: SPI transaction has started */
  #define SPIM_EVENTS_STARTED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STARTED register.                           */

/* EVENTS_STARTED @Bit 0 : SPI transaction has started */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field.                                  */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of
                                                                            EVENTS_STARTED field.*/
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STARTED field.                    */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STARTED field.                    */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define SPIM_EVENTS_STARTED_EVENTS_STARTED_Generated (0x1UL) /*!< Event generated                                            */


/* SPIM_EVENTS_STOPPED: SPI transaction has stopped */
  #define SPIM_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                           */

/* EVENTS_STOPPED @Bit 0 : SPI transaction has stopped */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                  */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                    */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                    */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                            */


/* SPIM_EVENTS_END: End of RXD buffer and TXD buffer reached */
  #define SPIM_EVENTS_END_ResetValue (0x00000000UL)  /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : End of RXD buffer and TXD buffer reached */
  #define SPIM_EVENTS_END_EVENTS_END_Pos (0UL)       /*!< Position of EVENTS_END field.                                        */
  #define SPIM_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIM_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.          */
  #define SPIM_EVENTS_END_EVENTS_END_Min (0x0UL)     /*!< Min enumerator value of EVENTS_END field.                            */
  #define SPIM_EVENTS_END_EVENTS_END_Max (0x1UL)     /*!< Max enumerator value of EVENTS_END field.                            */
  #define SPIM_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define SPIM_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                    */


/* SPIM_PUBLISH_STARTED: Publish configuration for event STARTED */
  #define SPIM_PUBLISH_STARTED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STARTED register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event STARTED will publish to */
  #define SPIM_PUBLISH_STARTED_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define SPIM_PUBLISH_STARTED_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define SPIM_PUBLISH_STARTED_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_STARTED_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_STARTED_EN_Msk (0x1UL << SPIM_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field.                        */
  #define SPIM_PUBLISH_STARTED_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_STARTED_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_STARTED_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define SPIM_PUBLISH_STARTED_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* SPIM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define SPIM_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define SPIM_PUBLISH_STOPPED_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define SPIM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define SPIM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_STOPPED_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_STOPPED_EN_Msk (0x1UL << SPIM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                        */
  #define SPIM_PUBLISH_STOPPED_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_STOPPED_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_STOPPED_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define SPIM_PUBLISH_STOPPED_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* SPIM_PUBLISH_END: Publish configuration for event END */
  #define SPIM_PUBLISH_END_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIM_PUBLISH_END_CHIDX_Pos (0UL)           /*!< Position of CHIDX field.                                             */
  #define SPIM_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                      */
  #define SPIM_PUBLISH_END_CHIDX_Min (0x00UL)        /*!< Min value of CHIDX field.                                            */
  #define SPIM_PUBLISH_END_CHIDX_Max (0xFFUL)        /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIM_PUBLISH_END_EN_Pos (31UL)             /*!< Position of EN field.                                                */
  #define SPIM_PUBLISH_END_EN_Msk (0x1UL << SPIM_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                                */
  #define SPIM_PUBLISH_END_EN_Min (0x0UL)            /*!< Min enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_END_EN_Max (0x1UL)            /*!< Max enumerator value of EN field.                                    */
  #define SPIM_PUBLISH_END_EN_Disabled (0x0UL)       /*!< Disable publishing                                                   */
  #define SPIM_PUBLISH_END_EN_Enabled (0x1UL)        /*!< Enable publishing                                                    */


/* SPIM_SHORTS: Shortcuts between local events and tasks */
  #define SPIM_SHORTS_ResetValue (0x00000000UL)      /*!< Reset value of SHORTS register.                                      */

/* END_START @Bit 17 : Shortcut between event END and task START */
  #define SPIM_SHORTS_END_START_Pos (17UL)           /*!< Position of END_START field.                                         */
  #define SPIM_SHORTS_END_START_Msk (0x1UL << SPIM_SHORTS_END_START_Pos) /*!< Bit mask of END_START field.                     */
  #define SPIM_SHORTS_END_START_Min (0x0UL)          /*!< Min enumerator value of END_START field.                             */
  #define SPIM_SHORTS_END_START_Max (0x1UL)          /*!< Max enumerator value of END_START field.                             */
  #define SPIM_SHORTS_END_START_Disabled (0x0UL)     /*!< Disable shortcut                                                     */
  #define SPIM_SHORTS_END_START_Enabled (0x1UL)      /*!< Enable shortcut                                                      */

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.   */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.   */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.   */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.   */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[0] and task DMA.RX.DISABLEMATCH[0] */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field. */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[1] and task DMA.RX.DISABLEMATCH[1] */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field. */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[2] and task DMA.RX.DISABLEMATCH[2] */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field. */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[3] and task DMA.RX.DISABLEMATCH[3] */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field. */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                  */


/* SPIM_INTENSET: Enable interrupt */
  #define SPIM_INTENSET_ResetValue (0x00000000UL)    /*!< Reset value of INTENSET register.                                    */

/* STARTED @Bit 0 : Write '1' to enable interrupt for event STARTED */
  #define SPIM_INTENSET_STARTED_Pos (0UL)            /*!< Position of STARTED field.                                           */
  #define SPIM_INTENSET_STARTED_Msk (0x1UL << SPIM_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field.                       */
  #define SPIM_INTENSET_STARTED_Min (0x0UL)          /*!< Min enumerator value of STARTED field.                               */
  #define SPIM_INTENSET_STARTED_Max (0x1UL)          /*!< Max enumerator value of STARTED field.                               */
  #define SPIM_INTENSET_STARTED_Set (0x1UL)          /*!< Enable                                                               */
  #define SPIM_INTENSET_STARTED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_STARTED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define SPIM_INTENSET_STOPPED_Pos (1UL)            /*!< Position of STOPPED field.                                           */
  #define SPIM_INTENSET_STOPPED_Msk (0x1UL << SPIM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define SPIM_INTENSET_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define SPIM_INTENSET_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define SPIM_INTENSET_STOPPED_Set (0x1UL)          /*!< Enable                                                               */
  #define SPIM_INTENSET_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* END @Bit 2 : Write '1' to enable interrupt for event END */
  #define SPIM_INTENSET_END_Pos (2UL)                /*!< Position of END field.                                               */
  #define SPIM_INTENSET_END_Msk (0x1UL << SPIM_INTENSET_END_Pos) /*!< Bit mask of END field.                                   */
  #define SPIM_INTENSET_END_Min (0x0UL)              /*!< Min enumerator value of END field.                                   */
  #define SPIM_INTENSET_END_Max (0x1UL)              /*!< Max enumerator value of END field.                                   */
  #define SPIM_INTENSET_END_Set (0x1UL)              /*!< Enable                                                               */
  #define SPIM_INTENSET_END_Disabled (0x0UL)         /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_END_Enabled (0x1UL)          /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define SPIM_INTENSET_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define SPIM_INTENSET_DMARXEND_Msk (0x1UL << SPIM_INTENSET_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define SPIM_INTENSET_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define SPIM_INTENSET_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define SPIM_INTENSET_DMARXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define SPIM_INTENSET_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define SPIM_INTENSET_DMARXREADY_Msk (0x1UL << SPIM_INTENSET_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define SPIM_INTENSET_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define SPIM_INTENSET_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define SPIM_INTENSET_DMARXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define SPIM_INTENSET_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define SPIM_INTENSET_DMARXBUSERROR_Msk (0x1UL << SPIM_INTENSET_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define SPIM_INTENSET_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define SPIM_INTENSET_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define SPIM_INTENSET_DMARXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIM_INTENSET_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define SPIM_INTENSET_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define SPIM_INTENSET_DMARXMATCH0_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define SPIM_INTENSET_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define SPIM_INTENSET_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define SPIM_INTENSET_DMARXMATCH0_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define SPIM_INTENSET_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define SPIM_INTENSET_DMARXMATCH1_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define SPIM_INTENSET_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define SPIM_INTENSET_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define SPIM_INTENSET_DMARXMATCH1_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define SPIM_INTENSET_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define SPIM_INTENSET_DMARXMATCH2_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define SPIM_INTENSET_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define SPIM_INTENSET_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define SPIM_INTENSET_DMARXMATCH2_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define SPIM_INTENSET_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define SPIM_INTENSET_DMARXMATCH3_Msk (0x1UL << SPIM_INTENSET_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define SPIM_INTENSET_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define SPIM_INTENSET_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define SPIM_INTENSET_DMARXMATCH3_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIM_INTENSET_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define SPIM_INTENSET_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define SPIM_INTENSET_DMATXEND_Msk (0x1UL << SPIM_INTENSET_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define SPIM_INTENSET_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define SPIM_INTENSET_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define SPIM_INTENSET_DMATXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define SPIM_INTENSET_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define SPIM_INTENSET_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define SPIM_INTENSET_DMATXREADY_Msk (0x1UL << SPIM_INTENSET_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define SPIM_INTENSET_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define SPIM_INTENSET_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define SPIM_INTENSET_DMATXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define SPIM_INTENSET_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIM_INTENSET_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define SPIM_INTENSET_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define SPIM_INTENSET_DMATXBUSERROR_Msk (0x1UL << SPIM_INTENSET_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define SPIM_INTENSET_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define SPIM_INTENSET_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define SPIM_INTENSET_DMATXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define SPIM_INTENSET_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIM_INTENSET_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* SPIM_INTENCLR: Disable interrupt */
  #define SPIM_INTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of INTENCLR register.                                    */

/* STARTED @Bit 0 : Write '1' to disable interrupt for event STARTED */
  #define SPIM_INTENCLR_STARTED_Pos (0UL)            /*!< Position of STARTED field.                                           */
  #define SPIM_INTENCLR_STARTED_Msk (0x1UL << SPIM_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field.                       */
  #define SPIM_INTENCLR_STARTED_Min (0x0UL)          /*!< Min enumerator value of STARTED field.                               */
  #define SPIM_INTENCLR_STARTED_Max (0x1UL)          /*!< Max enumerator value of STARTED field.                               */
  #define SPIM_INTENCLR_STARTED_Clear (0x1UL)        /*!< Disable                                                              */
  #define SPIM_INTENCLR_STARTED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_STARTED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define SPIM_INTENCLR_STOPPED_Pos (1UL)            /*!< Position of STOPPED field.                                           */
  #define SPIM_INTENCLR_STOPPED_Msk (0x1UL << SPIM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define SPIM_INTENCLR_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define SPIM_INTENCLR_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define SPIM_INTENCLR_STOPPED_Clear (0x1UL)        /*!< Disable                                                              */
  #define SPIM_INTENCLR_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* END @Bit 2 : Write '1' to disable interrupt for event END */
  #define SPIM_INTENCLR_END_Pos (2UL)                /*!< Position of END field.                                               */
  #define SPIM_INTENCLR_END_Msk (0x1UL << SPIM_INTENCLR_END_Pos) /*!< Bit mask of END field.                                   */
  #define SPIM_INTENCLR_END_Min (0x0UL)              /*!< Min enumerator value of END field.                                   */
  #define SPIM_INTENCLR_END_Max (0x1UL)              /*!< Max enumerator value of END field.                                   */
  #define SPIM_INTENCLR_END_Clear (0x1UL)            /*!< Disable                                                              */
  #define SPIM_INTENCLR_END_Disabled (0x0UL)         /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_END_Enabled (0x1UL)          /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define SPIM_INTENCLR_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define SPIM_INTENCLR_DMARXEND_Msk (0x1UL << SPIM_INTENCLR_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define SPIM_INTENCLR_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define SPIM_INTENCLR_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define SPIM_INTENCLR_DMARXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define SPIM_INTENCLR_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define SPIM_INTENCLR_DMARXREADY_Msk (0x1UL << SPIM_INTENCLR_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define SPIM_INTENCLR_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define SPIM_INTENCLR_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define SPIM_INTENCLR_DMARXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define SPIM_INTENCLR_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define SPIM_INTENCLR_DMARXBUSERROR_Msk (0x1UL << SPIM_INTENCLR_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define SPIM_INTENCLR_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define SPIM_INTENCLR_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define SPIM_INTENCLR_DMARXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIM_INTENCLR_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define SPIM_INTENCLR_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define SPIM_INTENCLR_DMARXMATCH0_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define SPIM_INTENCLR_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH0_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define SPIM_INTENCLR_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define SPIM_INTENCLR_DMARXMATCH1_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define SPIM_INTENCLR_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH1_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define SPIM_INTENCLR_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define SPIM_INTENCLR_DMARXMATCH2_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define SPIM_INTENCLR_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH2_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define SPIM_INTENCLR_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define SPIM_INTENCLR_DMARXMATCH3_Msk (0x1UL << SPIM_INTENCLR_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define SPIM_INTENCLR_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define SPIM_INTENCLR_DMARXMATCH3_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define SPIM_INTENCLR_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define SPIM_INTENCLR_DMATXEND_Msk (0x1UL << SPIM_INTENCLR_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define SPIM_INTENCLR_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define SPIM_INTENCLR_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define SPIM_INTENCLR_DMATXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define SPIM_INTENCLR_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define SPIM_INTENCLR_DMATXREADY_Msk (0x1UL << SPIM_INTENCLR_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define SPIM_INTENCLR_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define SPIM_INTENCLR_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define SPIM_INTENCLR_DMATXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIM_INTENCLR_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define SPIM_INTENCLR_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define SPIM_INTENCLR_DMATXBUSERROR_Msk (0x1UL << SPIM_INTENCLR_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define SPIM_INTENCLR_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define SPIM_INTENCLR_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define SPIM_INTENCLR_DMATXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define SPIM_INTENCLR_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIM_INTENCLR_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* SPIM_ENABLE: Enable SPIM */
  #define SPIM_ENABLE_ResetValue (0x00000000UL)      /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..3 : Enable or disable SPIM */
  #define SPIM_ENABLE_ENABLE_Pos (0UL)               /*!< Position of ENABLE field.                                            */
  #define SPIM_ENABLE_ENABLE_Msk (0xFUL << SPIM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                              */
  #define SPIM_ENABLE_ENABLE_Min (0x0UL)             /*!< Min enumerator value of ENABLE field.                                */
  #define SPIM_ENABLE_ENABLE_Max (0x7UL)             /*!< Max enumerator value of ENABLE field.                                */
  #define SPIM_ENABLE_ENABLE_Disabled (0x0UL)        /*!< Disable SPIM                                                         */
  #define SPIM_ENABLE_ENABLE_Enabled (0x7UL)         /*!< Enable SPIM                                                          */


/* SPIM_PRESCALER: The prescaler is used to set the SPI frequency. */
  #define SPIM_PRESCALER_ResetValue (0x00000040UL)   /*!< Reset value of PRESCALER register.                                   */

/* DIVISOR @Bits 0..6 : Core clock to SCK divisor */
  #define SPIM_PRESCALER_DIVISOR_Pos (0UL)           /*!< Position of DIVISOR field.                                           */
  #define SPIM_PRESCALER_DIVISOR_Msk (0x7FUL << SPIM_PRESCALER_DIVISOR_Pos) /*!< Bit mask of DIVISOR field.                    */
  #define SPIM_PRESCALER_DIVISOR_Min (0x02UL)        /*!< Min value of DIVISOR field.                                          */
  #define SPIM_PRESCALER_DIVISOR_Max (0x7EUL)        /*!< Max size of DIVISOR field.                                           */


/* SPIM_CONFIG: Configuration register */
  #define SPIM_CONFIG_ResetValue (0x00000000UL)      /*!< Reset value of CONFIG register.                                      */

/* ORDER @Bit 0 : Bit order */
  #define SPIM_CONFIG_ORDER_Pos (0UL)                /*!< Position of ORDER field.                                             */
  #define SPIM_CONFIG_ORDER_Msk (0x1UL << SPIM_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field.                                 */
  #define SPIM_CONFIG_ORDER_Min (0x0UL)              /*!< Min enumerator value of ORDER field.                                 */
  #define SPIM_CONFIG_ORDER_Max (0x1UL)              /*!< Max enumerator value of ORDER field.                                 */
  #define SPIM_CONFIG_ORDER_MsbFirst (0x0UL)         /*!< Most significant bit shifted out first                               */
  #define SPIM_CONFIG_ORDER_LsbFirst (0x1UL)         /*!< Least significant bit shifted out first                              */

/* CPHA @Bit 1 : Serial clock (SCK) phase */
  #define SPIM_CONFIG_CPHA_Pos (1UL)                 /*!< Position of CPHA field.                                              */
  #define SPIM_CONFIG_CPHA_Msk (0x1UL << SPIM_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field.                                    */
  #define SPIM_CONFIG_CPHA_Min (0x0UL)               /*!< Min enumerator value of CPHA field.                                  */
  #define SPIM_CONFIG_CPHA_Max (0x1UL)               /*!< Max enumerator value of CPHA field.                                  */
  #define SPIM_CONFIG_CPHA_Leading (0x0UL)           /*!< Sample on leading edge of clock, shift serial data on trailing edge  */
  #define SPIM_CONFIG_CPHA_Trailing (0x1UL)          /*!< Sample on trailing edge of clock, shift serial data on leading edge  */

/* CPOL @Bit 2 : Serial clock (SCK) polarity */
  #define SPIM_CONFIG_CPOL_Pos (2UL)                 /*!< Position of CPOL field.                                              */
  #define SPIM_CONFIG_CPOL_Msk (0x1UL << SPIM_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field.                                    */
  #define SPIM_CONFIG_CPOL_Min (0x0UL)               /*!< Min enumerator value of CPOL field.                                  */
  #define SPIM_CONFIG_CPOL_Max (0x1UL)               /*!< Max enumerator value of CPOL field.                                  */
  #define SPIM_CONFIG_CPOL_ActiveHigh (0x0UL)        /*!< Active high                                                          */
  #define SPIM_CONFIG_CPOL_ActiveLow (0x1UL)         /*!< Active low                                                           */


/* SPIM_DCXCNT: DCX configuration */
  #define SPIM_DCXCNT_ResetValue (0x00000000UL)      /*!< Reset value of DCXCNT register.                                      */

/* DCXCNT @Bits 0..3 : This register specifies the number of command bytes preceding the data bytes. The PSEL.DCX line will be
                       low during transmission of command bytes and high during transmission of data bytes. Value 0xF indicates
                       that all bytes are command bytes. */

  #define SPIM_DCXCNT_DCXCNT_Pos (0UL)               /*!< Position of DCXCNT field.                                            */
  #define SPIM_DCXCNT_DCXCNT_Msk (0xFUL << SPIM_DCXCNT_DCXCNT_Pos) /*!< Bit mask of DCXCNT field.                              */
  #define SPIM_DCXCNT_DCXCNT_Min (0x0UL)             /*!< Min value of DCXCNT field.                                           */
  #define SPIM_DCXCNT_DCXCNT_Max (0xFUL)             /*!< Max size of DCXCNT field.                                            */


/* SPIM_CSNPOL: Polarity of CSN output */
  #define SPIM_CSNPOL_ResetValue (0x00000000UL)      /*!< Reset value of CSNPOL register.                                      */

/* CSNPOL0 @Bit 0 : Polarity of CSN output */
  #define SPIM_CSNPOL_CSNPOL0_Pos (0UL)              /*!< Position of CSNPOL0 field.                                           */
  #define SPIM_CSNPOL_CSNPOL0_Msk (0x1UL << SPIM_CSNPOL_CSNPOL0_Pos) /*!< Bit mask of CSNPOL0 field.                           */
  #define SPIM_CSNPOL_CSNPOL0_Min (0x0UL)            /*!< Min enumerator value of CSNPOL0 field.                               */
  #define SPIM_CSNPOL_CSNPOL0_Max (0x1UL)            /*!< Max enumerator value of CSNPOL0 field.                               */
  #define SPIM_CSNPOL_CSNPOL0_LOW (0x0UL)            /*!< Active low (idle state high)                                         */
  #define SPIM_CSNPOL_CSNPOL0_HIGH (0x1UL)           /*!< Active high (idle state low)                                         */


/* SPIM_ORC: Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
              TXD.MAXCNT */

  #define SPIM_ORC_ResetValue (0x00000000UL)         /*!< Reset value of ORC register.                                         */

/* ORC @Bits 0..7 : Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than
                    TXD.MAXCNT. */

  #define SPIM_ORC_ORC_Pos (0UL)                     /*!< Position of ORC field.                                               */
  #define SPIM_ORC_ORC_Msk (0xFFUL << SPIM_ORC_ORC_Pos) /*!< Bit mask of ORC field.                                            */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           SPIS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct SPIS_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [SPIS_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_SPIS_TASKS_DMA_RX_Type;                        /*!< Size = 32 (0x020)                                                    */

/* SPIS_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                                  */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                                 */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                                 */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.                 */

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL) /*!< Position of ENABLEMATCH field.                              */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL) /*!< Min enumerator value of ENABLEMATCH field.                */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL) /*!< Max enumerator value of ENABLEMATCH field.                */
  #define SPIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                          */


/* SPIS_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                                */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                               */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                               */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.               */

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL) /*!< Position of DISABLEMATCH field.                           */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL) /*!< Min enumerator value of DISABLEMATCH field.             */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL) /*!< Max enumerator value of DISABLEMATCH field.             */
  #define SPIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                        */



/* ================================================== Struct SPIS_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [SPIS_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __OM  NRF_SPIS_TASKS_DMA_RX_Type RX;               /*!< (@ 0x00000008) Peripheral tasks.                                     */
} NRF_SPIS_TASKS_DMA_Type;                           /*!< Size = 40 (0x028)                                                    */


/* ============================================== Struct SPIS_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [SPIS_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Subscribe configuration for task ENABLEMATCH[n]       */
  __IOM uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Subscribe configuration for task DISABLEMATCH[n]      */
} NRF_SPIS_SUBSCRIBE_DMA_RX_Type;                    /*!< Size = 32 (0x020)                                                    */

/* SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                              */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                             */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                             */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.             */

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                      */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                  */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                   */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                           */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                              */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                              */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                      */
  #define SPIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                        */


/* SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                            */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                           */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                           */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.           */

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                     */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                 */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                  */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                          */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                             */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                             */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                     */
  #define SPIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                       */



/* ================================================ Struct SPIS_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [SPIS_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IM  uint32_t  RESERVED[2];
  __IOM NRF_SPIS_SUBSCRIBE_DMA_RX_Type RX;           /*!< (@ 0x00000008) Subscribe configuration for tasks                     */
} NRF_SPIS_SUBSCRIBE_DMA_Type;                       /*!< Size = 40 (0x028)                                                    */


/* ================================================ Struct SPIS_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [SPIS_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Pattern match is detected on the DMA data bus.        */
} NRF_SPIS_EVENTS_DMA_RX_Type;                       /*!< Size = 28 (0x01C)                                                    */

/* SPIS_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_RX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define SPIS_EVENTS_DMA_RX_END_END_Msk (0x1UL << SPIS_EVENTS_DMA_RX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define SPIS_EVENTS_DMA_RX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define SPIS_EVENTS_DMA_RX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define SPIS_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define SPIS_EVENTS_DMA_RX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* SPIS_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_RX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define SPIS_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << SPIS_EVENTS_DMA_RX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define SPIS_EVENTS_DMA_RX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define SPIS_EVENTS_DMA_RX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define SPIS_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define SPIS_EVENTS_DMA_RX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* SPIS_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define SPIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */


/* SPIS_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define SPIS_EVENTS_DMA_RX_MATCH_MaxCount (4UL)    /*!< Max size of MATCH[4] array.                                          */
  #define SPIS_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)    /*!< Max index of MATCH[4] array.                                         */
  #define SPIS_EVENTS_DMA_RX_MATCH_MinIndex (0UL)    /*!< Min index of MATCH[4] array.                                         */
  #define SPIS_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                            */

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)   /*!< Position of MATCH field.                                             */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << SPIS_EVENTS_DMA_RX_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field.       */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL) /*!< Min enumerator value of MATCH field.                                 */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL) /*!< Max enumerator value of MATCH field.                                 */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define SPIS_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL) /*!< Event generated                                                */



/* ================================================ Struct SPIS_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [SPIS_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
} NRF_SPIS_EVENTS_DMA_TX_Type;                       /*!< Size = 12 (0x00C)                                                    */

/* SPIS_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define SPIS_EVENTS_DMA_TX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define SPIS_EVENTS_DMA_TX_END_END_Msk (0x1UL << SPIS_EVENTS_DMA_TX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define SPIS_EVENTS_DMA_TX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define SPIS_EVENTS_DMA_TX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define SPIS_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define SPIS_EVENTS_DMA_TX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* SPIS_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define SPIS_EVENTS_DMA_TX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define SPIS_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << SPIS_EVENTS_DMA_TX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define SPIS_EVENTS_DMA_TX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define SPIS_EVENTS_DMA_TX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define SPIS_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define SPIS_EVENTS_DMA_TX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* SPIS_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define SPIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */



/* ================================================= Struct SPIS_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [SPIS_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_SPIS_EVENTS_DMA_RX_Type RX;              /*!< (@ 0x00000000) Peripheral events.                                    */
  __IOM NRF_SPIS_EVENTS_DMA_TX_Type TX;              /*!< (@ 0x0000001C) Peripheral events.                                    */
} NRF_SPIS_EVENTS_DMA_Type;                          /*!< Size = 40 (0x028)                                                    */


/* =============================================== Struct SPIS_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [SPIS_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Publish configuration for event MATCH[n]              */
} NRF_SPIS_PUBLISH_DMA_RX_Type;                      /*!< Size = 28 (0x01C)                                                    */

/* SPIS_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define SPIS_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define SPIS_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define SPIS_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* SPIS_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define SPIS_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define SPIS_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define SPIS_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* SPIS_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define SPIS_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */


/* SPIS_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define SPIS_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)   /*!< Max size of MATCH[4] array.                                          */
  #define SPIS_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)   /*!< Max index of MATCH[4] array.                                         */
  #define SPIS_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)   /*!< Min index of MATCH[4] array.                                         */
  #define SPIS_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define SPIS_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_RX_MATCH_EN_Pos) /*!< Bit mask of EN field.              */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define SPIS_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */



/* =============================================== Struct SPIS_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [SPIS_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
} NRF_SPIS_PUBLISH_DMA_TX_Type;                      /*!< Size = 12 (0x00C)                                                    */

/* SPIS_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define SPIS_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define SPIS_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define SPIS_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* SPIS_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define SPIS_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define SPIS_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define SPIS_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* SPIS_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define SPIS_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */



/* ================================================= Struct SPIS_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [SPIS_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_SPIS_PUBLISH_DMA_RX_Type RX;             /*!< (@ 0x00000000) Publish configuration for events                      */
  __IOM NRF_SPIS_PUBLISH_DMA_TX_Type TX;             /*!< (@ 0x0000001C) Publish configuration for events                      */
} NRF_SPIS_PUBLISH_DMA_Type;                         /*!< Size = 40 (0x028)                                                    */


/* ==================================================== Struct SPIS_PSEL ===================================================== */
/**
  * @brief PSEL [SPIS_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCK;                               /*!< (@ 0x00000000) Pin select for SCK                                    */
  __IOM uint32_t  MISO;                              /*!< (@ 0x00000004) Pin select for SDO signal                             */
  __IOM uint32_t  MOSI;                              /*!< (@ 0x00000008) Pin select for SDI signal                             */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CSN;                               /*!< (@ 0x00000010) Pin select for CSN signal                             */
} NRF_SPIS_PSEL_Type;                                /*!< Size = 20 (0x014)                                                    */

/* SPIS_PSEL_SCK: Pin select for SCK */
  #define SPIS_PSEL_SCK_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of SCK register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_SCK_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define SPIS_PSEL_SCK_PIN_Msk (0x1FUL << SPIS_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define SPIS_PSEL_SCK_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define SPIS_PSEL_SCK_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_SCK_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define SPIS_PSEL_SCK_PORT_Msk (0x7UL << SPIS_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define SPIS_PSEL_SCK_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define SPIS_PSEL_SCK_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_SCK_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define SPIS_PSEL_SCK_CONNECT_Msk (0x1UL << SPIS_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define SPIS_PSEL_SCK_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_SCK_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_SCK_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define SPIS_PSEL_SCK_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */


/* SPIS_PSEL_MISO: Pin select for SDO signal */
  #define SPIS_PSEL_MISO_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of MISO register.                                        */

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_MISO_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define SPIS_PSEL_MISO_PIN_Msk (0x1FUL << SPIS_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define SPIS_PSEL_MISO_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define SPIS_PSEL_MISO_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_MISO_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define SPIS_PSEL_MISO_PORT_Msk (0x7UL << SPIS_PSEL_MISO_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define SPIS_PSEL_MISO_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define SPIS_PSEL_MISO_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_MISO_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define SPIS_PSEL_MISO_CONNECT_Msk (0x1UL << SPIS_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define SPIS_PSEL_MISO_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_MISO_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_MISO_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define SPIS_PSEL_MISO_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* SPIS_PSEL_MOSI: Pin select for SDI signal */
  #define SPIS_PSEL_MOSI_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of MOSI register.                                        */

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_MOSI_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define SPIS_PSEL_MOSI_PIN_Msk (0x1FUL << SPIS_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define SPIS_PSEL_MOSI_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define SPIS_PSEL_MOSI_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_MOSI_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define SPIS_PSEL_MOSI_PORT_Msk (0x7UL << SPIS_PSEL_MOSI_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define SPIS_PSEL_MOSI_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define SPIS_PSEL_MOSI_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_MOSI_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define SPIS_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIS_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define SPIS_PSEL_MOSI_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_MOSI_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_MOSI_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define SPIS_PSEL_MOSI_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* SPIS_PSEL_CSN: Pin select for CSN signal */
  #define SPIS_PSEL_CSN_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of CSN register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define SPIS_PSEL_CSN_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define SPIS_PSEL_CSN_PIN_Msk (0x1FUL << SPIS_PSEL_CSN_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define SPIS_PSEL_CSN_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define SPIS_PSEL_CSN_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define SPIS_PSEL_CSN_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define SPIS_PSEL_CSN_PORT_Msk (0x7UL << SPIS_PSEL_CSN_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define SPIS_PSEL_CSN_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define SPIS_PSEL_CSN_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define SPIS_PSEL_CSN_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define SPIS_PSEL_CSN_CONNECT_Msk (0x1UL << SPIS_PSEL_CSN_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define SPIS_PSEL_CSN_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_CSN_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define SPIS_PSEL_CSN_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define SPIS_PSEL_CSN_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */



/* ================================================ Struct SPIS_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [SPIS_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) Configure individual match events                     */
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_SPIS_DMA_RX_MATCH_Type;                        /*!< Size = 20 (0x014)                                                    */

/* SPIS_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define SPIS_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                              */

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL) /*!< Position of ENABLE0 field.                                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0 field. */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL) /*!< Min enumerator value of ENABLE0 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL) /*!< Max enumerator value of ENABLE0 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL) /*!< Position of ENABLE1 field.                                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1 field. */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL) /*!< Min enumerator value of ENABLE1 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL) /*!< Max enumerator value of ENABLE1 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL) /*!< Position of ENABLE2 field.                                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2 field. */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL) /*!< Min enumerator value of ENABLE2 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL) /*!< Max enumerator value of ENABLE2 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL) /*!< Position of ENABLE3 field.                                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3 field. */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL) /*!< Min enumerator value of ENABLE3 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL) /*!< Max enumerator value of ENABLE3 field.                             */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define SPIS_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL) /*!< Position of ONESHOT0 field.                                        */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL) /*!< Min enumerator value of ONESHOT0 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL) /*!< Max enumerator value of ONESHOT0 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL) /*!< Position of ONESHOT1 field.                                        */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL) /*!< Min enumerator value of ONESHOT1 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL) /*!< Max enumerator value of ONESHOT1 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL) /*!< Position of ONESHOT2 field.                                        */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL) /*!< Min enumerator value of ONESHOT2 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL) /*!< Max enumerator value of ONESHOT2 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL) /*!< Position of ONESHOT3 field.                                        */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL) /*!< Min enumerator value of ONESHOT3 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL) /*!< Max enumerator value of ONESHOT3 field.                           */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define SPIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */


/* SPIS_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL) /*!< Max size of CANDIDATE[4] array.                                      */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL) /*!< Max index of CANDIDATE[4] array.                                     */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL) /*!< Min index of CANDIDATE[4] array.                                     */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL) /*!< Reset value of CANDIDATE[4] register.                     */

/* DATA @Bits 0..31 : Data to look for */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL) /*!< Position of DATA field.                                              */
  #define SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct SPIS_DMA_RX ==================================================== */
/**
  * @brief RX [SPIS_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_SPIS_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_SPIS_DMA_RX_Type;                              /*!< Size = 56 (0x038)                                                    */

/* SPIS_DMA_RX_PTR: RAM buffer start address */
  #define SPIS_DMA_RX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIS_DMA_RX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define SPIS_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* SPIS_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIS_DMA_RX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_DMA_RX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define SPIS_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* SPIS_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIS_DMA_RX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_DMA_RX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define SPIS_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* SPIS_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define SPIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* SPIS_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct SPIS_DMA_TX ==================================================== */
/**
  * @brief TX [SPIS_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_SPIS_DMA_TX_Type;                              /*!< Size = 36 (0x024)                                                    */

/* SPIS_DMA_TX_PTR: RAM buffer start address */
  #define SPIS_DMA_TX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define SPIS_DMA_TX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define SPIS_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_DMA_TX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* SPIS_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define SPIS_DMA_TX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_DMA_TX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define SPIS_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* SPIS_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define SPIS_DMA_TX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_DMA_TX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define SPIS_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* SPIS_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define SPIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* SPIS_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << SPIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct SPIS_DMA ===================================================== */
/**
  * @brief DMA [SPIS_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_SPIS_DMA_RX_Type RX;                     /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_SPIS_DMA_TX_Type TX;                     /*!< (@ 0x00000038) (unspecified)                                         */
} NRF_SPIS_DMA_Type;                                 /*!< Size = 92 (0x05C)                                                    */

/* ======================================================= Struct SPIS ======================================================= */
/**
  * @brief SPI Slave
  */
  typedef struct {                                   /*!< SPIS Structure                                                       */
    __IM uint32_t RESERVED[5];
    __OM uint32_t TASKS_ACQUIRE;                     /*!< (@ 0x00000014) Acquire SPI semaphore                                 */
    __OM uint32_t TASKS_RELEASE;                     /*!< (@ 0x00000018) Release SPI semaphore, enabling the SPI slave to
                                                                         acquire it*/
    __IM uint32_t RESERVED1[3];
    __OM NRF_SPIS_TASKS_DMA_Type TASKS_DMA;          /*!< (@ 0x00000028) Peripheral tasks.                                     */
    __IM uint32_t RESERVED2[17];
    __IOM uint32_t SUBSCRIBE_ACQUIRE;                /*!< (@ 0x00000094) Subscribe configuration for task ACQUIRE              */
    __IOM uint32_t SUBSCRIBE_RELEASE;                /*!< (@ 0x00000098) Subscribe configuration for task RELEASE              */
    __IM uint32_t RESERVED3[3];
    __IOM NRF_SPIS_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA; /*!< (@ 0x000000A8) Subscribe configuration for tasks                     */
    __IM uint32_t RESERVED4[13];
    __IOM uint32_t EVENTS_END;                       /*!< (@ 0x00000104) Granted transaction completed                         */
    __IM uint32_t RESERVED5[4];
    __IOM uint32_t EVENTS_ACQUIRED;                  /*!< (@ 0x00000118) Semaphore acquired                                    */
    __IM uint32_t RESERVED6[12];
    __IOM NRF_SPIS_EVENTS_DMA_Type EVENTS_DMA;       /*!< (@ 0x0000014C) Peripheral events.                                    */
    __IM uint32_t RESERVED7[4];
    __IOM uint32_t PUBLISH_END;                      /*!< (@ 0x00000184) Publish configuration for event END                   */
    __IM uint32_t RESERVED8[4];
    __IOM uint32_t PUBLISH_ACQUIRED;                 /*!< (@ 0x00000198) Publish configuration for event ACQUIRED              */
    __IM uint32_t RESERVED9[12];
    __IOM NRF_SPIS_PUBLISH_DMA_Type PUBLISH_DMA;     /*!< (@ 0x000001CC) Publish configuration for events                      */
    __IM uint32_t RESERVED10[3];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED11[64];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED12[61];
    __IM uint32_t SEMSTAT;                           /*!< (@ 0x00000400) Semaphore status register                             */
    __IM uint32_t RESERVED13[15];
    __IOM uint32_t STATUS;                           /*!< (@ 0x00000440) Status from last transaction                          */
    __IM uint32_t RESERVED14[47];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable SPI slave                                      */
    __IM uint32_t RESERVED15[20];
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000554) Configuration register                                */
    __IM uint32_t RESERVED16;
    __IOM uint32_t DEF;                              /*!< (@ 0x0000055C) Default character. Character clocked out in case of an
                                                                         ignored transaction.*/
    __IM uint32_t RESERVED17[24];
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Over-read character                                   */
    __IM uint32_t RESERVED18[15];
    __IOM NRF_SPIS_PSEL_Type PSEL;                   /*!< (@ 0x00000600) (unspecified)                                         */
    __IM uint32_t RESERVED19[59];
    __IOM NRF_SPIS_DMA_Type DMA;                     /*!< (@ 0x00000700) (unspecified)                                         */
  } NRF_SPIS_Type;                                   /*!< Size = 1884 (0x75C)                                                  */

/* SPIS_TASKS_ACQUIRE: Acquire SPI semaphore */
  #define SPIS_TASKS_ACQUIRE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_ACQUIRE register.                             */

/* TASKS_ACQUIRE @Bit 0 : Acquire SPI semaphore */
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos (0UL) /*!< Position of TASKS_ACQUIRE field.                                     */
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Msk (0x1UL << SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos) /*!< Bit mask of TASKS_ACQUIRE
                                                                            field.*/
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Min (0x1UL) /*!< Min enumerator value of TASKS_ACQUIRE field.                       */
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Max (0x1UL) /*!< Max enumerator value of TASKS_ACQUIRE field.                       */
  #define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Trigger (0x1UL) /*!< Trigger task                                                   */


/* SPIS_TASKS_RELEASE: Release SPI semaphore, enabling the SPI slave to acquire it */
  #define SPIS_TASKS_RELEASE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RELEASE register.                             */

/* TASKS_RELEASE @Bit 0 : Release SPI semaphore, enabling the SPI slave to acquire it */
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos (0UL) /*!< Position of TASKS_RELEASE field.                                     */
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Msk (0x1UL << SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos) /*!< Bit mask of TASKS_RELEASE
                                                                            field.*/
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Min (0x1UL) /*!< Min enumerator value of TASKS_RELEASE field.                       */
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Max (0x1UL) /*!< Max enumerator value of TASKS_RELEASE field.                       */
  #define SPIS_TASKS_RELEASE_TASKS_RELEASE_Trigger (0x1UL) /*!< Trigger task                                                   */


/* SPIS_SUBSCRIBE_ACQUIRE: Subscribe configuration for task ACQUIRE */
  #define SPIS_SUBSCRIBE_ACQUIRE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_ACQUIRE register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that task ACQUIRE will subscribe to */
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_ACQUIRE_EN_Pos) /*!< Bit mask of EN field.                    */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define SPIS_SUBSCRIBE_ACQUIRE_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* SPIS_SUBSCRIBE_RELEASE: Subscribe configuration for task RELEASE */
  #define SPIS_SUBSCRIBE_RELEASE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RELEASE register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that task RELEASE will subscribe to */
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define SPIS_SUBSCRIBE_RELEASE_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_RELEASE_EN_Pos) /*!< Bit mask of EN field.                    */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define SPIS_SUBSCRIBE_RELEASE_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* SPIS_EVENTS_END: Granted transaction completed */
  #define SPIS_EVENTS_END_ResetValue (0x00000000UL)  /*!< Reset value of EVENTS_END register.                                  */

/* EVENTS_END @Bit 0 : Granted transaction completed */
  #define SPIS_EVENTS_END_EVENTS_END_Pos (0UL)       /*!< Position of EVENTS_END field.                                        */
  #define SPIS_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIS_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field.          */
  #define SPIS_EVENTS_END_EVENTS_END_Min (0x0UL)     /*!< Min enumerator value of EVENTS_END field.                            */
  #define SPIS_EVENTS_END_EVENTS_END_Max (0x1UL)     /*!< Max enumerator value of EVENTS_END field.                            */
  #define SPIS_EVENTS_END_EVENTS_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define SPIS_EVENTS_END_EVENTS_END_Generated (0x1UL) /*!< Event generated                                                    */


/* SPIS_EVENTS_ACQUIRED: Semaphore acquired */
  #define SPIS_EVENTS_ACQUIRED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ACQUIRED register.                         */

/* EVENTS_ACQUIRED @Bit 0 : Semaphore acquired */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos (0UL) /*!< Position of EVENTS_ACQUIRED field.                               */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Msk (0x1UL << SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos) /*!< Bit mask of
                                                                            EVENTS_ACQUIRED field.*/
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Min (0x0UL) /*!< Min enumerator value of EVENTS_ACQUIRED field.                 */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Max (0x1UL) /*!< Max enumerator value of EVENTS_ACQUIRED field.                 */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Generated (0x1UL) /*!< Event generated                                          */


/* SPIS_PUBLISH_END: Publish configuration for event END */
  #define SPIS_PUBLISH_END_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define SPIS_PUBLISH_END_CHIDX_Pos (0UL)           /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.                      */
  #define SPIS_PUBLISH_END_CHIDX_Min (0x00UL)        /*!< Min value of CHIDX field.                                            */
  #define SPIS_PUBLISH_END_CHIDX_Max (0xFFUL)        /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_END_EN_Pos (31UL)             /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_END_EN_Msk (0x1UL << SPIS_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field.                                */
  #define SPIS_PUBLISH_END_EN_Min (0x0UL)            /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_END_EN_Max (0x1UL)            /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_END_EN_Disabled (0x0UL)       /*!< Disable publishing                                                   */
  #define SPIS_PUBLISH_END_EN_Enabled (0x1UL)        /*!< Enable publishing                                                    */


/* SPIS_PUBLISH_ACQUIRED: Publish configuration for event ACQUIRED */
  #define SPIS_PUBLISH_ACQUIRED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ACQUIRED register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that event ACQUIRED will publish to */
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_ACQUIRED_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define SPIS_PUBLISH_ACQUIRED_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define SPIS_PUBLISH_ACQUIRED_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define SPIS_PUBLISH_ACQUIRED_EN_Msk (0x1UL << SPIS_PUBLISH_ACQUIRED_EN_Pos) /*!< Bit mask of EN field.                      */
  #define SPIS_PUBLISH_ACQUIRED_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_ACQUIRED_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define SPIS_PUBLISH_ACQUIRED_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define SPIS_PUBLISH_ACQUIRED_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* SPIS_SHORTS: Shortcuts between local events and tasks */
  #define SPIS_SHORTS_ResetValue (0x00000000UL)      /*!< Reset value of SHORTS register.                                      */

/* END_ACQUIRE @Bit 2 : Shortcut between event END and task ACQUIRE */
  #define SPIS_SHORTS_END_ACQUIRE_Pos (2UL)          /*!< Position of END_ACQUIRE field.                                       */
  #define SPIS_SHORTS_END_ACQUIRE_Msk (0x1UL << SPIS_SHORTS_END_ACQUIRE_Pos) /*!< Bit mask of END_ACQUIRE field.               */
  #define SPIS_SHORTS_END_ACQUIRE_Min (0x0UL)        /*!< Min enumerator value of END_ACQUIRE field.                           */
  #define SPIS_SHORTS_END_ACQUIRE_Max (0x1UL)        /*!< Max enumerator value of END_ACQUIRE field.                           */
  #define SPIS_SHORTS_END_ACQUIRE_Disabled (0x0UL)   /*!< Disable shortcut                                                     */
  #define SPIS_SHORTS_END_ACQUIRE_Enabled (0x1UL)    /*!< Enable shortcut                                                      */

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.   */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.   */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.   */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.   */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field. */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field. */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field. */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field. */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define SPIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                  */


/* SPIS_INTENSET: Enable interrupt */
  #define SPIS_INTENSET_ResetValue (0x00000000UL)    /*!< Reset value of INTENSET register.                                    */

/* END @Bit 1 : Write '1' to enable interrupt for event END */
  #define SPIS_INTENSET_END_Pos (1UL)                /*!< Position of END field.                                               */
  #define SPIS_INTENSET_END_Msk (0x1UL << SPIS_INTENSET_END_Pos) /*!< Bit mask of END field.                                   */
  #define SPIS_INTENSET_END_Min (0x0UL)              /*!< Min enumerator value of END field.                                   */
  #define SPIS_INTENSET_END_Max (0x1UL)              /*!< Max enumerator value of END field.                                   */
  #define SPIS_INTENSET_END_Set (0x1UL)              /*!< Enable                                                               */
  #define SPIS_INTENSET_END_Disabled (0x0UL)         /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_END_Enabled (0x1UL)          /*!< Read: Enabled                                                        */

/* ACQUIRED @Bit 6 : Write '1' to enable interrupt for event ACQUIRED */
  #define SPIS_INTENSET_ACQUIRED_Pos (6UL)           /*!< Position of ACQUIRED field.                                          */
  #define SPIS_INTENSET_ACQUIRED_Msk (0x1UL << SPIS_INTENSET_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field.                    */
  #define SPIS_INTENSET_ACQUIRED_Min (0x0UL)         /*!< Min enumerator value of ACQUIRED field.                              */
  #define SPIS_INTENSET_ACQUIRED_Max (0x1UL)         /*!< Max enumerator value of ACQUIRED field.                              */
  #define SPIS_INTENSET_ACQUIRED_Set (0x1UL)         /*!< Enable                                                               */
  #define SPIS_INTENSET_ACQUIRED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_ACQUIRED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define SPIS_INTENSET_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define SPIS_INTENSET_DMARXEND_Msk (0x1UL << SPIS_INTENSET_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define SPIS_INTENSET_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define SPIS_INTENSET_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define SPIS_INTENSET_DMARXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define SPIS_INTENSET_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define SPIS_INTENSET_DMARXREADY_Msk (0x1UL << SPIS_INTENSET_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define SPIS_INTENSET_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define SPIS_INTENSET_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define SPIS_INTENSET_DMARXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define SPIS_INTENSET_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define SPIS_INTENSET_DMARXBUSERROR_Msk (0x1UL << SPIS_INTENSET_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define SPIS_INTENSET_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define SPIS_INTENSET_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define SPIS_INTENSET_DMARXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIS_INTENSET_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define SPIS_INTENSET_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define SPIS_INTENSET_DMARXMATCH0_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define SPIS_INTENSET_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define SPIS_INTENSET_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define SPIS_INTENSET_DMARXMATCH0_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define SPIS_INTENSET_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define SPIS_INTENSET_DMARXMATCH1_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define SPIS_INTENSET_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define SPIS_INTENSET_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define SPIS_INTENSET_DMARXMATCH1_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define SPIS_INTENSET_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define SPIS_INTENSET_DMARXMATCH2_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define SPIS_INTENSET_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define SPIS_INTENSET_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define SPIS_INTENSET_DMARXMATCH2_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define SPIS_INTENSET_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define SPIS_INTENSET_DMARXMATCH3_Msk (0x1UL << SPIS_INTENSET_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define SPIS_INTENSET_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define SPIS_INTENSET_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define SPIS_INTENSET_DMARXMATCH3_Set (0x1UL)      /*!< Enable                                                               */
  #define SPIS_INTENSET_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define SPIS_INTENSET_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define SPIS_INTENSET_DMATXEND_Msk (0x1UL << SPIS_INTENSET_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define SPIS_INTENSET_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define SPIS_INTENSET_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define SPIS_INTENSET_DMATXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define SPIS_INTENSET_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define SPIS_INTENSET_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define SPIS_INTENSET_DMATXREADY_Msk (0x1UL << SPIS_INTENSET_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define SPIS_INTENSET_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define SPIS_INTENSET_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define SPIS_INTENSET_DMATXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define SPIS_INTENSET_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIS_INTENSET_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define SPIS_INTENSET_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define SPIS_INTENSET_DMATXBUSERROR_Msk (0x1UL << SPIS_INTENSET_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define SPIS_INTENSET_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define SPIS_INTENSET_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define SPIS_INTENSET_DMATXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define SPIS_INTENSET_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIS_INTENSET_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* SPIS_INTENCLR: Disable interrupt */
  #define SPIS_INTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of INTENCLR register.                                    */

/* END @Bit 1 : Write '1' to disable interrupt for event END */
  #define SPIS_INTENCLR_END_Pos (1UL)                /*!< Position of END field.                                               */
  #define SPIS_INTENCLR_END_Msk (0x1UL << SPIS_INTENCLR_END_Pos) /*!< Bit mask of END field.                                   */
  #define SPIS_INTENCLR_END_Min (0x0UL)              /*!< Min enumerator value of END field.                                   */
  #define SPIS_INTENCLR_END_Max (0x1UL)              /*!< Max enumerator value of END field.                                   */
  #define SPIS_INTENCLR_END_Clear (0x1UL)            /*!< Disable                                                              */
  #define SPIS_INTENCLR_END_Disabled (0x0UL)         /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_END_Enabled (0x1UL)          /*!< Read: Enabled                                                        */

/* ACQUIRED @Bit 6 : Write '1' to disable interrupt for event ACQUIRED */
  #define SPIS_INTENCLR_ACQUIRED_Pos (6UL)           /*!< Position of ACQUIRED field.                                          */
  #define SPIS_INTENCLR_ACQUIRED_Msk (0x1UL << SPIS_INTENCLR_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field.                    */
  #define SPIS_INTENCLR_ACQUIRED_Min (0x0UL)         /*!< Min enumerator value of ACQUIRED field.                              */
  #define SPIS_INTENCLR_ACQUIRED_Max (0x1UL)         /*!< Max enumerator value of ACQUIRED field.                              */
  #define SPIS_INTENCLR_ACQUIRED_Clear (0x1UL)       /*!< Disable                                                              */
  #define SPIS_INTENCLR_ACQUIRED_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_ACQUIRED_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define SPIS_INTENCLR_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define SPIS_INTENCLR_DMARXEND_Msk (0x1UL << SPIS_INTENCLR_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define SPIS_INTENCLR_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define SPIS_INTENCLR_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define SPIS_INTENCLR_DMARXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define SPIS_INTENCLR_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define SPIS_INTENCLR_DMARXREADY_Msk (0x1UL << SPIS_INTENCLR_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define SPIS_INTENCLR_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define SPIS_INTENCLR_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define SPIS_INTENCLR_DMARXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define SPIS_INTENCLR_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define SPIS_INTENCLR_DMARXBUSERROR_Msk (0x1UL << SPIS_INTENCLR_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define SPIS_INTENCLR_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define SPIS_INTENCLR_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define SPIS_INTENCLR_DMARXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIS_INTENCLR_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define SPIS_INTENCLR_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define SPIS_INTENCLR_DMARXMATCH0_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define SPIS_INTENCLR_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH0_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define SPIS_INTENCLR_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define SPIS_INTENCLR_DMARXMATCH1_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define SPIS_INTENCLR_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH1_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define SPIS_INTENCLR_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define SPIS_INTENCLR_DMARXMATCH2_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define SPIS_INTENCLR_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH2_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define SPIS_INTENCLR_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define SPIS_INTENCLR_DMARXMATCH3_Msk (0x1UL << SPIS_INTENCLR_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define SPIS_INTENCLR_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define SPIS_INTENCLR_DMARXMATCH3_Clear (0x1UL)    /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define SPIS_INTENCLR_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define SPIS_INTENCLR_DMATXEND_Msk (0x1UL << SPIS_INTENCLR_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define SPIS_INTENCLR_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define SPIS_INTENCLR_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define SPIS_INTENCLR_DMATXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define SPIS_INTENCLR_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define SPIS_INTENCLR_DMATXREADY_Msk (0x1UL << SPIS_INTENCLR_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define SPIS_INTENCLR_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define SPIS_INTENCLR_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define SPIS_INTENCLR_DMATXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define SPIS_INTENCLR_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define SPIS_INTENCLR_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define SPIS_INTENCLR_DMATXBUSERROR_Msk (0x1UL << SPIS_INTENCLR_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define SPIS_INTENCLR_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define SPIS_INTENCLR_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define SPIS_INTENCLR_DMATXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define SPIS_INTENCLR_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define SPIS_INTENCLR_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* SPIS_SEMSTAT: Semaphore status register */
  #define SPIS_SEMSTAT_ResetValue (0x00000001UL)     /*!< Reset value of SEMSTAT register.                                     */

/* SEMSTAT @Bits 0..1 : Semaphore status */
  #define SPIS_SEMSTAT_SEMSTAT_Pos (0UL)             /*!< Position of SEMSTAT field.                                           */
  #define SPIS_SEMSTAT_SEMSTAT_Msk (0x3UL << SPIS_SEMSTAT_SEMSTAT_Pos) /*!< Bit mask of SEMSTAT field.                         */
  #define SPIS_SEMSTAT_SEMSTAT_Min (0x0UL)           /*!< Min enumerator value of SEMSTAT field.                               */
  #define SPIS_SEMSTAT_SEMSTAT_Max (0x3UL)           /*!< Max enumerator value of SEMSTAT field.                               */
  #define SPIS_SEMSTAT_SEMSTAT_Free (0x0UL)          /*!< Semaphore is free                                                    */
  #define SPIS_SEMSTAT_SEMSTAT_CPU (0x1UL)           /*!< Semaphore is assigned to CPU                                         */
  #define SPIS_SEMSTAT_SEMSTAT_SPIS (0x2UL)          /*!< Semaphore is assigned to SPI slave                                   */
  #define SPIS_SEMSTAT_SEMSTAT_CPUPending (0x3UL)    /*!< Semaphore is assigned to SPI but a handover to the CPU is pending    */


/* SPIS_STATUS: Status from last transaction */
  #define SPIS_STATUS_ResetValue (0x00000000UL)      /*!< Reset value of STATUS register.                                      */

/* OVERREAD @Bit 0 : TX buffer over-read detected, and prevented */
  #define SPIS_STATUS_OVERREAD_Pos (0UL)             /*!< Position of OVERREAD field.                                          */
  #define SPIS_STATUS_OVERREAD_Msk (0x1UL << SPIS_STATUS_OVERREAD_Pos) /*!< Bit mask of OVERREAD field.                        */
  #define SPIS_STATUS_OVERREAD_Min (0x0UL)           /*!< Min enumerator value of OVERREAD field.                              */
  #define SPIS_STATUS_OVERREAD_Max (0x1UL)           /*!< Max enumerator value of OVERREAD field.                              */
  #define SPIS_STATUS_OVERREAD_NotPresent (0x0UL)    /*!< Read: error not present                                              */
  #define SPIS_STATUS_OVERREAD_Present (0x1UL)       /*!< Read: error present                                                  */
  #define SPIS_STATUS_OVERREAD_Clear (0x1UL)         /*!< Write: clear error on writing '1'                                    */

/* OVERFLOW @Bit 1 : RX buffer overflow detected, and prevented */
  #define SPIS_STATUS_OVERFLOW_Pos (1UL)             /*!< Position of OVERFLOW field.                                          */
  #define SPIS_STATUS_OVERFLOW_Msk (0x1UL << SPIS_STATUS_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field.                        */
  #define SPIS_STATUS_OVERFLOW_Min (0x0UL)           /*!< Min enumerator value of OVERFLOW field.                              */
  #define SPIS_STATUS_OVERFLOW_Max (0x1UL)           /*!< Max enumerator value of OVERFLOW field.                              */
  #define SPIS_STATUS_OVERFLOW_NotPresent (0x0UL)    /*!< Read: error not present                                              */
  #define SPIS_STATUS_OVERFLOW_Present (0x1UL)       /*!< Read: error present                                                  */
  #define SPIS_STATUS_OVERFLOW_Clear (0x1UL)         /*!< Write: clear error on writing '1'                                    */


/* SPIS_ENABLE: Enable SPI slave */
  #define SPIS_ENABLE_ResetValue (0x00000000UL)      /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..3 : Enable or disable SPI slave */
  #define SPIS_ENABLE_ENABLE_Pos (0UL)               /*!< Position of ENABLE field.                                            */
  #define SPIS_ENABLE_ENABLE_Msk (0xFUL << SPIS_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                              */
  #define SPIS_ENABLE_ENABLE_Min (0x0UL)             /*!< Min enumerator value of ENABLE field.                                */
  #define SPIS_ENABLE_ENABLE_Max (0x2UL)             /*!< Max enumerator value of ENABLE field.                                */
  #define SPIS_ENABLE_ENABLE_Disabled (0x0UL)        /*!< Disable SPI slave                                                    */
  #define SPIS_ENABLE_ENABLE_Enabled (0x2UL)         /*!< Enable SPI slave                                                     */


/* SPIS_CONFIG: Configuration register */
  #define SPIS_CONFIG_ResetValue (0x00000000UL)      /*!< Reset value of CONFIG register.                                      */

/* ORDER @Bit 0 : Bit order */
  #define SPIS_CONFIG_ORDER_Pos (0UL)                /*!< Position of ORDER field.                                             */
  #define SPIS_CONFIG_ORDER_Msk (0x1UL << SPIS_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field.                                 */
  #define SPIS_CONFIG_ORDER_Min (0x0UL)              /*!< Min enumerator value of ORDER field.                                 */
  #define SPIS_CONFIG_ORDER_Max (0x1UL)              /*!< Max enumerator value of ORDER field.                                 */
  #define SPIS_CONFIG_ORDER_MsbFirst (0x0UL)         /*!< Most significant bit shifted out first                               */
  #define SPIS_CONFIG_ORDER_LsbFirst (0x1UL)         /*!< Least significant bit shifted out first                              */

/* CPHA @Bit 1 : Serial clock (SCK) phase */
  #define SPIS_CONFIG_CPHA_Pos (1UL)                 /*!< Position of CPHA field.                                              */
  #define SPIS_CONFIG_CPHA_Msk (0x1UL << SPIS_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field.                                    */
  #define SPIS_CONFIG_CPHA_Min (0x0UL)               /*!< Min enumerator value of CPHA field.                                  */
  #define SPIS_CONFIG_CPHA_Max (0x1UL)               /*!< Max enumerator value of CPHA field.                                  */
  #define SPIS_CONFIG_CPHA_Leading (0x0UL)           /*!< Sample on leading edge of clock, shift serial data on trailing edge  */
  #define SPIS_CONFIG_CPHA_Trailing (0x1UL)          /*!< Sample on trailing edge of clock, shift serial data on leading edge  */

/* CPOL @Bit 2 : Serial clock (SCK) polarity */
  #define SPIS_CONFIG_CPOL_Pos (2UL)                 /*!< Position of CPOL field.                                              */
  #define SPIS_CONFIG_CPOL_Msk (0x1UL << SPIS_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field.                                    */
  #define SPIS_CONFIG_CPOL_Min (0x0UL)               /*!< Min enumerator value of CPOL field.                                  */
  #define SPIS_CONFIG_CPOL_Max (0x1UL)               /*!< Max enumerator value of CPOL field.                                  */
  #define SPIS_CONFIG_CPOL_ActiveHigh (0x0UL)        /*!< Active high                                                          */
  #define SPIS_CONFIG_CPOL_ActiveLow (0x1UL)         /*!< Active low                                                           */


/* SPIS_DEF: Default character. Character clocked out in case of an ignored transaction. */
  #define SPIS_DEF_ResetValue (0x00000000UL)         /*!< Reset value of DEF register.                                         */

/* DEF @Bits 0..7 : Default character. Character clocked out in case of an ignored transaction. */
  #define SPIS_DEF_DEF_Pos (0UL)                     /*!< Position of DEF field.                                               */
  #define SPIS_DEF_DEF_Msk (0xFFUL << SPIS_DEF_DEF_Pos) /*!< Bit mask of DEF field.                                            */


/* SPIS_ORC: Over-read character */
  #define SPIS_ORC_ResetValue (0x00000000UL)         /*!< Reset value of ORC register.                                         */

/* ORC @Bits 0..7 : Over-read character. Character clocked out after an over-read of the transmit buffer. */
  #define SPIS_ORC_ORC_Pos (0UL)                     /*!< Position of ORC field.                                               */
  #define SPIS_ORC_ORC_Msk (0xFFUL << SPIS_ORC_ORC_Pos) /*!< Bit mask of ORC field.                                            */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            SWI                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct SWI ======================================================== */
/**
  * @brief Software interrupt
  */
  typedef struct {                                   /*!< SWI Structure                                                        */
    __IM uint32_t RESERVED;
  } NRF_SWI_Type;                                    /*!< Size = 4 (0x004)                                                     */

#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            TAD                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TAD ======================================================== */
/**
  * @brief Trace and debug control
  */
  typedef struct {                                   /*!< TAD Structure                                                        */
    __IM uint32_t RESERVED[256];
    __IOM uint32_t SYSPWRUPREQ;                      /*!< (@ 0x00000400) System power-up request                               */
    __IOM uint32_t DBGPWRUPREQ;                      /*!< (@ 0x00000404) Debug power-up request                                */
    __IM uint32_t RESERVED1[62];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable debug domain and aquire selected GPIOs         */
    __IM uint32_t RESERVED2[5];
    __IOM uint32_t TRACEPORTSPEED;                   /*!< (@ 0x00000518) Trace port speed                                      */
  } NRF_TAD_Type;                                    /*!< Size = 1308 (0x51C)                                                  */

/* TAD_SYSPWRUPREQ: System power-up request */
  #define TAD_SYSPWRUPREQ_ResetValue (0x00000000UL)  /*!< Reset value of SYSPWRUPREQ register.                                 */

/* ACTIVE @Bit 0 : Activate power-up request */
  #define TAD_SYSPWRUPREQ_ACTIVE_Pos (0UL)           /*!< Position of ACTIVE field.                                            */
  #define TAD_SYSPWRUPREQ_ACTIVE_Msk (0x1UL << TAD_SYSPWRUPREQ_ACTIVE_Pos) /*!< Bit mask of ACTIVE field.                      */
  #define TAD_SYSPWRUPREQ_ACTIVE_Min (0x0UL)         /*!< Min enumerator value of ACTIVE field.                                */
  #define TAD_SYSPWRUPREQ_ACTIVE_Max (0x1UL)         /*!< Max enumerator value of ACTIVE field.                                */
  #define TAD_SYSPWRUPREQ_ACTIVE_NotActive (0x0UL)   /*!< Power-up request not active                                          */
  #define TAD_SYSPWRUPREQ_ACTIVE_Active (0x1UL)      /*!< Power-up request active                                              */


/* TAD_DBGPWRUPREQ: Debug power-up request */
  #define TAD_DBGPWRUPREQ_ResetValue (0x00000000UL)  /*!< Reset value of DBGPWRUPREQ register.                                 */

/* ACTIVE @Bit 0 : Activate power-up request */
  #define TAD_DBGPWRUPREQ_ACTIVE_Pos (0UL)           /*!< Position of ACTIVE field.                                            */
  #define TAD_DBGPWRUPREQ_ACTIVE_Msk (0x1UL << TAD_DBGPWRUPREQ_ACTIVE_Pos) /*!< Bit mask of ACTIVE field.                      */
  #define TAD_DBGPWRUPREQ_ACTIVE_Min (0x0UL)         /*!< Min enumerator value of ACTIVE field.                                */
  #define TAD_DBGPWRUPREQ_ACTIVE_Max (0x1UL)         /*!< Max enumerator value of ACTIVE field.                                */
  #define TAD_DBGPWRUPREQ_ACTIVE_NotActive (0x0UL)   /*!< Power-up request not active                                          */
  #define TAD_DBGPWRUPREQ_ACTIVE_Active (0x1UL)      /*!< Power-up request active                                              */


/* TAD_ENABLE: Enable debug domain and aquire selected GPIOs */
  #define TAD_ENABLE_ResetValue (0x00000000UL)       /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bit 0 : (unspecified) */
  #define TAD_ENABLE_ENABLE_Pos (0UL)                /*!< Position of ENABLE field.                                            */
  #define TAD_ENABLE_ENABLE_Msk (0x1UL << TAD_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                                */
  #define TAD_ENABLE_ENABLE_Min (0x0UL)              /*!< Min enumerator value of ENABLE field.                                */
  #define TAD_ENABLE_ENABLE_Max (0x1UL)              /*!< Max enumerator value of ENABLE field.                                */
  #define TAD_ENABLE_ENABLE_DISABLED (0x0UL)         /*!< Disable debug domain and release selected GPIOs                      */
  #define TAD_ENABLE_ENABLE_ENABLED (0x1UL)          /*!< Enable debug domain and aquire selected GPIOs                        */


/* TAD_TRACEPORTSPEED: Trace port speed */
  #define TAD_TRACEPORTSPEED_ResetValue (0x00000000UL) /*!< Reset value of TRACEPORTSPEED register.                            */

/* TRACEPORTSPEED @Bits 0..1 : Trace port speed is divided from CPU clock. The TRACECLK pin output will be divided again by two
                               from the trace port clock. */

  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos (0UL) /*!< Position of TRACEPORTSPEED field.                                   */
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Msk (0x3UL << TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos) /*!< Bit mask of TRACEPORTSPEED
                                                                            field.*/
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Min (0x0UL) /*!< Min enumerator value of TRACEPORTSPEED field.                     */
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Max (0x3UL) /*!< Max enumerator value of TRACEPORTSPEED field.                     */
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV1 (0x0UL) /*!< Trace port speed equals CPU clock                                */
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV2 (0x1UL) /*!< Trace port speed equals CPU clock divided by 2                   */
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV4 (0x2UL) /*!< Trace port speed equals CPU clock divided by 4                   */
  #define TAD_TRACEPORTSPEED_TRACEPORTSPEED_DIV32 (0x3UL) /*!< Trace port speed equals CPU clock divided by 32                 */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TAMPC                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ============================================ Struct TAMPC_PROTECT_DOMAIN_DBGEN ============================================ */
/**
  * @brief DBGEN [TAMPC_PROTECT_DOMAIN_DBGEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for invasive (halting) debug enable
                                                                         for the local debug components within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for invasive (halting) debug enable for
                                                                         domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_DBGEN_Type;               /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_DOMAIN_DBGEN_CTRL: Control register for invasive (halting) debug enable for the local debug components within
                                     domain n. */

  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_ResetValue (0x00000010UL) /*!< Reset value of CTRL register.                         */

/* VALUE @Bit 0 : Set value of dbgen signal. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                        */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                          */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                          */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0, indicating that invasive debug is disabled.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1, indicating that invasive debug is enabled.*/

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                          */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                            */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                            */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                            */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                              */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                    */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.      */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.      */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.            */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.              */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.           */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                           */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                           */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                           */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                             */


/* TAMPC_PROTECT_DOMAIN_DBGEN_STATUS: Status register for invasive (halting) debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                     */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                      */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                        */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                        */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                      */
  #define TAMPC_PROTECT_DOMAIN_DBGEN_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                           */



/* ============================================ Struct TAMPC_PROTECT_DOMAIN_NIDEN ============================================ */
/**
  * @brief NIDEN [TAMPC_PROTECT_DOMAIN_NIDEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for non-invasive debug enable for the
                                                                         local debug components within domain n.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for non-invasive debug enable for
                                                                         domain n.*/
} NRF_TAMPC_PROTECT_DOMAIN_NIDEN_Type;               /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_DOMAIN_NIDEN_CTRL: Control register for non-invasive debug enable for the local debug components within domain
                                     n. */

  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_ResetValue (0x00000010UL) /*!< Reset value of CTRL register.                         */

/* VALUE @Bit 0 : Set value of niden signal. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                        */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                          */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                          */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0, indicating that non-invasive debug is
                                                                 disabled.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1, indicating that non-invasive debug is
                                                                  enabled.*/

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                          */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                            */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                            */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                            */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                              */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                    */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.      */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.      */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.            */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.              */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.           */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                           */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                           */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                           */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                             */


/* TAMPC_PROTECT_DOMAIN_NIDEN_STATUS: Status register for non-invasive debug enable for domain n. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                     */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                      */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                        */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                        */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                      */
  #define TAMPC_PROTECT_DOMAIN_NIDEN_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                           */



/* =============================================== Struct TAMPC_PROTECT_DOMAIN =============================================== */
/**
  * @brief DOMAIN [TAMPC_PROTECT_DOMAIN] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_DOMAIN_DBGEN_Type DBGEN;   /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_TAMPC_PROTECT_DOMAIN_NIDEN_Type NIDEN;   /*!< (@ 0x00000008) (unspecified)                                         */
  __IM  uint32_t  RESERVED[4];
} NRF_TAMPC_PROTECT_DOMAIN_Type;                     /*!< Size = 32 (0x020)                                                    */
  #define TAMPC_PROTECT_DOMAIN_MaxCount (1UL)        /*!< Size of DOMAIN[1] array.                                             */
  #define TAMPC_PROTECT_DOMAIN_MaxIndex (0UL)        /*!< Max index of DOMAIN[1] array.                                        */
  #define TAMPC_PROTECT_DOMAIN_MinIndex (0UL)        /*!< Min index of DOMAIN[1] array.                                        */


/* ============================================== Struct TAMPC_PROTECT_AP_DBGEN ============================================== */
/**
  * @brief DBGEN [TAMPC_PROTECT_AP_DBGEN] (unspecified)
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register to enable invasive (halting) debug in
                                                                         domain ns access port.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for invasive (halting) debug enable for
                                                                         domain ns access port.*/
} NRF_TAMPC_PROTECT_AP_DBGEN_Type;                   /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_AP_DBGEN_CTRL: Control register to enable invasive (halting) debug in domain ns access port. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_ResetValue (0x00000010UL) /*!< Reset value of CTRL register.                             */

/* VALUE @Bit 0 : Set value of dbgen signal. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                            */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE field. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                              */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                              */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0, indicating that invasive debug is disabled.    */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1, indicating that invasive debug is enabled.    */

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                              */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK field.    */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                                */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                                */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                                */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                                  */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                        */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Pos) /*!< Bit
                                                                            mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.          */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.          */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.                */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.                  */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.               */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                               */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Pos) /*!< Bit mask of KEY field.    */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                               */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                               */
  #define TAMPC_PROTECT_AP_DBGEN_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                                 */


/* TAMPC_PROTECT_AP_DBGEN_STATUS: Status register for invasive (halting) debug enable for domain ns access port. */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                         */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                          */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                            */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                            */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                          */
  #define TAMPC_PROTECT_AP_DBGEN_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                               */



/* ================================================= Struct TAMPC_PROTECT_AP ================================================= */
/**
  * @brief AP [TAMPC_PROTECT_AP] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_AP_DBGEN_Type DBGEN;       /*!< (@ 0x00000000) (unspecified)                                         */
  __IM  uint32_t  RESERVED[2];
} NRF_TAMPC_PROTECT_AP_Type;                         /*!< Size = 16 (0x010)                                                    */
  #define TAMPC_PROTECT_AP_MaxCount (1UL)            /*!< Size of AP[1] array.                                                 */
  #define TAMPC_PROTECT_AP_MaxIndex (0UL)            /*!< Max index of AP[1] array.                                            */
  #define TAMPC_PROTECT_AP_MinIndex (0UL)            /*!< Min index of AP[1] array.                                            */


/* ========================================== Struct TAMPC_PROTECT_GLITCHSLOWDOMAIN ========================================== */
/**
  * @brief GLITCHSLOWDOMAIN [TAMPC_PROTECT_GLITCHSLOWDOMAIN] Enable slow domain glitch detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for slow domain glitch detectors
                                                                         enable signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for slow domain glitch detectors enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_GLITCHSLOWDOMAIN_Type;           /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL: Control register for slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_ResetValue (0x00000011UL) /*!< Reset value of CTRL register.                     */

/* VALUE @Bit 0 : Set value of slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                    */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                      */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                      */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0.                                        */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1.                                       */

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                      */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Pos) /*!< Bit mask of
                                                                            LOCK field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                        */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                        */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                        */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                          */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.  */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.  */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.        */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.          */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.       */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                       */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Pos) /*!< Bit mask of
                                                                            KEY field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                       */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                       */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                         */


/* TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS: Status register for slow domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                 */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                  */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Pos) /*!< Bit
                                                                            mask of ERROR field.*/
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                    */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                    */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                  */
  #define TAMPC_PROTECT_GLITCHSLOWDOMAIN_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                       */



/* ========================================== Struct TAMPC_PROTECT_GLITCHFASTDOMAIN ========================================== */
/**
  * @brief GLITCHFASTDOMAIN [TAMPC_PROTECT_GLITCHFASTDOMAIN] Enable fast domain glitch detectors.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for fast domain glitch detectors
                                                                         enable signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for fast domain glitch detectors enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_GLITCHFASTDOMAIN_Type;           /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL: Control register for fast domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_ResetValue (0x00000011UL) /*!< Reset value of CTRL register.                     */

/* VALUE @Bit 0 : Set value of fast domain glitch detector's enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                    */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Pos) /*!< Bit mask
                                                                            of VALUE field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                      */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                      */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0.                                        */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1.                                       */

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                      */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Pos) /*!< Bit mask of
                                                                            LOCK field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                        */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                        */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                        */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                          */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.  */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.  */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.        */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.          */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.       */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                       */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Pos) /*!< Bit mask of
                                                                            KEY field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                       */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                       */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                         */


/* TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS: Status register for fast domain glitch detectors enable signal. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                 */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                  */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Pos) /*!< Bit
                                                                            mask of ERROR field.*/
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                    */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                    */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                  */
  #define TAMPC_PROTECT_GLITCHFASTDOMAIN_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                       */



/* ============================================= Struct TAMPC_PROTECT_INTRESETEN ============================================= */
/**
  * @brief INTRESETEN [TAMPC_PROTECT_INTRESETEN] Trigger a reset when tamper is detected by the glitch detectors, signal
            protector or CRACEN tamper detector.

  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for internal tamper reset enable
                                                                         signal.*/
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for internal tamper reset enable
                                                                         signal.*/
} NRF_TAMPC_PROTECT_INTRESETEN_Type;                 /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_INTRESETEN_CTRL: Control register for internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_ResetValue (0x00000011UL) /*!< Reset value of CTRL register.                           */

/* VALUE @Bit 0 : Set value of internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                          */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                            */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                            */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0.                                              */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1.                                             */

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                            */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Pos) /*!< Bit mask of LOCK field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                              */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                              */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                              */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                                */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                      */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Pos) /*!<
                                                                            Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.        */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.        */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.              */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.                */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.             */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                             */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Pos) /*!< Bit mask of KEY field.*/
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                             */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                             */
  #define TAMPC_PROTECT_INTRESETEN_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                               */


/* TAMPC_PROTECT_INTRESETEN_STATUS: Status register for internal tamper reset enable signal. */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                       */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                        */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Pos) /*!< Bit mask of ERROR
                                                                            field.*/
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                          */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                          */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                        */
  #define TAMPC_PROTECT_INTRESETEN_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                             */



/* ============================================ Struct TAMPC_PROTECT_ERASEPROTECT ============================================ */
/**
  * @brief ERASEPROTECT [TAMPC_PROTECT_ERASEPROTECT] Device erase protection.
  */
typedef struct {
  __IOM uint32_t  CTRL;                              /*!< (@ 0x00000000) Control register for erase protection.                */
  __IOM uint32_t  STATUS;                            /*!< (@ 0x00000004) Status register for eraseprotect.                     */
} NRF_TAMPC_PROTECT_ERASEPROTECT_Type;               /*!< Size = 8 (0x008)                                                     */

/* TAMPC_PROTECT_ERASEPROTECT_CTRL: Control register for erase protection. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_ResetValue (0x00000010UL) /*!< Reset value of CTRL register.                         */

/* VALUE @Bit 0 : Set value of eraseprotect signal. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Pos (0UL) /*!< Position of VALUE field.                                        */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Min (0x0UL) /*!< Min enumerator value of VALUE field.                          */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Max (0x1UL) /*!< Max enumerator value of VALUE field.                          */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_Low (0x0UL) /*!< Signal is logic 0.                                            */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_VALUE_High (0x1UL) /*!< Signal is logic 1.                                           */

/* LOCK @Bit 1 : Lock this register to prevent changes to the VALUE field until next reset. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Pos (1UL) /*!< Position of LOCK field.                                          */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Pos) /*!< Bit mask of LOCK
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Min (0x0UL) /*!< Min enumerator value of LOCK field.                            */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Max (0x1UL) /*!< Max enumerator value of LOCK field.                            */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Disabled (0x0UL) /*!< Lock disabled.                                            */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_LOCK_Enabled (0x1UL) /*!< Lock enabled.                                              */

/* WRITEPROTECTION @Bits 4..7 : The write protection must be cleared to allow updates to the VALUE field. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Pos (4UL) /*!< Position of WRITEPROTECTION field.                    */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Msk (0xFUL << TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Pos)
                                                                            /*!< Bit mask of WRITEPROTECTION field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Min (0x0UL) /*!< Min enumerator value of WRITEPROTECTION field.      */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Max (0xFUL) /*!< Max enumerator value of WRITEPROTECTION field.      */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Disabled (0x0UL) /*!< Read: Write protection is disabled.            */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Enabled (0x1UL) /*!< Read: Write protection is enabled.              */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_WRITEPROTECTION_Clear (0xFUL) /*!< Write: Value to clear write protection.           */

/* KEY @Bits 16..31 : Required write key for upper 16 bits. Must be included in all register write operations. */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Pos (16UL) /*!< Position of KEY field.                                           */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Msk (0xFFFFUL << TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Pos) /*!< Bit mask of KEY
                                                                            field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Min (0x50FAUL) /*!< Min enumerator value of KEY field.                           */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_Max (0x50FAUL) /*!< Max enumerator value of KEY field.                           */
  #define TAMPC_PROTECT_ERASEPROTECT_CTRL_KEY_KEY (0x50FAUL) /*!< Write key value.                                             */


/* TAMPC_PROTECT_ERASEPROTECT_STATUS: Status register for eraseprotect. */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ResetValue (0x00000000UL) /*!< Reset value of STATUS register.                     */

/* ERROR @Bit 0 : Error detection status. */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Pos (0UL) /*!< Position of ERROR field.                                      */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Msk (0x1UL << TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Pos) /*!< Bit mask of
                                                                            ERROR field.*/
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Min (0x0UL) /*!< Min enumerator value of ERROR field.                        */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Max (0x1UL) /*!< Max enumerator value of ERROR field.                        */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_NoError (0x0UL) /*!< No error detected.                                      */
  #define TAMPC_PROTECT_ERASEPROTECT_STATUS_ERROR_Error (0x1UL) /*!< Error detected.                                           */



/* ================================================== Struct TAMPC_PROTECT =================================================== */
/**
  * @brief PROTECT [TAMPC_PROTECT] (unspecified)
  */
typedef struct {
  __IOM NRF_TAMPC_PROTECT_DOMAIN_Type DOMAIN[1];     /*!< (@ 0x00000000) (unspecified)                                         */
  __IM  uint32_t  RESERVED[120];
  __IOM NRF_TAMPC_PROTECT_AP_Type AP[1];             /*!< (@ 0x00000200) (unspecified)                                         */
  __IM  uint32_t  RESERVED1[140];
  __IOM NRF_TAMPC_PROTECT_GLITCHSLOWDOMAIN_Type GLITCHSLOWDOMAIN; /*!< (@ 0x00000440) Enable slow domain glitch detectors.     */
  __IOM NRF_TAMPC_PROTECT_GLITCHFASTDOMAIN_Type GLITCHFASTDOMAIN; /*!< (@ 0x00000448) Enable fast domain glitch detectors.     */
  __IM  uint32_t  RESERVED2[10];
  __IOM NRF_TAMPC_PROTECT_INTRESETEN_Type INTRESETEN; /*!< (@ 0x00000478) Trigger a reset when tamper is detected by the glitch
                                                                          detectors, signal protector or CRACEN tamper
                                                                          detector.*/
  __IOM NRF_TAMPC_PROTECT_ERASEPROTECT_Type ERASEPROTECT; /*!< (@ 0x00000480) Device erase protection.                         */
} NRF_TAMPC_PROTECT_Type;                            /*!< Size = 1160 (0x488)                                                  */

/* ====================================================== Struct TAMPC ======================================================= */
/**
  * @brief Tamper controller
  */
  typedef struct {                                   /*!< TAMPC Structure                                                      */
    __IM uint32_t RESERVED[64];
    __IOM uint32_t EVENTS_TAMPER;                    /*!< (@ 0x00000100) Tamper controller detected an error.                  */
    __IOM uint32_t EVENTS_WRITEERROR;                /*!< (@ 0x00000104) Attempt to write a VALUE in PROTECT registers without
                                                                         clearing the WRITEPROTECT.*/
    __IM uint32_t RESERVED1[126];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t INTPEND;                           /*!< (@ 0x0000030C) Pending interrupts                                    */
    __IM uint32_t RESERVED2[60];
    __IOM uint32_t STATUS;                           /*!< (@ 0x00000400) The tamper controller status.                         */
    __IM uint32_t RESERVED3[63];
    __IOM NRF_TAMPC_PROTECT_Type PROTECT;            /*!< (@ 0x00000500) (unspecified)                                         */
  } NRF_TAMPC_Type;                                  /*!< Size = 2440 (0x988)                                                  */

/* TAMPC_EVENTS_TAMPER: Tamper controller detected an error. */
  #define TAMPC_EVENTS_TAMPER_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TAMPER register.                            */

/* EVENTS_TAMPER @Bit 0 : Tamper controller detected an error. */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Pos (0UL) /*!< Position of EVENTS_TAMPER field.                                    */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Msk (0x1UL << TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Pos) /*!< Bit mask of EVENTS_TAMPER
                                                                            field.*/
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Min (0x0UL) /*!< Min enumerator value of EVENTS_TAMPER field.                      */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Max (0x1UL) /*!< Max enumerator value of EVENTS_TAMPER field.                      */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define TAMPC_EVENTS_TAMPER_EVENTS_TAMPER_Generated (0x1UL) /*!< Event generated                                             */


/* TAMPC_EVENTS_WRITEERROR: Attempt to write a VALUE in PROTECT registers without clearing the WRITEPROTECT. */
  #define TAMPC_EVENTS_WRITEERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_WRITEERROR register.                    */

/* EVENTS_WRITEERROR @Bit 0 : Attempt to write a VALUE in PROTECT registers without clearing the WRITEPROTECT. */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Pos (0UL) /*!< Position of EVENTS_WRITEERROR field.                        */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Msk (0x1UL << TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Pos) /*!< Bit mask
                                                                            of EVENTS_WRITEERROR field.*/
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_WRITEERROR field.          */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_WRITEERROR field.          */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_NotGenerated (0x0UL) /*!< Event not generated                              */
  #define TAMPC_EVENTS_WRITEERROR_EVENTS_WRITEERROR_Generated (0x1UL) /*!< Event generated                                     */


/* TAMPC_INTEN: Enable or disable interrupt */
  #define TAMPC_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* TAMPER @Bit 0 : Enable or disable interrupt for event TAMPER */
  #define TAMPC_INTEN_TAMPER_Pos (0UL)               /*!< Position of TAMPER field.                                            */
  #define TAMPC_INTEN_TAMPER_Msk (0x1UL << TAMPC_INTEN_TAMPER_Pos) /*!< Bit mask of TAMPER field.                              */
  #define TAMPC_INTEN_TAMPER_Min (0x0UL)             /*!< Min enumerator value of TAMPER field.                                */
  #define TAMPC_INTEN_TAMPER_Max (0x1UL)             /*!< Max enumerator value of TAMPER field.                                */
  #define TAMPC_INTEN_TAMPER_Disabled (0x0UL)        /*!< Disable                                                              */
  #define TAMPC_INTEN_TAMPER_Enabled (0x1UL)         /*!< Enable                                                               */

/* WRITEERROR @Bit 1 : Enable or disable interrupt for event WRITEERROR */
  #define TAMPC_INTEN_WRITEERROR_Pos (1UL)           /*!< Position of WRITEERROR field.                                        */
  #define TAMPC_INTEN_WRITEERROR_Msk (0x1UL << TAMPC_INTEN_WRITEERROR_Pos) /*!< Bit mask of WRITEERROR field.                  */
  #define TAMPC_INTEN_WRITEERROR_Min (0x0UL)         /*!< Min enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTEN_WRITEERROR_Max (0x1UL)         /*!< Max enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTEN_WRITEERROR_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TAMPC_INTEN_WRITEERROR_Enabled (0x1UL)     /*!< Enable                                                               */


/* TAMPC_INTENSET: Enable interrupt */
  #define TAMPC_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* TAMPER @Bit 0 : Write '1' to enable interrupt for event TAMPER */
  #define TAMPC_INTENSET_TAMPER_Pos (0UL)            /*!< Position of TAMPER field.                                            */
  #define TAMPC_INTENSET_TAMPER_Msk (0x1UL << TAMPC_INTENSET_TAMPER_Pos) /*!< Bit mask of TAMPER field.                        */
  #define TAMPC_INTENSET_TAMPER_Min (0x0UL)          /*!< Min enumerator value of TAMPER field.                                */
  #define TAMPC_INTENSET_TAMPER_Max (0x1UL)          /*!< Max enumerator value of TAMPER field.                                */
  #define TAMPC_INTENSET_TAMPER_Set (0x1UL)          /*!< Enable                                                               */
  #define TAMPC_INTENSET_TAMPER_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TAMPC_INTENSET_TAMPER_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* WRITEERROR @Bit 1 : Write '1' to enable interrupt for event WRITEERROR */
  #define TAMPC_INTENSET_WRITEERROR_Pos (1UL)        /*!< Position of WRITEERROR field.                                        */
  #define TAMPC_INTENSET_WRITEERROR_Msk (0x1UL << TAMPC_INTENSET_WRITEERROR_Pos) /*!< Bit mask of WRITEERROR field.            */
  #define TAMPC_INTENSET_WRITEERROR_Min (0x0UL)      /*!< Min enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTENSET_WRITEERROR_Max (0x1UL)      /*!< Max enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTENSET_WRITEERROR_Set (0x1UL)      /*!< Enable                                                               */
  #define TAMPC_INTENSET_WRITEERROR_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TAMPC_INTENSET_WRITEERROR_Enabled (0x1UL)  /*!< Read: Enabled                                                        */


/* TAMPC_INTENCLR: Disable interrupt */
  #define TAMPC_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* TAMPER @Bit 0 : Write '1' to disable interrupt for event TAMPER */
  #define TAMPC_INTENCLR_TAMPER_Pos (0UL)            /*!< Position of TAMPER field.                                            */
  #define TAMPC_INTENCLR_TAMPER_Msk (0x1UL << TAMPC_INTENCLR_TAMPER_Pos) /*!< Bit mask of TAMPER field.                        */
  #define TAMPC_INTENCLR_TAMPER_Min (0x0UL)          /*!< Min enumerator value of TAMPER field.                                */
  #define TAMPC_INTENCLR_TAMPER_Max (0x1UL)          /*!< Max enumerator value of TAMPER field.                                */
  #define TAMPC_INTENCLR_TAMPER_Clear (0x1UL)        /*!< Disable                                                              */
  #define TAMPC_INTENCLR_TAMPER_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TAMPC_INTENCLR_TAMPER_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* WRITEERROR @Bit 1 : Write '1' to disable interrupt for event WRITEERROR */
  #define TAMPC_INTENCLR_WRITEERROR_Pos (1UL)        /*!< Position of WRITEERROR field.                                        */
  #define TAMPC_INTENCLR_WRITEERROR_Msk (0x1UL << TAMPC_INTENCLR_WRITEERROR_Pos) /*!< Bit mask of WRITEERROR field.            */
  #define TAMPC_INTENCLR_WRITEERROR_Min (0x0UL)      /*!< Min enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTENCLR_WRITEERROR_Max (0x1UL)      /*!< Max enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTENCLR_WRITEERROR_Clear (0x1UL)    /*!< Disable                                                              */
  #define TAMPC_INTENCLR_WRITEERROR_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TAMPC_INTENCLR_WRITEERROR_Enabled (0x1UL)  /*!< Read: Enabled                                                        */


/* TAMPC_INTPEND: Pending interrupts */
  #define TAMPC_INTPEND_ResetValue (0x00000000UL)    /*!< Reset value of INTPEND register.                                     */

/* TAMPER @Bit 0 : Read pending status of interrupt for event TAMPER */
  #define TAMPC_INTPEND_TAMPER_Pos (0UL)             /*!< Position of TAMPER field.                                            */
  #define TAMPC_INTPEND_TAMPER_Msk (0x1UL << TAMPC_INTPEND_TAMPER_Pos) /*!< Bit mask of TAMPER field.                          */
  #define TAMPC_INTPEND_TAMPER_Min (0x0UL)           /*!< Min enumerator value of TAMPER field.                                */
  #define TAMPC_INTPEND_TAMPER_Max (0x1UL)           /*!< Max enumerator value of TAMPER field.                                */
  #define TAMPC_INTPEND_TAMPER_NotPending (0x0UL)    /*!< Read: Not pending                                                    */
  #define TAMPC_INTPEND_TAMPER_Pending (0x1UL)       /*!< Read: Pending                                                        */

/* WRITEERROR @Bit 1 : Read pending status of interrupt for event WRITEERROR */
  #define TAMPC_INTPEND_WRITEERROR_Pos (1UL)         /*!< Position of WRITEERROR field.                                        */
  #define TAMPC_INTPEND_WRITEERROR_Msk (0x1UL << TAMPC_INTPEND_WRITEERROR_Pos) /*!< Bit mask of WRITEERROR field.              */
  #define TAMPC_INTPEND_WRITEERROR_Min (0x0UL)       /*!< Min enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTPEND_WRITEERROR_Max (0x1UL)       /*!< Max enumerator value of WRITEERROR field.                            */
  #define TAMPC_INTPEND_WRITEERROR_NotPending (0x0UL) /*!< Read: Not pending                                                   */
  #define TAMPC_INTPEND_WRITEERROR_Pending (0x1UL)   /*!< Read: Pending                                                        */


/* TAMPC_STATUS: The tamper controller status. */
  #define TAMPC_STATUS_ResetValue (0x00000000UL)     /*!< Reset value of STATUS register.                                      */

/* PROTECT @Bit 4 : Error detected for the protected signals. */
  #define TAMPC_STATUS_PROTECT_Pos (4UL)             /*!< Position of PROTECT field.                                           */
  #define TAMPC_STATUS_PROTECT_Msk (0x1UL << TAMPC_STATUS_PROTECT_Pos) /*!< Bit mask of PROTECT field.                         */
  #define TAMPC_STATUS_PROTECT_Min (0x0UL)           /*!< Min enumerator value of PROTECT field.                               */
  #define TAMPC_STATUS_PROTECT_Max (0x1UL)           /*!< Max enumerator value of PROTECT field.                               */
  #define TAMPC_STATUS_PROTECT_NotDetected (0x0UL)   /*!< Not detected.                                                        */
  #define TAMPC_STATUS_PROTECT_Detected (0x1UL)      /*!< Detected.                                                            */

/* CRACENTAMP @Bit 5 : CRACEN detected an error. */
  #define TAMPC_STATUS_CRACENTAMP_Pos (5UL)          /*!< Position of CRACENTAMP field.                                        */
  #define TAMPC_STATUS_CRACENTAMP_Msk (0x1UL << TAMPC_STATUS_CRACENTAMP_Pos) /*!< Bit mask of CRACENTAMP field.                */
  #define TAMPC_STATUS_CRACENTAMP_Min (0x0UL)        /*!< Min enumerator value of CRACENTAMP field.                            */
  #define TAMPC_STATUS_CRACENTAMP_Max (0x1UL)        /*!< Max enumerator value of CRACENTAMP field.                            */
  #define TAMPC_STATUS_CRACENTAMP_NotDetected (0x0UL) /*!< Not detected.                                                       */
  #define TAMPC_STATUS_CRACENTAMP_Detected (0x1UL)   /*!< Detected.                                                            */

/* GLITCHSLOWDOMAIN0 @Bit 8 : Slow domain glitch detector 0 detected an error. */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Pos (8UL)   /*!< Position of GLITCHSLOWDOMAIN0 field.                                 */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Msk (0x1UL << TAMPC_STATUS_GLITCHSLOWDOMAIN0_Pos) /*!< Bit mask of GLITCHSLOWDOMAIN0
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Min (0x0UL) /*!< Min enumerator value of GLITCHSLOWDOMAIN0 field.                     */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Max (0x1UL) /*!< Max enumerator value of GLITCHSLOWDOMAIN0 field.                     */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_NotDetected (0x0UL) /*!< Not detected.                                                */
  #define TAMPC_STATUS_GLITCHSLOWDOMAIN0_Detected (0x1UL) /*!< Detected.                                                       */

/* GLITCHFASTDOMAIN0 @Bit 12 : Fast domain glitch detector 0 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Pos (12UL)  /*!< Position of GLITCHFASTDOMAIN0 field.                                 */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN0_Pos) /*!< Bit mask of GLITCHFASTDOMAIN0
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Min (0x0UL) /*!< Min enumerator value of GLITCHFASTDOMAIN0 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Max (0x1UL) /*!< Max enumerator value of GLITCHFASTDOMAIN0 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_NotDetected (0x0UL) /*!< Not detected.                                                */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN0_Detected (0x1UL) /*!< Detected.                                                       */

/* GLITCHFASTDOMAIN1 @Bit 13 : Fast domain glitch detector 1 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Pos (13UL)  /*!< Position of GLITCHFASTDOMAIN1 field.                                 */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN1_Pos) /*!< Bit mask of GLITCHFASTDOMAIN1
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Min (0x0UL) /*!< Min enumerator value of GLITCHFASTDOMAIN1 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Max (0x1UL) /*!< Max enumerator value of GLITCHFASTDOMAIN1 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_NotDetected (0x0UL) /*!< Not detected.                                                */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN1_Detected (0x1UL) /*!< Detected.                                                       */

/* GLITCHFASTDOMAIN2 @Bit 14 : Fast domain glitch detector 2 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Pos (14UL)  /*!< Position of GLITCHFASTDOMAIN2 field.                                 */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN2_Pos) /*!< Bit mask of GLITCHFASTDOMAIN2
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Min (0x0UL) /*!< Min enumerator value of GLITCHFASTDOMAIN2 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Max (0x1UL) /*!< Max enumerator value of GLITCHFASTDOMAIN2 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_NotDetected (0x0UL) /*!< Not detected.                                                */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN2_Detected (0x1UL) /*!< Detected.                                                       */

/* GLITCHFASTDOMAIN3 @Bit 15 : Fast domain glitch detector 3 detected an error. */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Pos (15UL)  /*!< Position of GLITCHFASTDOMAIN3 field.                                 */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Msk (0x1UL << TAMPC_STATUS_GLITCHFASTDOMAIN3_Pos) /*!< Bit mask of GLITCHFASTDOMAIN3
                                                                            field.*/
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Min (0x0UL) /*!< Min enumerator value of GLITCHFASTDOMAIN3 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Max (0x1UL) /*!< Max enumerator value of GLITCHFASTDOMAIN3 field.                     */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_NotDetected (0x0UL) /*!< Not detected.                                                */
  #define TAMPC_STATUS_GLITCHFASTDOMAIN3_Detected (0x1UL) /*!< Detected.                                                       */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TEMP                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct TEMP ======================================================= */
/**
  * @brief Temperature Sensor
  */
  typedef struct {                                   /*!< TEMP Structure                                                       */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start temperature measurement                         */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop temperature measurement                          */
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_DATARDY;                   /*!< (@ 0x00000100) Temperature measurement complete, data ready          */
    __IM uint32_t RESERVED2[31];
    __IOM uint32_t PUBLISH_DATARDY;                  /*!< (@ 0x00000180) Publish configuration for event DATARDY               */
    __IM uint32_t RESERVED3[96];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED4[127];
    __IM int32_t  TEMP;                              /*!< (@ 0x00000508) Temperature in degC (0.25deg steps)                   */
    __IM uint32_t RESERVED5[5];
    __IOM uint32_t A0;                               /*!< (@ 0x00000520) Slope of 1st piece wise linear function               */
    __IOM uint32_t A1;                               /*!< (@ 0x00000524) Slope of 2nd piece wise linear function               */
    __IOM uint32_t A2;                               /*!< (@ 0x00000528) Slope of 3rd piece wise linear function               */
    __IOM uint32_t A3;                               /*!< (@ 0x0000052C) Slope of 4th piece wise linear function               */
    __IOM uint32_t A4;                               /*!< (@ 0x00000530) Slope of 5th piece wise linear function               */
    __IOM uint32_t A5;                               /*!< (@ 0x00000534) Slope of 6th piece wise linear function               */
    __IOM uint32_t A6;                               /*!< (@ 0x00000538) Slope of 7th piece wise linear function               */
    __IM uint32_t RESERVED6;
    __IOM uint32_t B0;                               /*!< (@ 0x00000540) y-intercept of 1st piece wise linear function         */
    __IOM uint32_t B1;                               /*!< (@ 0x00000544) y-intercept of 2nd piece wise linear function         */
    __IOM uint32_t B2;                               /*!< (@ 0x00000548) y-intercept of 3rd piece wise linear function         */
    __IOM uint32_t B3;                               /*!< (@ 0x0000054C) y-intercept of 4th piece wise linear function         */
    __IOM uint32_t B4;                               /*!< (@ 0x00000550) y-intercept of 5th piece wise linear function         */
    __IOM uint32_t B5;                               /*!< (@ 0x00000554) y-intercept of 6th piece wise linear function         */
    __IOM uint32_t B6;                               /*!< (@ 0x00000558) y-intercept of 7th piece wise linear function         */
    __IM uint32_t RESERVED7;
    __IOM uint32_t T0;                               /*!< (@ 0x00000560) End point of 1st piece wise linear function           */
    __IOM uint32_t T1;                               /*!< (@ 0x00000564) End point of 2nd piece wise linear function           */
    __IOM uint32_t T2;                               /*!< (@ 0x00000568) End point of 3rd piece wise linear function           */
    __IOM uint32_t T3;                               /*!< (@ 0x0000056C) End point of 4th piece wise linear function           */
    __IOM uint32_t T4;                               /*!< (@ 0x00000570) End point of 5th piece wise linear function           */
    __IOM uint32_t T5;                               /*!< (@ 0x00000574) End point of 6th piece wise linear function           */
  } NRF_TEMP_Type;                                   /*!< Size = 1400 (0x578)                                                  */

/* TEMP_TASKS_START: Start temperature measurement */
  #define TEMP_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start temperature measurement */
  #define TEMP_TASKS_START_TASKS_START_Pos (0UL)     /*!< Position of TASKS_START field.                                       */
  #define TEMP_TASKS_START_TASKS_START_Msk (0x1UL << TEMP_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.     */
  #define TEMP_TASKS_START_TASKS_START_Min (0x1UL)   /*!< Min enumerator value of TASKS_START field.                           */
  #define TEMP_TASKS_START_TASKS_START_Max (0x1UL)   /*!< Max enumerator value of TASKS_START field.                           */
  #define TEMP_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                       */


/* TEMP_TASKS_STOP: Stop temperature measurement */
  #define TEMP_TASKS_STOP_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop temperature measurement */
  #define TEMP_TASKS_STOP_TASKS_STOP_Pos (0UL)       /*!< Position of TASKS_STOP field.                                        */
  #define TEMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TEMP_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.          */
  #define TEMP_TASKS_STOP_TASKS_STOP_Min (0x1UL)     /*!< Min enumerator value of TASKS_STOP field.                            */
  #define TEMP_TASKS_STOP_TASKS_STOP_Max (0x1UL)     /*!< Max enumerator value of TASKS_STOP field.                            */
  #define TEMP_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                         */


/* TEMP_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TEMP_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TEMP_SUBSCRIBE_START_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define TEMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TEMP_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define TEMP_SUBSCRIBE_START_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define TEMP_SUBSCRIBE_START_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TEMP_SUBSCRIBE_START_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define TEMP_SUBSCRIBE_START_EN_Msk (0x1UL << TEMP_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                        */
  #define TEMP_SUBSCRIBE_START_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define TEMP_SUBSCRIBE_START_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define TEMP_SUBSCRIBE_START_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define TEMP_SUBSCRIBE_START_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* TEMP_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TEMP_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TEMP_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define TEMP_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TEMP_SUBSCRIBE_STOP_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define TEMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << TEMP_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                          */
  #define TEMP_SUBSCRIBE_STOP_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define TEMP_SUBSCRIBE_STOP_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define TEMP_SUBSCRIBE_STOP_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define TEMP_SUBSCRIBE_STOP_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* TEMP_EVENTS_DATARDY: Temperature measurement complete, data ready */
  #define TEMP_EVENTS_DATARDY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_DATARDY register.                           */

/* EVENTS_DATARDY @Bit 0 : Temperature measurement complete, data ready */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos (0UL) /*!< Position of EVENTS_DATARDY field.                                  */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Msk (0x1UL << TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos) /*!< Bit mask of
                                                                            EVENTS_DATARDY field.*/
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Min (0x0UL) /*!< Min enumerator value of EVENTS_DATARDY field.                    */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Max (0x1UL) /*!< Max enumerator value of EVENTS_DATARDY field.                    */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Generated (0x1UL) /*!< Event generated                                            */


/* TEMP_PUBLISH_DATARDY: Publish configuration for event DATARDY */
  #define TEMP_PUBLISH_DATARDY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_DATARDY register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event DATARDY will publish to */
  #define TEMP_PUBLISH_DATARDY_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define TEMP_PUBLISH_DATARDY_CHIDX_Msk (0xFFUL << TEMP_PUBLISH_DATARDY_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define TEMP_PUBLISH_DATARDY_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define TEMP_PUBLISH_DATARDY_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TEMP_PUBLISH_DATARDY_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define TEMP_PUBLISH_DATARDY_EN_Msk (0x1UL << TEMP_PUBLISH_DATARDY_EN_Pos) /*!< Bit mask of EN field.                        */
  #define TEMP_PUBLISH_DATARDY_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define TEMP_PUBLISH_DATARDY_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define TEMP_PUBLISH_DATARDY_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define TEMP_PUBLISH_DATARDY_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* TEMP_INTENSET: Enable interrupt */
  #define TEMP_INTENSET_ResetValue (0x00000000UL)    /*!< Reset value of INTENSET register.                                    */

/* DATARDY @Bit 0 : Write '1' to enable interrupt for event DATARDY */
  #define TEMP_INTENSET_DATARDY_Pos (0UL)            /*!< Position of DATARDY field.                                           */
  #define TEMP_INTENSET_DATARDY_Msk (0x1UL << TEMP_INTENSET_DATARDY_Pos) /*!< Bit mask of DATARDY field.                       */
  #define TEMP_INTENSET_DATARDY_Min (0x0UL)          /*!< Min enumerator value of DATARDY field.                               */
  #define TEMP_INTENSET_DATARDY_Max (0x1UL)          /*!< Max enumerator value of DATARDY field.                               */
  #define TEMP_INTENSET_DATARDY_Set (0x1UL)          /*!< Enable                                                               */
  #define TEMP_INTENSET_DATARDY_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TEMP_INTENSET_DATARDY_Enabled (0x1UL)      /*!< Read: Enabled                                                        */


/* TEMP_INTENCLR: Disable interrupt */
  #define TEMP_INTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of INTENCLR register.                                    */

/* DATARDY @Bit 0 : Write '1' to disable interrupt for event DATARDY */
  #define TEMP_INTENCLR_DATARDY_Pos (0UL)            /*!< Position of DATARDY field.                                           */
  #define TEMP_INTENCLR_DATARDY_Msk (0x1UL << TEMP_INTENCLR_DATARDY_Pos) /*!< Bit mask of DATARDY field.                       */
  #define TEMP_INTENCLR_DATARDY_Min (0x0UL)          /*!< Min enumerator value of DATARDY field.                               */
  #define TEMP_INTENCLR_DATARDY_Max (0x1UL)          /*!< Max enumerator value of DATARDY field.                               */
  #define TEMP_INTENCLR_DATARDY_Clear (0x1UL)        /*!< Disable                                                              */
  #define TEMP_INTENCLR_DATARDY_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TEMP_INTENCLR_DATARDY_Enabled (0x1UL)      /*!< Read: Enabled                                                        */


/* TEMP_TEMP: Temperature in degC (0.25deg steps) */
  #define TEMP_TEMP_ResetValue (0x00000000UL)        /*!< Reset value of TEMP register.                                        */

/* TEMP @Bits 0..31 : Temperature in degC (0.25deg steps) */
  #define TEMP_TEMP_TEMP_Pos (0UL)                   /*!< Position of TEMP field.                                              */
  #define TEMP_TEMP_TEMP_Msk (0xFFFFFFFFUL << TEMP_TEMP_TEMP_Pos) /*!< Bit mask of TEMP field.                                 */


/* TEMP_A0: Slope of 1st piece wise linear function */
  #define TEMP_A0_ResetValue (0x0000038CUL)          /*!< Reset value of A0 register.                                          */

/* A0 @Bits 0..11 : Slope of 1st piece wise linear function */
  #define TEMP_A0_A0_Pos (0UL)                       /*!< Position of A0 field.                                                */
  #define TEMP_A0_A0_Msk (0xFFFUL << TEMP_A0_A0_Pos) /*!< Bit mask of A0 field.                                                */


/* TEMP_A1: Slope of 2nd piece wise linear function */
  #define TEMP_A1_ResetValue (0x000003B3UL)          /*!< Reset value of A1 register.                                          */

/* A1 @Bits 0..11 : Slope of 2nd piece wise linear function */
  #define TEMP_A1_A1_Pos (0UL)                       /*!< Position of A1 field.                                                */
  #define TEMP_A1_A1_Msk (0xFFFUL << TEMP_A1_A1_Pos) /*!< Bit mask of A1 field.                                                */


/* TEMP_A2: Slope of 3rd piece wise linear function */
  #define TEMP_A2_ResetValue (0x000003FAUL)          /*!< Reset value of A2 register.                                          */

/* A2 @Bits 0..11 : Slope of 3rd piece wise linear function */
  #define TEMP_A2_A2_Pos (0UL)                       /*!< Position of A2 field.                                                */
  #define TEMP_A2_A2_Msk (0xFFFUL << TEMP_A2_A2_Pos) /*!< Bit mask of A2 field.                                                */


/* TEMP_A3: Slope of 4th piece wise linear function */
  #define TEMP_A3_ResetValue (0x00000451UL)          /*!< Reset value of A3 register.                                          */

/* A3 @Bits 0..11 : Slope of 4th piece wise linear function */
  #define TEMP_A3_A3_Pos (0UL)                       /*!< Position of A3 field.                                                */
  #define TEMP_A3_A3_Msk (0xFFFUL << TEMP_A3_A3_Pos) /*!< Bit mask of A3 field.                                                */


/* TEMP_A4: Slope of 5th piece wise linear function */
  #define TEMP_A4_ResetValue (0x000004AAUL)          /*!< Reset value of A4 register.                                          */

/* A4 @Bits 0..11 : Slope of 5th piece wise linear function */
  #define TEMP_A4_A4_Pos (0UL)                       /*!< Position of A4 field.                                                */
  #define TEMP_A4_A4_Msk (0xFFFUL << TEMP_A4_A4_Pos) /*!< Bit mask of A4 field.                                                */


/* TEMP_A5: Slope of 6th piece wise linear function */
  #define TEMP_A5_ResetValue (0x00000539UL)          /*!< Reset value of A5 register.                                          */

/* A5 @Bits 0..11 : Slope of 6th piece wise linear function */
  #define TEMP_A5_A5_Pos (0UL)                       /*!< Position of A5 field.                                                */
  #define TEMP_A5_A5_Msk (0xFFFUL << TEMP_A5_A5_Pos) /*!< Bit mask of A5 field.                                                */


/* TEMP_A6: Slope of 7th piece wise linear function */
  #define TEMP_A6_ResetValue (0x00000578UL)          /*!< Reset value of A6 register.                                          */

/* A6 @Bits 0..11 : Slope of 7th piece wise linear function */
  #define TEMP_A6_A6_Pos (0UL)                       /*!< Position of A6 field.                                                */
  #define TEMP_A6_A6_Msk (0xFFFUL << TEMP_A6_A6_Pos) /*!< Bit mask of A6 field.                                                */


/* TEMP_B0: y-intercept of 1st piece wise linear function */
  #define TEMP_B0_ResetValue (0x00000037UL)          /*!< Reset value of B0 register.                                          */

/* B0 @Bits 0..11 : y-intercept of 1st piece wise linear function */
  #define TEMP_B0_B0_Pos (0UL)                       /*!< Position of B0 field.                                                */
  #define TEMP_B0_B0_Msk (0xFFFUL << TEMP_B0_B0_Pos) /*!< Bit mask of B0 field.                                                */


/* TEMP_B1: y-intercept of 2nd piece wise linear function */
  #define TEMP_B1_ResetValue (0x00000011UL)          /*!< Reset value of B1 register.                                          */

/* B1 @Bits 0..11 : y-intercept of 2nd piece wise linear function */
  #define TEMP_B1_B1_Pos (0UL)                       /*!< Position of B1 field.                                                */
  #define TEMP_B1_B1_Msk (0xFFFUL << TEMP_B1_B1_Pos) /*!< Bit mask of B1 field.                                                */


/* TEMP_B2: y-intercept of 3rd piece wise linear function */
  #define TEMP_B2_ResetValue (0x00000005UL)          /*!< Reset value of B2 register.                                          */

/* B2 @Bits 0..11 : y-intercept of 3rd piece wise linear function */
  #define TEMP_B2_B2_Pos (0UL)                       /*!< Position of B2 field.                                                */
  #define TEMP_B2_B2_Msk (0xFFFUL << TEMP_B2_B2_Pos) /*!< Bit mask of B2 field.                                                */


/* TEMP_B3: y-intercept of 4th piece wise linear function */
  #define TEMP_B3_ResetValue (0x0000002BUL)          /*!< Reset value of B3 register.                                          */

/* B3 @Bits 0..11 : y-intercept of 4th piece wise linear function */
  #define TEMP_B3_B3_Pos (0UL)                       /*!< Position of B3 field.                                                */
  #define TEMP_B3_B3_Msk (0xFFFUL << TEMP_B3_B3_Pos) /*!< Bit mask of B3 field.                                                */


/* TEMP_B4: y-intercept of 5th piece wise linear function */
  #define TEMP_B4_ResetValue (0x0000008FUL)          /*!< Reset value of B4 register.                                          */

/* B4 @Bits 0..11 : y-intercept of 5th piece wise linear function */
  #define TEMP_B4_B4_Pos (0UL)                       /*!< Position of B4 field.                                                */
  #define TEMP_B4_B4_Msk (0xFFFUL << TEMP_B4_B4_Pos) /*!< Bit mask of B4 field.                                                */


/* TEMP_B5: y-intercept of 6th piece wise linear function */
  #define TEMP_B5_ResetValue (0x0000015DUL)          /*!< Reset value of B5 register.                                          */

/* B5 @Bits 0..11 : y-intercept of 6th piece wise linear function */
  #define TEMP_B5_B5_Pos (0UL)                       /*!< Position of B5 field.                                                */
  #define TEMP_B5_B5_Msk (0xFFFUL << TEMP_B5_B5_Pos) /*!< Bit mask of B5 field.                                                */


/* TEMP_B6: y-intercept of 7th piece wise linear function */
  #define TEMP_B6_ResetValue (0x000001C0UL)          /*!< Reset value of B6 register.                                          */

/* B6 @Bits 0..11 : y-intercept of 7th piece wise linear function */
  #define TEMP_B6_B6_Pos (0UL)                       /*!< Position of B6 field.                                                */
  #define TEMP_B6_B6_Msk (0xFFFUL << TEMP_B6_B6_Pos) /*!< Bit mask of B6 field.                                                */


/* TEMP_T0: End point of 1st piece wise linear function */
  #define TEMP_T0_ResetValue (0x000000E5UL)          /*!< Reset value of T0 register.                                          */

/* T0 @Bits 0..7 : End point of 1st piece wise linear function */
  #define TEMP_T0_T0_Pos (0UL)                       /*!< Position of T0 field.                                                */
  #define TEMP_T0_T0_Msk (0xFFUL << TEMP_T0_T0_Pos)  /*!< Bit mask of T0 field.                                                */


/* TEMP_T1: End point of 2nd piece wise linear function */
  #define TEMP_T1_ResetValue (0x000000FBUL)          /*!< Reset value of T1 register.                                          */

/* T1 @Bits 0..7 : End point of 2nd piece wise linear function */
  #define TEMP_T1_T1_Pos (0UL)                       /*!< Position of T1 field.                                                */
  #define TEMP_T1_T1_Msk (0xFFUL << TEMP_T1_T1_Pos)  /*!< Bit mask of T1 field.                                                */


/* TEMP_T2: End point of 3rd piece wise linear function */
  #define TEMP_T2_ResetValue (0x00000010UL)          /*!< Reset value of T2 register.                                          */

/* T2 @Bits 0..7 : End point of 3rd piece wise linear function */
  #define TEMP_T2_T2_Pos (0UL)                       /*!< Position of T2 field.                                                */
  #define TEMP_T2_T2_Msk (0xFFUL << TEMP_T2_T2_Pos)  /*!< Bit mask of T2 field.                                                */


/* TEMP_T3: End point of 4th piece wise linear function */
  #define TEMP_T3_ResetValue (0x0000002BUL)          /*!< Reset value of T3 register.                                          */

/* T3 @Bits 0..7 : End point of 4th piece wise linear function */
  #define TEMP_T3_T3_Pos (0UL)                       /*!< Position of T3 field.                                                */
  #define TEMP_T3_T3_Msk (0xFFUL << TEMP_T3_T3_Pos)  /*!< Bit mask of T3 field.                                                */


/* TEMP_T4: End point of 5th piece wise linear function */
  #define TEMP_T4_ResetValue (0x00000041UL)          /*!< Reset value of T4 register.                                          */

/* T4 @Bits 0..7 : End point of 5th piece wise linear function */
  #define TEMP_T4_T4_Pos (0UL)                       /*!< Position of T4 field.                                                */
  #define TEMP_T4_T4_Msk (0xFFUL << TEMP_T4_T4_Pos)  /*!< Bit mask of T4 field.                                                */


/* TEMP_T5: End point of 6th piece wise linear function */
  #define TEMP_T5_ResetValue (0x00000050UL)          /*!< Reset value of T5 register.                                          */

/* T5 @Bits 0..7 : End point of 6th piece wise linear function */
  #define TEMP_T5_T5_Pos (0UL)                       /*!< Position of T5 field.                                                */
  #define TEMP_T5_T5_Msk (0xFFUL << TEMP_T5_T5_Pos)  /*!< Bit mask of T5 field.                                                */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TIMER                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ====================================================== Struct TIMER ======================================================= */
/**
  * @brief Timer/Counter
  */
  typedef struct {                                   /*!< TIMER Structure                                                      */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start Timer                                           */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop Timer                                            */
    __OM uint32_t TASKS_COUNT;                       /*!< (@ 0x00000008) Increment Timer (Counter mode only)                   */
    __OM uint32_t TASKS_CLEAR;                       /*!< (@ 0x0000000C) Clear time                                            */
    __IM uint32_t RESERVED[12];
    __OM uint32_t TASKS_CAPTURE[8];                  /*!< (@ 0x00000040) Capture Timer value to CC[n] register                 */
    __IM uint32_t RESERVED1[8];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IOM uint32_t SUBSCRIBE_COUNT;                  /*!< (@ 0x00000088) Subscribe configuration for task COUNT                */
    __IOM uint32_t SUBSCRIBE_CLEAR;                  /*!< (@ 0x0000008C) Subscribe configuration for task CLEAR                */
    __IM uint32_t RESERVED2[12];
    __IOM uint32_t SUBSCRIBE_CAPTURE[8];             /*!< (@ 0x000000C0) Subscribe configuration for task CAPTURE[n]           */
    __IM uint32_t RESERVED3[24];
    __IOM uint32_t EVENTS_COMPARE[8];                /*!< (@ 0x00000140) Compare event on CC[n] match                          */
    __IM uint32_t RESERVED4[24];
    __IOM uint32_t PUBLISH_COMPARE[8];               /*!< (@ 0x000001C0) Publish configuration for event COMPARE[n]            */
    __IM uint32_t RESERVED5[8];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED7[126];
    __IOM uint32_t MODE;                             /*!< (@ 0x00000504) Timer mode selection                                  */
    __IOM uint32_t BITMODE;                          /*!< (@ 0x00000508) Configure the number of bits used by the TIMER        */
    __IM uint32_t RESERVED8;
    __IOM uint32_t PRESCALER;                        /*!< (@ 0x00000510) Timer prescaler register                              */
    __IM uint32_t RESERVED9[11];
    __IOM uint32_t CC[8];                            /*!< (@ 0x00000540) Capture/Compare register n                            */
    __IM uint32_t RESERVED10[8];
    __IOM uint32_t ONESHOTEN[8];                     /*!< (@ 0x00000580) Enable one-shot operation for Capture/Compare channel
                                                                         n*/
  } NRF_TIMER_Type;                                  /*!< Size = 1440 (0x5A0)                                                  */

/* TIMER_TASKS_START: Start Timer */
  #define TIMER_TASKS_START_ResetValue (0x00000000UL) /*!< Reset value of TASKS_START register.                                */

/* TASKS_START @Bit 0 : Start Timer */
  #define TIMER_TASKS_START_TASKS_START_Pos (0UL)    /*!< Position of TASKS_START field.                                       */
  #define TIMER_TASKS_START_TASKS_START_Msk (0x1UL << TIMER_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.   */
  #define TIMER_TASKS_START_TASKS_START_Min (0x1UL)  /*!< Min enumerator value of TASKS_START field.                           */
  #define TIMER_TASKS_START_TASKS_START_Max (0x1UL)  /*!< Max enumerator value of TASKS_START field.                           */
  #define TIMER_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                      */


/* TIMER_TASKS_STOP: Stop Timer */
  #define TIMER_TASKS_STOP_ResetValue (0x00000000UL) /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop Timer */
  #define TIMER_TASKS_STOP_TASKS_STOP_Pos (0UL)      /*!< Position of TASKS_STOP field.                                        */
  #define TIMER_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TIMER_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.        */
  #define TIMER_TASKS_STOP_TASKS_STOP_Min (0x1UL)    /*!< Min enumerator value of TASKS_STOP field.                            */
  #define TIMER_TASKS_STOP_TASKS_STOP_Max (0x1UL)    /*!< Max enumerator value of TASKS_STOP field.                            */
  #define TIMER_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                        */


/* TIMER_TASKS_COUNT: Increment Timer (Counter mode only) */
  #define TIMER_TASKS_COUNT_ResetValue (0x00000000UL) /*!< Reset value of TASKS_COUNT register.                                */

/* TASKS_COUNT @Bit 0 : Increment Timer (Counter mode only) */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Pos (0UL)    /*!< Position of TASKS_COUNT field.                                       */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Msk (0x1UL << TIMER_TASKS_COUNT_TASKS_COUNT_Pos) /*!< Bit mask of TASKS_COUNT field.   */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Min (0x1UL)  /*!< Min enumerator value of TASKS_COUNT field.                           */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Max (0x1UL)  /*!< Max enumerator value of TASKS_COUNT field.                           */
  #define TIMER_TASKS_COUNT_TASKS_COUNT_Trigger (0x1UL) /*!< Trigger task                                                      */


/* TIMER_TASKS_CLEAR: Clear time */
  #define TIMER_TASKS_CLEAR_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CLEAR register.                                */

/* TASKS_CLEAR @Bit 0 : Clear time */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL)    /*!< Position of TASKS_CLEAR field.                                       */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos) /*!< Bit mask of TASKS_CLEAR field.   */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Min (0x1UL)  /*!< Min enumerator value of TASKS_CLEAR field.                           */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Max (0x1UL)  /*!< Max enumerator value of TASKS_CLEAR field.                           */
  #define TIMER_TASKS_CLEAR_TASKS_CLEAR_Trigger (0x1UL) /*!< Trigger task                                                      */


/* TIMER_TASKS_CAPTURE: Capture Timer value to CC[n] register */
  #define TIMER_TASKS_CAPTURE_MaxCount (8UL)         /*!< Max size of TASKS_CAPTURE[8] array.                                  */
  #define TIMER_TASKS_CAPTURE_MaxIndex (7UL)         /*!< Max index of TASKS_CAPTURE[8] array.                                 */
  #define TIMER_TASKS_CAPTURE_MinIndex (0UL)         /*!< Min index of TASKS_CAPTURE[8] array.                                 */
  #define TIMER_TASKS_CAPTURE_ResetValue (0x00000000UL) /*!< Reset value of TASKS_CAPTURE[8] register.                         */

/* TASKS_CAPTURE @Bit 0 : Capture Timer value to CC[n] register */
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL) /*!< Position of TASKS_CAPTURE field.                                    */
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE
                                                                            field.*/
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Min (0x1UL) /*!< Min enumerator value of TASKS_CAPTURE field.                      */
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Max (0x1UL) /*!< Max enumerator value of TASKS_CAPTURE field.                      */
  #define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (0x1UL) /*!< Trigger task                                                  */


/* TIMER_SUBSCRIBE_START: Subscribe configuration for task START */
  #define TIMER_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TIMER_SUBSCRIBE_START_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define TIMER_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define TIMER_SUBSCRIBE_START_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define TIMER_SUBSCRIBE_START_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_START_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define TIMER_SUBSCRIBE_START_EN_Msk (0x1UL << TIMER_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                      */
  #define TIMER_SUBSCRIBE_START_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_START_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_START_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define TIMER_SUBSCRIBE_START_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* TIMER_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TIMER_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define TIMER_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_STOP_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define TIMER_SUBSCRIBE_STOP_EN_Msk (0x1UL << TIMER_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                        */
  #define TIMER_SUBSCRIBE_STOP_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_STOP_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_STOP_EN_Disabled (0x0UL)   /*!< Disable subscription                                                 */
  #define TIMER_SUBSCRIBE_STOP_EN_Enabled (0x1UL)    /*!< Enable subscription                                                  */


/* TIMER_SUBSCRIBE_COUNT: Subscribe configuration for task COUNT */
  #define TIMER_SUBSCRIBE_COUNT_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_COUNT register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task COUNT will subscribe to */
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_COUNT_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define TIMER_SUBSCRIBE_COUNT_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_COUNT_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define TIMER_SUBSCRIBE_COUNT_EN_Msk (0x1UL << TIMER_SUBSCRIBE_COUNT_EN_Pos) /*!< Bit mask of EN field.                      */
  #define TIMER_SUBSCRIBE_COUNT_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_COUNT_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_COUNT_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define TIMER_SUBSCRIBE_COUNT_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* TIMER_SUBSCRIBE_CLEAR: Subscribe configuration for task CLEAR */
  #define TIMER_SUBSCRIBE_CLEAR_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CLEAR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that task CLEAR will subscribe to */
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define TIMER_SUBSCRIBE_CLEAR_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CLEAR_EN_Pos) /*!< Bit mask of EN field.                      */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define TIMER_SUBSCRIBE_CLEAR_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* TIMER_SUBSCRIBE_CAPTURE: Subscribe configuration for task CAPTURE[n] */
  #define TIMER_SUBSCRIBE_CAPTURE_MaxCount (8UL)     /*!< Max size of SUBSCRIBE_CAPTURE[8] array.                              */
  #define TIMER_SUBSCRIBE_CAPTURE_MaxIndex (7UL)     /*!< Max index of SUBSCRIBE_CAPTURE[8] array.                             */
  #define TIMER_SUBSCRIBE_CAPTURE_MinIndex (0UL)     /*!< Min index of SUBSCRIBE_CAPTURE[8] array.                             */
  #define TIMER_SUBSCRIBE_CAPTURE_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_CAPTURE[8] register.                 */

/* CHIDX @Bits 0..7 : DPPI channel that task CAPTURE[n] will subscribe to */
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CAPTURE_EN_Pos) /*!< Bit mask of EN field.                  */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define TIMER_SUBSCRIBE_CAPTURE_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* TIMER_EVENTS_COMPARE: Compare event on CC[n] match */
  #define TIMER_EVENTS_COMPARE_MaxCount (8UL)        /*!< Max size of EVENTS_COMPARE[8] array.                                 */
  #define TIMER_EVENTS_COMPARE_MaxIndex (7UL)        /*!< Max index of EVENTS_COMPARE[8] array.                                */
  #define TIMER_EVENTS_COMPARE_MinIndex (0UL)        /*!< Min index of EVENTS_COMPARE[8] array.                                */
  #define TIMER_EVENTS_COMPARE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_COMPARE[8] register.                       */

/* EVENTS_COMPARE @Bit 0 : Compare event on CC[n] match */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL) /*!< Position of EVENTS_COMPARE field.                                 */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of
                                                                            EVENTS_COMPARE field.*/
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Min (0x0UL) /*!< Min enumerator value of EVENTS_COMPARE field.                   */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Max (0x1UL) /*!< Max enumerator value of EVENTS_COMPARE field.                   */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0x0UL) /*!< Event not generated                                    */
  #define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Generated (0x1UL) /*!< Event generated                                           */


/* TIMER_PUBLISH_COMPARE: Publish configuration for event COMPARE[n] */
  #define TIMER_PUBLISH_COMPARE_MaxCount (8UL)       /*!< Max size of PUBLISH_COMPARE[8] array.                                */
  #define TIMER_PUBLISH_COMPARE_MaxIndex (7UL)       /*!< Max index of PUBLISH_COMPARE[8] array.                               */
  #define TIMER_PUBLISH_COMPARE_MinIndex (0UL)       /*!< Min index of PUBLISH_COMPARE[8] array.                               */
  #define TIMER_PUBLISH_COMPARE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_COMPARE[8] register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that event COMPARE[n] will publish to */
  #define TIMER_PUBLISH_COMPARE_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define TIMER_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << TIMER_PUBLISH_COMPARE_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define TIMER_PUBLISH_COMPARE_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define TIMER_PUBLISH_COMPARE_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TIMER_PUBLISH_COMPARE_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define TIMER_PUBLISH_COMPARE_EN_Msk (0x1UL << TIMER_PUBLISH_COMPARE_EN_Pos) /*!< Bit mask of EN field.                      */
  #define TIMER_PUBLISH_COMPARE_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define TIMER_PUBLISH_COMPARE_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define TIMER_PUBLISH_COMPARE_EN_Disabled (0x0UL)  /*!< Disable publishing                                                   */
  #define TIMER_PUBLISH_COMPARE_EN_Enabled (0x1UL)   /*!< Enable publishing                                                    */


/* TIMER_SHORTS: Shortcuts between local events and tasks */
  #define TIMER_SHORTS_ResetValue (0x00000000UL)     /*!< Reset value of SHORTS register.                                      */

/* COMPARE0_CLEAR @Bit 0 : Shortcut between event COMPARE[0] and task CLEAR */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Pos (0UL)      /*!< Position of COMPARE0_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE0_CLEAR_Pos) /*!< Bit mask of COMPARE0_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE0_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE0_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE0_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE1_CLEAR @Bit 1 : Shortcut between event COMPARE[1] and task CLEAR */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Pos (1UL)      /*!< Position of COMPARE1_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE1_CLEAR_Pos) /*!< Bit mask of COMPARE1_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE1_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE1_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE1_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE2_CLEAR @Bit 2 : Shortcut between event COMPARE[2] and task CLEAR */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Pos (2UL)      /*!< Position of COMPARE2_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE2_CLEAR_Pos) /*!< Bit mask of COMPARE2_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE2_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE2_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE2_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE3_CLEAR @Bit 3 : Shortcut between event COMPARE[3] and task CLEAR */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Pos (3UL)      /*!< Position of COMPARE3_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE3_CLEAR_Pos) /*!< Bit mask of COMPARE3_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE3_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE3_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE3_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE4_CLEAR @Bit 4 : Shortcut between event COMPARE[4] and task CLEAR */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Pos (4UL)      /*!< Position of COMPARE4_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE4_CLEAR_Pos) /*!< Bit mask of COMPARE4_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE4_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE4_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE4_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE5_CLEAR @Bit 5 : Shortcut between event COMPARE[5] and task CLEAR */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Pos (5UL)      /*!< Position of COMPARE5_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE5_CLEAR_Pos) /*!< Bit mask of COMPARE5_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE5_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE5_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE5_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE6_CLEAR @Bit 6 : Shortcut between event COMPARE[6] and task CLEAR */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Pos (6UL)      /*!< Position of COMPARE6_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE6_CLEAR_Pos) /*!< Bit mask of COMPARE6_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE6_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE6_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE6_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE7_CLEAR @Bit 7 : Shortcut between event COMPARE[7] and task CLEAR */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Pos (7UL)      /*!< Position of COMPARE7_CLEAR field.                                    */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE7_CLEAR_Pos) /*!< Bit mask of COMPARE7_CLEAR field.    */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Min (0x0UL)    /*!< Min enumerator value of COMPARE7_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Max (0x1UL)    /*!< Max enumerator value of COMPARE7_CLEAR field.                        */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Disabled (0x0UL) /*!< Disable shortcut                                                   */
  #define TIMER_SHORTS_COMPARE7_CLEAR_Enabled (0x1UL) /*!< Enable shortcut                                                     */

/* COMPARE0_STOP @Bit 16 : Shortcut between event COMPARE[0] and task STOP */
  #define TIMER_SHORTS_COMPARE0_STOP_Pos (16UL)      /*!< Position of COMPARE0_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE0_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE0_STOP_Pos) /*!< Bit mask of COMPARE0_STOP field.       */
  #define TIMER_SHORTS_COMPARE0_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE0_STOP field.                         */
  #define TIMER_SHORTS_COMPARE0_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE0_STOP field.                         */
  #define TIMER_SHORTS_COMPARE0_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE0_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE1_STOP @Bit 17 : Shortcut between event COMPARE[1] and task STOP */
  #define TIMER_SHORTS_COMPARE1_STOP_Pos (17UL)      /*!< Position of COMPARE1_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE1_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE1_STOP_Pos) /*!< Bit mask of COMPARE1_STOP field.       */
  #define TIMER_SHORTS_COMPARE1_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE1_STOP field.                         */
  #define TIMER_SHORTS_COMPARE1_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE1_STOP field.                         */
  #define TIMER_SHORTS_COMPARE1_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE1_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE2_STOP @Bit 18 : Shortcut between event COMPARE[2] and task STOP */
  #define TIMER_SHORTS_COMPARE2_STOP_Pos (18UL)      /*!< Position of COMPARE2_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE2_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE2_STOP_Pos) /*!< Bit mask of COMPARE2_STOP field.       */
  #define TIMER_SHORTS_COMPARE2_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE2_STOP field.                         */
  #define TIMER_SHORTS_COMPARE2_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE2_STOP field.                         */
  #define TIMER_SHORTS_COMPARE2_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE2_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE3_STOP @Bit 19 : Shortcut between event COMPARE[3] and task STOP */
  #define TIMER_SHORTS_COMPARE3_STOP_Pos (19UL)      /*!< Position of COMPARE3_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE3_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE3_STOP_Pos) /*!< Bit mask of COMPARE3_STOP field.       */
  #define TIMER_SHORTS_COMPARE3_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE3_STOP field.                         */
  #define TIMER_SHORTS_COMPARE3_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE3_STOP field.                         */
  #define TIMER_SHORTS_COMPARE3_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE3_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE4_STOP @Bit 20 : Shortcut between event COMPARE[4] and task STOP */
  #define TIMER_SHORTS_COMPARE4_STOP_Pos (20UL)      /*!< Position of COMPARE4_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE4_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE4_STOP_Pos) /*!< Bit mask of COMPARE4_STOP field.       */
  #define TIMER_SHORTS_COMPARE4_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE4_STOP field.                         */
  #define TIMER_SHORTS_COMPARE4_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE4_STOP field.                         */
  #define TIMER_SHORTS_COMPARE4_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE4_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE5_STOP @Bit 21 : Shortcut between event COMPARE[5] and task STOP */
  #define TIMER_SHORTS_COMPARE5_STOP_Pos (21UL)      /*!< Position of COMPARE5_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE5_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE5_STOP_Pos) /*!< Bit mask of COMPARE5_STOP field.       */
  #define TIMER_SHORTS_COMPARE5_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE5_STOP field.                         */
  #define TIMER_SHORTS_COMPARE5_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE5_STOP field.                         */
  #define TIMER_SHORTS_COMPARE5_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE5_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE6_STOP @Bit 22 : Shortcut between event COMPARE[6] and task STOP */
  #define TIMER_SHORTS_COMPARE6_STOP_Pos (22UL)      /*!< Position of COMPARE6_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE6_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE6_STOP_Pos) /*!< Bit mask of COMPARE6_STOP field.       */
  #define TIMER_SHORTS_COMPARE6_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE6_STOP field.                         */
  #define TIMER_SHORTS_COMPARE6_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE6_STOP field.                         */
  #define TIMER_SHORTS_COMPARE6_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE6_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* COMPARE7_STOP @Bit 23 : Shortcut between event COMPARE[7] and task STOP */
  #define TIMER_SHORTS_COMPARE7_STOP_Pos (23UL)      /*!< Position of COMPARE7_STOP field.                                     */
  #define TIMER_SHORTS_COMPARE7_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE7_STOP_Pos) /*!< Bit mask of COMPARE7_STOP field.       */
  #define TIMER_SHORTS_COMPARE7_STOP_Min (0x0UL)     /*!< Min enumerator value of COMPARE7_STOP field.                         */
  #define TIMER_SHORTS_COMPARE7_STOP_Max (0x1UL)     /*!< Max enumerator value of COMPARE7_STOP field.                         */
  #define TIMER_SHORTS_COMPARE7_STOP_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TIMER_SHORTS_COMPARE7_STOP_Enabled (0x1UL) /*!< Enable shortcut                                                      */


/* TIMER_INTEN: Enable or disable interrupt */
  #define TIMER_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* COMPARE0 @Bit 16 : Enable or disable interrupt for event COMPARE[0] */
  #define TIMER_INTEN_COMPARE0_Pos (16UL)            /*!< Position of COMPARE0 field.                                          */
  #define TIMER_INTEN_COMPARE0_Msk (0x1UL << TIMER_INTEN_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                        */
  #define TIMER_INTEN_COMPARE0_Min (0x0UL)           /*!< Min enumerator value of COMPARE0 field.                              */
  #define TIMER_INTEN_COMPARE0_Max (0x1UL)           /*!< Max enumerator value of COMPARE0 field.                              */
  #define TIMER_INTEN_COMPARE0_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE0_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE1 @Bit 17 : Enable or disable interrupt for event COMPARE[1] */
  #define TIMER_INTEN_COMPARE1_Pos (17UL)            /*!< Position of COMPARE1 field.                                          */
  #define TIMER_INTEN_COMPARE1_Msk (0x1UL << TIMER_INTEN_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                        */
  #define TIMER_INTEN_COMPARE1_Min (0x0UL)           /*!< Min enumerator value of COMPARE1 field.                              */
  #define TIMER_INTEN_COMPARE1_Max (0x1UL)           /*!< Max enumerator value of COMPARE1 field.                              */
  #define TIMER_INTEN_COMPARE1_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE1_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE2 @Bit 18 : Enable or disable interrupt for event COMPARE[2] */
  #define TIMER_INTEN_COMPARE2_Pos (18UL)            /*!< Position of COMPARE2 field.                                          */
  #define TIMER_INTEN_COMPARE2_Msk (0x1UL << TIMER_INTEN_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                        */
  #define TIMER_INTEN_COMPARE2_Min (0x0UL)           /*!< Min enumerator value of COMPARE2 field.                              */
  #define TIMER_INTEN_COMPARE2_Max (0x1UL)           /*!< Max enumerator value of COMPARE2 field.                              */
  #define TIMER_INTEN_COMPARE2_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE2_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE3 @Bit 19 : Enable or disable interrupt for event COMPARE[3] */
  #define TIMER_INTEN_COMPARE3_Pos (19UL)            /*!< Position of COMPARE3 field.                                          */
  #define TIMER_INTEN_COMPARE3_Msk (0x1UL << TIMER_INTEN_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                        */
  #define TIMER_INTEN_COMPARE3_Min (0x0UL)           /*!< Min enumerator value of COMPARE3 field.                              */
  #define TIMER_INTEN_COMPARE3_Max (0x1UL)           /*!< Max enumerator value of COMPARE3 field.                              */
  #define TIMER_INTEN_COMPARE3_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE3_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE4 @Bit 20 : Enable or disable interrupt for event COMPARE[4] */
  #define TIMER_INTEN_COMPARE4_Pos (20UL)            /*!< Position of COMPARE4 field.                                          */
  #define TIMER_INTEN_COMPARE4_Msk (0x1UL << TIMER_INTEN_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                        */
  #define TIMER_INTEN_COMPARE4_Min (0x0UL)           /*!< Min enumerator value of COMPARE4 field.                              */
  #define TIMER_INTEN_COMPARE4_Max (0x1UL)           /*!< Max enumerator value of COMPARE4 field.                              */
  #define TIMER_INTEN_COMPARE4_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE4_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE5 @Bit 21 : Enable or disable interrupt for event COMPARE[5] */
  #define TIMER_INTEN_COMPARE5_Pos (21UL)            /*!< Position of COMPARE5 field.                                          */
  #define TIMER_INTEN_COMPARE5_Msk (0x1UL << TIMER_INTEN_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                        */
  #define TIMER_INTEN_COMPARE5_Min (0x0UL)           /*!< Min enumerator value of COMPARE5 field.                              */
  #define TIMER_INTEN_COMPARE5_Max (0x1UL)           /*!< Max enumerator value of COMPARE5 field.                              */
  #define TIMER_INTEN_COMPARE5_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE5_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE6 @Bit 22 : Enable or disable interrupt for event COMPARE[6] */
  #define TIMER_INTEN_COMPARE6_Pos (22UL)            /*!< Position of COMPARE6 field.                                          */
  #define TIMER_INTEN_COMPARE6_Msk (0x1UL << TIMER_INTEN_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                        */
  #define TIMER_INTEN_COMPARE6_Min (0x0UL)           /*!< Min enumerator value of COMPARE6 field.                              */
  #define TIMER_INTEN_COMPARE6_Max (0x1UL)           /*!< Max enumerator value of COMPARE6 field.                              */
  #define TIMER_INTEN_COMPARE6_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE6_Enabled (0x1UL)       /*!< Enable                                                               */

/* COMPARE7 @Bit 23 : Enable or disable interrupt for event COMPARE[7] */
  #define TIMER_INTEN_COMPARE7_Pos (23UL)            /*!< Position of COMPARE7 field.                                          */
  #define TIMER_INTEN_COMPARE7_Msk (0x1UL << TIMER_INTEN_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                        */
  #define TIMER_INTEN_COMPARE7_Min (0x0UL)           /*!< Min enumerator value of COMPARE7 field.                              */
  #define TIMER_INTEN_COMPARE7_Max (0x1UL)           /*!< Max enumerator value of COMPARE7 field.                              */
  #define TIMER_INTEN_COMPARE7_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TIMER_INTEN_COMPARE7_Enabled (0x1UL)       /*!< Enable                                                               */


/* TIMER_INTENSET: Enable interrupt */
  #define TIMER_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* COMPARE0 @Bit 16 : Write '1' to enable interrupt for event COMPARE[0] */
  #define TIMER_INTENSET_COMPARE0_Pos (16UL)         /*!< Position of COMPARE0 field.                                          */
  #define TIMER_INTENSET_COMPARE0_Msk (0x1UL << TIMER_INTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define TIMER_INTENSET_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define TIMER_INTENSET_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define TIMER_INTENSET_COMPARE0_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 17 : Write '1' to enable interrupt for event COMPARE[1] */
  #define TIMER_INTENSET_COMPARE1_Pos (17UL)         /*!< Position of COMPARE1 field.                                          */
  #define TIMER_INTENSET_COMPARE1_Msk (0x1UL << TIMER_INTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define TIMER_INTENSET_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define TIMER_INTENSET_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define TIMER_INTENSET_COMPARE1_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 18 : Write '1' to enable interrupt for event COMPARE[2] */
  #define TIMER_INTENSET_COMPARE2_Pos (18UL)         /*!< Position of COMPARE2 field.                                          */
  #define TIMER_INTENSET_COMPARE2_Msk (0x1UL << TIMER_INTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define TIMER_INTENSET_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define TIMER_INTENSET_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define TIMER_INTENSET_COMPARE2_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 19 : Write '1' to enable interrupt for event COMPARE[3] */
  #define TIMER_INTENSET_COMPARE3_Pos (19UL)         /*!< Position of COMPARE3 field.                                          */
  #define TIMER_INTENSET_COMPARE3_Msk (0x1UL << TIMER_INTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define TIMER_INTENSET_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define TIMER_INTENSET_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define TIMER_INTENSET_COMPARE3_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 20 : Write '1' to enable interrupt for event COMPARE[4] */
  #define TIMER_INTENSET_COMPARE4_Pos (20UL)         /*!< Position of COMPARE4 field.                                          */
  #define TIMER_INTENSET_COMPARE4_Msk (0x1UL << TIMER_INTENSET_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define TIMER_INTENSET_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define TIMER_INTENSET_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define TIMER_INTENSET_COMPARE4_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 21 : Write '1' to enable interrupt for event COMPARE[5] */
  #define TIMER_INTENSET_COMPARE5_Pos (21UL)         /*!< Position of COMPARE5 field.                                          */
  #define TIMER_INTENSET_COMPARE5_Msk (0x1UL << TIMER_INTENSET_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define TIMER_INTENSET_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define TIMER_INTENSET_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define TIMER_INTENSET_COMPARE5_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 22 : Write '1' to enable interrupt for event COMPARE[6] */
  #define TIMER_INTENSET_COMPARE6_Pos (22UL)         /*!< Position of COMPARE6 field.                                          */
  #define TIMER_INTENSET_COMPARE6_Msk (0x1UL << TIMER_INTENSET_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define TIMER_INTENSET_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define TIMER_INTENSET_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define TIMER_INTENSET_COMPARE6_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 23 : Write '1' to enable interrupt for event COMPARE[7] */
  #define TIMER_INTENSET_COMPARE7_Pos (23UL)         /*!< Position of COMPARE7 field.                                          */
  #define TIMER_INTENSET_COMPARE7_Msk (0x1UL << TIMER_INTENSET_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define TIMER_INTENSET_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define TIMER_INTENSET_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define TIMER_INTENSET_COMPARE7_Set (0x1UL)        /*!< Enable                                                               */
  #define TIMER_INTENSET_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENSET_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */


/* TIMER_INTENCLR: Disable interrupt */
  #define TIMER_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* COMPARE0 @Bit 16 : Write '1' to disable interrupt for event COMPARE[0] */
  #define TIMER_INTENCLR_COMPARE0_Pos (16UL)         /*!< Position of COMPARE0 field.                                          */
  #define TIMER_INTENCLR_COMPARE0_Msk (0x1UL << TIMER_INTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field.                  */
  #define TIMER_INTENCLR_COMPARE0_Min (0x0UL)        /*!< Min enumerator value of COMPARE0 field.                              */
  #define TIMER_INTENCLR_COMPARE0_Max (0x1UL)        /*!< Max enumerator value of COMPARE0 field.                              */
  #define TIMER_INTENCLR_COMPARE0_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE0_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE0_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE1 @Bit 17 : Write '1' to disable interrupt for event COMPARE[1] */
  #define TIMER_INTENCLR_COMPARE1_Pos (17UL)         /*!< Position of COMPARE1 field.                                          */
  #define TIMER_INTENCLR_COMPARE1_Msk (0x1UL << TIMER_INTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field.                  */
  #define TIMER_INTENCLR_COMPARE1_Min (0x0UL)        /*!< Min enumerator value of COMPARE1 field.                              */
  #define TIMER_INTENCLR_COMPARE1_Max (0x1UL)        /*!< Max enumerator value of COMPARE1 field.                              */
  #define TIMER_INTENCLR_COMPARE1_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE1_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE1_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE2 @Bit 18 : Write '1' to disable interrupt for event COMPARE[2] */
  #define TIMER_INTENCLR_COMPARE2_Pos (18UL)         /*!< Position of COMPARE2 field.                                          */
  #define TIMER_INTENCLR_COMPARE2_Msk (0x1UL << TIMER_INTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field.                  */
  #define TIMER_INTENCLR_COMPARE2_Min (0x0UL)        /*!< Min enumerator value of COMPARE2 field.                              */
  #define TIMER_INTENCLR_COMPARE2_Max (0x1UL)        /*!< Max enumerator value of COMPARE2 field.                              */
  #define TIMER_INTENCLR_COMPARE2_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE2_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE2_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE3 @Bit 19 : Write '1' to disable interrupt for event COMPARE[3] */
  #define TIMER_INTENCLR_COMPARE3_Pos (19UL)         /*!< Position of COMPARE3 field.                                          */
  #define TIMER_INTENCLR_COMPARE3_Msk (0x1UL << TIMER_INTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field.                  */
  #define TIMER_INTENCLR_COMPARE3_Min (0x0UL)        /*!< Min enumerator value of COMPARE3 field.                              */
  #define TIMER_INTENCLR_COMPARE3_Max (0x1UL)        /*!< Max enumerator value of COMPARE3 field.                              */
  #define TIMER_INTENCLR_COMPARE3_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE3_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE3_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE4 @Bit 20 : Write '1' to disable interrupt for event COMPARE[4] */
  #define TIMER_INTENCLR_COMPARE4_Pos (20UL)         /*!< Position of COMPARE4 field.                                          */
  #define TIMER_INTENCLR_COMPARE4_Msk (0x1UL << TIMER_INTENCLR_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field.                  */
  #define TIMER_INTENCLR_COMPARE4_Min (0x0UL)        /*!< Min enumerator value of COMPARE4 field.                              */
  #define TIMER_INTENCLR_COMPARE4_Max (0x1UL)        /*!< Max enumerator value of COMPARE4 field.                              */
  #define TIMER_INTENCLR_COMPARE4_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE4_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE4_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE5 @Bit 21 : Write '1' to disable interrupt for event COMPARE[5] */
  #define TIMER_INTENCLR_COMPARE5_Pos (21UL)         /*!< Position of COMPARE5 field.                                          */
  #define TIMER_INTENCLR_COMPARE5_Msk (0x1UL << TIMER_INTENCLR_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field.                  */
  #define TIMER_INTENCLR_COMPARE5_Min (0x0UL)        /*!< Min enumerator value of COMPARE5 field.                              */
  #define TIMER_INTENCLR_COMPARE5_Max (0x1UL)        /*!< Max enumerator value of COMPARE5 field.                              */
  #define TIMER_INTENCLR_COMPARE5_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE5_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE5_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE6 @Bit 22 : Write '1' to disable interrupt for event COMPARE[6] */
  #define TIMER_INTENCLR_COMPARE6_Pos (22UL)         /*!< Position of COMPARE6 field.                                          */
  #define TIMER_INTENCLR_COMPARE6_Msk (0x1UL << TIMER_INTENCLR_COMPARE6_Pos) /*!< Bit mask of COMPARE6 field.                  */
  #define TIMER_INTENCLR_COMPARE6_Min (0x0UL)        /*!< Min enumerator value of COMPARE6 field.                              */
  #define TIMER_INTENCLR_COMPARE6_Max (0x1UL)        /*!< Max enumerator value of COMPARE6 field.                              */
  #define TIMER_INTENCLR_COMPARE6_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE6_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE6_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* COMPARE7 @Bit 23 : Write '1' to disable interrupt for event COMPARE[7] */
  #define TIMER_INTENCLR_COMPARE7_Pos (23UL)         /*!< Position of COMPARE7 field.                                          */
  #define TIMER_INTENCLR_COMPARE7_Msk (0x1UL << TIMER_INTENCLR_COMPARE7_Pos) /*!< Bit mask of COMPARE7 field.                  */
  #define TIMER_INTENCLR_COMPARE7_Min (0x0UL)        /*!< Min enumerator value of COMPARE7 field.                              */
  #define TIMER_INTENCLR_COMPARE7_Max (0x1UL)        /*!< Max enumerator value of COMPARE7 field.                              */
  #define TIMER_INTENCLR_COMPARE7_Clear (0x1UL)      /*!< Disable                                                              */
  #define TIMER_INTENCLR_COMPARE7_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TIMER_INTENCLR_COMPARE7_Enabled (0x1UL)    /*!< Read: Enabled                                                        */


/* TIMER_MODE: Timer mode selection */
  #define TIMER_MODE_ResetValue (0x00000000UL)       /*!< Reset value of MODE register.                                        */

/* MODE @Bits 0..1 : Timer mode */
  #define TIMER_MODE_MODE_Pos (0UL)                  /*!< Position of MODE field.                                              */
  #define TIMER_MODE_MODE_Msk (0x3UL << TIMER_MODE_MODE_Pos) /*!< Bit mask of MODE field.                                      */
  #define TIMER_MODE_MODE_Min (0x0UL)                /*!< Min enumerator value of MODE field.                                  */
  #define TIMER_MODE_MODE_Max (0x2UL)                /*!< Max enumerator value of MODE field.                                  */
  #define TIMER_MODE_MODE_Timer (0x0UL)              /*!< Select Timer mode                                                    */
  #define TIMER_MODE_MODE_Counter (0x1UL)            /*!< Select Counter mode                                                  */
  #define TIMER_MODE_MODE_LowPowerCounter (0x2UL)    /*!< Select Low Power Counter mode                                        */


/* TIMER_BITMODE: Configure the number of bits used by the TIMER */
  #define TIMER_BITMODE_ResetValue (0x00000000UL)    /*!< Reset value of BITMODE register.                                     */

/* BITMODE @Bits 0..1 : Timer bit width */
  #define TIMER_BITMODE_BITMODE_Pos (0UL)            /*!< Position of BITMODE field.                                           */
  #define TIMER_BITMODE_BITMODE_Msk (0x3UL << TIMER_BITMODE_BITMODE_Pos) /*!< Bit mask of BITMODE field.                       */
  #define TIMER_BITMODE_BITMODE_Min (0x0UL)          /*!< Min enumerator value of BITMODE field.                               */
  #define TIMER_BITMODE_BITMODE_Max (0x3UL)          /*!< Max enumerator value of BITMODE field.                               */
  #define TIMER_BITMODE_BITMODE_16Bit (0x0UL)        /*!< 16 bit timer bit width                                               */
  #define TIMER_BITMODE_BITMODE_08Bit (0x1UL)        /*!< 8 bit timer bit width                                                */
  #define TIMER_BITMODE_BITMODE_24Bit (0x2UL)        /*!< 24 bit timer bit width                                               */
  #define TIMER_BITMODE_BITMODE_32Bit (0x3UL)        /*!< 32 bit timer bit width                                               */


/* TIMER_PRESCALER: Timer prescaler register */
  #define TIMER_PRESCALER_ResetValue (0x00000004UL)  /*!< Reset value of PRESCALER register.                                   */

/* PRESCALER @Bits 0..3 : Prescaler value */
  #define TIMER_PRESCALER_PRESCALER_Pos (0UL)        /*!< Position of PRESCALER field.                                         */
  #define TIMER_PRESCALER_PRESCALER_Msk (0xFUL << TIMER_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field.             */
  #define TIMER_PRESCALER_PRESCALER_Min (0x0UL)      /*!< Min value of PRESCALER field.                                        */
  #define TIMER_PRESCALER_PRESCALER_Max (0x9UL)      /*!< Max size of PRESCALER field.                                         */


/* TIMER_CC: Capture/Compare register n */
  #define TIMER_CC_MaxCount (8UL)                    /*!< Max size of CC[8] array.                                             */
  #define TIMER_CC_MaxIndex (7UL)                    /*!< Max index of CC[8] array.                                            */
  #define TIMER_CC_MinIndex (0UL)                    /*!< Min index of CC[8] array.                                            */
  #define TIMER_CC_ResetValue (0x00000000UL)         /*!< Reset value of CC[8] register.                                       */

/* CC @Bits 0..31 : Capture/Compare value */
  #define TIMER_CC_CC_Pos (0UL)                      /*!< Position of CC field.                                                */
  #define TIMER_CC_CC_Msk (0xFFFFFFFFUL << TIMER_CC_CC_Pos) /*!< Bit mask of CC field.                                         */


/* TIMER_ONESHOTEN: Enable one-shot operation for Capture/Compare channel n */
  #define TIMER_ONESHOTEN_MaxCount (8UL)             /*!< Max size of ONESHOTEN[8] array.                                      */
  #define TIMER_ONESHOTEN_MaxIndex (7UL)             /*!< Max index of ONESHOTEN[8] array.                                     */
  #define TIMER_ONESHOTEN_MinIndex (0UL)             /*!< Min index of ONESHOTEN[8] array.                                     */
  #define TIMER_ONESHOTEN_ResetValue (0x00000000UL)  /*!< Reset value of ONESHOTEN[8] register.                                */

/* ONESHOTEN @Bit 0 : Enable one-shot operation */
  #define TIMER_ONESHOTEN_ONESHOTEN_Pos (0UL)        /*!< Position of ONESHOTEN field.                                         */
  #define TIMER_ONESHOTEN_ONESHOTEN_Msk (0x1UL << TIMER_ONESHOTEN_ONESHOTEN_Pos) /*!< Bit mask of ONESHOTEN field.             */
  #define TIMER_ONESHOTEN_ONESHOTEN_Min (0x0UL)      /*!< Min enumerator value of ONESHOTEN field.                             */
  #define TIMER_ONESHOTEN_ONESHOTEN_Max (0x1UL)      /*!< Max enumerator value of ONESHOTEN field.                             */
  #define TIMER_ONESHOTEN_ONESHOTEN_Disable (0x0UL)  /*!< Disable one-shot operation                                           */
  #define TIMER_ONESHOTEN_ONESHOTEN_Enable (0x1UL)   /*!< Enable one-shot operation                                            */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TWIM                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TWIM_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [TWIM_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_TWIM_TASKS_DMA_RX_Type;                        /*!< Size = 40 (0x028)                                                    */

/* TWIM_TASKS_DMA_RX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define TWIM_TASKS_DMA_RX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                                */

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define TWIM_TASKS_DMA_RX_START_START_Pos (0UL)    /*!< Position of START field.                                             */
  #define TWIM_TASKS_DMA_RX_START_START_Msk (0x1UL << TWIM_TASKS_DMA_RX_START_START_Pos) /*!< Bit mask of START field.         */
  #define TWIM_TASKS_DMA_RX_START_START_Min (0x1UL)  /*!< Min enumerator value of START field.                                 */
  #define TWIM_TASKS_DMA_RX_START_START_Max (0x1UL)  /*!< Max enumerator value of START field.                                 */
  #define TWIM_TASKS_DMA_RX_START_START_Trigger (0x1UL) /*!< Trigger task                                                      */


/* TWIM_TASKS_DMA_RX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_RX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                                  */

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Pos (0UL)      /*!< Position of STOP field.                                              */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Msk (0x1UL << TWIM_TASKS_DMA_RX_STOP_STOP_Pos) /*!< Bit mask of STOP field.              */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Min (0x1UL)    /*!< Min enumerator value of STOP field.                                  */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Max (0x1UL)    /*!< Max enumerator value of STOP field.                                  */
  #define TWIM_TASKS_DMA_RX_STOP_STOP_Trigger (0x1UL) /*!< Trigger task                                                        */


/* TWIM_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                                  */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                                 */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                                 */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.                 */

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL) /*!< Position of ENABLEMATCH field.                              */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL) /*!< Min enumerator value of ENABLEMATCH field.                */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL) /*!< Max enumerator value of ENABLEMATCH field.                */
  #define TWIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                          */


/* TWIM_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                                */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                               */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                               */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.               */

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL) /*!< Position of DISABLEMATCH field.                           */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL) /*!< Min enumerator value of DISABLEMATCH field.             */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL) /*!< Max enumerator value of DISABLEMATCH field.             */
  #define TWIM_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                        */



/* ================================================ Struct TWIM_TASKS_DMA_TX ================================================= */
/**
  * @brief TX [TWIM_TASKS_DMA_TX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_TWIM_TASKS_DMA_TX_Type;                        /*!< Size = 8 (0x008)                                                     */

/* TWIM_TASKS_DMA_TX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                             easyDMA. */

  #define TWIM_TASKS_DMA_TX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                                */

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define TWIM_TASKS_DMA_TX_START_START_Pos (0UL)    /*!< Position of START field.                                             */
  #define TWIM_TASKS_DMA_TX_START_START_Msk (0x1UL << TWIM_TASKS_DMA_TX_START_START_Pos) /*!< Bit mask of START field.         */
  #define TWIM_TASKS_DMA_TX_START_START_Min (0x1UL)  /*!< Min enumerator value of START field.                                 */
  #define TWIM_TASKS_DMA_TX_START_START_Max (0x1UL)  /*!< Max enumerator value of START field.                                 */
  #define TWIM_TASKS_DMA_TX_START_START_Trigger (0x1UL) /*!< Trigger task                                                      */


/* TWIM_TASKS_DMA_TX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_TX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                                  */

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Pos (0UL)      /*!< Position of STOP field.                                              */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Msk (0x1UL << TWIM_TASKS_DMA_TX_STOP_STOP_Pos) /*!< Bit mask of STOP field.              */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Min (0x1UL)    /*!< Min enumerator value of STOP field.                                  */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Max (0x1UL)    /*!< Max enumerator value of STOP field.                                  */
  #define TWIM_TASKS_DMA_TX_STOP_STOP_Trigger (0x1UL) /*!< Trigger task                                                        */



/* ================================================== Struct TWIM_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [TWIM_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_TWIM_TASKS_DMA_RX_Type RX;               /*!< (@ 0x00000000) Peripheral tasks.                                     */
  __OM  NRF_TWIM_TASKS_DMA_TX_Type TX;               /*!< (@ 0x00000028) Peripheral tasks.                                     */
} NRF_TWIM_TASKS_DMA_Type;                           /*!< Size = 48 (0x030)                                                    */


/* ============================================== Struct TWIM_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [TWIM_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;                             /*!< (@ 0x00000000) Subscribe configuration for task START                */
  __IOM uint32_t  STOP;                              /*!< (@ 0x00000004) Subscribe configuration for task STOP                 */
  __IOM uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Subscribe configuration for task ENABLEMATCH[n]       */
  __IOM uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Subscribe configuration for task DISABLEMATCH[n]      */
} NRF_TWIM_SUBSCRIBE_DMA_RX_Type;                    /*!< Size = 40 (0x028)                                                    */

/* TWIM_SUBSCRIBE_DMA_RX_START: Subscribe configuration for task START */
  #define TWIM_SUBSCRIBE_DMA_RX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define TWIM_SUBSCRIBE_DMA_RX_START_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_START_EN_Pos) /*!< Bit mask of EN field.          */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define TWIM_SUBSCRIBE_DMA_RX_START_EN_Enabled (0x1UL) /*!< Enable subscription                                              */


/* TWIM_SUBSCRIBE_DMA_RX_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Pos) /*!< Bit mask of EN field.            */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Disabled (0x0UL) /*!< Disable subscription                                             */
  #define TWIM_SUBSCRIBE_DMA_RX_STOP_EN_Enabled (0x1UL) /*!< Enable subscription                                               */


/* TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                              */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                             */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                             */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.             */

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                      */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                  */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                   */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                           */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                              */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                              */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                      */
  #define TWIM_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                        */


/* TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                            */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                           */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                           */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.           */

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                     */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                 */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                  */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                          */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                             */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                             */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                     */
  #define TWIM_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                       */



/* ============================================== Struct TWIM_SUBSCRIBE_DMA_TX =============================================== */
/**
  * @brief TX [TWIM_SUBSCRIBE_DMA_TX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;                             /*!< (@ 0x00000000) Subscribe configuration for task START                */
  __IOM uint32_t  STOP;                              /*!< (@ 0x00000004) Subscribe configuration for task STOP                 */
} NRF_TWIM_SUBSCRIBE_DMA_TX_Type;                    /*!< Size = 8 (0x008)                                                     */

/* TWIM_SUBSCRIBE_DMA_TX_START: Subscribe configuration for task START */
  #define TWIM_SUBSCRIBE_DMA_TX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define TWIM_SUBSCRIBE_DMA_TX_START_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_TX_START_EN_Pos) /*!< Bit mask of EN field.          */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define TWIM_SUBSCRIBE_DMA_TX_START_EN_Enabled (0x1UL) /*!< Enable subscription                                              */


/* TWIM_SUBSCRIBE_DMA_TX_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Pos) /*!< Bit mask of EN field.            */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Disabled (0x0UL) /*!< Disable subscription                                             */
  #define TWIM_SUBSCRIBE_DMA_TX_STOP_EN_Enabled (0x1UL) /*!< Enable subscription                                               */



/* ================================================ Struct TWIM_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [TWIM_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_TWIM_SUBSCRIBE_DMA_RX_Type RX;           /*!< (@ 0x00000000) Subscribe configuration for tasks                     */
  __IOM NRF_TWIM_SUBSCRIBE_DMA_TX_Type TX;           /*!< (@ 0x00000028) Subscribe configuration for tasks                     */
} NRF_TWIM_SUBSCRIBE_DMA_Type;                       /*!< Size = 48 (0x030)                                                    */


/* ================================================ Struct TWIM_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [TWIM_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Indicates that the transfer of MAXCNT bytes between
                                                                         memory and the peripheral has been fully completed.*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Pattern match is detected on the DMA data bus.        */
} NRF_TWIM_EVENTS_DMA_RX_Type;                       /*!< Size = 28 (0x01C)                                                    */

/* TWIM_EVENTS_DMA_RX_END: Indicates that the transfer of MAXCNT bytes between memory and the peripheral has been fully
                            completed. */

  #define TWIM_EVENTS_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Indicates that the transfer of MAXCNT bytes between memory and the peripheral has been fully completed. */
  #define TWIM_EVENTS_DMA_RX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define TWIM_EVENTS_DMA_RX_END_END_Msk (0x1UL << TWIM_EVENTS_DMA_RX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define TWIM_EVENTS_DMA_RX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define TWIM_EVENTS_DMA_RX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define TWIM_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define TWIM_EVENTS_DMA_RX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* TWIM_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_RX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define TWIM_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << TWIM_EVENTS_DMA_RX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define TWIM_EVENTS_DMA_RX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define TWIM_EVENTS_DMA_RX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define TWIM_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIM_EVENTS_DMA_RX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* TWIM_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define TWIM_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */


/* TWIM_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define TWIM_EVENTS_DMA_RX_MATCH_MaxCount (4UL)    /*!< Max size of MATCH[4] array.                                          */
  #define TWIM_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)    /*!< Max index of MATCH[4] array.                                         */
  #define TWIM_EVENTS_DMA_RX_MATCH_MinIndex (0UL)    /*!< Min index of MATCH[4] array.                                         */
  #define TWIM_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                            */

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)   /*!< Position of MATCH field.                                             */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << TWIM_EVENTS_DMA_RX_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field.       */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL) /*!< Min enumerator value of MATCH field.                                 */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL) /*!< Max enumerator value of MATCH field.                                 */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIM_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL) /*!< Event generated                                                */



/* ================================================ Struct TWIM_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [TWIM_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Indicates that the transfer of MAXCNT bytes between
                                                                         memory and the peripheral has been fully completed.*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
} NRF_TWIM_EVENTS_DMA_TX_Type;                       /*!< Size = 12 (0x00C)                                                    */

/* TWIM_EVENTS_DMA_TX_END: Indicates that the transfer of MAXCNT bytes between memory and the peripheral has been fully
                            completed. */

  #define TWIM_EVENTS_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Indicates that the transfer of MAXCNT bytes between memory and the peripheral has been fully completed. */
  #define TWIM_EVENTS_DMA_TX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define TWIM_EVENTS_DMA_TX_END_END_Msk (0x1UL << TWIM_EVENTS_DMA_TX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define TWIM_EVENTS_DMA_TX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define TWIM_EVENTS_DMA_TX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define TWIM_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define TWIM_EVENTS_DMA_TX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* TWIM_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIM_EVENTS_DMA_TX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define TWIM_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << TWIM_EVENTS_DMA_TX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define TWIM_EVENTS_DMA_TX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define TWIM_EVENTS_DMA_TX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define TWIM_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIM_EVENTS_DMA_TX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* TWIM_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define TWIM_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */



/* ================================================= Struct TWIM_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [TWIM_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_TWIM_EVENTS_DMA_RX_Type RX;              /*!< (@ 0x00000000) Peripheral events.                                    */
  __IOM NRF_TWIM_EVENTS_DMA_TX_Type TX;              /*!< (@ 0x0000001C) Peripheral events.                                    */
} NRF_TWIM_EVENTS_DMA_Type;                          /*!< Size = 40 (0x028)                                                    */


/* =============================================== Struct TWIM_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [TWIM_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Publish configuration for event MATCH[n]              */
} NRF_TWIM_PUBLISH_DMA_RX_Type;                      /*!< Size = 28 (0x01C)                                                    */

/* TWIM_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define TWIM_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define TWIM_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* TWIM_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define TWIM_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define TWIM_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define TWIM_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* TWIM_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define TWIM_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */


/* TWIM_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define TWIM_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)   /*!< Max size of MATCH[4] array.                                          */
  #define TWIM_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)   /*!< Max index of MATCH[4] array.                                         */
  #define TWIM_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)   /*!< Min index of MATCH[4] array.                                         */
  #define TWIM_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define TWIM_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_RX_MATCH_EN_Pos) /*!< Bit mask of EN field.              */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define TWIM_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */



/* =============================================== Struct TWIM_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [TWIM_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
} NRF_TWIM_PUBLISH_DMA_TX_Type;                      /*!< Size = 12 (0x00C)                                                    */

/* TWIM_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define TWIM_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define TWIM_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* TWIM_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define TWIM_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define TWIM_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define TWIM_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* TWIM_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define TWIM_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */



/* ================================================= Struct TWIM_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [TWIM_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_TWIM_PUBLISH_DMA_RX_Type RX;             /*!< (@ 0x00000000) Publish configuration for events                      */
  __IOM NRF_TWIM_PUBLISH_DMA_TX_Type TX;             /*!< (@ 0x0000001C) Publish configuration for events                      */
} NRF_TWIM_PUBLISH_DMA_Type;                         /*!< Size = 40 (0x028)                                                    */


/* ==================================================== Struct TWIM_PSEL ===================================================== */
/**
  * @brief PSEL [TWIM_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;                               /*!< (@ 0x00000000) Pin select for SCL signal                             */
  __IOM uint32_t  SDA;                               /*!< (@ 0x00000004) Pin select for SDA signal                             */
} NRF_TWIM_PSEL_Type;                                /*!< Size = 8 (0x008)                                                     */

/* TWIM_PSEL_SCL: Pin select for SCL signal */
  #define TWIM_PSEL_SCL_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of SCL register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define TWIM_PSEL_SCL_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define TWIM_PSEL_SCL_PIN_Msk (0x1FUL << TWIM_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define TWIM_PSEL_SCL_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define TWIM_PSEL_SCL_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define TWIM_PSEL_SCL_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define TWIM_PSEL_SCL_PORT_Msk (0x7UL << TWIM_PSEL_SCL_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define TWIM_PSEL_SCL_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define TWIM_PSEL_SCL_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define TWIM_PSEL_SCL_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define TWIM_PSEL_SCL_CONNECT_Msk (0x1UL << TWIM_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define TWIM_PSEL_SCL_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define TWIM_PSEL_SCL_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define TWIM_PSEL_SCL_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define TWIM_PSEL_SCL_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */


/* TWIM_PSEL_SDA: Pin select for SDA signal */
  #define TWIM_PSEL_SDA_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of SDA register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define TWIM_PSEL_SDA_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define TWIM_PSEL_SDA_PIN_Msk (0x1FUL << TWIM_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define TWIM_PSEL_SDA_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define TWIM_PSEL_SDA_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define TWIM_PSEL_SDA_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define TWIM_PSEL_SDA_PORT_Msk (0x7UL << TWIM_PSEL_SDA_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define TWIM_PSEL_SDA_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define TWIM_PSEL_SDA_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define TWIM_PSEL_SDA_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define TWIM_PSEL_SDA_CONNECT_Msk (0x1UL << TWIM_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define TWIM_PSEL_SDA_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define TWIM_PSEL_SDA_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define TWIM_PSEL_SDA_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define TWIM_PSEL_SDA_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */



/* ================================================ Struct TWIM_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [TWIM_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) Configure individual match events                     */
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_TWIM_DMA_RX_MATCH_Type;                        /*!< Size = 20 (0x014)                                                    */

/* TWIM_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define TWIM_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                              */

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL) /*!< Position of ENABLE0 field.                                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0 field. */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL) /*!< Min enumerator value of ENABLE0 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL) /*!< Max enumerator value of ENABLE0 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL) /*!< Position of ENABLE1 field.                                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1 field. */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL) /*!< Min enumerator value of ENABLE1 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL) /*!< Max enumerator value of ENABLE1 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL) /*!< Position of ENABLE2 field.                                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2 field. */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL) /*!< Min enumerator value of ENABLE2 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL) /*!< Max enumerator value of ENABLE2 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL) /*!< Position of ENABLE3 field.                                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3 field. */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL) /*!< Min enumerator value of ENABLE3 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL) /*!< Max enumerator value of ENABLE3 field.                             */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or continous */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL) /*!< Position of ONESHOT0 field.                                        */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL) /*!< Min enumerator value of ONESHOT0 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL) /*!< Max enumerator value of ONESHOT0 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or continous */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL) /*!< Position of ONESHOT1 field.                                        */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL) /*!< Min enumerator value of ONESHOT1 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL) /*!< Max enumerator value of ONESHOT1 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or continous */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL) /*!< Position of ONESHOT2 field.                                        */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL) /*!< Min enumerator value of ONESHOT2 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL) /*!< Max enumerator value of ONESHOT2 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or continous */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL) /*!< Position of ONESHOT3 field.                                        */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL) /*!< Min enumerator value of ONESHOT3 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL) /*!< Max enumerator value of ONESHOT3 field.                           */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */


/* TWIM_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL) /*!< Max size of CANDIDATE[4] array.                                      */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL) /*!< Max index of CANDIDATE[4] array.                                     */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL) /*!< Min index of CANDIDATE[4] array.                                     */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL) /*!< Reset value of CANDIDATE[4] register.                     */

/* DATA @Bits 0..7 : Data to look for */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL) /*!< Position of DATA field.                                              */
  #define TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFUL << TWIM_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA field.   */



/* =================================================== Struct TWIM_DMA_RX ==================================================== */
/**
  * @brief RX [TWIM_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_TWIM_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_TWIM_DMA_RX_Type;                              /*!< Size = 56 (0x038)                                                    */

/* TWIM_DMA_RX_PTR: RAM buffer start address */
  #define TWIM_DMA_RX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIM_DMA_RX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define TWIM_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* TWIM_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIM_DMA_RX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_DMA_RX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define TWIM_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* TWIM_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIM_DMA_RX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_DMA_RX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define TWIM_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* TWIM_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define TWIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* TWIM_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIM_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct TWIM_DMA_TX ==================================================== */
/**
  * @brief TX [TWIM_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TWIM_DMA_TX_Type;                              /*!< Size = 36 (0x024)                                                    */

/* TWIM_DMA_TX_PTR: RAM buffer start address */
  #define TWIM_DMA_TX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIM_DMA_TX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define TWIM_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_DMA_TX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* TWIM_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIM_DMA_TX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_DMA_TX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define TWIM_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* TWIM_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIM_DMA_TX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_DMA_TX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define TWIM_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* TWIM_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define TWIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* TWIM_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIM_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct TWIM_DMA ===================================================== */
/**
  * @brief DMA [TWIM_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_TWIM_DMA_RX_Type RX;                     /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_TWIM_DMA_TX_Type TX;                     /*!< (@ 0x00000038) (unspecified)                                         */
} NRF_TWIM_DMA_Type;                                 /*!< Size = 92 (0x05C)                                                    */

/* ======================================================= Struct TWIM ======================================================= */
/**
  * @brief I2C compatible Two-Wire Master Interface with EasyDMA
  */
  typedef struct {                                   /*!< TWIM Structure                                                       */
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop TWI transaction. Must be issued while the TWI
                                                                         master is not suspended.*/
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_SUSPEND;                     /*!< (@ 0x0000000C) Suspend TWI transaction                               */
    __OM uint32_t TASKS_RESUME;                      /*!< (@ 0x00000010) Resume TWI transaction                                */
    __IM uint32_t RESERVED2[5];
    __OM NRF_TWIM_TASKS_DMA_Type TASKS_DMA;          /*!< (@ 0x00000028) Peripheral tasks.                                     */
    __IM uint32_t RESERVED3[11];
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED4;
    __IOM uint32_t SUBSCRIBE_SUSPEND;                /*!< (@ 0x0000008C) Subscribe configuration for task SUSPEND              */
    __IOM uint32_t SUBSCRIBE_RESUME;                 /*!< (@ 0x00000090) Subscribe configuration for task RESUME               */
    __IM uint32_t RESERVED5[5];
    __IOM NRF_TWIM_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA; /*!< (@ 0x000000A8) Subscribe configuration for tasks                     */
    __IM uint32_t RESERVED6[11];
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000104) TWI stopped                                           */
    __IM uint32_t RESERVED7[3];
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000114) TWI error                                             */
    __IM uint32_t RESERVED8[4];
    __IOM uint32_t EVENTS_SUSPENDED;                 /*!< (@ 0x00000128) SUSPEND task has been issued, TWI traffic is now
                                                                         suspended.*/
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t EVENTS_LASTRX;                    /*!< (@ 0x00000134) Byte boundary, starting to receive the last byte      */
    __IOM uint32_t EVENTS_LASTTX;                    /*!< (@ 0x00000138) Byte boundary, starting to transmit the last byte     */
    __IM uint32_t RESERVED10[4];
    __IOM NRF_TWIM_EVENTS_DMA_Type EVENTS_DMA;       /*!< (@ 0x0000014C) Peripheral events.                                    */
    __IM uint32_t RESERVED11[4];
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000184) Publish configuration for event STOPPED               */
    __IM uint32_t RESERVED12[3];
    __IOM uint32_t PUBLISH_ERROR;                    /*!< (@ 0x00000194) Publish configuration for event ERROR                 */
    __IM uint32_t RESERVED13[4];
    __IOM uint32_t PUBLISH_SUSPENDED;                /*!< (@ 0x000001A8) Publish configuration for event SUSPENDED             */
    __IM uint32_t RESERVED14[2];
    __IOM uint32_t PUBLISH_LASTRX;                   /*!< (@ 0x000001B4) Publish configuration for event LASTRX                */
    __IOM uint32_t PUBLISH_LASTTX;                   /*!< (@ 0x000001B8) Publish configuration for event LASTTX                */
    __IM uint32_t RESERVED15[4];
    __IOM NRF_TWIM_PUBLISH_DMA_Type PUBLISH_DMA;     /*!< (@ 0x000001CC) Publish configuration for events                      */
    __IM uint32_t RESERVED16[3];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED17[63];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED18[110];
    __IOM uint32_t ERRORSRC;                         /*!< (@ 0x000004C4) Error source                                          */
    __IM uint32_t RESERVED19[14];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable TWIM                                           */
    __IM uint32_t RESERVED20[8];
    __IOM uint32_t FREQUENCY;                        /*!< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK source
                                                                         selected.*/
    __IM uint32_t RESERVED21[24];
    __IOM uint32_t ADDRESS;                          /*!< (@ 0x00000588) Address used in the TWI transfer                      */
    __IM uint32_t RESERVED22[29];
    __IOM NRF_TWIM_PSEL_Type PSEL;                   /*!< (@ 0x00000600) (unspecified)                                         */
    __IM uint32_t RESERVED23[62];
    __IOM NRF_TWIM_DMA_Type DMA;                     /*!< (@ 0x00000700) (unspecified)                                         */
  } NRF_TWIM_Type;                                   /*!< Size = 1884 (0x75C)                                                  */

/* TWIM_TASKS_STOP: Stop TWI transaction. Must be issued while the TWI master is not suspended. */
  #define TWIM_TASKS_STOP_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop TWI transaction. Must be issued while the TWI master is not suspended. */
  #define TWIM_TASKS_STOP_TASKS_STOP_Pos (0UL)       /*!< Position of TASKS_STOP field.                                        */
  #define TWIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.          */
  #define TWIM_TASKS_STOP_TASKS_STOP_Min (0x1UL)     /*!< Min enumerator value of TASKS_STOP field.                            */
  #define TWIM_TASKS_STOP_TASKS_STOP_Max (0x1UL)     /*!< Max enumerator value of TASKS_STOP field.                            */
  #define TWIM_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                         */


/* TWIM_TASKS_SUSPEND: Suspend TWI transaction */
  #define TWIM_TASKS_SUSPEND_ResetValue (0x00000000UL) /*!< Reset value of TASKS_SUSPEND register.                             */

/* TASKS_SUSPEND @Bit 0 : Suspend TWI transaction */
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field.                                     */
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL) /*!< Min enumerator value of TASKS_SUSPEND field.                       */
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL) /*!< Max enumerator value of TASKS_SUSPEND field.                       */
  #define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL) /*!< Trigger task                                                   */


/* TWIM_TASKS_RESUME: Resume TWI transaction */
  #define TWIM_TASKS_RESUME_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RESUME register.                               */

/* TASKS_RESUME @Bit 0 : Resume TWI transaction */
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL)   /*!< Position of TASKS_RESUME field.                                      */
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIM_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field.*/
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Min (0x1UL) /*!< Min enumerator value of TASKS_RESUME field.                          */
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Max (0x1UL) /*!< Max enumerator value of TASKS_RESUME field.                          */
  #define TWIM_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL) /*!< Trigger task                                                     */


/* TWIM_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TWIM_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define TWIM_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_STOP_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                          */
  #define TWIM_SUBSCRIBE_STOP_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_STOP_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_STOP_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define TWIM_SUBSCRIBE_STOP_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* TWIM_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define TWIM_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SUSPEND register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIM_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field.                    */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define TWIM_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* TWIM_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define TWIM_SUBSCRIBE_RESUME_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RESUME register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define TWIM_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_SUBSCRIBE_RESUME_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define TWIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIM_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field.                      */
  #define TWIM_SUBSCRIBE_RESUME_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_RESUME_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define TWIM_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define TWIM_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* TWIM_EVENTS_STOPPED: TWI stopped */
  #define TWIM_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                           */

/* EVENTS_STOPPED @Bit 0 : TWI stopped */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                  */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                    */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                    */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                            */


/* TWIM_EVENTS_ERROR: TWI error */
  #define TWIM_EVENTS_ERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ERROR register.                               */

/* EVENTS_ERROR @Bit 0 : TWI error */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)   /*!< Position of EVENTS_ERROR field.                                      */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field.*/
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_ERROR field.                          */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_ERROR field.                          */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIM_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL) /*!< Event generated                                                */


/* TWIM_EVENTS_SUSPENDED: SUSPEND task has been issued, TWI traffic is now suspended. */
  #define TWIM_EVENTS_SUSPENDED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_SUSPENDED register.                       */

/* EVENTS_SUSPENDED @Bit 0 : SUSPEND task has been issued, TWI traffic is now suspended. */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos (0UL) /*!< Position of EVENTS_SUSPENDED field.                            */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk (0x1UL << TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos) /*!< Bit mask of
                                                                            EVENTS_SUSPENDED field.*/
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Min (0x0UL) /*!< Min enumerator value of EVENTS_SUSPENDED field.              */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Max (0x1UL) /*!< Max enumerator value of EVENTS_SUSPENDED field.              */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated (0x0UL) /*!< Event not generated                                 */
  #define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated (0x1UL) /*!< Event generated                                        */


/* TWIM_EVENTS_LASTRX: Byte boundary, starting to receive the last byte */
  #define TWIM_EVENTS_LASTRX_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_LASTRX register.                             */

/* EVENTS_LASTRX @Bit 0 : Byte boundary, starting to receive the last byte */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos (0UL) /*!< Position of EVENTS_LASTRX field.                                     */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Msk (0x1UL << TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos) /*!< Bit mask of EVENTS_LASTRX
                                                                            field.*/
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Min (0x0UL) /*!< Min enumerator value of EVENTS_LASTRX field.                       */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Max (0x1UL) /*!< Max enumerator value of EVENTS_LASTRX field.                       */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_NotGenerated (0x0UL) /*!< Event not generated                                       */
  #define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Generated (0x1UL) /*!< Event generated                                              */


/* TWIM_EVENTS_LASTTX: Byte boundary, starting to transmit the last byte */
  #define TWIM_EVENTS_LASTTX_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_LASTTX register.                             */

/* EVENTS_LASTTX @Bit 0 : Byte boundary, starting to transmit the last byte */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos (0UL) /*!< Position of EVENTS_LASTTX field.                                     */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Msk (0x1UL << TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos) /*!< Bit mask of EVENTS_LASTTX
                                                                            field.*/
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Min (0x0UL) /*!< Min enumerator value of EVENTS_LASTTX field.                       */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Max (0x1UL) /*!< Max enumerator value of EVENTS_LASTTX field.                       */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_NotGenerated (0x0UL) /*!< Event not generated                                       */
  #define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Generated (0x1UL) /*!< Event generated                                              */


/* TWIM_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TWIM_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TWIM_PUBLISH_STOPPED_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define TWIM_PUBLISH_STOPPED_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_STOPPED_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                        */
  #define TWIM_PUBLISH_STOPPED_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_STOPPED_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_STOPPED_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define TWIM_PUBLISH_STOPPED_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* TWIM_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define TWIM_PUBLISH_ERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ERROR register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define TWIM_PUBLISH_ERROR_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define TWIM_PUBLISH_ERROR_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_ERROR_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_ERROR_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_ERROR_EN_Msk (0x1UL << TWIM_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field.                            */
  #define TWIM_PUBLISH_ERROR_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_ERROR_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_ERROR_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define TWIM_PUBLISH_ERROR_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* TWIM_PUBLISH_SUSPENDED: Publish configuration for event SUSPENDED */
  #define TWIM_PUBLISH_SUSPENDED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_SUSPENDED register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that event SUSPENDED will publish to */
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_SUSPENDED_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_SUSPENDED_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_SUSPENDED_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_SUSPENDED_EN_Msk (0x1UL << TWIM_PUBLISH_SUSPENDED_EN_Pos) /*!< Bit mask of EN field.                    */
  #define TWIM_PUBLISH_SUSPENDED_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_SUSPENDED_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_SUSPENDED_EN_Disabled (0x0UL) /*!< Disable publishing                                                   */
  #define TWIM_PUBLISH_SUSPENDED_EN_Enabled (0x1UL)  /*!< Enable publishing                                                    */


/* TWIM_PUBLISH_LASTRX: Publish configuration for event LASTRX */
  #define TWIM_PUBLISH_LASTRX_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_LASTRX register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event LASTRX will publish to */
  #define TWIM_PUBLISH_LASTRX_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_LASTRX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTRX_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define TWIM_PUBLISH_LASTRX_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_LASTRX_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_LASTRX_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_LASTRX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTRX_EN_Pos) /*!< Bit mask of EN field.                          */
  #define TWIM_PUBLISH_LASTRX_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_LASTRX_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_LASTRX_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define TWIM_PUBLISH_LASTRX_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* TWIM_PUBLISH_LASTTX: Publish configuration for event LASTTX */
  #define TWIM_PUBLISH_LASTTX_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_LASTTX register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event LASTTX will publish to */
  #define TWIM_PUBLISH_LASTTX_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define TWIM_PUBLISH_LASTTX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define TWIM_PUBLISH_LASTTX_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define TWIM_PUBLISH_LASTTX_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIM_PUBLISH_LASTTX_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define TWIM_PUBLISH_LASTTX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTTX_EN_Pos) /*!< Bit mask of EN field.                          */
  #define TWIM_PUBLISH_LASTTX_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_LASTTX_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define TWIM_PUBLISH_LASTTX_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define TWIM_PUBLISH_LASTTX_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* TWIM_SHORTS: Shortcuts between local events and tasks */
  #define TWIM_SHORTS_ResetValue (0x00000000UL)      /*!< Reset value of SHORTS register.                                      */

/* LASTTX_DMA_RX_START @Bit 7 : Shortcut between event LASTTX and task DMA.RX.START */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Pos (7UL)  /*!< Position of LASTTX_DMA_RX_START field.                               */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Msk (0x1UL << TWIM_SHORTS_LASTTX_DMA_RX_START_Pos) /*!< Bit mask of
                                                                            LASTTX_DMA_RX_START field.*/
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Min (0x0UL) /*!< Min enumerator value of LASTTX_DMA_RX_START field.                  */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Max (0x1UL) /*!< Max enumerator value of LASTTX_DMA_RX_START field.                  */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Disabled (0x0UL) /*!< Disable shortcut                                               */
  #define TWIM_SHORTS_LASTTX_DMA_RX_START_Enabled (0x1UL) /*!< Enable shortcut                                                 */

/* LASTTX_SUSPEND @Bit 8 : Shortcut between event LASTTX and task SUSPEND */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Pos (8UL)       /*!< Position of LASTTX_SUSPEND field.                                    */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Msk (0x1UL << TWIM_SHORTS_LASTTX_SUSPEND_Pos) /*!< Bit mask of LASTTX_SUSPEND field.      */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Min (0x0UL)     /*!< Min enumerator value of LASTTX_SUSPEND field.                        */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Max (0x1UL)     /*!< Max enumerator value of LASTTX_SUSPEND field.                        */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Disabled (0x0UL) /*!< Disable shortcut                                                    */
  #define TWIM_SHORTS_LASTTX_SUSPEND_Enabled (0x1UL) /*!< Enable shortcut                                                      */

/* LASTTX_STOP @Bit 9 : Shortcut between event LASTTX and task STOP */
  #define TWIM_SHORTS_LASTTX_STOP_Pos (9UL)          /*!< Position of LASTTX_STOP field.                                       */
  #define TWIM_SHORTS_LASTTX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTTX_STOP_Pos) /*!< Bit mask of LASTTX_STOP field.               */
  #define TWIM_SHORTS_LASTTX_STOP_Min (0x0UL)        /*!< Min enumerator value of LASTTX_STOP field.                           */
  #define TWIM_SHORTS_LASTTX_STOP_Max (0x1UL)        /*!< Max enumerator value of LASTTX_STOP field.                           */
  #define TWIM_SHORTS_LASTTX_STOP_Disabled (0x0UL)   /*!< Disable shortcut                                                     */
  #define TWIM_SHORTS_LASTTX_STOP_Enabled (0x1UL)    /*!< Enable shortcut                                                      */

/* LASTRX_DMA_TX_START @Bit 10 : Shortcut between event LASTRX and task DMA.TX.START */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Pos (10UL) /*!< Position of LASTRX_DMA_TX_START field.                               */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Msk (0x1UL << TWIM_SHORTS_LASTRX_DMA_TX_START_Pos) /*!< Bit mask of
                                                                            LASTRX_DMA_TX_START field.*/
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Min (0x0UL) /*!< Min enumerator value of LASTRX_DMA_TX_START field.                  */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Max (0x1UL) /*!< Max enumerator value of LASTRX_DMA_TX_START field.                  */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Disabled (0x0UL) /*!< Disable shortcut                                               */
  #define TWIM_SHORTS_LASTRX_DMA_TX_START_Enabled (0x1UL) /*!< Enable shortcut                                                 */

/* LASTRX_STOP @Bit 12 : Shortcut between event LASTRX and task STOP */
  #define TWIM_SHORTS_LASTRX_STOP_Pos (12UL)         /*!< Position of LASTRX_STOP field.                                       */
  #define TWIM_SHORTS_LASTRX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTRX_STOP_Pos) /*!< Bit mask of LASTRX_STOP field.               */
  #define TWIM_SHORTS_LASTRX_STOP_Min (0x0UL)        /*!< Min enumerator value of LASTRX_STOP field.                           */
  #define TWIM_SHORTS_LASTRX_STOP_Max (0x1UL)        /*!< Max enumerator value of LASTRX_STOP field.                           */
  #define TWIM_SHORTS_LASTRX_STOP_Disabled (0x0UL)   /*!< Disable shortcut                                                     */
  #define TWIM_SHORTS_LASTRX_STOP_Enabled (0x1UL)    /*!< Enable shortcut                                                      */

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.   */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.   */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.   */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.   */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field. */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field. */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field. */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field. */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                  */


/* TWIM_INTEN: Enable or disable interrupt */
  #define TWIM_INTEN_ResetValue (0x00000000UL)       /*!< Reset value of INTEN register.                                       */

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define TWIM_INTEN_STOPPED_Pos (1UL)               /*!< Position of STOPPED field.                                           */
  #define TWIM_INTEN_STOPPED_Msk (0x1UL << TWIM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field.                             */
  #define TWIM_INTEN_STOPPED_Min (0x0UL)             /*!< Min enumerator value of STOPPED field.                               */
  #define TWIM_INTEN_STOPPED_Max (0x1UL)             /*!< Max enumerator value of STOPPED field.                               */
  #define TWIM_INTEN_STOPPED_Disabled (0x0UL)        /*!< Disable                                                              */
  #define TWIM_INTEN_STOPPED_Enabled (0x1UL)         /*!< Enable                                                               */

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define TWIM_INTEN_ERROR_Pos (5UL)                 /*!< Position of ERROR field.                                             */
  #define TWIM_INTEN_ERROR_Msk (0x1UL << TWIM_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field.                                   */
  #define TWIM_INTEN_ERROR_Min (0x0UL)               /*!< Min enumerator value of ERROR field.                                 */
  #define TWIM_INTEN_ERROR_Max (0x1UL)               /*!< Max enumerator value of ERROR field.                                 */
  #define TWIM_INTEN_ERROR_Disabled (0x0UL)          /*!< Disable                                                              */
  #define TWIM_INTEN_ERROR_Enabled (0x1UL)           /*!< Enable                                                               */

/* SUSPENDED @Bit 10 : Enable or disable interrupt for event SUSPENDED */
  #define TWIM_INTEN_SUSPENDED_Pos (10UL)            /*!< Position of SUSPENDED field.                                         */
  #define TWIM_INTEN_SUSPENDED_Msk (0x1UL << TWIM_INTEN_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field.                       */
  #define TWIM_INTEN_SUSPENDED_Min (0x0UL)           /*!< Min enumerator value of SUSPENDED field.                             */
  #define TWIM_INTEN_SUSPENDED_Max (0x1UL)           /*!< Max enumerator value of SUSPENDED field.                             */
  #define TWIM_INTEN_SUSPENDED_Disabled (0x0UL)      /*!< Disable                                                              */
  #define TWIM_INTEN_SUSPENDED_Enabled (0x1UL)       /*!< Enable                                                               */

/* LASTRX @Bit 13 : Enable or disable interrupt for event LASTRX */
  #define TWIM_INTEN_LASTRX_Pos (13UL)               /*!< Position of LASTRX field.                                            */
  #define TWIM_INTEN_LASTRX_Msk (0x1UL << TWIM_INTEN_LASTRX_Pos) /*!< Bit mask of LASTRX field.                                */
  #define TWIM_INTEN_LASTRX_Min (0x0UL)              /*!< Min enumerator value of LASTRX field.                                */
  #define TWIM_INTEN_LASTRX_Max (0x1UL)              /*!< Max enumerator value of LASTRX field.                                */
  #define TWIM_INTEN_LASTRX_Disabled (0x0UL)         /*!< Disable                                                              */
  #define TWIM_INTEN_LASTRX_Enabled (0x1UL)          /*!< Enable                                                               */

/* LASTTX @Bit 14 : Enable or disable interrupt for event LASTTX */
  #define TWIM_INTEN_LASTTX_Pos (14UL)               /*!< Position of LASTTX field.                                            */
  #define TWIM_INTEN_LASTTX_Msk (0x1UL << TWIM_INTEN_LASTTX_Pos) /*!< Bit mask of LASTTX field.                                */
  #define TWIM_INTEN_LASTTX_Min (0x0UL)              /*!< Min enumerator value of LASTTX field.                                */
  #define TWIM_INTEN_LASTTX_Max (0x1UL)              /*!< Max enumerator value of LASTTX field.                                */
  #define TWIM_INTEN_LASTTX_Disabled (0x0UL)         /*!< Disable                                                              */
  #define TWIM_INTEN_LASTTX_Enabled (0x1UL)          /*!< Enable                                                               */

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define TWIM_INTEN_DMARXEND_Pos (19UL)             /*!< Position of DMARXEND field.                                          */
  #define TWIM_INTEN_DMARXEND_Msk (0x1UL << TWIM_INTEN_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                          */
  #define TWIM_INTEN_DMARXEND_Min (0x0UL)            /*!< Min enumerator value of DMARXEND field.                              */
  #define TWIM_INTEN_DMARXEND_Max (0x1UL)            /*!< Max enumerator value of DMARXEND field.                              */
  #define TWIM_INTEN_DMARXEND_Disabled (0x0UL)       /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXEND_Enabled (0x1UL)        /*!< Enable                                                               */

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define TWIM_INTEN_DMARXREADY_Pos (20UL)           /*!< Position of DMARXREADY field.                                        */
  #define TWIM_INTEN_DMARXREADY_Msk (0x1UL << TWIM_INTEN_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.                    */
  #define TWIM_INTEN_DMARXREADY_Min (0x0UL)          /*!< Min enumerator value of DMARXREADY field.                            */
  #define TWIM_INTEN_DMARXREADY_Max (0x1UL)          /*!< Max enumerator value of DMARXREADY field.                            */
  #define TWIM_INTEN_DMARXREADY_Disabled (0x0UL)     /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXREADY_Enabled (0x1UL)      /*!< Enable                                                               */

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define TWIM_INTEN_DMARXBUSERROR_Pos (21UL)        /*!< Position of DMARXBUSERROR field.                                     */
  #define TWIM_INTEN_DMARXBUSERROR_Msk (0x1UL << TWIM_INTEN_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.           */
  #define TWIM_INTEN_DMARXBUSERROR_Min (0x0UL)       /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define TWIM_INTEN_DMARXBUSERROR_Max (0x1UL)       /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define TWIM_INTEN_DMARXBUSERROR_Disabled (0x0UL)  /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXBUSERROR_Enabled (0x1UL)   /*!< Enable                                                               */

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTEN_DMARXMATCH0_Pos (22UL)          /*!< Position of DMARXMATCH0 field.                                       */
  #define TWIM_INTEN_DMARXMATCH0_Msk (0x1UL << TWIM_INTEN_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.                 */
  #define TWIM_INTEN_DMARXMATCH0_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define TWIM_INTEN_DMARXMATCH0_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define TWIM_INTEN_DMARXMATCH0_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXMATCH0_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTEN_DMARXMATCH1_Pos (23UL)          /*!< Position of DMARXMATCH1 field.                                       */
  #define TWIM_INTEN_DMARXMATCH1_Msk (0x1UL << TWIM_INTEN_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.                 */
  #define TWIM_INTEN_DMARXMATCH1_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define TWIM_INTEN_DMARXMATCH1_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define TWIM_INTEN_DMARXMATCH1_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXMATCH1_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTEN_DMARXMATCH2_Pos (24UL)          /*!< Position of DMARXMATCH2 field.                                       */
  #define TWIM_INTEN_DMARXMATCH2_Msk (0x1UL << TWIM_INTEN_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.                 */
  #define TWIM_INTEN_DMARXMATCH2_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define TWIM_INTEN_DMARXMATCH2_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define TWIM_INTEN_DMARXMATCH2_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXMATCH2_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTEN_DMARXMATCH3_Pos (25UL)          /*!< Position of DMARXMATCH3 field.                                       */
  #define TWIM_INTEN_DMARXMATCH3_Msk (0x1UL << TWIM_INTEN_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.                 */
  #define TWIM_INTEN_DMARXMATCH3_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define TWIM_INTEN_DMARXMATCH3_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define TWIM_INTEN_DMARXMATCH3_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIM_INTEN_DMARXMATCH3_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define TWIM_INTEN_DMATXEND_Pos (26UL)             /*!< Position of DMATXEND field.                                          */
  #define TWIM_INTEN_DMATXEND_Msk (0x1UL << TWIM_INTEN_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                          */
  #define TWIM_INTEN_DMATXEND_Min (0x0UL)            /*!< Min enumerator value of DMATXEND field.                              */
  #define TWIM_INTEN_DMATXEND_Max (0x1UL)            /*!< Max enumerator value of DMATXEND field.                              */
  #define TWIM_INTEN_DMATXEND_Disabled (0x0UL)       /*!< Disable                                                              */
  #define TWIM_INTEN_DMATXEND_Enabled (0x1UL)        /*!< Enable                                                               */

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define TWIM_INTEN_DMATXREADY_Pos (27UL)           /*!< Position of DMATXREADY field.                                        */
  #define TWIM_INTEN_DMATXREADY_Msk (0x1UL << TWIM_INTEN_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.                    */
  #define TWIM_INTEN_DMATXREADY_Min (0x0UL)          /*!< Min enumerator value of DMATXREADY field.                            */
  #define TWIM_INTEN_DMATXREADY_Max (0x1UL)          /*!< Max enumerator value of DMATXREADY field.                            */
  #define TWIM_INTEN_DMATXREADY_Disabled (0x0UL)     /*!< Disable                                                              */
  #define TWIM_INTEN_DMATXREADY_Enabled (0x1UL)      /*!< Enable                                                               */

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define TWIM_INTEN_DMATXBUSERROR_Pos (28UL)        /*!< Position of DMATXBUSERROR field.                                     */
  #define TWIM_INTEN_DMATXBUSERROR_Msk (0x1UL << TWIM_INTEN_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.           */
  #define TWIM_INTEN_DMATXBUSERROR_Min (0x0UL)       /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define TWIM_INTEN_DMATXBUSERROR_Max (0x1UL)       /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define TWIM_INTEN_DMATXBUSERROR_Disabled (0x0UL)  /*!< Disable                                                              */
  #define TWIM_INTEN_DMATXBUSERROR_Enabled (0x1UL)   /*!< Enable                                                               */


/* TWIM_INTENSET: Enable interrupt */
  #define TWIM_INTENSET_ResetValue (0x00000000UL)    /*!< Reset value of INTENSET register.                                    */

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define TWIM_INTENSET_STOPPED_Pos (1UL)            /*!< Position of STOPPED field.                                           */
  #define TWIM_INTENSET_STOPPED_Msk (0x1UL << TWIM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define TWIM_INTENSET_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define TWIM_INTENSET_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define TWIM_INTENSET_STOPPED_Set (0x1UL)          /*!< Enable                                                               */
  #define TWIM_INTENSET_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define TWIM_INTENSET_ERROR_Pos (5UL)              /*!< Position of ERROR field.                                             */
  #define TWIM_INTENSET_ERROR_Msk (0x1UL << TWIM_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field.                             */
  #define TWIM_INTENSET_ERROR_Min (0x0UL)            /*!< Min enumerator value of ERROR field.                                 */
  #define TWIM_INTENSET_ERROR_Max (0x1UL)            /*!< Max enumerator value of ERROR field.                                 */
  #define TWIM_INTENSET_ERROR_Set (0x1UL)            /*!< Enable                                                               */
  #define TWIM_INTENSET_ERROR_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_ERROR_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* SUSPENDED @Bit 10 : Write '1' to enable interrupt for event SUSPENDED */
  #define TWIM_INTENSET_SUSPENDED_Pos (10UL)         /*!< Position of SUSPENDED field.                                         */
  #define TWIM_INTENSET_SUSPENDED_Msk (0x1UL << TWIM_INTENSET_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field.                 */
  #define TWIM_INTENSET_SUSPENDED_Min (0x0UL)        /*!< Min enumerator value of SUSPENDED field.                             */
  #define TWIM_INTENSET_SUSPENDED_Max (0x1UL)        /*!< Max enumerator value of SUSPENDED field.                             */
  #define TWIM_INTENSET_SUSPENDED_Set (0x1UL)        /*!< Enable                                                               */
  #define TWIM_INTENSET_SUSPENDED_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_SUSPENDED_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* LASTRX @Bit 13 : Write '1' to enable interrupt for event LASTRX */
  #define TWIM_INTENSET_LASTRX_Pos (13UL)            /*!< Position of LASTRX field.                                            */
  #define TWIM_INTENSET_LASTRX_Msk (0x1UL << TWIM_INTENSET_LASTRX_Pos) /*!< Bit mask of LASTRX field.                          */
  #define TWIM_INTENSET_LASTRX_Min (0x0UL)           /*!< Min enumerator value of LASTRX field.                                */
  #define TWIM_INTENSET_LASTRX_Max (0x1UL)           /*!< Max enumerator value of LASTRX field.                                */
  #define TWIM_INTENSET_LASTRX_Set (0x1UL)           /*!< Enable                                                               */
  #define TWIM_INTENSET_LASTRX_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_LASTRX_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* LASTTX @Bit 14 : Write '1' to enable interrupt for event LASTTX */
  #define TWIM_INTENSET_LASTTX_Pos (14UL)            /*!< Position of LASTTX field.                                            */
  #define TWIM_INTENSET_LASTTX_Msk (0x1UL << TWIM_INTENSET_LASTTX_Pos) /*!< Bit mask of LASTTX field.                          */
  #define TWIM_INTENSET_LASTTX_Min (0x0UL)           /*!< Min enumerator value of LASTTX field.                                */
  #define TWIM_INTENSET_LASTTX_Max (0x1UL)           /*!< Max enumerator value of LASTTX field.                                */
  #define TWIM_INTENSET_LASTTX_Set (0x1UL)           /*!< Enable                                                               */
  #define TWIM_INTENSET_LASTTX_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_LASTTX_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define TWIM_INTENSET_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define TWIM_INTENSET_DMARXEND_Msk (0x1UL << TWIM_INTENSET_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define TWIM_INTENSET_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define TWIM_INTENSET_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define TWIM_INTENSET_DMARXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define TWIM_INTENSET_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define TWIM_INTENSET_DMARXREADY_Msk (0x1UL << TWIM_INTENSET_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define TWIM_INTENSET_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define TWIM_INTENSET_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define TWIM_INTENSET_DMARXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define TWIM_INTENSET_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define TWIM_INTENSET_DMARXBUSERROR_Msk (0x1UL << TWIM_INTENSET_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define TWIM_INTENSET_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define TWIM_INTENSET_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define TWIM_INTENSET_DMARXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIM_INTENSET_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTENSET_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define TWIM_INTENSET_DMARXMATCH0_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define TWIM_INTENSET_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define TWIM_INTENSET_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define TWIM_INTENSET_DMARXMATCH0_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTENSET_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define TWIM_INTENSET_DMARXMATCH1_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define TWIM_INTENSET_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define TWIM_INTENSET_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define TWIM_INTENSET_DMARXMATCH1_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTENSET_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define TWIM_INTENSET_DMARXMATCH2_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define TWIM_INTENSET_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define TWIM_INTENSET_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define TWIM_INTENSET_DMARXMATCH2_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTENSET_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define TWIM_INTENSET_DMARXMATCH3_Msk (0x1UL << TWIM_INTENSET_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define TWIM_INTENSET_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define TWIM_INTENSET_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define TWIM_INTENSET_DMARXMATCH3_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIM_INTENSET_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define TWIM_INTENSET_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define TWIM_INTENSET_DMATXEND_Msk (0x1UL << TWIM_INTENSET_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define TWIM_INTENSET_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define TWIM_INTENSET_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define TWIM_INTENSET_DMATXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define TWIM_INTENSET_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define TWIM_INTENSET_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define TWIM_INTENSET_DMATXREADY_Msk (0x1UL << TWIM_INTENSET_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define TWIM_INTENSET_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define TWIM_INTENSET_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define TWIM_INTENSET_DMATXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define TWIM_INTENSET_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIM_INTENSET_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define TWIM_INTENSET_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define TWIM_INTENSET_DMATXBUSERROR_Msk (0x1UL << TWIM_INTENSET_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define TWIM_INTENSET_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define TWIM_INTENSET_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define TWIM_INTENSET_DMATXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define TWIM_INTENSET_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIM_INTENSET_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* TWIM_INTENCLR: Disable interrupt */
  #define TWIM_INTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of INTENCLR register.                                    */

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define TWIM_INTENCLR_STOPPED_Pos (1UL)            /*!< Position of STOPPED field.                                           */
  #define TWIM_INTENCLR_STOPPED_Msk (0x1UL << TWIM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define TWIM_INTENCLR_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define TWIM_INTENCLR_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define TWIM_INTENCLR_STOPPED_Clear (0x1UL)        /*!< Disable                                                              */
  #define TWIM_INTENCLR_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define TWIM_INTENCLR_ERROR_Pos (5UL)              /*!< Position of ERROR field.                                             */
  #define TWIM_INTENCLR_ERROR_Msk (0x1UL << TWIM_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field.                             */
  #define TWIM_INTENCLR_ERROR_Min (0x0UL)            /*!< Min enumerator value of ERROR field.                                 */
  #define TWIM_INTENCLR_ERROR_Max (0x1UL)            /*!< Max enumerator value of ERROR field.                                 */
  #define TWIM_INTENCLR_ERROR_Clear (0x1UL)          /*!< Disable                                                              */
  #define TWIM_INTENCLR_ERROR_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_ERROR_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* SUSPENDED @Bit 10 : Write '1' to disable interrupt for event SUSPENDED */
  #define TWIM_INTENCLR_SUSPENDED_Pos (10UL)         /*!< Position of SUSPENDED field.                                         */
  #define TWIM_INTENCLR_SUSPENDED_Msk (0x1UL << TWIM_INTENCLR_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field.                 */
  #define TWIM_INTENCLR_SUSPENDED_Min (0x0UL)        /*!< Min enumerator value of SUSPENDED field.                             */
  #define TWIM_INTENCLR_SUSPENDED_Max (0x1UL)        /*!< Max enumerator value of SUSPENDED field.                             */
  #define TWIM_INTENCLR_SUSPENDED_Clear (0x1UL)      /*!< Disable                                                              */
  #define TWIM_INTENCLR_SUSPENDED_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_SUSPENDED_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* LASTRX @Bit 13 : Write '1' to disable interrupt for event LASTRX */
  #define TWIM_INTENCLR_LASTRX_Pos (13UL)            /*!< Position of LASTRX field.                                            */
  #define TWIM_INTENCLR_LASTRX_Msk (0x1UL << TWIM_INTENCLR_LASTRX_Pos) /*!< Bit mask of LASTRX field.                          */
  #define TWIM_INTENCLR_LASTRX_Min (0x0UL)           /*!< Min enumerator value of LASTRX field.                                */
  #define TWIM_INTENCLR_LASTRX_Max (0x1UL)           /*!< Max enumerator value of LASTRX field.                                */
  #define TWIM_INTENCLR_LASTRX_Clear (0x1UL)         /*!< Disable                                                              */
  #define TWIM_INTENCLR_LASTRX_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_LASTRX_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* LASTTX @Bit 14 : Write '1' to disable interrupt for event LASTTX */
  #define TWIM_INTENCLR_LASTTX_Pos (14UL)            /*!< Position of LASTTX field.                                            */
  #define TWIM_INTENCLR_LASTTX_Msk (0x1UL << TWIM_INTENCLR_LASTTX_Pos) /*!< Bit mask of LASTTX field.                          */
  #define TWIM_INTENCLR_LASTTX_Min (0x0UL)           /*!< Min enumerator value of LASTTX field.                                */
  #define TWIM_INTENCLR_LASTTX_Max (0x1UL)           /*!< Max enumerator value of LASTTX field.                                */
  #define TWIM_INTENCLR_LASTTX_Clear (0x1UL)         /*!< Disable                                                              */
  #define TWIM_INTENCLR_LASTTX_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_LASTTX_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define TWIM_INTENCLR_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define TWIM_INTENCLR_DMARXEND_Msk (0x1UL << TWIM_INTENCLR_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define TWIM_INTENCLR_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define TWIM_INTENCLR_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define TWIM_INTENCLR_DMARXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define TWIM_INTENCLR_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define TWIM_INTENCLR_DMARXREADY_Msk (0x1UL << TWIM_INTENCLR_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define TWIM_INTENCLR_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define TWIM_INTENCLR_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define TWIM_INTENCLR_DMARXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define TWIM_INTENCLR_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define TWIM_INTENCLR_DMARXBUSERROR_Msk (0x1UL << TWIM_INTENCLR_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define TWIM_INTENCLR_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define TWIM_INTENCLR_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define TWIM_INTENCLR_DMARXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIM_INTENCLR_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define TWIM_INTENCLR_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define TWIM_INTENCLR_DMARXMATCH0_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define TWIM_INTENCLR_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH0_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define TWIM_INTENCLR_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define TWIM_INTENCLR_DMARXMATCH1_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define TWIM_INTENCLR_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH1_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define TWIM_INTENCLR_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define TWIM_INTENCLR_DMARXMATCH2_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define TWIM_INTENCLR_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH2_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define TWIM_INTENCLR_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define TWIM_INTENCLR_DMARXMATCH3_Msk (0x1UL << TWIM_INTENCLR_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define TWIM_INTENCLR_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define TWIM_INTENCLR_DMARXMATCH3_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define TWIM_INTENCLR_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define TWIM_INTENCLR_DMATXEND_Msk (0x1UL << TWIM_INTENCLR_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define TWIM_INTENCLR_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define TWIM_INTENCLR_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define TWIM_INTENCLR_DMATXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define TWIM_INTENCLR_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define TWIM_INTENCLR_DMATXREADY_Msk (0x1UL << TWIM_INTENCLR_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define TWIM_INTENCLR_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define TWIM_INTENCLR_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define TWIM_INTENCLR_DMATXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIM_INTENCLR_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define TWIM_INTENCLR_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define TWIM_INTENCLR_DMATXBUSERROR_Msk (0x1UL << TWIM_INTENCLR_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define TWIM_INTENCLR_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define TWIM_INTENCLR_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define TWIM_INTENCLR_DMATXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define TWIM_INTENCLR_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIM_INTENCLR_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* TWIM_ERRORSRC: Error source */
  #define TWIM_ERRORSRC_ResetValue (0x00000000UL)    /*!< Reset value of ERRORSRC register.                                    */

/* OVERRUN @Bit 0 : Overrun error */
  #define TWIM_ERRORSRC_OVERRUN_Pos (0UL)            /*!< Position of OVERRUN field.                                           */
  #define TWIM_ERRORSRC_OVERRUN_Msk (0x1UL << TWIM_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field.                       */
  #define TWIM_ERRORSRC_OVERRUN_Min (0x0UL)          /*!< Min enumerator value of OVERRUN field.                               */
  #define TWIM_ERRORSRC_OVERRUN_Max (0x1UL)          /*!< Max enumerator value of OVERRUN field.                               */
  #define TWIM_ERRORSRC_OVERRUN_NotReceived (0x0UL)  /*!< Error did not occur                                                  */
  #define TWIM_ERRORSRC_OVERRUN_Received (0x1UL)     /*!< Error occurred                                                       */

/* ANACK @Bit 1 : NACK received after sending the address (write '1' to clear) */
  #define TWIM_ERRORSRC_ANACK_Pos (1UL)              /*!< Position of ANACK field.                                             */
  #define TWIM_ERRORSRC_ANACK_Msk (0x1UL << TWIM_ERRORSRC_ANACK_Pos) /*!< Bit mask of ANACK field.                             */
  #define TWIM_ERRORSRC_ANACK_Min (0x0UL)            /*!< Min enumerator value of ANACK field.                                 */
  #define TWIM_ERRORSRC_ANACK_Max (0x1UL)            /*!< Max enumerator value of ANACK field.                                 */
  #define TWIM_ERRORSRC_ANACK_NotReceived (0x0UL)    /*!< Error did not occur                                                  */
  #define TWIM_ERRORSRC_ANACK_Received (0x1UL)       /*!< Error occurred                                                       */

/* DNACK @Bit 2 : NACK received after sending a data byte (write '1' to clear) */
  #define TWIM_ERRORSRC_DNACK_Pos (2UL)              /*!< Position of DNACK field.                                             */
  #define TWIM_ERRORSRC_DNACK_Msk (0x1UL << TWIM_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field.                             */
  #define TWIM_ERRORSRC_DNACK_Min (0x0UL)            /*!< Min enumerator value of DNACK field.                                 */
  #define TWIM_ERRORSRC_DNACK_Max (0x1UL)            /*!< Max enumerator value of DNACK field.                                 */
  #define TWIM_ERRORSRC_DNACK_NotReceived (0x0UL)    /*!< Error did not occur                                                  */
  #define TWIM_ERRORSRC_DNACK_Received (0x1UL)       /*!< Error occurred                                                       */


/* TWIM_ENABLE: Enable TWIM */
  #define TWIM_ENABLE_ResetValue (0x00000000UL)      /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..3 : Enable or disable TWIM */
  #define TWIM_ENABLE_ENABLE_Pos (0UL)               /*!< Position of ENABLE field.                                            */
  #define TWIM_ENABLE_ENABLE_Msk (0xFUL << TWIM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                              */
  #define TWIM_ENABLE_ENABLE_Min (0x0UL)             /*!< Min enumerator value of ENABLE field.                                */
  #define TWIM_ENABLE_ENABLE_Max (0x6UL)             /*!< Max enumerator value of ENABLE field.                                */
  #define TWIM_ENABLE_ENABLE_Disabled (0x0UL)        /*!< Disable TWIM                                                         */
  #define TWIM_ENABLE_ENABLE_Enabled (0x6UL)         /*!< Enable TWIM                                                          */


/* TWIM_FREQUENCY: TWI frequency. Accuracy depends on the HFCLK source selected. */
  #define TWIM_FREQUENCY_ResetValue (0x04000000UL)   /*!< Reset value of FREQUENCY register.                                   */

/* FREQUENCY @Bits 0..31 : TWI master clock frequency */
  #define TWIM_FREQUENCY_FREQUENCY_Pos (0UL)         /*!< Position of FREQUENCY field.                                         */
  #define TWIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWIM_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field.        */
  #define TWIM_FREQUENCY_FREQUENCY_Min (0x1980000UL) /*!< Min enumerator value of FREQUENCY field.                             */
  #define TWIM_FREQUENCY_FREQUENCY_Max (0xFF00000UL) /*!< Max enumerator value of FREQUENCY field.                             */
  #define TWIM_FREQUENCY_FREQUENCY_K100 (0x01980000UL) /*!< 100 kbps                                                           */
  #define TWIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps                                                           */
  #define TWIM_FREQUENCY_FREQUENCY_K400 (0x06400000UL) /*!< 400 kbps                                                           */
  #define TWIM_FREQUENCY_FREQUENCY_K1000 (0x0FF00000UL) /*!< 1000 kbps                                                         */


/* TWIM_ADDRESS: Address used in the TWI transfer */
  #define TWIM_ADDRESS_ResetValue (0x00000000UL)     /*!< Reset value of ADDRESS register.                                     */

/* ADDRESS @Bits 0..6 : Address used in the TWI transfer */
  #define TWIM_ADDRESS_ADDRESS_Pos (0UL)             /*!< Position of ADDRESS field.                                           */
  #define TWIM_ADDRESS_ADDRESS_Msk (0x7FUL << TWIM_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                        */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           TWIS                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct TWIS_TASKS_DMA_RX ================================================= */
/**
  * @brief RX [TWIS_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_TWIS_TASKS_DMA_RX_Type;                        /*!< Size = 32 (0x020)                                                    */

/* TWIS_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                                  */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                                 */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                                 */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.                 */

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL) /*!< Position of ENABLEMATCH field.                              */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL) /*!< Min enumerator value of ENABLEMATCH field.                */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL) /*!< Max enumerator value of ENABLEMATCH field.                */
  #define TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                          */


/* TWIS_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                                */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                               */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                               */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.               */

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL) /*!< Position of DISABLEMATCH field.                           */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL) /*!< Min enumerator value of DISABLEMATCH field.             */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL) /*!< Max enumerator value of DISABLEMATCH field.             */
  #define TWIS_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                        */



/* ================================================== Struct TWIS_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [TWIS_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_TWIS_TASKS_DMA_RX_Type RX;               /*!< (@ 0x00000000) Peripheral tasks.                                     */
} NRF_TWIS_TASKS_DMA_Type;                           /*!< Size = 32 (0x020)                                                    */


/* ============================================== Struct TWIS_SUBSCRIBE_DMA_RX =============================================== */
/**
  * @brief RX [TWIS_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000000) Subscribe configuration for task ENABLEMATCH[n]       */
  __IOM uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000010) Subscribe configuration for task DISABLEMATCH[n]      */
} NRF_TWIS_SUBSCRIBE_DMA_RX_Type;                    /*!< Size = 32 (0x020)                                                    */

/* TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                              */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                             */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                             */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.             */

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                      */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                  */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                   */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                           */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                              */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                              */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                      */
  #define TWIS_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                        */


/* TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                            */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                           */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                           */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.           */

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                     */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                 */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                  */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                          */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                             */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                             */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                     */
  #define TWIS_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                       */



/* ================================================ Struct TWIS_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [TWIS_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_TWIS_SUBSCRIBE_DMA_RX_Type RX;           /*!< (@ 0x00000000) Subscribe configuration for tasks                     */
} NRF_TWIS_SUBSCRIBE_DMA_Type;                       /*!< Size = 32 (0x020)                                                    */


/* ================================================ Struct TWIS_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [TWIS_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Pattern match is detected on the DMA data bus.        */
} NRF_TWIS_EVENTS_DMA_RX_Type;                       /*!< Size = 28 (0x01C)                                                    */

/* TWIS_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_RX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define TWIS_EVENTS_DMA_RX_END_END_Msk (0x1UL << TWIS_EVENTS_DMA_RX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define TWIS_EVENTS_DMA_RX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define TWIS_EVENTS_DMA_RX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define TWIS_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define TWIS_EVENTS_DMA_RX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* TWIS_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_RX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define TWIS_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << TWIS_EVENTS_DMA_RX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define TWIS_EVENTS_DMA_RX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define TWIS_EVENTS_DMA_RX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define TWIS_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIS_EVENTS_DMA_RX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* TWIS_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define TWIS_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */


/* TWIS_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define TWIS_EVENTS_DMA_RX_MATCH_MaxCount (4UL)    /*!< Max size of MATCH[4] array.                                          */
  #define TWIS_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)    /*!< Max index of MATCH[4] array.                                         */
  #define TWIS_EVENTS_DMA_RX_MATCH_MinIndex (0UL)    /*!< Min index of MATCH[4] array.                                         */
  #define TWIS_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                            */

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)   /*!< Position of MATCH field.                                             */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << TWIS_EVENTS_DMA_RX_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field.       */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL) /*!< Min enumerator value of MATCH field.                                 */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL) /*!< Max enumerator value of MATCH field.                                 */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIS_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL) /*!< Event generated                                                */



/* ================================================ Struct TWIS_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [TWIS_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
} NRF_TWIS_EVENTS_DMA_TX_Type;                       /*!< Size = 12 (0x00C)                                                    */

/* TWIS_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                   */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define TWIS_EVENTS_DMA_TX_END_END_Pos (0UL)       /*!< Position of END field.                                               */
  #define TWIS_EVENTS_DMA_TX_END_END_Msk (0x1UL << TWIS_EVENTS_DMA_TX_END_END_Pos) /*!< Bit mask of END field.                 */
  #define TWIS_EVENTS_DMA_TX_END_END_Min (0x0UL)     /*!< Min enumerator value of END field.                                   */
  #define TWIS_EVENTS_DMA_TX_END_END_Max (0x1UL)     /*!< Max enumerator value of END field.                                   */
  #define TWIS_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                             */
  #define TWIS_EVENTS_DMA_TX_END_END_Generated (0x1UL) /*!< Event generated                                                    */


/* TWIS_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                              to be written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                               */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define TWIS_EVENTS_DMA_TX_READY_READY_Pos (0UL)   /*!< Position of READY field.                                             */
  #define TWIS_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << TWIS_EVENTS_DMA_TX_READY_READY_Pos) /*!< Bit mask of READY field.       */
  #define TWIS_EVENTS_DMA_TX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                 */
  #define TWIS_EVENTS_DMA_TX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                 */
  #define TWIS_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIS_EVENTS_DMA_TX_READY_READY_Generated (0x1UL) /*!< Event generated                                                */


/* TWIS_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                         */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                      */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of BUSERROR
                                                                            field.*/
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                        */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                        */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                   */
  #define TWIS_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                          */



/* ================================================= Struct TWIS_EVENTS_DMA ================================================== */
/**
  * @brief EVENTS_DMA [TWIS_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_TWIS_EVENTS_DMA_RX_Type RX;              /*!< (@ 0x00000000) Peripheral events.                                    */
  __IOM NRF_TWIS_EVENTS_DMA_TX_Type TX;              /*!< (@ 0x0000001C) Peripheral events.                                    */
} NRF_TWIS_EVENTS_DMA_Type;                          /*!< Size = 40 (0x028)                                                    */


/* =============================================== Struct TWIS_PUBLISH_DMA_RX ================================================ */
/**
  * @brief RX [TWIS_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Publish configuration for event MATCH[n]              */
} NRF_TWIS_PUBLISH_DMA_RX_Type;                      /*!< Size = 28 (0x01C)                                                    */

/* TWIS_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define TWIS_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define TWIS_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define TWIS_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* TWIS_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define TWIS_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define TWIS_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define TWIS_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* TWIS_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define TWIS_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */


/* TWIS_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define TWIS_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)   /*!< Max size of MATCH[4] array.                                          */
  #define TWIS_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)   /*!< Max index of MATCH[4] array.                                         */
  #define TWIS_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)   /*!< Min index of MATCH[4] array.                                         */
  #define TWIS_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define TWIS_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_RX_MATCH_EN_Pos) /*!< Bit mask of EN field.              */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define TWIS_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */



/* =============================================== Struct TWIS_PUBLISH_DMA_TX ================================================ */
/**
  * @brief TX [TWIS_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
} NRF_TWIS_PUBLISH_DMA_TX_Type;                      /*!< Size = 12 (0x00C)                                                    */

/* TWIS_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define TWIS_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define TWIS_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_END_EN_Pos) /*!< Bit mask of EN field.                  */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define TWIS_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* TWIS_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define TWIS_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL)  /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.    */
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                          */
  #define TWIS_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                           */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Pos (31UL)    /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_READY_EN_Pos) /*!< Bit mask of EN field.              */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)   /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)   /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                                */
  #define TWIS_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                  */


/* TWIS_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.        */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                             */
  #define TWIS_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                               */



/* ================================================= Struct TWIS_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [TWIS_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_TWIS_PUBLISH_DMA_RX_Type RX;             /*!< (@ 0x00000000) Publish configuration for events                      */
  __IOM NRF_TWIS_PUBLISH_DMA_TX_Type TX;             /*!< (@ 0x0000001C) Publish configuration for events                      */
} NRF_TWIS_PUBLISH_DMA_Type;                         /*!< Size = 40 (0x028)                                                    */


/* ==================================================== Struct TWIS_PSEL ===================================================== */
/**
  * @brief PSEL [TWIS_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;                               /*!< (@ 0x00000000) Pin select for SCL signal                             */
  __IOM uint32_t  SDA;                               /*!< (@ 0x00000004) Pin select for SDA signal                             */
} NRF_TWIS_PSEL_Type;                                /*!< Size = 8 (0x008)                                                     */

/* TWIS_PSEL_SCL: Pin select for SCL signal */
  #define TWIS_PSEL_SCL_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of SCL register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define TWIS_PSEL_SCL_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define TWIS_PSEL_SCL_PIN_Msk (0x1FUL << TWIS_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define TWIS_PSEL_SCL_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define TWIS_PSEL_SCL_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define TWIS_PSEL_SCL_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define TWIS_PSEL_SCL_PORT_Msk (0x7UL << TWIS_PSEL_SCL_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define TWIS_PSEL_SCL_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define TWIS_PSEL_SCL_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define TWIS_PSEL_SCL_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define TWIS_PSEL_SCL_CONNECT_Msk (0x1UL << TWIS_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define TWIS_PSEL_SCL_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define TWIS_PSEL_SCL_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define TWIS_PSEL_SCL_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define TWIS_PSEL_SCL_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */


/* TWIS_PSEL_SDA: Pin select for SDA signal */
  #define TWIS_PSEL_SDA_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of SDA register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define TWIS_PSEL_SDA_PIN_Pos (0UL)                /*!< Position of PIN field.                                               */
  #define TWIS_PSEL_SDA_PIN_Msk (0x1FUL << TWIS_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field.                                  */
  #define TWIS_PSEL_SDA_PIN_Min (0x00UL)             /*!< Min value of PIN field.                                              */
  #define TWIS_PSEL_SDA_PIN_Max (0x1FUL)             /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define TWIS_PSEL_SDA_PORT_Pos (5UL)               /*!< Position of PORT field.                                              */
  #define TWIS_PSEL_SDA_PORT_Msk (0x7UL << TWIS_PSEL_SDA_PORT_Pos) /*!< Bit mask of PORT field.                                */
  #define TWIS_PSEL_SDA_PORT_Min (0x0UL)             /*!< Min value of PORT field.                                             */
  #define TWIS_PSEL_SDA_PORT_Max (0x7UL)             /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define TWIS_PSEL_SDA_CONNECT_Pos (31UL)           /*!< Position of CONNECT field.                                           */
  #define TWIS_PSEL_SDA_CONNECT_Msk (0x1UL << TWIS_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field.                       */
  #define TWIS_PSEL_SDA_CONNECT_Min (0x0UL)          /*!< Min enumerator value of CONNECT field.                               */
  #define TWIS_PSEL_SDA_CONNECT_Max (0x1UL)          /*!< Max enumerator value of CONNECT field.                               */
  #define TWIS_PSEL_SDA_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                           */
  #define TWIS_PSEL_SDA_CONNECT_Connected (0x0UL)    /*!< Connect                                                              */



/* ================================================ Struct TWIS_DMA_RX_MATCH ================================================= */
/**
  * @brief MATCH [TWIS_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) Configure individual match events                     */
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_TWIS_DMA_RX_MATCH_Type;                        /*!< Size = 20 (0x014)                                                    */

/* TWIS_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define TWIS_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                              */

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL) /*!< Position of ENABLE0 field.                                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0 field. */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL) /*!< Min enumerator value of ENABLE0 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL) /*!< Max enumerator value of ENABLE0 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL) /*!< Position of ENABLE1 field.                                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1 field. */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL) /*!< Min enumerator value of ENABLE1 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL) /*!< Max enumerator value of ENABLE1 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL) /*!< Position of ENABLE2 field.                                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2 field. */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL) /*!< Min enumerator value of ENABLE2 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL) /*!< Max enumerator value of ENABLE2 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL) /*!< Position of ENABLE3 field.                                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3 field. */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL) /*!< Min enumerator value of ENABLE3 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL) /*!< Max enumerator value of ENABLE3 field.                             */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL) /*!< Match filter disabled                                         */
  #define TWIS_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL) /*!< Match filter enabled                                           */

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL) /*!< Position of ONESHOT0 field.                                        */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL) /*!< Min enumerator value of ONESHOT0 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL) /*!< Max enumerator value of ONESHOT0 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL) /*!< Position of ONESHOT1 field.                                        */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL) /*!< Min enumerator value of ONESHOT1 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL) /*!< Max enumerator value of ONESHOT1 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL) /*!< Position of ONESHOT2 field.                                        */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL) /*!< Min enumerator value of ONESHOT2 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL) /*!< Max enumerator value of ONESHOT2 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or sticky */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL) /*!< Position of ONESHOT3 field.                                        */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL) /*!< Min enumerator value of ONESHOT3 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL) /*!< Max enumerator value of ONESHOT3 field.                           */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task          */
  #define TWIS_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received   */


/* TWIS_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL) /*!< Max size of CANDIDATE[4] array.                                      */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL) /*!< Max index of CANDIDATE[4] array.                                     */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL) /*!< Min index of CANDIDATE[4] array.                                     */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL) /*!< Reset value of CANDIDATE[4] register.                     */

/* DATA @Bits 0..31 : Data to look for */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL) /*!< Position of DATA field.                                              */
  #define TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA
                                                                            field.*/



/* =================================================== Struct TWIS_DMA_RX ==================================================== */
/**
  * @brief RX [TWIS_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_TWIS_DMA_RX_MATCH_Type MATCH;            /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_TWIS_DMA_RX_Type;                              /*!< Size = 56 (0x038)                                                    */

/* TWIS_DMA_RX_PTR: RAM buffer start address */
  #define TWIS_DMA_RX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIS_DMA_RX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define TWIS_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* TWIS_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIS_DMA_RX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_DMA_RX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define TWIS_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* TWIS_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIS_DMA_RX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_DMA_RX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define TWIS_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* TWIS_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define TWIS_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* TWIS_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIS_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct TWIS_DMA_TX ==================================================== */
/**
  * @brief TX [TWIS_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_TWIS_DMA_TX_Type;                              /*!< Size = 36 (0x024)                                                    */

/* TWIS_DMA_TX_PTR: RAM buffer start address */
  #define TWIS_DMA_TX_PTR_ResetValue (0x20000000UL)  /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define TWIS_DMA_TX_PTR_PTR_Pos (0UL)              /*!< Position of PTR field.                                               */
  #define TWIS_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_DMA_TX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                        */


/* TWIS_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define TWIS_DMA_TX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                    */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)        /*!< Position of MAXCNT field.                                            */
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_DMA_TX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.             */
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)   /*!< Min value of MAXCNT field.                                           */
  #define TWIS_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)   /*!< Max size of MAXCNT field.                                            */


/* TWIS_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after each
                        MATCH event. */

  #define TWIS_DMA_TX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                    */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)        /*!< Position of AMOUNT field.                                            */
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_DMA_TX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.             */
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)   /*!< Min value of AMOUNT field.                                           */
  #define TWIS_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)   /*!< Max size of AMOUNT field.                                            */


/* TWIS_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.          */

/* ENABLE @Bit 0 : (unspecified) */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                      */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                        */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                        */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                 */
  #define TWIS_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                   */


/* TWIS_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                  */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                        */
  #define TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << TWIS_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ===================================================== Struct TWIS_DMA ===================================================== */
/**
  * @brief DMA [TWIS_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_TWIS_DMA_RX_Type RX;                     /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_TWIS_DMA_TX_Type TX;                     /*!< (@ 0x00000038) (unspecified)                                         */
} NRF_TWIS_DMA_Type;                                 /*!< Size = 92 (0x05C)                                                    */

/* ======================================================= Struct TWIS ======================================================= */
/**
  * @brief I2C compatible Two-Wire Slave Interface with EasyDMA
  */
  typedef struct {                                   /*!< TWIS Structure                                                       */
    __IM uint32_t RESERVED;
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop TWI transaction                                  */
    __IM uint32_t RESERVED1;
    __OM uint32_t TASKS_SUSPEND;                     /*!< (@ 0x0000000C) Suspend TWI transaction                               */
    __OM uint32_t TASKS_RESUME;                      /*!< (@ 0x00000010) Resume TWI transaction                                */
    __IM uint32_t RESERVED2[3];
    __OM uint32_t TASKS_PREPARERX;                   /*!< (@ 0x00000020) Prepare the TWI slave to respond to a write command   */
    __OM uint32_t TASKS_PREPARETX;                   /*!< (@ 0x00000024) Prepare the TWI slave to respond to a read command    */
    __IM uint32_t RESERVED3[2];
    __OM NRF_TWIS_TASKS_DMA_Type TASKS_DMA;          /*!< (@ 0x00000030) Peripheral tasks.                                     */
    __IM uint32_t RESERVED4[13];
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED5;
    __IOM uint32_t SUBSCRIBE_SUSPEND;                /*!< (@ 0x0000008C) Subscribe configuration for task SUSPEND              */
    __IOM uint32_t SUBSCRIBE_RESUME;                 /*!< (@ 0x00000090) Subscribe configuration for task RESUME               */
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t SUBSCRIBE_PREPARERX;              /*!< (@ 0x000000A0) Subscribe configuration for task PREPARERX            */
    __IOM uint32_t SUBSCRIBE_PREPARETX;              /*!< (@ 0x000000A4) Subscribe configuration for task PREPARETX            */
    __IM uint32_t RESERVED7[2];
    __IOM NRF_TWIS_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA; /*!< (@ 0x000000B0) Subscribe configuration for tasks                     */
    __IM uint32_t RESERVED8[13];
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000104) TWI stopped                                           */
    __IM uint32_t RESERVED9[3];
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000114) TWI error                                             */
    __IM uint32_t RESERVED10[9];
    __IOM uint32_t EVENTS_WRITE;                     /*!< (@ 0x0000013C) Write command received                                */
    __IOM uint32_t EVENTS_READ;                      /*!< (@ 0x00000140) Read command received                                 */
    __IM uint32_t RESERVED11[2];
    __IOM NRF_TWIS_EVENTS_DMA_Type EVENTS_DMA;       /*!< (@ 0x0000014C) Peripheral events.                                    */
    __IM uint32_t RESERVED12[4];
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000184) Publish configuration for event STOPPED               */
    __IM uint32_t RESERVED13[3];
    __IOM uint32_t PUBLISH_ERROR;                    /*!< (@ 0x00000194) Publish configuration for event ERROR                 */
    __IM uint32_t RESERVED14[9];
    __IOM uint32_t PUBLISH_WRITE;                    /*!< (@ 0x000001BC) Publish configuration for event WRITE                 */
    __IOM uint32_t PUBLISH_READ;                     /*!< (@ 0x000001C0) Publish configuration for event READ                  */
    __IM uint32_t RESERVED15[2];
    __IOM NRF_TWIS_PUBLISH_DMA_Type PUBLISH_DMA;     /*!< (@ 0x000001CC) Publish configuration for events                      */
    __IM uint32_t RESERVED16[3];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED17[63];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED18[113];
    __IOM uint32_t ERRORSRC;                         /*!< (@ 0x000004D0) Error source                                          */
    __IM uint32_t MATCH;                             /*!< (@ 0x000004D4) Status register indicating which address had a match  */
    __IM uint32_t RESERVED19[10];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable TWIS                                           */
    __IM uint32_t RESERVED20[33];
    __IOM uint32_t ADDRESS[2];                       /*!< (@ 0x00000588) TWI slave address n                                   */
    __IM uint32_t RESERVED21;
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000594) Configuration register for the address match mechanism*/
    __IM uint32_t RESERVED22[10];
    __IOM uint32_t ORC;                              /*!< (@ 0x000005C0) Over-read character. Character sent out in case of an
                                                                         over-read of the transmit buffer.*/
    __IM uint32_t RESERVED23[15];
    __IOM NRF_TWIS_PSEL_Type PSEL;                   /*!< (@ 0x00000600) (unspecified)                                         */
    __IM uint32_t RESERVED24[62];
    __IOM NRF_TWIS_DMA_Type DMA;                     /*!< (@ 0x00000700) (unspecified)                                         */
  } NRF_TWIS_Type;                                   /*!< Size = 1884 (0x75C)                                                  */

/* TWIS_TASKS_STOP: Stop TWI transaction */
  #define TWIS_TASKS_STOP_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop TWI transaction */
  #define TWIS_TASKS_STOP_TASKS_STOP_Pos (0UL)       /*!< Position of TASKS_STOP field.                                        */
  #define TWIS_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIS_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.          */
  #define TWIS_TASKS_STOP_TASKS_STOP_Min (0x1UL)     /*!< Min enumerator value of TASKS_STOP field.                            */
  #define TWIS_TASKS_STOP_TASKS_STOP_Max (0x1UL)     /*!< Max enumerator value of TASKS_STOP field.                            */
  #define TWIS_TASKS_STOP_TASKS_STOP_Trigger (0x1UL) /*!< Trigger task                                                         */


/* TWIS_TASKS_SUSPEND: Suspend TWI transaction */
  #define TWIS_TASKS_SUSPEND_ResetValue (0x00000000UL) /*!< Reset value of TASKS_SUSPEND register.                             */

/* TASKS_SUSPEND @Bit 0 : Suspend TWI transaction */
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field.                                     */
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND
                                                                            field.*/
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Min (0x1UL) /*!< Min enumerator value of TASKS_SUSPEND field.                       */
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Max (0x1UL) /*!< Max enumerator value of TASKS_SUSPEND field.                       */
  #define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (0x1UL) /*!< Trigger task                                                   */


/* TWIS_TASKS_RESUME: Resume TWI transaction */
  #define TWIS_TASKS_RESUME_ResetValue (0x00000000UL) /*!< Reset value of TASKS_RESUME register.                               */

/* TASKS_RESUME @Bit 0 : Resume TWI transaction */
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Pos (0UL)   /*!< Position of TASKS_RESUME field.                                      */
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIS_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field.*/
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Min (0x1UL) /*!< Min enumerator value of TASKS_RESUME field.                          */
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Max (0x1UL) /*!< Max enumerator value of TASKS_RESUME field.                          */
  #define TWIS_TASKS_RESUME_TASKS_RESUME_Trigger (0x1UL) /*!< Trigger task                                                     */


/* TWIS_TASKS_PREPARERX: Prepare the TWI slave to respond to a write command */
  #define TWIS_TASKS_PREPARERX_ResetValue (0x00000000UL) /*!< Reset value of TASKS_PREPARERX register.                         */

/* TASKS_PREPARERX @Bit 0 : Prepare the TWI slave to respond to a write command */
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos (0UL) /*!< Position of TASKS_PREPARERX field.                               */
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Msk (0x1UL << TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos) /*!< Bit mask of
                                                                            TASKS_PREPARERX field.*/
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Min (0x1UL) /*!< Min enumerator value of TASKS_PREPARERX field.                 */
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Max (0x1UL) /*!< Max enumerator value of TASKS_PREPARERX field.                 */
  #define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Trigger (0x1UL) /*!< Trigger task                                               */


/* TWIS_TASKS_PREPARETX: Prepare the TWI slave to respond to a read command */
  #define TWIS_TASKS_PREPARETX_ResetValue (0x00000000UL) /*!< Reset value of TASKS_PREPARETX register.                         */

/* TASKS_PREPARETX @Bit 0 : Prepare the TWI slave to respond to a read command */
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos (0UL) /*!< Position of TASKS_PREPARETX field.                               */
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Msk (0x1UL << TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos) /*!< Bit mask of
                                                                            TASKS_PREPARETX field.*/
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Min (0x1UL) /*!< Min enumerator value of TASKS_PREPARETX field.                 */
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Max (0x1UL) /*!< Max enumerator value of TASKS_PREPARETX field.                 */
  #define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Trigger (0x1UL) /*!< Trigger task                                               */


/* TWIS_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define TWIS_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define TWIS_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_STOP_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define TWIS_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIS_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                          */
  #define TWIS_SUBSCRIBE_STOP_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_STOP_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_STOP_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define TWIS_SUBSCRIBE_STOP_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* TWIS_SUBSCRIBE_SUSPEND: Subscribe configuration for task SUSPEND */
  #define TWIS_SUBSCRIBE_SUSPEND_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_SUSPEND register.                     */

/* CHIDX @Bits 0..7 : DPPI channel that task SUSPEND will subscribe to */
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL)     /*!< Position of CHIDX field.                                             */
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field.          */
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Min (0x00UL)  /*!< Min value of CHIDX field.                                            */
  #define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Max (0xFFUL)  /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Pos (31UL)       /*!< Position of EN field.                                                */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIS_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field.                    */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Min (0x0UL)      /*!< Min enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Max (0x1UL)      /*!< Max enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Disabled (0x0UL) /*!< Disable subscription                                                 */
  #define TWIS_SUBSCRIBE_SUSPEND_EN_Enabled (0x1UL)  /*!< Enable subscription                                                  */


/* TWIS_SUBSCRIBE_RESUME: Subscribe configuration for task RESUME */
  #define TWIS_SUBSCRIBE_RESUME_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_RESUME register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that task RESUME will subscribe to */
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Pos (0UL)      /*!< Position of CHIDX field.                                             */
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field.            */
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Min (0x00UL)   /*!< Min value of CHIDX field.                                            */
  #define TWIS_SUBSCRIBE_RESUME_CHIDX_Max (0xFFUL)   /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_RESUME_EN_Pos (31UL)        /*!< Position of EN field.                                                */
  #define TWIS_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIS_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field.                      */
  #define TWIS_SUBSCRIBE_RESUME_EN_Min (0x0UL)       /*!< Min enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_RESUME_EN_Max (0x1UL)       /*!< Max enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_RESUME_EN_Disabled (0x0UL)  /*!< Disable subscription                                                 */
  #define TWIS_SUBSCRIBE_RESUME_EN_Enabled (0x1UL)   /*!< Enable subscription                                                  */


/* TWIS_SUBSCRIBE_PREPARERX: Subscribe configuration for task PREPARERX */
  #define TWIS_SUBSCRIBE_PREPARERX_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_PREPARERX register.                 */

/* CHIDX @Bits 0..7 : DPPI channel that task PREPARERX will subscribe to */
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARERX_EN_Pos) /*!< Bit mask of EN field.                */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Disabled (0x0UL) /*!< Disable subscription                                               */
  #define TWIS_SUBSCRIBE_PREPARERX_EN_Enabled (0x1UL) /*!< Enable subscription                                                 */


/* TWIS_SUBSCRIBE_PREPARETX: Subscribe configuration for task PREPARETX */
  #define TWIS_SUBSCRIBE_PREPARETX_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_PREPARETX register.                 */

/* CHIDX @Bits 0..7 : DPPI channel that task PREPARETX will subscribe to */
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARETX_EN_Pos) /*!< Bit mask of EN field.                */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Disabled (0x0UL) /*!< Disable subscription                                               */
  #define TWIS_SUBSCRIBE_PREPARETX_EN_Enabled (0x1UL) /*!< Enable subscription                                                 */


/* TWIS_EVENTS_STOPPED: TWI stopped */
  #define TWIS_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                           */

/* EVENTS_STOPPED @Bit 0 : TWI stopped */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                  */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_STOPPED field.*/
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                    */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                    */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                     */
  #define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                            */


/* TWIS_EVENTS_ERROR: TWI error */
  #define TWIS_EVENTS_ERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ERROR register.                               */

/* EVENTS_ERROR @Bit 0 : TWI error */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)   /*!< Position of EVENTS_ERROR field.                                      */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field.*/
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_ERROR field.                          */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_ERROR field.                          */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIS_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL) /*!< Event generated                                                */


/* TWIS_EVENTS_WRITE: Write command received */
  #define TWIS_EVENTS_WRITE_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_WRITE register.                               */

/* EVENTS_WRITE @Bit 0 : Write command received */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos (0UL)   /*!< Position of EVENTS_WRITE field.                                      */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Msk (0x1UL << TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos) /*!< Bit mask of EVENTS_WRITE field.*/
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Min (0x0UL) /*!< Min enumerator value of EVENTS_WRITE field.                          */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Max (0x1UL) /*!< Max enumerator value of EVENTS_WRITE field.                          */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_NotGenerated (0x0UL) /*!< Event not generated                                         */
  #define TWIS_EVENTS_WRITE_EVENTS_WRITE_Generated (0x1UL) /*!< Event generated                                                */


/* TWIS_EVENTS_READ: Read command received */
  #define TWIS_EVENTS_READ_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_READ register.                                 */

/* EVENTS_READ @Bit 0 : Read command received */
  #define TWIS_EVENTS_READ_EVENTS_READ_Pos (0UL)     /*!< Position of EVENTS_READ field.                                       */
  #define TWIS_EVENTS_READ_EVENTS_READ_Msk (0x1UL << TWIS_EVENTS_READ_EVENTS_READ_Pos) /*!< Bit mask of EVENTS_READ field.     */
  #define TWIS_EVENTS_READ_EVENTS_READ_Min (0x0UL)   /*!< Min enumerator value of EVENTS_READ field.                           */
  #define TWIS_EVENTS_READ_EVENTS_READ_Max (0x1UL)   /*!< Max enumerator value of EVENTS_READ field.                           */
  #define TWIS_EVENTS_READ_EVENTS_READ_NotGenerated (0x0UL) /*!< Event not generated                                           */
  #define TWIS_EVENTS_READ_EVENTS_READ_Generated (0x1UL) /*!< Event generated                                                  */


/* TWIS_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define TWIS_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                         */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define TWIS_PUBLISH_STOPPED_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define TWIS_PUBLISH_STOPPED_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define TWIS_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_STOPPED_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIS_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                        */
  #define TWIS_PUBLISH_STOPPED_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_STOPPED_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_STOPPED_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define TWIS_PUBLISH_STOPPED_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* TWIS_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define TWIS_PUBLISH_ERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ERROR register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define TWIS_PUBLISH_ERROR_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define TWIS_PUBLISH_ERROR_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define TWIS_PUBLISH_ERROR_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_ERROR_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_ERROR_EN_Msk (0x1UL << TWIS_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field.                            */
  #define TWIS_PUBLISH_ERROR_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_ERROR_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_ERROR_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define TWIS_PUBLISH_ERROR_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* TWIS_PUBLISH_WRITE: Publish configuration for event WRITE */
  #define TWIS_PUBLISH_WRITE_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_WRITE register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that event WRITE will publish to */
  #define TWIS_PUBLISH_WRITE_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_WRITE_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_WRITE_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define TWIS_PUBLISH_WRITE_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define TWIS_PUBLISH_WRITE_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_WRITE_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_WRITE_EN_Msk (0x1UL << TWIS_PUBLISH_WRITE_EN_Pos) /*!< Bit mask of EN field.                            */
  #define TWIS_PUBLISH_WRITE_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_WRITE_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_WRITE_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define TWIS_PUBLISH_WRITE_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* TWIS_PUBLISH_READ: Publish configuration for event READ */
  #define TWIS_PUBLISH_READ_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_READ register.                               */

/* CHIDX @Bits 0..7 : DPPI channel that event READ will publish to */
  #define TWIS_PUBLISH_READ_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define TWIS_PUBLISH_READ_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_READ_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define TWIS_PUBLISH_READ_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define TWIS_PUBLISH_READ_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define TWIS_PUBLISH_READ_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define TWIS_PUBLISH_READ_EN_Msk (0x1UL << TWIS_PUBLISH_READ_EN_Pos) /*!< Bit mask of EN field.                              */
  #define TWIS_PUBLISH_READ_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_READ_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define TWIS_PUBLISH_READ_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define TWIS_PUBLISH_READ_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* TWIS_SHORTS: Shortcuts between local events and tasks */
  #define TWIS_SHORTS_ResetValue (0x00000000UL)      /*!< Reset value of SHORTS register.                                      */

/* WRITE_SUSPEND @Bit 13 : Shortcut between event WRITE and task SUSPEND */
  #define TWIS_SHORTS_WRITE_SUSPEND_Pos (13UL)       /*!< Position of WRITE_SUSPEND field.                                     */
  #define TWIS_SHORTS_WRITE_SUSPEND_Msk (0x1UL << TWIS_SHORTS_WRITE_SUSPEND_Pos) /*!< Bit mask of WRITE_SUSPEND field.         */
  #define TWIS_SHORTS_WRITE_SUSPEND_Min (0x0UL)      /*!< Min enumerator value of WRITE_SUSPEND field.                         */
  #define TWIS_SHORTS_WRITE_SUSPEND_Max (0x1UL)      /*!< Max enumerator value of WRITE_SUSPEND field.                         */
  #define TWIS_SHORTS_WRITE_SUSPEND_Disabled (0x0UL) /*!< Disable shortcut                                                     */
  #define TWIS_SHORTS_WRITE_SUSPEND_Enabled (0x1UL)  /*!< Enable shortcut                                                      */

/* READ_SUSPEND @Bit 14 : Shortcut between event READ and task SUSPEND */
  #define TWIS_SHORTS_READ_SUSPEND_Pos (14UL)        /*!< Position of READ_SUSPEND field.                                      */
  #define TWIS_SHORTS_READ_SUSPEND_Msk (0x1UL << TWIS_SHORTS_READ_SUSPEND_Pos) /*!< Bit mask of READ_SUSPEND field.            */
  #define TWIS_SHORTS_READ_SUSPEND_Min (0x0UL)       /*!< Min enumerator value of READ_SUSPEND field.                          */
  #define TWIS_SHORTS_READ_SUSPEND_Max (0x1UL)       /*!< Max enumerator value of READ_SUSPEND field.                          */
  #define TWIS_SHORTS_READ_SUSPEND_Disabled (0x0UL)  /*!< Disable shortcut                                                     */
  #define TWIS_SHORTS_READ_SUSPEND_Enabled (0x1UL)   /*!< Enable shortcut                                                      */

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.   */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.   */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.   */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.   */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                         DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                 */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                   */

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field. */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIS_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field. */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIS_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field. */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIS_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field. */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define TWIS_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                  */


/* TWIS_INTEN: Enable or disable interrupt */
  #define TWIS_INTEN_ResetValue (0x00000000UL)       /*!< Reset value of INTEN register.                                       */

/* STOPPED @Bit 1 : Enable or disable interrupt for event STOPPED */
  #define TWIS_INTEN_STOPPED_Pos (1UL)               /*!< Position of STOPPED field.                                           */
  #define TWIS_INTEN_STOPPED_Msk (0x1UL << TWIS_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field.                             */
  #define TWIS_INTEN_STOPPED_Min (0x0UL)             /*!< Min enumerator value of STOPPED field.                               */
  #define TWIS_INTEN_STOPPED_Max (0x1UL)             /*!< Max enumerator value of STOPPED field.                               */
  #define TWIS_INTEN_STOPPED_Disabled (0x0UL)        /*!< Disable                                                              */
  #define TWIS_INTEN_STOPPED_Enabled (0x1UL)         /*!< Enable                                                               */

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define TWIS_INTEN_ERROR_Pos (5UL)                 /*!< Position of ERROR field.                                             */
  #define TWIS_INTEN_ERROR_Msk (0x1UL << TWIS_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field.                                   */
  #define TWIS_INTEN_ERROR_Min (0x0UL)               /*!< Min enumerator value of ERROR field.                                 */
  #define TWIS_INTEN_ERROR_Max (0x1UL)               /*!< Max enumerator value of ERROR field.                                 */
  #define TWIS_INTEN_ERROR_Disabled (0x0UL)          /*!< Disable                                                              */
  #define TWIS_INTEN_ERROR_Enabled (0x1UL)           /*!< Enable                                                               */

/* WRITE @Bit 15 : Enable or disable interrupt for event WRITE */
  #define TWIS_INTEN_WRITE_Pos (15UL)                /*!< Position of WRITE field.                                             */
  #define TWIS_INTEN_WRITE_Msk (0x1UL << TWIS_INTEN_WRITE_Pos) /*!< Bit mask of WRITE field.                                   */
  #define TWIS_INTEN_WRITE_Min (0x0UL)               /*!< Min enumerator value of WRITE field.                                 */
  #define TWIS_INTEN_WRITE_Max (0x1UL)               /*!< Max enumerator value of WRITE field.                                 */
  #define TWIS_INTEN_WRITE_Disabled (0x0UL)          /*!< Disable                                                              */
  #define TWIS_INTEN_WRITE_Enabled (0x1UL)           /*!< Enable                                                               */

/* READ @Bit 16 : Enable or disable interrupt for event READ */
  #define TWIS_INTEN_READ_Pos (16UL)                 /*!< Position of READ field.                                              */
  #define TWIS_INTEN_READ_Msk (0x1UL << TWIS_INTEN_READ_Pos) /*!< Bit mask of READ field.                                      */
  #define TWIS_INTEN_READ_Min (0x0UL)                /*!< Min enumerator value of READ field.                                  */
  #define TWIS_INTEN_READ_Max (0x1UL)                /*!< Max enumerator value of READ field.                                  */
  #define TWIS_INTEN_READ_Disabled (0x0UL)           /*!< Disable                                                              */
  #define TWIS_INTEN_READ_Enabled (0x1UL)            /*!< Enable                                                               */

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define TWIS_INTEN_DMARXEND_Pos (19UL)             /*!< Position of DMARXEND field.                                          */
  #define TWIS_INTEN_DMARXEND_Msk (0x1UL << TWIS_INTEN_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                          */
  #define TWIS_INTEN_DMARXEND_Min (0x0UL)            /*!< Min enumerator value of DMARXEND field.                              */
  #define TWIS_INTEN_DMARXEND_Max (0x1UL)            /*!< Max enumerator value of DMARXEND field.                              */
  #define TWIS_INTEN_DMARXEND_Disabled (0x0UL)       /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXEND_Enabled (0x1UL)        /*!< Enable                                                               */

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define TWIS_INTEN_DMARXREADY_Pos (20UL)           /*!< Position of DMARXREADY field.                                        */
  #define TWIS_INTEN_DMARXREADY_Msk (0x1UL << TWIS_INTEN_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.                    */
  #define TWIS_INTEN_DMARXREADY_Min (0x0UL)          /*!< Min enumerator value of DMARXREADY field.                            */
  #define TWIS_INTEN_DMARXREADY_Max (0x1UL)          /*!< Max enumerator value of DMARXREADY field.                            */
  #define TWIS_INTEN_DMARXREADY_Disabled (0x0UL)     /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXREADY_Enabled (0x1UL)      /*!< Enable                                                               */

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define TWIS_INTEN_DMARXBUSERROR_Pos (21UL)        /*!< Position of DMARXBUSERROR field.                                     */
  #define TWIS_INTEN_DMARXBUSERROR_Msk (0x1UL << TWIS_INTEN_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.           */
  #define TWIS_INTEN_DMARXBUSERROR_Min (0x0UL)       /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define TWIS_INTEN_DMARXBUSERROR_Max (0x1UL)       /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define TWIS_INTEN_DMARXBUSERROR_Disabled (0x0UL)  /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXBUSERROR_Enabled (0x1UL)   /*!< Enable                                                               */

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTEN_DMARXMATCH0_Pos (22UL)          /*!< Position of DMARXMATCH0 field.                                       */
  #define TWIS_INTEN_DMARXMATCH0_Msk (0x1UL << TWIS_INTEN_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.                 */
  #define TWIS_INTEN_DMARXMATCH0_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define TWIS_INTEN_DMARXMATCH0_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define TWIS_INTEN_DMARXMATCH0_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXMATCH0_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTEN_DMARXMATCH1_Pos (23UL)          /*!< Position of DMARXMATCH1 field.                                       */
  #define TWIS_INTEN_DMARXMATCH1_Msk (0x1UL << TWIS_INTEN_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.                 */
  #define TWIS_INTEN_DMARXMATCH1_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define TWIS_INTEN_DMARXMATCH1_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define TWIS_INTEN_DMARXMATCH1_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXMATCH1_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTEN_DMARXMATCH2_Pos (24UL)          /*!< Position of DMARXMATCH2 field.                                       */
  #define TWIS_INTEN_DMARXMATCH2_Msk (0x1UL << TWIS_INTEN_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.                 */
  #define TWIS_INTEN_DMARXMATCH2_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define TWIS_INTEN_DMARXMATCH2_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define TWIS_INTEN_DMARXMATCH2_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXMATCH2_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTEN_DMARXMATCH3_Pos (25UL)          /*!< Position of DMARXMATCH3 field.                                       */
  #define TWIS_INTEN_DMARXMATCH3_Msk (0x1UL << TWIS_INTEN_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.                 */
  #define TWIS_INTEN_DMARXMATCH3_Min (0x0UL)         /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define TWIS_INTEN_DMARXMATCH3_Max (0x1UL)         /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define TWIS_INTEN_DMARXMATCH3_Disabled (0x0UL)    /*!< Disable                                                              */
  #define TWIS_INTEN_DMARXMATCH3_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define TWIS_INTEN_DMATXEND_Pos (26UL)             /*!< Position of DMATXEND field.                                          */
  #define TWIS_INTEN_DMATXEND_Msk (0x1UL << TWIS_INTEN_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                          */
  #define TWIS_INTEN_DMATXEND_Min (0x0UL)            /*!< Min enumerator value of DMATXEND field.                              */
  #define TWIS_INTEN_DMATXEND_Max (0x1UL)            /*!< Max enumerator value of DMATXEND field.                              */
  #define TWIS_INTEN_DMATXEND_Disabled (0x0UL)       /*!< Disable                                                              */
  #define TWIS_INTEN_DMATXEND_Enabled (0x1UL)        /*!< Enable                                                               */

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define TWIS_INTEN_DMATXREADY_Pos (27UL)           /*!< Position of DMATXREADY field.                                        */
  #define TWIS_INTEN_DMATXREADY_Msk (0x1UL << TWIS_INTEN_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.                    */
  #define TWIS_INTEN_DMATXREADY_Min (0x0UL)          /*!< Min enumerator value of DMATXREADY field.                            */
  #define TWIS_INTEN_DMATXREADY_Max (0x1UL)          /*!< Max enumerator value of DMATXREADY field.                            */
  #define TWIS_INTEN_DMATXREADY_Disabled (0x0UL)     /*!< Disable                                                              */
  #define TWIS_INTEN_DMATXREADY_Enabled (0x1UL)      /*!< Enable                                                               */

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define TWIS_INTEN_DMATXBUSERROR_Pos (28UL)        /*!< Position of DMATXBUSERROR field.                                     */
  #define TWIS_INTEN_DMATXBUSERROR_Msk (0x1UL << TWIS_INTEN_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.           */
  #define TWIS_INTEN_DMATXBUSERROR_Min (0x0UL)       /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define TWIS_INTEN_DMATXBUSERROR_Max (0x1UL)       /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define TWIS_INTEN_DMATXBUSERROR_Disabled (0x0UL)  /*!< Disable                                                              */
  #define TWIS_INTEN_DMATXBUSERROR_Enabled (0x1UL)   /*!< Enable                                                               */


/* TWIS_INTENSET: Enable interrupt */
  #define TWIS_INTENSET_ResetValue (0x00000000UL)    /*!< Reset value of INTENSET register.                                    */

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define TWIS_INTENSET_STOPPED_Pos (1UL)            /*!< Position of STOPPED field.                                           */
  #define TWIS_INTENSET_STOPPED_Msk (0x1UL << TWIS_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define TWIS_INTENSET_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define TWIS_INTENSET_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define TWIS_INTENSET_STOPPED_Set (0x1UL)          /*!< Enable                                                               */
  #define TWIS_INTENSET_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define TWIS_INTENSET_ERROR_Pos (5UL)              /*!< Position of ERROR field.                                             */
  #define TWIS_INTENSET_ERROR_Msk (0x1UL << TWIS_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field.                             */
  #define TWIS_INTENSET_ERROR_Min (0x0UL)            /*!< Min enumerator value of ERROR field.                                 */
  #define TWIS_INTENSET_ERROR_Max (0x1UL)            /*!< Max enumerator value of ERROR field.                                 */
  #define TWIS_INTENSET_ERROR_Set (0x1UL)            /*!< Enable                                                               */
  #define TWIS_INTENSET_ERROR_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_ERROR_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* WRITE @Bit 15 : Write '1' to enable interrupt for event WRITE */
  #define TWIS_INTENSET_WRITE_Pos (15UL)             /*!< Position of WRITE field.                                             */
  #define TWIS_INTENSET_WRITE_Msk (0x1UL << TWIS_INTENSET_WRITE_Pos) /*!< Bit mask of WRITE field.                             */
  #define TWIS_INTENSET_WRITE_Min (0x0UL)            /*!< Min enumerator value of WRITE field.                                 */
  #define TWIS_INTENSET_WRITE_Max (0x1UL)            /*!< Max enumerator value of WRITE field.                                 */
  #define TWIS_INTENSET_WRITE_Set (0x1UL)            /*!< Enable                                                               */
  #define TWIS_INTENSET_WRITE_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_WRITE_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* READ @Bit 16 : Write '1' to enable interrupt for event READ */
  #define TWIS_INTENSET_READ_Pos (16UL)              /*!< Position of READ field.                                              */
  #define TWIS_INTENSET_READ_Msk (0x1UL << TWIS_INTENSET_READ_Pos) /*!< Bit mask of READ field.                                */
  #define TWIS_INTENSET_READ_Min (0x0UL)             /*!< Min enumerator value of READ field.                                  */
  #define TWIS_INTENSET_READ_Max (0x1UL)             /*!< Max enumerator value of READ field.                                  */
  #define TWIS_INTENSET_READ_Set (0x1UL)             /*!< Enable                                                               */
  #define TWIS_INTENSET_READ_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_READ_Enabled (0x1UL)         /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define TWIS_INTENSET_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define TWIS_INTENSET_DMARXEND_Msk (0x1UL << TWIS_INTENSET_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define TWIS_INTENSET_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define TWIS_INTENSET_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define TWIS_INTENSET_DMARXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define TWIS_INTENSET_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define TWIS_INTENSET_DMARXREADY_Msk (0x1UL << TWIS_INTENSET_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define TWIS_INTENSET_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define TWIS_INTENSET_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define TWIS_INTENSET_DMARXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define TWIS_INTENSET_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define TWIS_INTENSET_DMARXBUSERROR_Msk (0x1UL << TWIS_INTENSET_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define TWIS_INTENSET_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define TWIS_INTENSET_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define TWIS_INTENSET_DMARXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIS_INTENSET_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTENSET_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define TWIS_INTENSET_DMARXMATCH0_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define TWIS_INTENSET_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define TWIS_INTENSET_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define TWIS_INTENSET_DMARXMATCH0_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTENSET_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define TWIS_INTENSET_DMARXMATCH1_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define TWIS_INTENSET_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define TWIS_INTENSET_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define TWIS_INTENSET_DMARXMATCH1_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTENSET_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define TWIS_INTENSET_DMARXMATCH2_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define TWIS_INTENSET_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define TWIS_INTENSET_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define TWIS_INTENSET_DMARXMATCH2_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTENSET_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define TWIS_INTENSET_DMARXMATCH3_Msk (0x1UL << TWIS_INTENSET_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define TWIS_INTENSET_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define TWIS_INTENSET_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define TWIS_INTENSET_DMARXMATCH3_Set (0x1UL)      /*!< Enable                                                               */
  #define TWIS_INTENSET_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define TWIS_INTENSET_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define TWIS_INTENSET_DMATXEND_Msk (0x1UL << TWIS_INTENSET_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define TWIS_INTENSET_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define TWIS_INTENSET_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define TWIS_INTENSET_DMATXEND_Set (0x1UL)         /*!< Enable                                                               */
  #define TWIS_INTENSET_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define TWIS_INTENSET_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define TWIS_INTENSET_DMATXREADY_Msk (0x1UL << TWIS_INTENSET_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define TWIS_INTENSET_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define TWIS_INTENSET_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define TWIS_INTENSET_DMATXREADY_Set (0x1UL)       /*!< Enable                                                               */
  #define TWIS_INTENSET_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIS_INTENSET_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define TWIS_INTENSET_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define TWIS_INTENSET_DMATXBUSERROR_Msk (0x1UL << TWIS_INTENSET_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define TWIS_INTENSET_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define TWIS_INTENSET_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define TWIS_INTENSET_DMATXBUSERROR_Set (0x1UL)    /*!< Enable                                                               */
  #define TWIS_INTENSET_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIS_INTENSET_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* TWIS_INTENCLR: Disable interrupt */
  #define TWIS_INTENCLR_ResetValue (0x00000000UL)    /*!< Reset value of INTENCLR register.                                    */

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define TWIS_INTENCLR_STOPPED_Pos (1UL)            /*!< Position of STOPPED field.                                           */
  #define TWIS_INTENCLR_STOPPED_Msk (0x1UL << TWIS_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                       */
  #define TWIS_INTENCLR_STOPPED_Min (0x0UL)          /*!< Min enumerator value of STOPPED field.                               */
  #define TWIS_INTENCLR_STOPPED_Max (0x1UL)          /*!< Max enumerator value of STOPPED field.                               */
  #define TWIS_INTENCLR_STOPPED_Clear (0x1UL)        /*!< Disable                                                              */
  #define TWIS_INTENCLR_STOPPED_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_STOPPED_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define TWIS_INTENCLR_ERROR_Pos (5UL)              /*!< Position of ERROR field.                                             */
  #define TWIS_INTENCLR_ERROR_Msk (0x1UL << TWIS_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field.                             */
  #define TWIS_INTENCLR_ERROR_Min (0x0UL)            /*!< Min enumerator value of ERROR field.                                 */
  #define TWIS_INTENCLR_ERROR_Max (0x1UL)            /*!< Max enumerator value of ERROR field.                                 */
  #define TWIS_INTENCLR_ERROR_Clear (0x1UL)          /*!< Disable                                                              */
  #define TWIS_INTENCLR_ERROR_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_ERROR_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* WRITE @Bit 15 : Write '1' to disable interrupt for event WRITE */
  #define TWIS_INTENCLR_WRITE_Pos (15UL)             /*!< Position of WRITE field.                                             */
  #define TWIS_INTENCLR_WRITE_Msk (0x1UL << TWIS_INTENCLR_WRITE_Pos) /*!< Bit mask of WRITE field.                             */
  #define TWIS_INTENCLR_WRITE_Min (0x0UL)            /*!< Min enumerator value of WRITE field.                                 */
  #define TWIS_INTENCLR_WRITE_Max (0x1UL)            /*!< Max enumerator value of WRITE field.                                 */
  #define TWIS_INTENCLR_WRITE_Clear (0x1UL)          /*!< Disable                                                              */
  #define TWIS_INTENCLR_WRITE_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_WRITE_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* READ @Bit 16 : Write '1' to disable interrupt for event READ */
  #define TWIS_INTENCLR_READ_Pos (16UL)              /*!< Position of READ field.                                              */
  #define TWIS_INTENCLR_READ_Msk (0x1UL << TWIS_INTENCLR_READ_Pos) /*!< Bit mask of READ field.                                */
  #define TWIS_INTENCLR_READ_Min (0x0UL)             /*!< Min enumerator value of READ field.                                  */
  #define TWIS_INTENCLR_READ_Max (0x1UL)             /*!< Max enumerator value of READ field.                                  */
  #define TWIS_INTENCLR_READ_Clear (0x1UL)           /*!< Disable                                                              */
  #define TWIS_INTENCLR_READ_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_READ_Enabled (0x1UL)         /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define TWIS_INTENCLR_DMARXEND_Pos (19UL)          /*!< Position of DMARXEND field.                                          */
  #define TWIS_INTENCLR_DMARXEND_Msk (0x1UL << TWIS_INTENCLR_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                    */
  #define TWIS_INTENCLR_DMARXEND_Min (0x0UL)         /*!< Min enumerator value of DMARXEND field.                              */
  #define TWIS_INTENCLR_DMARXEND_Max (0x1UL)         /*!< Max enumerator value of DMARXEND field.                              */
  #define TWIS_INTENCLR_DMARXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMARXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define TWIS_INTENCLR_DMARXREADY_Pos (20UL)        /*!< Position of DMARXREADY field.                                        */
  #define TWIS_INTENCLR_DMARXREADY_Msk (0x1UL << TWIS_INTENCLR_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.              */
  #define TWIS_INTENCLR_DMARXREADY_Min (0x0UL)       /*!< Min enumerator value of DMARXREADY field.                            */
  #define TWIS_INTENCLR_DMARXREADY_Max (0x1UL)       /*!< Max enumerator value of DMARXREADY field.                            */
  #define TWIS_INTENCLR_DMARXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMARXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define TWIS_INTENCLR_DMARXBUSERROR_Pos (21UL)     /*!< Position of DMARXBUSERROR field.                                     */
  #define TWIS_INTENCLR_DMARXBUSERROR_Msk (0x1UL << TWIS_INTENCLR_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.     */
  #define TWIS_INTENCLR_DMARXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define TWIS_INTENCLR_DMARXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define TWIS_INTENCLR_DMARXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIS_INTENCLR_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define TWIS_INTENCLR_DMARXMATCH0_Pos (22UL)       /*!< Position of DMARXMATCH0 field.                                       */
  #define TWIS_INTENCLR_DMARXMATCH0_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.           */
  #define TWIS_INTENCLR_DMARXMATCH0_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH0_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH0_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMARXMATCH0_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define TWIS_INTENCLR_DMARXMATCH1_Pos (23UL)       /*!< Position of DMARXMATCH1 field.                                       */
  #define TWIS_INTENCLR_DMARXMATCH1_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.           */
  #define TWIS_INTENCLR_DMARXMATCH1_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH1_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH1_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMARXMATCH1_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define TWIS_INTENCLR_DMARXMATCH2_Pos (24UL)       /*!< Position of DMARXMATCH2 field.                                       */
  #define TWIS_INTENCLR_DMARXMATCH2_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.           */
  #define TWIS_INTENCLR_DMARXMATCH2_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH2_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH2_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMARXMATCH2_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define TWIS_INTENCLR_DMARXMATCH3_Pos (25UL)       /*!< Position of DMARXMATCH3 field.                                       */
  #define TWIS_INTENCLR_DMARXMATCH3_Msk (0x1UL << TWIS_INTENCLR_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.           */
  #define TWIS_INTENCLR_DMARXMATCH3_Min (0x0UL)      /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH3_Max (0x1UL)      /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define TWIS_INTENCLR_DMARXMATCH3_Clear (0x1UL)    /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMARXMATCH3_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define TWIS_INTENCLR_DMATXEND_Pos (26UL)          /*!< Position of DMATXEND field.                                          */
  #define TWIS_INTENCLR_DMATXEND_Msk (0x1UL << TWIS_INTENCLR_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                    */
  #define TWIS_INTENCLR_DMATXEND_Min (0x0UL)         /*!< Min enumerator value of DMATXEND field.                              */
  #define TWIS_INTENCLR_DMATXEND_Max (0x1UL)         /*!< Max enumerator value of DMATXEND field.                              */
  #define TWIS_INTENCLR_DMATXEND_Clear (0x1UL)       /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMATXEND_Disabled (0x0UL)    /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMATXEND_Enabled (0x1UL)     /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define TWIS_INTENCLR_DMATXREADY_Pos (27UL)        /*!< Position of DMATXREADY field.                                        */
  #define TWIS_INTENCLR_DMATXREADY_Msk (0x1UL << TWIS_INTENCLR_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.              */
  #define TWIS_INTENCLR_DMATXREADY_Min (0x0UL)       /*!< Min enumerator value of DMATXREADY field.                            */
  #define TWIS_INTENCLR_DMATXREADY_Max (0x1UL)       /*!< Max enumerator value of DMATXREADY field.                            */
  #define TWIS_INTENCLR_DMATXREADY_Clear (0x1UL)     /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMATXREADY_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define TWIS_INTENCLR_DMATXREADY_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define TWIS_INTENCLR_DMATXBUSERROR_Pos (28UL)     /*!< Position of DMATXBUSERROR field.                                     */
  #define TWIS_INTENCLR_DMATXBUSERROR_Msk (0x1UL << TWIS_INTENCLR_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.     */
  #define TWIS_INTENCLR_DMATXBUSERROR_Min (0x0UL)    /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define TWIS_INTENCLR_DMATXBUSERROR_Max (0x1UL)    /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define TWIS_INTENCLR_DMATXBUSERROR_Clear (0x1UL)  /*!< Disable                                                              */
  #define TWIS_INTENCLR_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define TWIS_INTENCLR_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* TWIS_ERRORSRC: Error source */
  #define TWIS_ERRORSRC_ResetValue (0x00000000UL)    /*!< Reset value of ERRORSRC register.                                    */

/* OVERFLOW @Bit 0 : RX buffer overflow detected, and prevented */
  #define TWIS_ERRORSRC_OVERFLOW_Pos (0UL)           /*!< Position of OVERFLOW field.                                          */
  #define TWIS_ERRORSRC_OVERFLOW_Msk (0x1UL << TWIS_ERRORSRC_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field.                    */
  #define TWIS_ERRORSRC_OVERFLOW_Min (0x0UL)         /*!< Min enumerator value of OVERFLOW field.                              */
  #define TWIS_ERRORSRC_OVERFLOW_Max (0x1UL)         /*!< Max enumerator value of OVERFLOW field.                              */
  #define TWIS_ERRORSRC_OVERFLOW_NotDetected (0x0UL) /*!< Error did not occur                                                  */
  #define TWIS_ERRORSRC_OVERFLOW_Detected (0x1UL)    /*!< Error occurred                                                       */

/* DNACK @Bit 2 : NACK sent after receiving a data byte */
  #define TWIS_ERRORSRC_DNACK_Pos (2UL)              /*!< Position of DNACK field.                                             */
  #define TWIS_ERRORSRC_DNACK_Msk (0x1UL << TWIS_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field.                             */
  #define TWIS_ERRORSRC_DNACK_Min (0x0UL)            /*!< Min enumerator value of DNACK field.                                 */
  #define TWIS_ERRORSRC_DNACK_Max (0x1UL)            /*!< Max enumerator value of DNACK field.                                 */
  #define TWIS_ERRORSRC_DNACK_NotReceived (0x0UL)    /*!< Error did not occur                                                  */
  #define TWIS_ERRORSRC_DNACK_Received (0x1UL)       /*!< Error occurred                                                       */

/* OVERREAD @Bit 3 : TX buffer over-read detected, and prevented */
  #define TWIS_ERRORSRC_OVERREAD_Pos (3UL)           /*!< Position of OVERREAD field.                                          */
  #define TWIS_ERRORSRC_OVERREAD_Msk (0x1UL << TWIS_ERRORSRC_OVERREAD_Pos) /*!< Bit mask of OVERREAD field.                    */
  #define TWIS_ERRORSRC_OVERREAD_Min (0x0UL)         /*!< Min enumerator value of OVERREAD field.                              */
  #define TWIS_ERRORSRC_OVERREAD_Max (0x1UL)         /*!< Max enumerator value of OVERREAD field.                              */
  #define TWIS_ERRORSRC_OVERREAD_NotDetected (0x0UL) /*!< Error did not occur                                                  */
  #define TWIS_ERRORSRC_OVERREAD_Detected (0x1UL)    /*!< Error occurred                                                       */


/* TWIS_MATCH: Status register indicating which address had a match */
  #define TWIS_MATCH_ResetValue (0x00000000UL)       /*!< Reset value of MATCH register.                                       */

/* MATCH @Bit 0 : Indication of which address in ADDRESS that matched the incoming address */
  #define TWIS_MATCH_MATCH_Pos (0UL)                 /*!< Position of MATCH field.                                             */
  #define TWIS_MATCH_MATCH_Msk (0x1UL << TWIS_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field.                                   */
  #define TWIS_MATCH_MATCH_Min (0x0UL)               /*!< Min value of MATCH field.                                            */
  #define TWIS_MATCH_MATCH_Max (0x1UL)               /*!< Max size of MATCH field.                                             */


/* TWIS_ENABLE: Enable TWIS */
  #define TWIS_ENABLE_ResetValue (0x00000000UL)      /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..3 : Enable or disable TWIS */
  #define TWIS_ENABLE_ENABLE_Pos (0UL)               /*!< Position of ENABLE field.                                            */
  #define TWIS_ENABLE_ENABLE_Msk (0xFUL << TWIS_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                              */
  #define TWIS_ENABLE_ENABLE_Min (0x0UL)             /*!< Min enumerator value of ENABLE field.                                */
  #define TWIS_ENABLE_ENABLE_Max (0x9UL)             /*!< Max enumerator value of ENABLE field.                                */
  #define TWIS_ENABLE_ENABLE_Disabled (0x0UL)        /*!< Disable TWIS                                                         */
  #define TWIS_ENABLE_ENABLE_Enabled (0x9UL)         /*!< Enable TWIS                                                          */


/* TWIS_ADDRESS: TWI slave address n */
  #define TWIS_ADDRESS_MaxCount (2UL)                /*!< Max size of ADDRESS[2] array.                                        */
  #define TWIS_ADDRESS_MaxIndex (1UL)                /*!< Max index of ADDRESS[2] array.                                       */
  #define TWIS_ADDRESS_MinIndex (0UL)                /*!< Min index of ADDRESS[2] array.                                       */
  #define TWIS_ADDRESS_ResetValue (0x00000000UL)     /*!< Reset value of ADDRESS[2] register.                                  */

/* ADDRESS @Bits 0..6 : TWI slave address */
  #define TWIS_ADDRESS_ADDRESS_Pos (0UL)             /*!< Position of ADDRESS field.                                           */
  #define TWIS_ADDRESS_ADDRESS_Msk (0x7FUL << TWIS_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                        */


/* TWIS_CONFIG: Configuration register for the address match mechanism */
  #define TWIS_CONFIG_ResetValue (0x00000001UL)      /*!< Reset value of CONFIG register.                                      */

/* ADDRESS0 @Bit 0 : Enable or disable address matching on ADDRESS[0] */
  #define TWIS_CONFIG_ADDRESS0_Pos (0UL)             /*!< Position of ADDRESS0 field.                                          */
  #define TWIS_CONFIG_ADDRESS0_Msk (0x1UL << TWIS_CONFIG_ADDRESS0_Pos) /*!< Bit mask of ADDRESS0 field.                        */
  #define TWIS_CONFIG_ADDRESS0_Min (0x0UL)           /*!< Min enumerator value of ADDRESS0 field.                              */
  #define TWIS_CONFIG_ADDRESS0_Max (0x1UL)           /*!< Max enumerator value of ADDRESS0 field.                              */
  #define TWIS_CONFIG_ADDRESS0_Disabled (0x0UL)      /*!< Disabled                                                             */
  #define TWIS_CONFIG_ADDRESS0_Enabled (0x1UL)       /*!< Enabled                                                              */

/* ADDRESS1 @Bit 1 : Enable or disable address matching on ADDRESS[1] */
  #define TWIS_CONFIG_ADDRESS1_Pos (1UL)             /*!< Position of ADDRESS1 field.                                          */
  #define TWIS_CONFIG_ADDRESS1_Msk (0x1UL << TWIS_CONFIG_ADDRESS1_Pos) /*!< Bit mask of ADDRESS1 field.                        */
  #define TWIS_CONFIG_ADDRESS1_Min (0x0UL)           /*!< Min enumerator value of ADDRESS1 field.                              */
  #define TWIS_CONFIG_ADDRESS1_Max (0x1UL)           /*!< Max enumerator value of ADDRESS1 field.                              */
  #define TWIS_CONFIG_ADDRESS1_Disabled (0x0UL)      /*!< Disabled                                                             */
  #define TWIS_CONFIG_ADDRESS1_Enabled (0x1UL)       /*!< Enabled                                                              */


/* TWIS_ORC: Over-read character. Character sent out in case of an over-read of the transmit buffer. */
  #define TWIS_ORC_ResetValue (0x00000000UL)         /*!< Reset value of ORC register.                                         */

/* ORC @Bits 0..7 : Over-read character. Character sent out in case of an over-read of the transmit buffer. */
  #define TWIS_ORC_ORC_Pos (0UL)                     /*!< Position of ORC field.                                               */
  #define TWIS_ORC_ORC_Msk (0xFFUL << TWIS_ORC_ORC_Pos) /*!< Bit mask of ORC field.                                            */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           UARTE                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================ Struct UARTE_TASKS_DMA_RX ================================================ */
/**
  * @brief RX [UARTE_TASKS_DMA_RX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
  __OM  uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Enables the MATCH[n] event by setting the ENABLE[n] bit
                                                                         in the CONFIG register.*/
  __OM  uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Disables the MATCH[n] event by clearing the ENABLE[n]
                                                                         bit in the CONFIG register.*/
} NRF_UARTE_TASKS_DMA_RX_Type;                       /*!< Size = 40 (0x028)                                                    */

/* UARTE_TASKS_DMA_RX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                              easyDMA. */

  #define UARTE_TASKS_DMA_RX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                               */

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define UARTE_TASKS_DMA_RX_START_START_Pos (0UL)   /*!< Position of START field.                                             */
  #define UARTE_TASKS_DMA_RX_START_START_Msk (0x1UL << UARTE_TASKS_DMA_RX_START_START_Pos) /*!< Bit mask of START field.       */
  #define UARTE_TASKS_DMA_RX_START_START_Min (0x1UL) /*!< Min enumerator value of START field.                                 */
  #define UARTE_TASKS_DMA_RX_START_START_Max (0x1UL) /*!< Max enumerator value of START field.                                 */
  #define UARTE_TASKS_DMA_RX_START_START_Trigger (0x1UL) /*!< Trigger task                                                     */


/* UARTE_TASKS_DMA_RX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_RX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                                 */

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Pos (0UL)     /*!< Position of STOP field.                                              */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Msk (0x1UL << UARTE_TASKS_DMA_RX_STOP_STOP_Pos) /*!< Bit mask of STOP field.            */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Min (0x1UL)   /*!< Min enumerator value of STOP field.                                  */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Max (0x1UL)   /*!< Max enumerator value of STOP field.                                  */
  #define UARTE_TASKS_DMA_RX_STOP_STOP_Trigger (0x1UL) /*!< Trigger task                                                       */


/* UARTE_TASKS_DMA_RX_ENABLEMATCH: Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                                 */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                                */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                                */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.                */

/* ENABLEMATCH @Bit 0 : Enables the MATCH[n] event by setting the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos (0UL) /*!< Position of ENABLEMATCH field.                             */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk (0x1UL << UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Pos) /*!< Bit mask
                                                                            of ENABLEMATCH field.*/
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Min (0x1UL) /*!< Min enumerator value of ENABLEMATCH field.               */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Max (0x1UL) /*!< Max enumerator value of ENABLEMATCH field.               */
  #define UARTE_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                         */


/* UARTE_TASKS_DMA_RX_DISABLEMATCH: Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                               */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                              */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                              */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.              */

/* DISABLEMATCH @Bit 0 : Disables the MATCH[n] event by clearing the ENABLE[n] bit in the CONFIG register. */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos (0UL) /*!< Position of DISABLEMATCH field.                          */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Msk (0x1UL << UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Pos) /*!< Bit
                                                                            mask of DISABLEMATCH field.*/
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Min (0x1UL) /*!< Min enumerator value of DISABLEMATCH field.            */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Max (0x1UL) /*!< Max enumerator value of DISABLEMATCH field.            */
  #define UARTE_TASKS_DMA_RX_DISABLEMATCH_DISABLEMATCH_Trigger (0x1UL) /*!< Trigger task                                       */



/* ================================================ Struct UARTE_TASKS_DMA_TX ================================================ */
/**
  * @brief TX [UARTE_TASKS_DMA_TX] Peripheral tasks.
  */
typedef struct {
  __OM  uint32_t  START;                             /*!< (@ 0x00000000) Starts operation using easyDMA to load the values. See
                                                                         peripheral description for operation using easyDMA.*/
  __OM  uint32_t  STOP;                              /*!< (@ 0x00000004) Stops operation using easyDMA. This does not trigger an
                                                                         END event.*/
} NRF_UARTE_TASKS_DMA_TX_Type;                       /*!< Size = 8 (0x008)                                                     */

/* UARTE_TASKS_DMA_TX_START: Starts operation using easyDMA to load the values. See peripheral description for operation using
                              easyDMA. */

  #define UARTE_TASKS_DMA_TX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                               */

/* START @Bit 0 : Starts operation using easyDMA to load the values. See peripheral description for operation using easyDMA. */
  #define UARTE_TASKS_DMA_TX_START_START_Pos (0UL)   /*!< Position of START field.                                             */
  #define UARTE_TASKS_DMA_TX_START_START_Msk (0x1UL << UARTE_TASKS_DMA_TX_START_START_Pos) /*!< Bit mask of START field.       */
  #define UARTE_TASKS_DMA_TX_START_START_Min (0x1UL) /*!< Min enumerator value of START field.                                 */
  #define UARTE_TASKS_DMA_TX_START_START_Max (0x1UL) /*!< Max enumerator value of START field.                                 */
  #define UARTE_TASKS_DMA_TX_START_START_Trigger (0x1UL) /*!< Trigger task                                                     */


/* UARTE_TASKS_DMA_TX_STOP: Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_TX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                                 */

/* STOP @Bit 0 : Stops operation using easyDMA. This does not trigger an END event. */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Pos (0UL)     /*!< Position of STOP field.                                              */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Msk (0x1UL << UARTE_TASKS_DMA_TX_STOP_STOP_Pos) /*!< Bit mask of STOP field.            */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Min (0x1UL)   /*!< Min enumerator value of STOP field.                                  */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Max (0x1UL)   /*!< Max enumerator value of STOP field.                                  */
  #define UARTE_TASKS_DMA_TX_STOP_STOP_Trigger (0x1UL) /*!< Trigger task                                                       */



/* ================================================= Struct UARTE_TASKS_DMA ================================================== */
/**
  * @brief TASKS_DMA [UARTE_TASKS_DMA] Peripheral tasks.
  */
typedef struct {
  __OM  NRF_UARTE_TASKS_DMA_RX_Type RX;              /*!< (@ 0x00000000) Peripheral tasks.                                     */
  __OM  NRF_UARTE_TASKS_DMA_TX_Type TX;              /*!< (@ 0x00000028) Peripheral tasks.                                     */
} NRF_UARTE_TASKS_DMA_Type;                          /*!< Size = 48 (0x030)                                                    */


/* ============================================== Struct UARTE_SUBSCRIBE_DMA_RX ============================================== */
/**
  * @brief RX [UARTE_SUBSCRIBE_DMA_RX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;                             /*!< (@ 0x00000000) Subscribe configuration for task START                */
  __IOM uint32_t  STOP;                              /*!< (@ 0x00000004) Subscribe configuration for task STOP                 */
  __IOM uint32_t  ENABLEMATCH[4];                    /*!< (@ 0x00000008) Subscribe configuration for task ENABLEMATCH[n]       */
  __IOM uint32_t  DISABLEMATCH[4];                   /*!< (@ 0x00000018) Subscribe configuration for task DISABLEMATCH[n]      */
} NRF_UARTE_SUBSCRIBE_DMA_RX_Type;                   /*!< Size = 40 (0x028)                                                    */

/* UARTE_SUBSCRIBE_DMA_RX_START: Subscribe configuration for task START */
  #define UARTE_SUBSCRIBE_DMA_RX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define UARTE_SUBSCRIBE_DMA_RX_START_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_START_EN_Pos) /*!< Bit mask of EN field.        */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Disabled (0x0UL) /*!< Disable subscription                                           */
  #define UARTE_SUBSCRIBE_DMA_RX_START_EN_Enabled (0x1UL) /*!< Enable subscription                                             */


/* UARTE_SUBSCRIBE_DMA_RX_STOP: Subscribe configuration for task STOP */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Pos) /*!< Bit mask of EN field.          */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define UARTE_SUBSCRIBE_DMA_RX_STOP_EN_Enabled (0x1UL) /*!< Enable subscription                                              */


/* UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH: Subscribe configuration for task ENABLEMATCH[n] */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxCount (4UL) /*!< Max size of ENABLEMATCH[4] array.                             */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MaxIndex (3UL) /*!< Max index of ENABLEMATCH[4] array.                            */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_MinIndex (0UL) /*!< Min index of ENABLEMATCH[4] array.                            */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of ENABLEMATCH[4] register.            */

/* CHIDX @Bits 0..7 : DPPI channel that task ENABLEMATCH[n] will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                     */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Pos) /*!< Bit mask of
                                                                            CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                 */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                  */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                          */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                             */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                             */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                     */
  #define UARTE_SUBSCRIBE_DMA_RX_ENABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                       */


/* UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH: Subscribe configuration for task DISABLEMATCH[n] */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxCount (4UL) /*!< Max size of DISABLEMATCH[4] array.                           */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MaxIndex (3UL) /*!< Max index of DISABLEMATCH[4] array.                          */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_MinIndex (0UL) /*!< Min index of DISABLEMATCH[4] array.                          */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_ResetValue (0x00000000UL) /*!< Reset value of DISABLEMATCH[4] register.          */

/* CHIDX @Bits 0..7 : DPPI channel that task DISABLEMATCH[n] will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                    */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Pos) /*!< Bit mask
                                                                            of CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                 */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos (31UL) /*!< Position of EN field.                                         */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Pos) /*!< Bit mask of EN
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                            */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                            */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Disabled (0x0UL) /*!< Disable subscription                                    */
  #define UARTE_SUBSCRIBE_DMA_RX_DISABLEMATCH_EN_Enabled (0x1UL) /*!< Enable subscription                                      */



/* ============================================== Struct UARTE_SUBSCRIBE_DMA_TX ============================================== */
/**
  * @brief TX [UARTE_SUBSCRIBE_DMA_TX] Subscribe configuration for tasks
  */
typedef struct {
  __IOM uint32_t  START;                             /*!< (@ 0x00000000) Subscribe configuration for task START                */
  __IOM uint32_t  STOP;                              /*!< (@ 0x00000004) Subscribe configuration for task STOP                 */
} NRF_UARTE_SUBSCRIBE_DMA_TX_Type;                   /*!< Size = 8 (0x008)                                                     */

/* UARTE_SUBSCRIBE_DMA_TX_START: Subscribe configuration for task START */
  #define UARTE_SUBSCRIBE_DMA_TX_START_ResetValue (0x00000000UL) /*!< Reset value of START register.                           */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                           */
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                       */
  #define UARTE_SUBSCRIBE_DMA_TX_START_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                        */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Pos (31UL) /*!< Position of EN field.                                                */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_TX_START_EN_Pos) /*!< Bit mask of EN field.        */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                   */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                   */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Disabled (0x0UL) /*!< Disable subscription                                           */
  #define UARTE_SUBSCRIBE_DMA_TX_START_EN_Enabled (0x1UL) /*!< Enable subscription                                             */


/* UARTE_SUBSCRIBE_DMA_TX_STOP: Subscribe configuration for task STOP */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_ResetValue (0x00000000UL) /*!< Reset value of STOP register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                            */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.*/
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                        */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                         */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Pos (31UL)  /*!< Position of EN field.                                                */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Msk (0x1UL << UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Pos) /*!< Bit mask of EN field.          */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                    */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                    */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Disabled (0x0UL) /*!< Disable subscription                                            */
  #define UARTE_SUBSCRIBE_DMA_TX_STOP_EN_Enabled (0x1UL) /*!< Enable subscription                                              */



/* =============================================== Struct UARTE_SUBSCRIBE_DMA ================================================ */
/**
  * @brief SUBSCRIBE_DMA [UARTE_SUBSCRIBE_DMA] Subscribe configuration for tasks
  */
typedef struct {
  __IOM NRF_UARTE_SUBSCRIBE_DMA_RX_Type RX;          /*!< (@ 0x00000000) Subscribe configuration for tasks                     */
  __IOM NRF_UARTE_SUBSCRIBE_DMA_TX_Type TX;          /*!< (@ 0x00000028) Subscribe configuration for tasks                     */
} NRF_UARTE_SUBSCRIBE_DMA_Type;                      /*!< Size = 48 (0x030)                                                    */


/* =============================================== Struct UARTE_EVENTS_DMA_RX ================================================ */
/**
  * @brief RX [UARTE_EVENTS_DMA_RX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Pattern match is detected on the DMA data bus.        */
} NRF_UARTE_EVENTS_DMA_RX_Type;                      /*!< Size = 28 (0x01C)                                                    */

/* UARTE_EVENTS_DMA_RX_END: Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_RX_END_END_Pos (0UL)      /*!< Position of END field.                                               */
  #define UARTE_EVENTS_DMA_RX_END_END_Msk (0x1UL << UARTE_EVENTS_DMA_RX_END_END_Pos) /*!< Bit mask of END field.               */
  #define UARTE_EVENTS_DMA_RX_END_END_Min (0x0UL)    /*!< Min enumerator value of END field.                                   */
  #define UARTE_EVENTS_DMA_RX_END_END_Max (0x1UL)    /*!< Max enumerator value of END field.                                   */
  #define UARTE_EVENTS_DMA_RX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                            */
  #define UARTE_EVENTS_DMA_RX_END_END_Generated (0x1UL) /*!< Event generated                                                   */


/* UARTE_EVENTS_DMA_RX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                               to be written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_RX_READY_READY_Pos (0UL)  /*!< Position of READY field.                                             */
  #define UARTE_EVENTS_DMA_RX_READY_READY_Msk (0x1UL << UARTE_EVENTS_DMA_RX_READY_READY_Pos) /*!< Bit mask of READY field.     */
  #define UARTE_EVENTS_DMA_RX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                */
  #define UARTE_EVENTS_DMA_RX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                */
  #define UARTE_EVENTS_DMA_RX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define UARTE_EVENTS_DMA_RX_READY_READY_Generated (0x1UL) /*!< Event generated                                               */


/* UARTE_EVENTS_DMA_RX_BUSERROR: An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                     */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Msk (0x1UL << UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                       */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                       */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define UARTE_EVENTS_DMA_RX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                         */


/* UARTE_EVENTS_DMA_RX_MATCH: Pattern match is detected on the DMA data bus. */
  #define UARTE_EVENTS_DMA_RX_MATCH_MaxCount (4UL)   /*!< Max size of MATCH[4] array.                                          */
  #define UARTE_EVENTS_DMA_RX_MATCH_MaxIndex (3UL)   /*!< Max index of MATCH[4] array.                                         */
  #define UARTE_EVENTS_DMA_RX_MATCH_MinIndex (0UL)   /*!< Min index of MATCH[4] array.                                         */
  #define UARTE_EVENTS_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                           */

/* MATCH @Bit 0 : Pattern match is detected on the DMA data bus. */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Pos (0UL)  /*!< Position of MATCH field.                                             */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Msk (0x1UL << UARTE_EVENTS_DMA_RX_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field.     */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Min (0x0UL) /*!< Min enumerator value of MATCH field.                                */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Max (0x1UL) /*!< Max enumerator value of MATCH field.                                */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define UARTE_EVENTS_DMA_RX_MATCH_MATCH_Generated (0x1UL) /*!< Event generated                                               */



/* =============================================== Struct UARTE_EVENTS_DMA_TX ================================================ */
/**
  * @brief TX [UARTE_EVENTS_DMA_TX] Peripheral events.
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Generated after all MAXCNT bytes have been transferred*/
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Generated when EasyDMA has buffered the .PTR and
                                                                         .MAXCNT registers for the channel, allowing them to be
                                                                         written to prepare for the next sequence.*/
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) An error occured during the bus transfer.             */
} NRF_UARTE_EVENTS_DMA_TX_Type;                      /*!< Size = 12 (0x00C)                                                    */

/* UARTE_EVENTS_DMA_TX_END: Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                  */

/* END @Bit 0 : Generated after all MAXCNT bytes have been transferred */
  #define UARTE_EVENTS_DMA_TX_END_END_Pos (0UL)      /*!< Position of END field.                                               */
  #define UARTE_EVENTS_DMA_TX_END_END_Msk (0x1UL << UARTE_EVENTS_DMA_TX_END_END_Pos) /*!< Bit mask of END field.               */
  #define UARTE_EVENTS_DMA_TX_END_END_Min (0x0UL)    /*!< Min enumerator value of END field.                                   */
  #define UARTE_EVENTS_DMA_TX_END_END_Max (0x1UL)    /*!< Max enumerator value of END field.                                   */
  #define UARTE_EVENTS_DMA_TX_END_END_NotGenerated (0x0UL) /*!< Event not generated                                            */
  #define UARTE_EVENTS_DMA_TX_END_END_Generated (0x1UL) /*!< Event generated                                                   */


/* UARTE_EVENTS_DMA_TX_READY: Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them
                               to be written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                              */

/* READY @Bit 0 : Generated when EasyDMA has buffered the .PTR and .MAXCNT registers for the channel, allowing them to be
                  written to prepare for the next sequence. */

  #define UARTE_EVENTS_DMA_TX_READY_READY_Pos (0UL)  /*!< Position of READY field.                                             */
  #define UARTE_EVENTS_DMA_TX_READY_READY_Msk (0x1UL << UARTE_EVENTS_DMA_TX_READY_READY_Pos) /*!< Bit mask of READY field.     */
  #define UARTE_EVENTS_DMA_TX_READY_READY_Min (0x0UL) /*!< Min enumerator value of READY field.                                */
  #define UARTE_EVENTS_DMA_TX_READY_READY_Max (0x1UL) /*!< Max enumerator value of READY field.                                */
  #define UARTE_EVENTS_DMA_TX_READY_READY_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define UARTE_EVENTS_DMA_TX_READY_READY_Generated (0x1UL) /*!< Event generated                                               */


/* UARTE_EVENTS_DMA_TX_BUSERROR: An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                        */

/* BUSERROR @Bit 0 : An error occured during the bus transfer. */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos (0UL) /*!< Position of BUSERROR field.                                     */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Msk (0x1UL << UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Pos) /*!< Bit mask of
                                                                            BUSERROR field.*/
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Min (0x0UL) /*!< Min enumerator value of BUSERROR field.                       */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Max (0x1UL) /*!< Max enumerator value of BUSERROR field.                       */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_NotGenerated (0x0UL) /*!< Event not generated                                  */
  #define UARTE_EVENTS_DMA_TX_BUSERROR_BUSERROR_Generated (0x1UL) /*!< Event generated                                         */



/* ================================================= Struct UARTE_EVENTS_DMA ================================================= */
/**
  * @brief EVENTS_DMA [UARTE_EVENTS_DMA] Peripheral events.
  */
typedef struct {
  __IOM NRF_UARTE_EVENTS_DMA_RX_Type RX;             /*!< (@ 0x00000000) Peripheral events.                                    */
  __IOM NRF_UARTE_EVENTS_DMA_TX_Type TX;             /*!< (@ 0x0000001C) Peripheral events.                                    */
} NRF_UARTE_EVENTS_DMA_Type;                         /*!< Size = 40 (0x028)                                                    */


/* =============================================== Struct UARTE_PUBLISH_DMA_RX =============================================== */
/**
  * @brief RX [UARTE_PUBLISH_DMA_RX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
  __IOM uint32_t  MATCH[4];                          /*!< (@ 0x0000000C) Publish configuration for event MATCH[n]              */
} NRF_UARTE_PUBLISH_DMA_RX_Type;                     /*!< Size = 28 (0x01C)                                                    */

/* UARTE_PUBLISH_DMA_RX_END: Publish configuration for event END */
  #define UARTE_PUBLISH_DMA_RX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define UARTE_PUBLISH_DMA_RX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_END_EN_Pos) /*!< Bit mask of EN field.                */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define UARTE_PUBLISH_DMA_RX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* UARTE_PUBLISH_DMA_RX_READY: Publish configuration for event READY */
  #define UARTE_PUBLISH_DMA_RX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define UARTE_PUBLISH_DMA_RX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_READY_EN_Pos) /*!< Bit mask of EN field.            */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                               */
  #define UARTE_PUBLISH_DMA_RX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                 */


/* UARTE_PUBLISH_DMA_RX_BUSERROR: Publish configuration for event BUSERROR */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                          */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                      */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                       */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                               */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.      */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                  */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                  */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                            */
  #define UARTE_PUBLISH_DMA_RX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                              */


/* UARTE_PUBLISH_DMA_RX_MATCH: Publish configuration for event MATCH[n] */
  #define UARTE_PUBLISH_DMA_RX_MATCH_MaxCount (4UL)  /*!< Max size of MATCH[4] array.                                          */
  #define UARTE_PUBLISH_DMA_RX_MATCH_MaxIndex (3UL)  /*!< Max index of MATCH[4] array.                                         */
  #define UARTE_PUBLISH_DMA_RX_MATCH_MinIndex (0UL)  /*!< Min index of MATCH[4] array.                                         */
  #define UARTE_PUBLISH_DMA_RX_MATCH_ResetValue (0x00000000UL) /*!< Reset value of MATCH[4] register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event MATCH[n] will publish to */
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define UARTE_PUBLISH_DMA_RX_MATCH_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_RX_MATCH_EN_Pos) /*!< Bit mask of EN field.            */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Disabled (0x0UL) /*!< Disable publishing                                               */
  #define UARTE_PUBLISH_DMA_RX_MATCH_EN_Enabled (0x1UL) /*!< Enable publishing                                                 */



/* =============================================== Struct UARTE_PUBLISH_DMA_TX =============================================== */
/**
  * @brief TX [UARTE_PUBLISH_DMA_TX] Publish configuration for events
  */
typedef struct {
  __IOM uint32_t  END;                               /*!< (@ 0x00000000) Publish configuration for event END                   */
  __IOM uint32_t  READY;                             /*!< (@ 0x00000004) Publish configuration for event READY                 */
  __IOM uint32_t  BUSERROR;                          /*!< (@ 0x00000008) Publish configuration for event BUSERROR              */
} NRF_UARTE_PUBLISH_DMA_TX_Type;                     /*!< Size = 12 (0x00C)                                                    */

/* UARTE_PUBLISH_DMA_TX_END: Publish configuration for event END */
  #define UARTE_PUBLISH_DMA_TX_END_ResetValue (0x00000000UL) /*!< Reset value of END register.                                 */

/* CHIDX @Bits 0..7 : DPPI channel that event END will publish to */
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Pos (0UL)   /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_END_CHIDX_Pos) /*!< Bit mask of CHIDX field.      */
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                           */
  #define UARTE_PUBLISH_DMA_TX_END_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                            */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Pos (31UL)     /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_END_EN_Pos) /*!< Bit mask of EN field.                */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Min (0x0UL)    /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Max (0x1UL)    /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Disabled (0x0UL) /*!< Disable publishing                                                 */
  #define UARTE_PUBLISH_DMA_TX_END_EN_Enabled (0x1UL) /*!< Enable publishing                                                   */


/* UARTE_PUBLISH_DMA_TX_READY: Publish configuration for event READY */
  #define UARTE_PUBLISH_DMA_TX_READY_ResetValue (0x00000000UL) /*!< Reset value of READY register.                             */

/* CHIDX @Bits 0..7 : DPPI channel that event READY will publish to */
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define UARTE_PUBLISH_DMA_TX_READY_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_READY_EN_Pos) /*!< Bit mask of EN field.            */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Disabled (0x0UL) /*!< Disable publishing                                               */
  #define UARTE_PUBLISH_DMA_TX_READY_EN_Enabled (0x1UL) /*!< Enable publishing                                                 */


/* UARTE_PUBLISH_DMA_TX_BUSERROR: Publish configuration for event BUSERROR */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_ResetValue (0x00000000UL) /*!< Reset value of BUSERROR register.                       */

/* CHIDX @Bits 0..7 : DPPI channel that event BUSERROR will publish to */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                          */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Pos) /*!< Bit mask of CHIDX
                                                                            field.*/
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                      */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                       */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Pos (31UL) /*!< Position of EN field.                                               */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Msk (0x1UL << UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Pos) /*!< Bit mask of EN field.      */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Min (0x0UL) /*!< Min enumerator value of EN field.                                  */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Max (0x1UL) /*!< Max enumerator value of EN field.                                  */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Disabled (0x0UL) /*!< Disable publishing                                            */
  #define UARTE_PUBLISH_DMA_TX_BUSERROR_EN_Enabled (0x1UL) /*!< Enable publishing                                              */



/* ================================================ Struct UARTE_PUBLISH_DMA ================================================= */
/**
  * @brief PUBLISH_DMA [UARTE_PUBLISH_DMA] Publish configuration for events
  */
typedef struct {
  __IOM NRF_UARTE_PUBLISH_DMA_RX_Type RX;            /*!< (@ 0x00000000) Publish configuration for events                      */
  __IOM NRF_UARTE_PUBLISH_DMA_TX_Type TX;            /*!< (@ 0x0000001C) Publish configuration for events                      */
} NRF_UARTE_PUBLISH_DMA_Type;                        /*!< Size = 40 (0x028)                                                    */


/* ==================================================== Struct UARTE_PSEL ==================================================== */
/**
  * @brief PSEL [UARTE_PSEL] (unspecified)
  */
typedef struct {
  __IOM uint32_t  TXD;                               /*!< (@ 0x00000000) Pin select for TXD signal                             */
  __IOM uint32_t  CTS;                               /*!< (@ 0x00000004) Pin select for CTS signal                             */
  __IOM uint32_t  RXD;                               /*!< (@ 0x00000008) Pin select for RXD signal                             */
  __IOM uint32_t  RTS;                               /*!< (@ 0x0000000C) Pin select for RTS signal                             */
} NRF_UARTE_PSEL_Type;                               /*!< Size = 16 (0x010)                                                    */

/* UARTE_PSEL_TXD: Pin select for TXD signal */
  #define UARTE_PSEL_TXD_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of TXD register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_TXD_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define UARTE_PSEL_TXD_PIN_Msk (0x1FUL << UARTE_PSEL_TXD_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define UARTE_PSEL_TXD_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define UARTE_PSEL_TXD_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_TXD_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define UARTE_PSEL_TXD_PORT_Msk (0x7UL << UARTE_PSEL_TXD_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define UARTE_PSEL_TXD_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define UARTE_PSEL_TXD_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_TXD_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define UARTE_PSEL_TXD_CONNECT_Msk (0x1UL << UARTE_PSEL_TXD_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define UARTE_PSEL_TXD_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_TXD_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_TXD_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define UARTE_PSEL_TXD_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* UARTE_PSEL_CTS: Pin select for CTS signal */
  #define UARTE_PSEL_CTS_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of CTS register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_CTS_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define UARTE_PSEL_CTS_PIN_Msk (0x1FUL << UARTE_PSEL_CTS_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define UARTE_PSEL_CTS_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define UARTE_PSEL_CTS_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_CTS_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define UARTE_PSEL_CTS_PORT_Msk (0x7UL << UARTE_PSEL_CTS_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define UARTE_PSEL_CTS_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define UARTE_PSEL_CTS_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_CTS_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define UARTE_PSEL_CTS_CONNECT_Msk (0x1UL << UARTE_PSEL_CTS_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define UARTE_PSEL_CTS_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_CTS_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_CTS_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define UARTE_PSEL_CTS_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* UARTE_PSEL_RXD: Pin select for RXD signal */
  #define UARTE_PSEL_RXD_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of RXD register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_RXD_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define UARTE_PSEL_RXD_PIN_Msk (0x1FUL << UARTE_PSEL_RXD_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define UARTE_PSEL_RXD_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define UARTE_PSEL_RXD_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_RXD_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define UARTE_PSEL_RXD_PORT_Msk (0x7UL << UARTE_PSEL_RXD_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define UARTE_PSEL_RXD_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define UARTE_PSEL_RXD_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_RXD_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define UARTE_PSEL_RXD_CONNECT_Msk (0x1UL << UARTE_PSEL_RXD_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define UARTE_PSEL_RXD_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_RXD_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_RXD_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define UARTE_PSEL_RXD_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */


/* UARTE_PSEL_RTS: Pin select for RTS signal */
  #define UARTE_PSEL_RTS_ResetValue (0xFFFFFFFFUL)   /*!< Reset value of RTS register.                                         */

/* PIN @Bits 0..4 : Pin number */
  #define UARTE_PSEL_RTS_PIN_Pos (0UL)               /*!< Position of PIN field.                                               */
  #define UARTE_PSEL_RTS_PIN_Msk (0x1FUL << UARTE_PSEL_RTS_PIN_Pos) /*!< Bit mask of PIN field.                                */
  #define UARTE_PSEL_RTS_PIN_Min (0x00UL)            /*!< Min value of PIN field.                                              */
  #define UARTE_PSEL_RTS_PIN_Max (0x1FUL)            /*!< Max size of PIN field.                                               */

/* PORT @Bits 5..7 : Port number */
  #define UARTE_PSEL_RTS_PORT_Pos (5UL)              /*!< Position of PORT field.                                              */
  #define UARTE_PSEL_RTS_PORT_Msk (0x7UL << UARTE_PSEL_RTS_PORT_Pos) /*!< Bit mask of PORT field.                              */
  #define UARTE_PSEL_RTS_PORT_Min (0x0UL)            /*!< Min value of PORT field.                                             */
  #define UARTE_PSEL_RTS_PORT_Max (0x7UL)            /*!< Max size of PORT field.                                              */

/* CONNECT @Bit 31 : Connection */
  #define UARTE_PSEL_RTS_CONNECT_Pos (31UL)          /*!< Position of CONNECT field.                                           */
  #define UARTE_PSEL_RTS_CONNECT_Msk (0x1UL << UARTE_PSEL_RTS_CONNECT_Pos) /*!< Bit mask of CONNECT field.                     */
  #define UARTE_PSEL_RTS_CONNECT_Min (0x0UL)         /*!< Min enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_RTS_CONNECT_Max (0x1UL)         /*!< Max enumerator value of CONNECT field.                               */
  #define UARTE_PSEL_RTS_CONNECT_Disconnected (0x1UL) /*!< Disconnect                                                          */
  #define UARTE_PSEL_RTS_CONNECT_Connected (0x0UL)   /*!< Connect                                                              */



/* ================================================ Struct UARTE_DMA_RX_MATCH ================================================ */
/**
  * @brief MATCH [UARTE_DMA_RX_MATCH] Registers to control the behavior of the pattern matcher engine
  */
typedef struct {
  __IOM uint32_t  CONFIG;                            /*!< (@ 0x00000000) Configure individual match events                     */
  __IOM uint32_t  CANDIDATE[4];                      /*!< (@ 0x00000004) The data to look for - any match will trigger the
                                                                         MATCH[n] event, if enabled.*/
} NRF_UARTE_DMA_RX_MATCH_Type;                       /*!< Size = 20 (0x014)                                                    */

/* UARTE_DMA_RX_MATCH_CONFIG: Configure individual match events */
  #define UARTE_DMA_RX_MATCH_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                             */

/* ENABLE0 @Bit 0 : Enable match filter 0 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Pos (0UL) /*!< Position of ENABLE0 field.                                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Pos) /*!< Bit mask of ENABLE0
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Min (0x0UL) /*!< Min enumerator value of ENABLE0 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Max (0x1UL) /*!< Max enumerator value of ENABLE0 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled (0x0UL) /*!< Match filter disabled                                        */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled (0x1UL) /*!< Match filter enabled                                          */

/* ENABLE1 @Bit 1 : Enable match filter 1 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Pos (1UL) /*!< Position of ENABLE1 field.                                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Pos) /*!< Bit mask of ENABLE1
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Min (0x0UL) /*!< Min enumerator value of ENABLE1 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Max (0x1UL) /*!< Max enumerator value of ENABLE1 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled (0x0UL) /*!< Match filter disabled                                        */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled (0x1UL) /*!< Match filter enabled                                          */

/* ENABLE2 @Bit 2 : Enable match filter 2 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Pos (2UL) /*!< Position of ENABLE2 field.                                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Pos) /*!< Bit mask of ENABLE2
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Min (0x0UL) /*!< Min enumerator value of ENABLE2 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Max (0x1UL) /*!< Max enumerator value of ENABLE2 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled (0x0UL) /*!< Match filter disabled                                        */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled (0x1UL) /*!< Match filter enabled                                          */

/* ENABLE3 @Bit 3 : Enable match filter 3 */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Pos (3UL) /*!< Position of ENABLE3 field.                                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Pos) /*!< Bit mask of ENABLE3
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Min (0x0UL) /*!< Min enumerator value of ENABLE3 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Max (0x1UL) /*!< Max enumerator value of ENABLE3 field.                            */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled (0x0UL) /*!< Match filter disabled                                        */
  #define UARTE_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled (0x1UL) /*!< Match filter enabled                                          */

/* ONESHOT0 @Bit 16 : Configure match filter 0 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos (16UL) /*!< Position of ONESHOT0 field.                                       */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos) /*!< Bit mask of ONESHOT0
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Min (0x0UL) /*!< Min enumerator value of ONESHOT0 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Max (0x1UL) /*!< Max enumerator value of ONESHOT0 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task         */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received  */

/* ONESHOT1 @Bit 17 : Configure match filter 1 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos (17UL) /*!< Position of ONESHOT1 field.                                       */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos) /*!< Bit mask of ONESHOT1
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Min (0x0UL) /*!< Min enumerator value of ONESHOT1 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Max (0x1UL) /*!< Max enumerator value of ONESHOT1 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task         */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received  */

/* ONESHOT2 @Bit 18 : Configure match filter 2 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos (18UL) /*!< Position of ONESHOT2 field.                                       */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos) /*!< Bit mask of ONESHOT2
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Min (0x0UL) /*!< Min enumerator value of ONESHOT2 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Max (0x1UL) /*!< Max enumerator value of ONESHOT2 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task         */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received  */

/* ONESHOT3 @Bit 19 : Configure match filter 3 as one-shot or continous */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos (19UL) /*!< Position of ONESHOT3 field.                                       */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk (0x1UL << UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos) /*!< Bit mask of ONESHOT3
                                                                            field.*/
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Min (0x0UL) /*!< Min enumerator value of ONESHOT3 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Max (0x1UL) /*!< Max enumerator value of ONESHOT3 field.                          */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Continuous (0x0UL) /*!< Match filter stays enabled until disabled by task         */
  #define UARTE_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot (0x1UL) /*!< Match filter stays enabled until next data word is received  */


/* UARTE_DMA_RX_MATCH_CANDIDATE: The data to look for - any match will trigger the MATCH[n] event, if enabled. */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MaxCount (4UL) /*!< Max size of CANDIDATE[4] array.                                     */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MaxIndex (3UL) /*!< Max index of CANDIDATE[4] array.                                    */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_MinIndex (0UL) /*!< Min index of CANDIDATE[4] array.                                    */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_ResetValue (0x00000000UL) /*!< Reset value of CANDIDATE[4] register.                    */

/* DATA @Bits 0..7 : Data to look for */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Pos (0UL) /*!< Position of DATA field.                                             */
  #define UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Msk (0xFFUL << UARTE_DMA_RX_MATCH_CANDIDATE_DATA_Pos) /*!< Bit mask of DATA field. */



/* =================================================== Struct UARTE_DMA_RX =================================================== */
/**
  * @brief RX [UARTE_DMA_RX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
  __IOM NRF_UARTE_DMA_RX_MATCH_Type MATCH;           /*!< (@ 0x00000024) Registers to control the behavior of the pattern
                                                                         matcher engine*/
} NRF_UARTE_DMA_RX_Type;                             /*!< Size = 56 (0x038)                                                    */

/* UARTE_DMA_RX_PTR: RAM buffer start address */
  #define UARTE_DMA_RX_PTR_ResetValue (0x20000000UL) /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define UARTE_DMA_RX_PTR_PTR_Pos (0UL)             /*!< Position of PTR field.                                               */
  #define UARTE_DMA_RX_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                      */


/* UARTE_DMA_RX_MAXCNT: Maximum number of bytes in channel buffer */
  #define UARTE_DMA_RX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                   */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Pos (0UL)       /*!< Position of MAXCNT field.                                            */
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_DMA_RX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.           */
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Min (0x0001UL)  /*!< Min value of MAXCNT field.                                           */
  #define UARTE_DMA_RX_MAXCNT_MAXCNT_Max (0xFFFFUL)  /*!< Max size of MAXCNT field.                                            */


/* UARTE_DMA_RX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after
                         each MATCH event. */

  #define UARTE_DMA_RX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                   */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Pos (0UL)       /*!< Position of AMOUNT field.                                            */
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_DMA_RX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.           */
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Min (0x0001UL)  /*!< Min value of AMOUNT field.                                           */
  #define UARTE_DMA_RX_AMOUNT_AMOUNT_Max (0xFFFFUL)  /*!< Max size of AMOUNT field.                                            */


/* UARTE_DMA_RX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.         */

/* ENABLE @Bit 0 : (unspecified) */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                     */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                       */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                       */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                */
  #define UARTE_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                  */


/* UARTE_DMA_RX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                 */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                       */
  #define UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << UARTE_DMA_RX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* =================================================== Struct UARTE_DMA_TX =================================================== */
/**
  * @brief TX [UARTE_DMA_TX] (unspecified)
  */
typedef struct {
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  PTR;                               /*!< (@ 0x00000004) RAM buffer start address                              */
  __IOM uint32_t  MAXCNT;                            /*!< (@ 0x00000008) Maximum number of bytes in channel buffer             */
  __IM  uint32_t  AMOUNT;                            /*!< (@ 0x0000000C) Number of bytes transferred in the last transaction,
                                                                         updated after the END event. Also updated after each
                                                                         MATCH event.*/
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  TERMINATEONBUSERROR;               /*!< (@ 0x0000001C) Terminate the transaction if a BUSERROR event is
                                                                         detected.*/
  __IM  uint32_t  BUSERRORADDRESS;                   /*!< (@ 0x00000020) Address of transaction that generated the last BUSERROR
                                                                         event.*/
} NRF_UARTE_DMA_TX_Type;                             /*!< Size = 36 (0x024)                                                    */

/* UARTE_DMA_TX_PTR: RAM buffer start address */
  #define UARTE_DMA_TX_PTR_ResetValue (0x20000000UL) /*!< Reset value of PTR register.                                         */

/* PTR @Bits 0..31 : RAM buffer start address for this EasyDMA channel. This address is a word aligned Data RAM address. */
  #define UARTE_DMA_TX_PTR_PTR_Pos (0UL)             /*!< Position of PTR field.                                               */
  #define UARTE_DMA_TX_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_DMA_TX_PTR_PTR_Pos) /*!< Bit mask of PTR field.                      */


/* UARTE_DMA_TX_MAXCNT: Maximum number of bytes in channel buffer */
  #define UARTE_DMA_TX_MAXCNT_ResetValue (0x00000000UL) /*!< Reset value of MAXCNT register.                                   */

/* MAXCNT @Bits 0..15 : Maximum number of bytes in channel buffer */
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Pos (0UL)       /*!< Position of MAXCNT field.                                            */
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_DMA_TX_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field.           */
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Min (0x0001UL)  /*!< Min value of MAXCNT field.                                           */
  #define UARTE_DMA_TX_MAXCNT_MAXCNT_Max (0xFFFFUL)  /*!< Max size of MAXCNT field.                                            */


/* UARTE_DMA_TX_AMOUNT: Number of bytes transferred in the last transaction, updated after the END event. Also updated after
                         each MATCH event. */

  #define UARTE_DMA_TX_AMOUNT_ResetValue (0x00000000UL) /*!< Reset value of AMOUNT register.                                   */

/* AMOUNT @Bits 0..15 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Pos (0UL)       /*!< Position of AMOUNT field.                                            */
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_DMA_TX_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field.           */
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Min (0x0001UL)  /*!< Min value of AMOUNT field.                                           */
  #define UARTE_DMA_TX_AMOUNT_AMOUNT_Max (0xFFFFUL)  /*!< Max size of AMOUNT field.                                            */


/* UARTE_DMA_TX_TERMINATEONBUSERROR: Terminate the transaction if a BUSERROR event is detected. */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ResetValue (0x00000000UL) /*!< Reset value of TERMINATEONBUSERROR register.         */

/* ENABLE @Bit 0 : (unspecified) */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos (0UL) /*!< Position of ENABLE field.                                     */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk (0x1UL << UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos) /*!< Bit mask of
                                                                            ENABLE field.*/
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Min (0x0UL) /*!< Min enumerator value of ENABLE field.                       */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Max (0x1UL) /*!< Max enumerator value of ENABLE field.                       */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Disabled (0x0UL) /*!< Disable                                                */
  #define UARTE_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled (0x1UL) /*!< Enable                                                  */


/* UARTE_DMA_TX_BUSERRORADDRESS: Address of transaction that generated the last BUSERROR event. */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ResetValue (0x00000000UL) /*!< Reset value of BUSERRORADDRESS register.                 */

/* ADDRESS @Bits 0..31 : (unspecified) */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field.                                       */
  #define UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Msk (0xFFFFFFFFUL << UARTE_DMA_TX_BUSERRORADDRESS_ADDRESS_Pos) /*!< Bit mask of
                                                                            ADDRESS field.*/



/* ==================================================== Struct UARTE_DMA ===================================================== */
/**
  * @brief DMA [UARTE_DMA] (unspecified)
  */
typedef struct {
  __IOM NRF_UARTE_DMA_RX_Type RX;                    /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_UARTE_DMA_TX_Type TX;                    /*!< (@ 0x00000038) (unspecified)                                         */
} NRF_UARTE_DMA_Type;                                /*!< Size = 92 (0x05C)                                                    */

/* ====================================================== Struct UARTE ======================================================= */
/**
  * @brief UART with EasyDMA
  */
  typedef struct {                                   /*!< UARTE Structure                                                      */
    __IM uint32_t RESERVED[7];
    __OM uint32_t TASKS_FLUSHRX;                     /*!< (@ 0x0000001C) Flush RX FIFO into RX buffer                          */
    __IM uint32_t RESERVED1[2];
    __OM NRF_UARTE_TASKS_DMA_Type TASKS_DMA;         /*!< (@ 0x00000028) Peripheral tasks.                                     */
    __IM uint32_t RESERVED2[17];
    __IOM uint32_t SUBSCRIBE_FLUSHRX;                /*!< (@ 0x0000009C) Subscribe configuration for task FLUSHRX              */
    __IM uint32_t RESERVED3[2];
    __IOM NRF_UARTE_SUBSCRIBE_DMA_Type SUBSCRIBE_DMA; /*!< (@ 0x000000A8) Subscribe configuration for tasks                    */
    __IM uint32_t RESERVED4[10];
    __IOM uint32_t EVENTS_CTS;                       /*!< (@ 0x00000100) CTS is activated (set low). Clear To Send.            */
    __IOM uint32_t EVENTS_NCTS;                      /*!< (@ 0x00000104) CTS is deactivated (set high). Not Clear To Send.     */
    __IM uint32_t RESERVED5;
    __IOM uint32_t EVENTS_TXDRDY;                    /*!< (@ 0x0000010C) Data sent from TXD                                    */
    __IOM uint32_t EVENTS_RXDRDY;                    /*!< (@ 0x00000110) Data received in RXD (but potentially not yet
                                                                         transferred to Data RAM)*/
    __IOM uint32_t EVENTS_ERROR;                     /*!< (@ 0x00000114) Error detected                                        */
    __IM uint32_t RESERVED6[3];
    __IOM uint32_t EVENTS_RXTO;                      /*!< (@ 0x00000124) Receiver timeout                                      */
    __IM uint32_t RESERVED7[2];
    __IOM uint32_t EVENTS_TXSTOPPED;                 /*!< (@ 0x00000130) Transmitter stopped                                   */
    __IM uint32_t RESERVED8[6];
    __IOM NRF_UARTE_EVENTS_DMA_Type EVENTS_DMA;      /*!< (@ 0x0000014C) Peripheral events.                                    */
    __IOM uint32_t EVENTS_FRAMETIMEOUT;              /*!< (@ 0x00000174) Timed out due to bus being idle while receiving data. */
    __IM uint32_t RESERVED9[2];
    __IOM uint32_t PUBLISH_CTS;                      /*!< (@ 0x00000180) Publish configuration for event CTS                   */
    __IOM uint32_t PUBLISH_NCTS;                     /*!< (@ 0x00000184) Publish configuration for event NCTS                  */
    __IM uint32_t RESERVED10;
    __IOM uint32_t PUBLISH_TXDRDY;                   /*!< (@ 0x0000018C) Publish configuration for event TXDRDY                */
    __IOM uint32_t PUBLISH_RXDRDY;                   /*!< (@ 0x00000190) Publish configuration for event RXDRDY                */
    __IOM uint32_t PUBLISH_ERROR;                    /*!< (@ 0x00000194) Publish configuration for event ERROR                 */
    __IM uint32_t RESERVED11[3];
    __IOM uint32_t PUBLISH_RXTO;                     /*!< (@ 0x000001A4) Publish configuration for event RXTO                  */
    __IM uint32_t RESERVED12[2];
    __IOM uint32_t PUBLISH_TXSTOPPED;                /*!< (@ 0x000001B0) Publish configuration for event TXSTOPPED             */
    __IM uint32_t RESERVED13[6];
    __IOM NRF_UARTE_PUBLISH_DMA_Type PUBLISH_DMA;    /*!< (@ 0x000001CC) Publish configuration for events                      */
    __IOM uint32_t PUBLISH_FRAMETIMEOUT;             /*!< (@ 0x000001F4) Publish configuration for event FRAMETIMEOUT          */
    __IM uint32_t RESERVED14[2];
    __IOM uint32_t SHORTS;                           /*!< (@ 0x00000200) Shortcuts between local events and tasks              */
    __IM uint32_t RESERVED15[63];
    __IOM uint32_t INTEN;                            /*!< (@ 0x00000300) Enable or disable interrupt                           */
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED16[93];
    __IOM uint32_t ERRORSRC;                         /*!< (@ 0x00000480) Error source                                          */
    __IM uint32_t RESERVED17[31];
    __IOM uint32_t ENABLE;                           /*!< (@ 0x00000500) Enable UART                                           */
    __IM uint32_t RESERVED18[8];
    __IOM uint32_t BAUDRATE;                         /*!< (@ 0x00000524) Baud rate. Accuracy depends on the HFCLK source
                                                                         selected.*/
    __IM uint32_t RESERVED19[17];
    __IOM uint32_t CONFIG;                           /*!< (@ 0x0000056C) Configuration of parity, hardware flow control,
                                                                         framesize, and packet timeout.*/
    __IM uint32_t RESERVED20;
    __IOM uint32_t ADDRESS;                          /*!< (@ 0x00000574) Set the address of the UARTE for RX when used in 9 bit
                                                                         data frame mode.*/
    __IOM uint32_t FRAMETIMEOUT;                     /*!< (@ 0x00000578) Set the number of UARTE bits to count before triggering
                                                                         packet timeout.*/
    __IM uint32_t RESERVED21[34];
    __IOM NRF_UARTE_PSEL_Type PSEL;                  /*!< (@ 0x00000604) (unspecified)                                         */
    __IM uint32_t RESERVED22[59];
    __IOM NRF_UARTE_DMA_Type DMA;                    /*!< (@ 0x00000700) (unspecified)                                         */
  } NRF_UARTE_Type;                                  /*!< Size = 1884 (0x75C)                                                  */

/* UARTE_TASKS_FLUSHRX: Flush RX FIFO into RX buffer */
  #define UARTE_TASKS_FLUSHRX_ResetValue (0x00000000UL) /*!< Reset value of TASKS_FLUSHRX register.                            */

/* TASKS_FLUSHRX @Bit 0 : Flush RX FIFO into RX buffer */
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos (0UL) /*!< Position of TASKS_FLUSHRX field.                                    */
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Msk (0x1UL << UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos) /*!< Bit mask of TASKS_FLUSHRX
                                                                            field.*/
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Min (0x1UL) /*!< Min enumerator value of TASKS_FLUSHRX field.                      */
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Max (0x1UL) /*!< Max enumerator value of TASKS_FLUSHRX field.                      */
  #define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Trigger (0x1UL) /*!< Trigger task                                                  */


/* UARTE_SUBSCRIBE_FLUSHRX: Subscribe configuration for task FLUSHRX */
  #define UARTE_SUBSCRIBE_FLUSHRX_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_FLUSHRX register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that task FLUSHRX will subscribe to */
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_FLUSHRX_EN_Pos) /*!< Bit mask of EN field.                  */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Disabled (0x0UL) /*!< Disable subscription                                                */
  #define UARTE_SUBSCRIBE_FLUSHRX_EN_Enabled (0x1UL) /*!< Enable subscription                                                  */


/* UARTE_EVENTS_CTS: CTS is activated (set low). Clear To Send. */
  #define UARTE_EVENTS_CTS_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_CTS register.                                  */

/* EVENTS_CTS @Bit 0 : CTS is activated (set low). Clear To Send. */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Pos (0UL)      /*!< Position of EVENTS_CTS field.                                        */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Msk (0x1UL << UARTE_EVENTS_CTS_EVENTS_CTS_Pos) /*!< Bit mask of EVENTS_CTS field.        */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Min (0x0UL)    /*!< Min enumerator value of EVENTS_CTS field.                            */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Max (0x1UL)    /*!< Max enumerator value of EVENTS_CTS field.                            */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_NotGenerated (0x0UL) /*!< Event not generated                                            */
  #define UARTE_EVENTS_CTS_EVENTS_CTS_Generated (0x1UL) /*!< Event generated                                                   */


/* UARTE_EVENTS_NCTS: CTS is deactivated (set high). Not Clear To Send. */
  #define UARTE_EVENTS_NCTS_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_NCTS register.                                */

/* EVENTS_NCTS @Bit 0 : CTS is deactivated (set high). Not Clear To Send. */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos (0UL)    /*!< Position of EVENTS_NCTS field.                                       */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Msk (0x1UL << UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos) /*!< Bit mask of EVENTS_NCTS field.   */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Min (0x0UL)  /*!< Min enumerator value of EVENTS_NCTS field.                           */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Max (0x1UL)  /*!< Max enumerator value of EVENTS_NCTS field.                           */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define UARTE_EVENTS_NCTS_EVENTS_NCTS_Generated (0x1UL) /*!< Event generated                                                 */


/* UARTE_EVENTS_TXDRDY: Data sent from TXD */
  #define UARTE_EVENTS_TXDRDY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TXDRDY register.                            */

/* EVENTS_TXDRDY @Bit 0 : Data sent from TXD */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos (0UL) /*!< Position of EVENTS_TXDRDY field.                                    */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk (0x1UL << UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos) /*!< Bit mask of EVENTS_TXDRDY
                                                                            field.*/
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Min (0x0UL) /*!< Min enumerator value of EVENTS_TXDRDY field.                      */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Max (0x1UL) /*!< Max enumerator value of EVENTS_TXDRDY field.                      */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated (0x1UL) /*!< Event generated                                             */


/* UARTE_EVENTS_RXDRDY: Data received in RXD (but potentially not yet transferred to Data RAM) */
  #define UARTE_EVENTS_RXDRDY_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RXDRDY register.                            */

/* EVENTS_RXDRDY @Bit 0 : Data received in RXD (but potentially not yet transferred to Data RAM) */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos (0UL) /*!< Position of EVENTS_RXDRDY field.                                    */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk (0x1UL << UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos) /*!< Bit mask of EVENTS_RXDRDY
                                                                            field.*/
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Min (0x0UL) /*!< Min enumerator value of EVENTS_RXDRDY field.                      */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Max (0x1UL) /*!< Max enumerator value of EVENTS_RXDRDY field.                      */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated (0x1UL) /*!< Event generated                                             */


/* UARTE_EVENTS_ERROR: Error detected */
  #define UARTE_EVENTS_ERROR_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_ERROR register.                              */

/* EVENTS_ERROR @Bit 0 : Error detected */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL)  /*!< Position of EVENTS_ERROR field.                                      */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR
                                                                            field.*/
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Min (0x0UL) /*!< Min enumerator value of EVENTS_ERROR field.                         */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Max (0x1UL) /*!< Max enumerator value of EVENTS_ERROR field.                         */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0x0UL) /*!< Event not generated                                        */
  #define UARTE_EVENTS_ERROR_EVENTS_ERROR_Generated (0x1UL) /*!< Event generated                                               */


/* UARTE_EVENTS_RXTO: Receiver timeout */
  #define UARTE_EVENTS_RXTO_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_RXTO register.                                */

/* EVENTS_RXTO @Bit 0 : Receiver timeout */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos (0UL)    /*!< Position of EVENTS_RXTO field.                                       */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Msk (0x1UL << UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos) /*!< Bit mask of EVENTS_RXTO field.   */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Min (0x0UL)  /*!< Min enumerator value of EVENTS_RXTO field.                           */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Max (0x1UL)  /*!< Max enumerator value of EVENTS_RXTO field.                           */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_NotGenerated (0x0UL) /*!< Event not generated                                          */
  #define UARTE_EVENTS_RXTO_EVENTS_RXTO_Generated (0x1UL) /*!< Event generated                                                 */


/* UARTE_EVENTS_TXSTOPPED: Transmitter stopped */
  #define UARTE_EVENTS_TXSTOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TXSTOPPED register.                      */

/* EVENTS_TXSTOPPED @Bit 0 : Transmitter stopped */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos (0UL) /*!< Position of EVENTS_TXSTOPPED field.                           */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Msk (0x1UL << UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos) /*!< Bit mask of
                                                                            EVENTS_TXSTOPPED field.*/
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_TXSTOPPED field.             */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_TXSTOPPED field.             */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_NotGenerated (0x0UL) /*!< Event not generated                                */
  #define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Generated (0x1UL) /*!< Event generated                                       */


/* UARTE_EVENTS_FRAMETIMEOUT: Timed out due to bus being idle while receiving data. */
  #define UARTE_EVENTS_FRAMETIMEOUT_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_FRAMETIMEOUT register.                */

/* EVENTS_FRAMETIMEOUT @Bit 0 : Timed out due to bus being idle while receiving data. */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Pos (0UL) /*!< Position of EVENTS_FRAMETIMEOUT field.                  */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Msk (0x1UL << UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Pos) /*!<
                                                                            Bit mask of EVENTS_FRAMETIMEOUT field.*/
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Min (0x0UL) /*!< Min enumerator value of EVENTS_FRAMETIMEOUT field.    */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Max (0x1UL) /*!< Max enumerator value of EVENTS_FRAMETIMEOUT field.    */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_NotGenerated (0x0UL) /*!< Event not generated                          */
  #define UARTE_EVENTS_FRAMETIMEOUT_EVENTS_FRAMETIMEOUT_Generated (0x1UL) /*!< Event generated                                 */


/* UARTE_PUBLISH_CTS: Publish configuration for event CTS */
  #define UARTE_PUBLISH_CTS_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_CTS register.                                */

/* CHIDX @Bits 0..7 : DPPI channel that event CTS will publish to */
  #define UARTE_PUBLISH_CTS_CHIDX_Pos (0UL)          /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_CTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_CTS_CHIDX_Pos) /*!< Bit mask of CHIDX field.                    */
  #define UARTE_PUBLISH_CTS_CHIDX_Min (0x00UL)       /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_CTS_CHIDX_Max (0xFFUL)       /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_CTS_EN_Pos (31UL)            /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_CTS_EN_Msk (0x1UL << UARTE_PUBLISH_CTS_EN_Pos) /*!< Bit mask of EN field.                              */
  #define UARTE_PUBLISH_CTS_EN_Min (0x0UL)           /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_CTS_EN_Max (0x1UL)           /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_CTS_EN_Disabled (0x0UL)      /*!< Disable publishing                                                   */
  #define UARTE_PUBLISH_CTS_EN_Enabled (0x1UL)       /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_NCTS: Publish configuration for event NCTS */
  #define UARTE_PUBLISH_NCTS_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_NCTS register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event NCTS will publish to */
  #define UARTE_PUBLISH_NCTS_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_NCTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_NCTS_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define UARTE_PUBLISH_NCTS_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_NCTS_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_NCTS_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_NCTS_EN_Msk (0x1UL << UARTE_PUBLISH_NCTS_EN_Pos) /*!< Bit mask of EN field.                            */
  #define UARTE_PUBLISH_NCTS_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_NCTS_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_NCTS_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define UARTE_PUBLISH_NCTS_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_TXDRDY: Publish configuration for event TXDRDY */
  #define UARTE_PUBLISH_TXDRDY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_TXDRDY register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event TXDRDY will publish to */
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXDRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_TXDRDY_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_TXDRDY_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_TXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_TXDRDY_EN_Pos) /*!< Bit mask of EN field.                        */
  #define UARTE_PUBLISH_TXDRDY_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_TXDRDY_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_TXDRDY_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define UARTE_PUBLISH_TXDRDY_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_RXDRDY: Publish configuration for event RXDRDY */
  #define UARTE_PUBLISH_RXDRDY_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RXDRDY register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event RXDRDY will publish to */
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Pos (0UL)       /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXDRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field.              */
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Min (0x00UL)    /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_RXDRDY_CHIDX_Max (0xFFUL)    /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_RXDRDY_EN_Pos (31UL)         /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_RXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_RXDRDY_EN_Pos) /*!< Bit mask of EN field.                        */
  #define UARTE_PUBLISH_RXDRDY_EN_Min (0x0UL)        /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_RXDRDY_EN_Max (0x1UL)        /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_RXDRDY_EN_Disabled (0x0UL)   /*!< Disable publishing                                                   */
  #define UARTE_PUBLISH_RXDRDY_EN_Enabled (0x1UL)    /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_ERROR: Publish configuration for event ERROR */
  #define UARTE_PUBLISH_ERROR_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_ERROR register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that event ERROR will publish to */
  #define UARTE_PUBLISH_ERROR_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define UARTE_PUBLISH_ERROR_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_ERROR_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_ERROR_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_ERROR_EN_Msk (0x1UL << UARTE_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field.                          */
  #define UARTE_PUBLISH_ERROR_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_ERROR_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_ERROR_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define UARTE_PUBLISH_ERROR_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_RXTO: Publish configuration for event RXTO */
  #define UARTE_PUBLISH_RXTO_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_RXTO register.                              */

/* CHIDX @Bits 0..7 : DPPI channel that event RXTO will publish to */
  #define UARTE_PUBLISH_RXTO_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_RXTO_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXTO_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define UARTE_PUBLISH_RXTO_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_RXTO_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_RXTO_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_RXTO_EN_Msk (0x1UL << UARTE_PUBLISH_RXTO_EN_Pos) /*!< Bit mask of EN field.                            */
  #define UARTE_PUBLISH_RXTO_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_RXTO_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_RXTO_EN_Disabled (0x0UL)     /*!< Disable publishing                                                   */
  #define UARTE_PUBLISH_RXTO_EN_Enabled (0x1UL)      /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_TXSTOPPED: Publish configuration for event TXSTOPPED */
  #define UARTE_PUBLISH_TXSTOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_TXSTOPPED register.                    */

/* CHIDX @Bits 0..7 : DPPI channel that event TXSTOPPED will publish to */
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos (0UL)    /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.        */
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                            */
  #define UARTE_PUBLISH_TXSTOPPED_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Pos (31UL)      /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Msk (0x1UL << UARTE_PUBLISH_TXSTOPPED_EN_Pos) /*!< Bit mask of EN field.                  */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Min (0x0UL)     /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Max (0x1UL)     /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Disabled (0x0UL) /*!< Disable publishing                                                  */
  #define UARTE_PUBLISH_TXSTOPPED_EN_Enabled (0x1UL) /*!< Enable publishing                                                    */


/* UARTE_PUBLISH_FRAMETIMEOUT: Publish configuration for event FRAMETIMEOUT */
  #define UARTE_PUBLISH_FRAMETIMEOUT_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_FRAMETIMEOUT register.              */

/* CHIDX @Bits 0..7 : DPPI channel that event FRAMETIMEOUT will publish to */
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field.                                             */
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field.  */
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Min (0x00UL) /*!< Min value of CHIDX field.                                         */
  #define UARTE_PUBLISH_FRAMETIMEOUT_CHIDX_Max (0xFFUL) /*!< Max size of CHIDX field.                                          */

/* EN @Bit 31 : (unspecified) */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Pos (31UL)   /*!< Position of EN field.                                                */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Msk (0x1UL << UARTE_PUBLISH_FRAMETIMEOUT_EN_Pos) /*!< Bit mask of EN field.            */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Min (0x0UL)  /*!< Min enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Max (0x1UL)  /*!< Max enumerator value of EN field.                                    */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Disabled (0x0UL) /*!< Disable publishing                                               */
  #define UARTE_PUBLISH_FRAMETIMEOUT_EN_Enabled (0x1UL) /*!< Enable publishing                                                 */


/* UARTE_SHORTS: Shortcuts between local events and tasks */
  #define UARTE_SHORTS_ResetValue (0x00000000UL)     /*!< Reset value of SHORTS register.                                      */

/* DMA_RX_END_DMA_RX_START @Bit 5 : Shortcut between event DMA.RX.END and task DMA.RX.START */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Pos (5UL) /*!< Position of DMA_RX_END_DMA_RX_START field.                       */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Msk (0x1UL << UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Pos) /*!< Bit mask of
                                                                            DMA_RX_END_DMA_RX_START field.*/
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Min (0x0UL) /*!< Min enumerator value of DMA_RX_END_DMA_RX_START field.         */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Max (0x1UL) /*!< Max enumerator value of DMA_RX_END_DMA_RX_START field.         */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Disabled (0x0UL) /*!< Disable shortcut                                          */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Enabled (0x1UL) /*!< Enable shortcut                                            */

/* DMA_RX_END_DMA_RX_STOP @Bit 6 : Shortcut between event DMA.RX.END and task DMA.RX.STOP */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Pos (6UL) /*!< Position of DMA_RX_END_DMA_RX_STOP field.                         */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Msk (0x1UL << UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Pos) /*!< Bit mask of
                                                                            DMA_RX_END_DMA_RX_STOP field.*/
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Min (0x0UL) /*!< Min enumerator value of DMA_RX_END_DMA_RX_STOP field.           */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Max (0x1UL) /*!< Max enumerator value of DMA_RX_END_DMA_RX_STOP field.           */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Disabled (0x0UL) /*!< Disable shortcut                                           */
  #define UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Enabled (0x1UL) /*!< Enable shortcut                                             */

/* DMA_TX_END_DMA_TX_STOP @Bit 18 : Shortcut between event DMA.TX.END and task DMA.TX.STOP */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Pos (18UL) /*!< Position of DMA_TX_END_DMA_TX_STOP field.                        */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Msk (0x1UL << UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Pos) /*!< Bit mask of
                                                                            DMA_TX_END_DMA_TX_STOP field.*/
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Min (0x0UL) /*!< Min enumerator value of DMA_TX_END_DMA_TX_STOP field.           */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Max (0x1UL) /*!< Max enumerator value of DMA_TX_END_DMA_TX_STOP field.           */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Disabled (0x0UL) /*!< Disable shortcut                                           */
  #define UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Enabled (0x1UL) /*!< Enable shortcut                                             */

/* DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 @Bit 21 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[1] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos (21UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.  */
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 @Bit 22 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[2] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos (22UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.  */
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 @Bit 23 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[3] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos (23UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.  */
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 @Bit 24 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.ENABLEMATCH[0] Allows
                                               daisy-chaining match events. */

  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos (24UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.  */
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Pos) /*!<
                                                                            Bit mask of DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                          DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                                */
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                  */

/* DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 @Bit 25 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos (25UL) /*!< Position of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Disabled (0x0UL) /*!< Disable shortcut                               */
  #define UARTE_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Enabled (0x1UL) /*!< Enable shortcut                                 */

/* DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 @Bit 26 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos (26UL) /*!< Position of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Disabled (0x0UL) /*!< Disable shortcut                               */
  #define UARTE_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Enabled (0x1UL) /*!< Enable shortcut                                 */

/* DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 @Bit 27 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos (27UL) /*!< Position of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Disabled (0x0UL) /*!< Disable shortcut                               */
  #define UARTE_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Enabled (0x1UL) /*!< Enable shortcut                                 */

/* DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 @Bit 28 : Shortcut between event DMA.RX.MATCH[n] and task DMA.RX.DISABLEMATCH[n] */
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos (28UL) /*!< Position of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk (0x1UL << UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Pos)
                                                                            /*!< Bit mask of DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3
                                                                            field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Min (0x0UL) /*!< Min enumerator value of
                                                                           DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Max (0x1UL) /*!< Max enumerator value of
                                                                           DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3 field.*/
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Disabled (0x0UL) /*!< Disable shortcut                               */
  #define UARTE_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Enabled (0x1UL) /*!< Enable shortcut                                 */

/* FRAMETIMEOUT_DMA_RX_STOP @Bit 29 : Shortcut between event FRAMETIMEOUT and task DMA.RX.STOP */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Pos (29UL) /*!< Position of FRAMETIMEOUT_DMA_RX_STOP field.                    */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Msk (0x1UL << UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Pos) /*!< Bit mask of
                                                                            FRAMETIMEOUT_DMA_RX_STOP field.*/
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Min (0x0UL) /*!< Min enumerator value of FRAMETIMEOUT_DMA_RX_STOP field.       */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Max (0x1UL) /*!< Max enumerator value of FRAMETIMEOUT_DMA_RX_STOP field.       */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Disabled (0x0UL) /*!< Disable shortcut                                         */
  #define UARTE_SHORTS_FRAMETIMEOUT_DMA_RX_STOP_Enabled (0x1UL) /*!< Enable shortcut                                           */


/* UARTE_INTEN: Enable or disable interrupt */
  #define UARTE_INTEN_ResetValue (0x00000000UL)      /*!< Reset value of INTEN register.                                       */

/* CTS @Bit 0 : Enable or disable interrupt for event CTS */
  #define UARTE_INTEN_CTS_Pos (0UL)                  /*!< Position of CTS field.                                               */
  #define UARTE_INTEN_CTS_Msk (0x1UL << UARTE_INTEN_CTS_Pos) /*!< Bit mask of CTS field.                                       */
  #define UARTE_INTEN_CTS_Min (0x0UL)                /*!< Min enumerator value of CTS field.                                   */
  #define UARTE_INTEN_CTS_Max (0x1UL)                /*!< Max enumerator value of CTS field.                                   */
  #define UARTE_INTEN_CTS_Disabled (0x0UL)           /*!< Disable                                                              */
  #define UARTE_INTEN_CTS_Enabled (0x1UL)            /*!< Enable                                                               */

/* NCTS @Bit 1 : Enable or disable interrupt for event NCTS */
  #define UARTE_INTEN_NCTS_Pos (1UL)                 /*!< Position of NCTS field.                                              */
  #define UARTE_INTEN_NCTS_Msk (0x1UL << UARTE_INTEN_NCTS_Pos) /*!< Bit mask of NCTS field.                                    */
  #define UARTE_INTEN_NCTS_Min (0x0UL)               /*!< Min enumerator value of NCTS field.                                  */
  #define UARTE_INTEN_NCTS_Max (0x1UL)               /*!< Max enumerator value of NCTS field.                                  */
  #define UARTE_INTEN_NCTS_Disabled (0x0UL)          /*!< Disable                                                              */
  #define UARTE_INTEN_NCTS_Enabled (0x1UL)           /*!< Enable                                                               */

/* TXDRDY @Bit 3 : Enable or disable interrupt for event TXDRDY */
  #define UARTE_INTEN_TXDRDY_Pos (3UL)               /*!< Position of TXDRDY field.                                            */
  #define UARTE_INTEN_TXDRDY_Msk (0x1UL << UARTE_INTEN_TXDRDY_Pos) /*!< Bit mask of TXDRDY field.                              */
  #define UARTE_INTEN_TXDRDY_Min (0x0UL)             /*!< Min enumerator value of TXDRDY field.                                */
  #define UARTE_INTEN_TXDRDY_Max (0x1UL)             /*!< Max enumerator value of TXDRDY field.                                */
  #define UARTE_INTEN_TXDRDY_Disabled (0x0UL)        /*!< Disable                                                              */
  #define UARTE_INTEN_TXDRDY_Enabled (0x1UL)         /*!< Enable                                                               */

/* RXDRDY @Bit 4 : Enable or disable interrupt for event RXDRDY */
  #define UARTE_INTEN_RXDRDY_Pos (4UL)               /*!< Position of RXDRDY field.                                            */
  #define UARTE_INTEN_RXDRDY_Msk (0x1UL << UARTE_INTEN_RXDRDY_Pos) /*!< Bit mask of RXDRDY field.                              */
  #define UARTE_INTEN_RXDRDY_Min (0x0UL)             /*!< Min enumerator value of RXDRDY field.                                */
  #define UARTE_INTEN_RXDRDY_Max (0x1UL)             /*!< Max enumerator value of RXDRDY field.                                */
  #define UARTE_INTEN_RXDRDY_Disabled (0x0UL)        /*!< Disable                                                              */
  #define UARTE_INTEN_RXDRDY_Enabled (0x1UL)         /*!< Enable                                                               */

/* ERROR @Bit 5 : Enable or disable interrupt for event ERROR */
  #define UARTE_INTEN_ERROR_Pos (5UL)                /*!< Position of ERROR field.                                             */
  #define UARTE_INTEN_ERROR_Msk (0x1UL << UARTE_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field.                                 */
  #define UARTE_INTEN_ERROR_Min (0x0UL)              /*!< Min enumerator value of ERROR field.                                 */
  #define UARTE_INTEN_ERROR_Max (0x1UL)              /*!< Max enumerator value of ERROR field.                                 */
  #define UARTE_INTEN_ERROR_Disabled (0x0UL)         /*!< Disable                                                              */
  #define UARTE_INTEN_ERROR_Enabled (0x1UL)          /*!< Enable                                                               */

/* RXTO @Bit 9 : Enable or disable interrupt for event RXTO */
  #define UARTE_INTEN_RXTO_Pos (9UL)                 /*!< Position of RXTO field.                                              */
  #define UARTE_INTEN_RXTO_Msk (0x1UL << UARTE_INTEN_RXTO_Pos) /*!< Bit mask of RXTO field.                                    */
  #define UARTE_INTEN_RXTO_Min (0x0UL)               /*!< Min enumerator value of RXTO field.                                  */
  #define UARTE_INTEN_RXTO_Max (0x1UL)               /*!< Max enumerator value of RXTO field.                                  */
  #define UARTE_INTEN_RXTO_Disabled (0x0UL)          /*!< Disable                                                              */
  #define UARTE_INTEN_RXTO_Enabled (0x1UL)           /*!< Enable                                                               */

/* TXSTOPPED @Bit 12 : Enable or disable interrupt for event TXSTOPPED */
  #define UARTE_INTEN_TXSTOPPED_Pos (12UL)           /*!< Position of TXSTOPPED field.                                         */
  #define UARTE_INTEN_TXSTOPPED_Msk (0x1UL << UARTE_INTEN_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field.                     */
  #define UARTE_INTEN_TXSTOPPED_Min (0x0UL)          /*!< Min enumerator value of TXSTOPPED field.                             */
  #define UARTE_INTEN_TXSTOPPED_Max (0x1UL)          /*!< Max enumerator value of TXSTOPPED field.                             */
  #define UARTE_INTEN_TXSTOPPED_Disabled (0x0UL)     /*!< Disable                                                              */
  #define UARTE_INTEN_TXSTOPPED_Enabled (0x1UL)      /*!< Enable                                                               */

/* DMARXEND @Bit 19 : Enable or disable interrupt for event DMARXEND */
  #define UARTE_INTEN_DMARXEND_Pos (19UL)            /*!< Position of DMARXEND field.                                          */
  #define UARTE_INTEN_DMARXEND_Msk (0x1UL << UARTE_INTEN_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                        */
  #define UARTE_INTEN_DMARXEND_Min (0x0UL)           /*!< Min enumerator value of DMARXEND field.                              */
  #define UARTE_INTEN_DMARXEND_Max (0x1UL)           /*!< Max enumerator value of DMARXEND field.                              */
  #define UARTE_INTEN_DMARXEND_Disabled (0x0UL)      /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXEND_Enabled (0x1UL)       /*!< Enable                                                               */

/* DMARXREADY @Bit 20 : Enable or disable interrupt for event DMARXREADY */
  #define UARTE_INTEN_DMARXREADY_Pos (20UL)          /*!< Position of DMARXREADY field.                                        */
  #define UARTE_INTEN_DMARXREADY_Msk (0x1UL << UARTE_INTEN_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.                  */
  #define UARTE_INTEN_DMARXREADY_Min (0x0UL)         /*!< Min enumerator value of DMARXREADY field.                            */
  #define UARTE_INTEN_DMARXREADY_Max (0x1UL)         /*!< Max enumerator value of DMARXREADY field.                            */
  #define UARTE_INTEN_DMARXREADY_Disabled (0x0UL)    /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXREADY_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMARXBUSERROR @Bit 21 : Enable or disable interrupt for event DMARXBUSERROR */
  #define UARTE_INTEN_DMARXBUSERROR_Pos (21UL)       /*!< Position of DMARXBUSERROR field.                                     */
  #define UARTE_INTEN_DMARXBUSERROR_Msk (0x1UL << UARTE_INTEN_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.         */
  #define UARTE_INTEN_DMARXBUSERROR_Min (0x0UL)      /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define UARTE_INTEN_DMARXBUSERROR_Max (0x1UL)      /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define UARTE_INTEN_DMARXBUSERROR_Disabled (0x0UL) /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXBUSERROR_Enabled (0x1UL)  /*!< Enable                                                               */

/* DMARXMATCH0 @Bit 22 : Enable or disable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTEN_DMARXMATCH0_Pos (22UL)         /*!< Position of DMARXMATCH0 field.                                       */
  #define UARTE_INTEN_DMARXMATCH0_Msk (0x1UL << UARTE_INTEN_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.               */
  #define UARTE_INTEN_DMARXMATCH0_Min (0x0UL)        /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define UARTE_INTEN_DMARXMATCH0_Max (0x1UL)        /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define UARTE_INTEN_DMARXMATCH0_Disabled (0x0UL)   /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXMATCH0_Enabled (0x1UL)    /*!< Enable                                                               */

/* DMARXMATCH1 @Bit 23 : Enable or disable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTEN_DMARXMATCH1_Pos (23UL)         /*!< Position of DMARXMATCH1 field.                                       */
  #define UARTE_INTEN_DMARXMATCH1_Msk (0x1UL << UARTE_INTEN_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.               */
  #define UARTE_INTEN_DMARXMATCH1_Min (0x0UL)        /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define UARTE_INTEN_DMARXMATCH1_Max (0x1UL)        /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define UARTE_INTEN_DMARXMATCH1_Disabled (0x0UL)   /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXMATCH1_Enabled (0x1UL)    /*!< Enable                                                               */

/* DMARXMATCH2 @Bit 24 : Enable or disable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTEN_DMARXMATCH2_Pos (24UL)         /*!< Position of DMARXMATCH2 field.                                       */
  #define UARTE_INTEN_DMARXMATCH2_Msk (0x1UL << UARTE_INTEN_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.               */
  #define UARTE_INTEN_DMARXMATCH2_Min (0x0UL)        /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define UARTE_INTEN_DMARXMATCH2_Max (0x1UL)        /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define UARTE_INTEN_DMARXMATCH2_Disabled (0x0UL)   /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXMATCH2_Enabled (0x1UL)    /*!< Enable                                                               */

/* DMARXMATCH3 @Bit 25 : Enable or disable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTEN_DMARXMATCH3_Pos (25UL)         /*!< Position of DMARXMATCH3 field.                                       */
  #define UARTE_INTEN_DMARXMATCH3_Msk (0x1UL << UARTE_INTEN_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.               */
  #define UARTE_INTEN_DMARXMATCH3_Min (0x0UL)        /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define UARTE_INTEN_DMARXMATCH3_Max (0x1UL)        /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define UARTE_INTEN_DMARXMATCH3_Disabled (0x0UL)   /*!< Disable                                                              */
  #define UARTE_INTEN_DMARXMATCH3_Enabled (0x1UL)    /*!< Enable                                                               */

/* DMATXEND @Bit 26 : Enable or disable interrupt for event DMATXEND */
  #define UARTE_INTEN_DMATXEND_Pos (26UL)            /*!< Position of DMATXEND field.                                          */
  #define UARTE_INTEN_DMATXEND_Msk (0x1UL << UARTE_INTEN_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                        */
  #define UARTE_INTEN_DMATXEND_Min (0x0UL)           /*!< Min enumerator value of DMATXEND field.                              */
  #define UARTE_INTEN_DMATXEND_Max (0x1UL)           /*!< Max enumerator value of DMATXEND field.                              */
  #define UARTE_INTEN_DMATXEND_Disabled (0x0UL)      /*!< Disable                                                              */
  #define UARTE_INTEN_DMATXEND_Enabled (0x1UL)       /*!< Enable                                                               */

/* DMATXREADY @Bit 27 : Enable or disable interrupt for event DMATXREADY */
  #define UARTE_INTEN_DMATXREADY_Pos (27UL)          /*!< Position of DMATXREADY field.                                        */
  #define UARTE_INTEN_DMATXREADY_Msk (0x1UL << UARTE_INTEN_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.                  */
  #define UARTE_INTEN_DMATXREADY_Min (0x0UL)         /*!< Min enumerator value of DMATXREADY field.                            */
  #define UARTE_INTEN_DMATXREADY_Max (0x1UL)         /*!< Max enumerator value of DMATXREADY field.                            */
  #define UARTE_INTEN_DMATXREADY_Disabled (0x0UL)    /*!< Disable                                                              */
  #define UARTE_INTEN_DMATXREADY_Enabled (0x1UL)     /*!< Enable                                                               */

/* DMATXBUSERROR @Bit 28 : Enable or disable interrupt for event DMATXBUSERROR */
  #define UARTE_INTEN_DMATXBUSERROR_Pos (28UL)       /*!< Position of DMATXBUSERROR field.                                     */
  #define UARTE_INTEN_DMATXBUSERROR_Msk (0x1UL << UARTE_INTEN_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.         */
  #define UARTE_INTEN_DMATXBUSERROR_Min (0x0UL)      /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define UARTE_INTEN_DMATXBUSERROR_Max (0x1UL)      /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define UARTE_INTEN_DMATXBUSERROR_Disabled (0x0UL) /*!< Disable                                                              */
  #define UARTE_INTEN_DMATXBUSERROR_Enabled (0x1UL)  /*!< Enable                                                               */

/* FRAMETIMEOUT @Bit 29 : Enable or disable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTEN_FRAMETIMEOUT_Pos (29UL)        /*!< Position of FRAMETIMEOUT field.                                      */
  #define UARTE_INTEN_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTEN_FRAMETIMEOUT_Pos) /*!< Bit mask of FRAMETIMEOUT field.            */
  #define UARTE_INTEN_FRAMETIMEOUT_Min (0x0UL)       /*!< Min enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_INTEN_FRAMETIMEOUT_Max (0x1UL)       /*!< Max enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_INTEN_FRAMETIMEOUT_Disabled (0x0UL)  /*!< Disable                                                              */
  #define UARTE_INTEN_FRAMETIMEOUT_Enabled (0x1UL)   /*!< Enable                                                               */


/* UARTE_INTENSET: Enable interrupt */
  #define UARTE_INTENSET_ResetValue (0x00000000UL)   /*!< Reset value of INTENSET register.                                    */

/* CTS @Bit 0 : Write '1' to enable interrupt for event CTS */
  #define UARTE_INTENSET_CTS_Pos (0UL)               /*!< Position of CTS field.                                               */
  #define UARTE_INTENSET_CTS_Msk (0x1UL << UARTE_INTENSET_CTS_Pos) /*!< Bit mask of CTS field.                                 */
  #define UARTE_INTENSET_CTS_Min (0x0UL)             /*!< Min enumerator value of CTS field.                                   */
  #define UARTE_INTENSET_CTS_Max (0x1UL)             /*!< Max enumerator value of CTS field.                                   */
  #define UARTE_INTENSET_CTS_Set (0x1UL)             /*!< Enable                                                               */
  #define UARTE_INTENSET_CTS_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_CTS_Enabled (0x1UL)         /*!< Read: Enabled                                                        */

/* NCTS @Bit 1 : Write '1' to enable interrupt for event NCTS */
  #define UARTE_INTENSET_NCTS_Pos (1UL)              /*!< Position of NCTS field.                                              */
  #define UARTE_INTENSET_NCTS_Msk (0x1UL << UARTE_INTENSET_NCTS_Pos) /*!< Bit mask of NCTS field.                              */
  #define UARTE_INTENSET_NCTS_Min (0x0UL)            /*!< Min enumerator value of NCTS field.                                  */
  #define UARTE_INTENSET_NCTS_Max (0x1UL)            /*!< Max enumerator value of NCTS field.                                  */
  #define UARTE_INTENSET_NCTS_Set (0x1UL)            /*!< Enable                                                               */
  #define UARTE_INTENSET_NCTS_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_NCTS_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* TXDRDY @Bit 3 : Write '1' to enable interrupt for event TXDRDY */
  #define UARTE_INTENSET_TXDRDY_Pos (3UL)            /*!< Position of TXDRDY field.                                            */
  #define UARTE_INTENSET_TXDRDY_Msk (0x1UL << UARTE_INTENSET_TXDRDY_Pos) /*!< Bit mask of TXDRDY field.                        */
  #define UARTE_INTENSET_TXDRDY_Min (0x0UL)          /*!< Min enumerator value of TXDRDY field.                                */
  #define UARTE_INTENSET_TXDRDY_Max (0x1UL)          /*!< Max enumerator value of TXDRDY field.                                */
  #define UARTE_INTENSET_TXDRDY_Set (0x1UL)          /*!< Enable                                                               */
  #define UARTE_INTENSET_TXDRDY_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_TXDRDY_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* RXDRDY @Bit 4 : Write '1' to enable interrupt for event RXDRDY */
  #define UARTE_INTENSET_RXDRDY_Pos (4UL)            /*!< Position of RXDRDY field.                                            */
  #define UARTE_INTENSET_RXDRDY_Msk (0x1UL << UARTE_INTENSET_RXDRDY_Pos) /*!< Bit mask of RXDRDY field.                        */
  #define UARTE_INTENSET_RXDRDY_Min (0x0UL)          /*!< Min enumerator value of RXDRDY field.                                */
  #define UARTE_INTENSET_RXDRDY_Max (0x1UL)          /*!< Max enumerator value of RXDRDY field.                                */
  #define UARTE_INTENSET_RXDRDY_Set (0x1UL)          /*!< Enable                                                               */
  #define UARTE_INTENSET_RXDRDY_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_RXDRDY_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* ERROR @Bit 5 : Write '1' to enable interrupt for event ERROR */
  #define UARTE_INTENSET_ERROR_Pos (5UL)             /*!< Position of ERROR field.                                             */
  #define UARTE_INTENSET_ERROR_Msk (0x1UL << UARTE_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field.                           */
  #define UARTE_INTENSET_ERROR_Min (0x0UL)           /*!< Min enumerator value of ERROR field.                                 */
  #define UARTE_INTENSET_ERROR_Max (0x1UL)           /*!< Max enumerator value of ERROR field.                                 */
  #define UARTE_INTENSET_ERROR_Set (0x1UL)           /*!< Enable                                                               */
  #define UARTE_INTENSET_ERROR_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_ERROR_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* RXTO @Bit 9 : Write '1' to enable interrupt for event RXTO */
  #define UARTE_INTENSET_RXTO_Pos (9UL)              /*!< Position of RXTO field.                                              */
  #define UARTE_INTENSET_RXTO_Msk (0x1UL << UARTE_INTENSET_RXTO_Pos) /*!< Bit mask of RXTO field.                              */
  #define UARTE_INTENSET_RXTO_Min (0x0UL)            /*!< Min enumerator value of RXTO field.                                  */
  #define UARTE_INTENSET_RXTO_Max (0x1UL)            /*!< Max enumerator value of RXTO field.                                  */
  #define UARTE_INTENSET_RXTO_Set (0x1UL)            /*!< Enable                                                               */
  #define UARTE_INTENSET_RXTO_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_RXTO_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* TXSTOPPED @Bit 12 : Write '1' to enable interrupt for event TXSTOPPED */
  #define UARTE_INTENSET_TXSTOPPED_Pos (12UL)        /*!< Position of TXSTOPPED field.                                         */
  #define UARTE_INTENSET_TXSTOPPED_Msk (0x1UL << UARTE_INTENSET_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field.               */
  #define UARTE_INTENSET_TXSTOPPED_Min (0x0UL)       /*!< Min enumerator value of TXSTOPPED field.                             */
  #define UARTE_INTENSET_TXSTOPPED_Max (0x1UL)       /*!< Max enumerator value of TXSTOPPED field.                             */
  #define UARTE_INTENSET_TXSTOPPED_Set (0x1UL)       /*!< Enable                                                               */
  #define UARTE_INTENSET_TXSTOPPED_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_TXSTOPPED_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to enable interrupt for event DMARXEND */
  #define UARTE_INTENSET_DMARXEND_Pos (19UL)         /*!< Position of DMARXEND field.                                          */
  #define UARTE_INTENSET_DMARXEND_Msk (0x1UL << UARTE_INTENSET_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                  */
  #define UARTE_INTENSET_DMARXEND_Min (0x0UL)        /*!< Min enumerator value of DMARXEND field.                              */
  #define UARTE_INTENSET_DMARXEND_Max (0x1UL)        /*!< Max enumerator value of DMARXEND field.                              */
  #define UARTE_INTENSET_DMARXEND_Set (0x1UL)        /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_DMARXEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to enable interrupt for event DMARXREADY */
  #define UARTE_INTENSET_DMARXREADY_Pos (20UL)       /*!< Position of DMARXREADY field.                                        */
  #define UARTE_INTENSET_DMARXREADY_Msk (0x1UL << UARTE_INTENSET_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.            */
  #define UARTE_INTENSET_DMARXREADY_Min (0x0UL)      /*!< Min enumerator value of DMARXREADY field.                            */
  #define UARTE_INTENSET_DMARXREADY_Max (0x1UL)      /*!< Max enumerator value of DMARXREADY field.                            */
  #define UARTE_INTENSET_DMARXREADY_Set (0x1UL)      /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXREADY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_DMARXREADY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to enable interrupt for event DMARXBUSERROR */
  #define UARTE_INTENSET_DMARXBUSERROR_Pos (21UL)    /*!< Position of DMARXBUSERROR field.                                     */
  #define UARTE_INTENSET_DMARXBUSERROR_Msk (0x1UL << UARTE_INTENSET_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.   */
  #define UARTE_INTENSET_DMARXBUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define UARTE_INTENSET_DMARXBUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define UARTE_INTENSET_DMARXBUSERROR_Set (0x1UL)   /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define UARTE_INTENSET_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* DMARXMATCH0 @Bit 22 : Write '1' to enable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTENSET_DMARXMATCH0_Pos (22UL)      /*!< Position of DMARXMATCH0 field.                                       */
  #define UARTE_INTENSET_DMARXMATCH0_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.         */
  #define UARTE_INTENSET_DMARXMATCH0_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define UARTE_INTENSET_DMARXMATCH0_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define UARTE_INTENSET_DMARXMATCH0_Set (0x1UL)     /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENSET_DMARXMATCH0_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to enable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTENSET_DMARXMATCH1_Pos (23UL)      /*!< Position of DMARXMATCH1 field.                                       */
  #define UARTE_INTENSET_DMARXMATCH1_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.         */
  #define UARTE_INTENSET_DMARXMATCH1_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define UARTE_INTENSET_DMARXMATCH1_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define UARTE_INTENSET_DMARXMATCH1_Set (0x1UL)     /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENSET_DMARXMATCH1_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to enable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTENSET_DMARXMATCH2_Pos (24UL)      /*!< Position of DMARXMATCH2 field.                                       */
  #define UARTE_INTENSET_DMARXMATCH2_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.         */
  #define UARTE_INTENSET_DMARXMATCH2_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define UARTE_INTENSET_DMARXMATCH2_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define UARTE_INTENSET_DMARXMATCH2_Set (0x1UL)     /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENSET_DMARXMATCH2_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to enable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTENSET_DMARXMATCH3_Pos (25UL)      /*!< Position of DMARXMATCH3 field.                                       */
  #define UARTE_INTENSET_DMARXMATCH3_Msk (0x1UL << UARTE_INTENSET_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.         */
  #define UARTE_INTENSET_DMARXMATCH3_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define UARTE_INTENSET_DMARXMATCH3_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define UARTE_INTENSET_DMARXMATCH3_Set (0x1UL)     /*!< Enable                                                               */
  #define UARTE_INTENSET_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENSET_DMARXMATCH3_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to enable interrupt for event DMATXEND */
  #define UARTE_INTENSET_DMATXEND_Pos (26UL)         /*!< Position of DMATXEND field.                                          */
  #define UARTE_INTENSET_DMATXEND_Msk (0x1UL << UARTE_INTENSET_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                  */
  #define UARTE_INTENSET_DMATXEND_Min (0x0UL)        /*!< Min enumerator value of DMATXEND field.                              */
  #define UARTE_INTENSET_DMATXEND_Max (0x1UL)        /*!< Max enumerator value of DMATXEND field.                              */
  #define UARTE_INTENSET_DMATXEND_Set (0x1UL)        /*!< Enable                                                               */
  #define UARTE_INTENSET_DMATXEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_DMATXEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to enable interrupt for event DMATXREADY */
  #define UARTE_INTENSET_DMATXREADY_Pos (27UL)       /*!< Position of DMATXREADY field.                                        */
  #define UARTE_INTENSET_DMATXREADY_Msk (0x1UL << UARTE_INTENSET_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.            */
  #define UARTE_INTENSET_DMATXREADY_Min (0x0UL)      /*!< Min enumerator value of DMATXREADY field.                            */
  #define UARTE_INTENSET_DMATXREADY_Max (0x1UL)      /*!< Max enumerator value of DMATXREADY field.                            */
  #define UARTE_INTENSET_DMATXREADY_Set (0x1UL)      /*!< Enable                                                               */
  #define UARTE_INTENSET_DMATXREADY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define UARTE_INTENSET_DMATXREADY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to enable interrupt for event DMATXBUSERROR */
  #define UARTE_INTENSET_DMATXBUSERROR_Pos (28UL)    /*!< Position of DMATXBUSERROR field.                                     */
  #define UARTE_INTENSET_DMATXBUSERROR_Msk (0x1UL << UARTE_INTENSET_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.   */
  #define UARTE_INTENSET_DMATXBUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define UARTE_INTENSET_DMATXBUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define UARTE_INTENSET_DMATXBUSERROR_Set (0x1UL)   /*!< Enable                                                               */
  #define UARTE_INTENSET_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define UARTE_INTENSET_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* FRAMETIMEOUT @Bit 29 : Write '1' to enable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTENSET_FRAMETIMEOUT_Pos (29UL)     /*!< Position of FRAMETIMEOUT field.                                      */
  #define UARTE_INTENSET_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTENSET_FRAMETIMEOUT_Pos) /*!< Bit mask of FRAMETIMEOUT field.      */
  #define UARTE_INTENSET_FRAMETIMEOUT_Min (0x0UL)    /*!< Min enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_INTENSET_FRAMETIMEOUT_Max (0x1UL)    /*!< Max enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_INTENSET_FRAMETIMEOUT_Set (0x1UL)    /*!< Enable                                                               */
  #define UARTE_INTENSET_FRAMETIMEOUT_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define UARTE_INTENSET_FRAMETIMEOUT_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* UARTE_INTENCLR: Disable interrupt */
  #define UARTE_INTENCLR_ResetValue (0x00000000UL)   /*!< Reset value of INTENCLR register.                                    */

/* CTS @Bit 0 : Write '1' to disable interrupt for event CTS */
  #define UARTE_INTENCLR_CTS_Pos (0UL)               /*!< Position of CTS field.                                               */
  #define UARTE_INTENCLR_CTS_Msk (0x1UL << UARTE_INTENCLR_CTS_Pos) /*!< Bit mask of CTS field.                                 */
  #define UARTE_INTENCLR_CTS_Min (0x0UL)             /*!< Min enumerator value of CTS field.                                   */
  #define UARTE_INTENCLR_CTS_Max (0x1UL)             /*!< Max enumerator value of CTS field.                                   */
  #define UARTE_INTENCLR_CTS_Clear (0x1UL)           /*!< Disable                                                              */
  #define UARTE_INTENCLR_CTS_Disabled (0x0UL)        /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_CTS_Enabled (0x1UL)         /*!< Read: Enabled                                                        */

/* NCTS @Bit 1 : Write '1' to disable interrupt for event NCTS */
  #define UARTE_INTENCLR_NCTS_Pos (1UL)              /*!< Position of NCTS field.                                              */
  #define UARTE_INTENCLR_NCTS_Msk (0x1UL << UARTE_INTENCLR_NCTS_Pos) /*!< Bit mask of NCTS field.                              */
  #define UARTE_INTENCLR_NCTS_Min (0x0UL)            /*!< Min enumerator value of NCTS field.                                  */
  #define UARTE_INTENCLR_NCTS_Max (0x1UL)            /*!< Max enumerator value of NCTS field.                                  */
  #define UARTE_INTENCLR_NCTS_Clear (0x1UL)          /*!< Disable                                                              */
  #define UARTE_INTENCLR_NCTS_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_NCTS_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* TXDRDY @Bit 3 : Write '1' to disable interrupt for event TXDRDY */
  #define UARTE_INTENCLR_TXDRDY_Pos (3UL)            /*!< Position of TXDRDY field.                                            */
  #define UARTE_INTENCLR_TXDRDY_Msk (0x1UL << UARTE_INTENCLR_TXDRDY_Pos) /*!< Bit mask of TXDRDY field.                        */
  #define UARTE_INTENCLR_TXDRDY_Min (0x0UL)          /*!< Min enumerator value of TXDRDY field.                                */
  #define UARTE_INTENCLR_TXDRDY_Max (0x1UL)          /*!< Max enumerator value of TXDRDY field.                                */
  #define UARTE_INTENCLR_TXDRDY_Clear (0x1UL)        /*!< Disable                                                              */
  #define UARTE_INTENCLR_TXDRDY_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_TXDRDY_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* RXDRDY @Bit 4 : Write '1' to disable interrupt for event RXDRDY */
  #define UARTE_INTENCLR_RXDRDY_Pos (4UL)            /*!< Position of RXDRDY field.                                            */
  #define UARTE_INTENCLR_RXDRDY_Msk (0x1UL << UARTE_INTENCLR_RXDRDY_Pos) /*!< Bit mask of RXDRDY field.                        */
  #define UARTE_INTENCLR_RXDRDY_Min (0x0UL)          /*!< Min enumerator value of RXDRDY field.                                */
  #define UARTE_INTENCLR_RXDRDY_Max (0x1UL)          /*!< Max enumerator value of RXDRDY field.                                */
  #define UARTE_INTENCLR_RXDRDY_Clear (0x1UL)        /*!< Disable                                                              */
  #define UARTE_INTENCLR_RXDRDY_Disabled (0x0UL)     /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_RXDRDY_Enabled (0x1UL)      /*!< Read: Enabled                                                        */

/* ERROR @Bit 5 : Write '1' to disable interrupt for event ERROR */
  #define UARTE_INTENCLR_ERROR_Pos (5UL)             /*!< Position of ERROR field.                                             */
  #define UARTE_INTENCLR_ERROR_Msk (0x1UL << UARTE_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field.                           */
  #define UARTE_INTENCLR_ERROR_Min (0x0UL)           /*!< Min enumerator value of ERROR field.                                 */
  #define UARTE_INTENCLR_ERROR_Max (0x1UL)           /*!< Max enumerator value of ERROR field.                                 */
  #define UARTE_INTENCLR_ERROR_Clear (0x1UL)         /*!< Disable                                                              */
  #define UARTE_INTENCLR_ERROR_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_ERROR_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* RXTO @Bit 9 : Write '1' to disable interrupt for event RXTO */
  #define UARTE_INTENCLR_RXTO_Pos (9UL)              /*!< Position of RXTO field.                                              */
  #define UARTE_INTENCLR_RXTO_Msk (0x1UL << UARTE_INTENCLR_RXTO_Pos) /*!< Bit mask of RXTO field.                              */
  #define UARTE_INTENCLR_RXTO_Min (0x0UL)            /*!< Min enumerator value of RXTO field.                                  */
  #define UARTE_INTENCLR_RXTO_Max (0x1UL)            /*!< Max enumerator value of RXTO field.                                  */
  #define UARTE_INTENCLR_RXTO_Clear (0x1UL)          /*!< Disable                                                              */
  #define UARTE_INTENCLR_RXTO_Disabled (0x0UL)       /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_RXTO_Enabled (0x1UL)        /*!< Read: Enabled                                                        */

/* TXSTOPPED @Bit 12 : Write '1' to disable interrupt for event TXSTOPPED */
  #define UARTE_INTENCLR_TXSTOPPED_Pos (12UL)        /*!< Position of TXSTOPPED field.                                         */
  #define UARTE_INTENCLR_TXSTOPPED_Msk (0x1UL << UARTE_INTENCLR_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field.               */
  #define UARTE_INTENCLR_TXSTOPPED_Min (0x0UL)       /*!< Min enumerator value of TXSTOPPED field.                             */
  #define UARTE_INTENCLR_TXSTOPPED_Max (0x1UL)       /*!< Max enumerator value of TXSTOPPED field.                             */
  #define UARTE_INTENCLR_TXSTOPPED_Clear (0x1UL)     /*!< Disable                                                              */
  #define UARTE_INTENCLR_TXSTOPPED_Disabled (0x0UL)  /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_TXSTOPPED_Enabled (0x1UL)   /*!< Read: Enabled                                                        */

/* DMARXEND @Bit 19 : Write '1' to disable interrupt for event DMARXEND */
  #define UARTE_INTENCLR_DMARXEND_Pos (19UL)         /*!< Position of DMARXEND field.                                          */
  #define UARTE_INTENCLR_DMARXEND_Msk (0x1UL << UARTE_INTENCLR_DMARXEND_Pos) /*!< Bit mask of DMARXEND field.                  */
  #define UARTE_INTENCLR_DMARXEND_Min (0x0UL)        /*!< Min enumerator value of DMARXEND field.                              */
  #define UARTE_INTENCLR_DMARXEND_Max (0x1UL)        /*!< Max enumerator value of DMARXEND field.                              */
  #define UARTE_INTENCLR_DMARXEND_Clear (0x1UL)      /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_DMARXEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMARXREADY @Bit 20 : Write '1' to disable interrupt for event DMARXREADY */
  #define UARTE_INTENCLR_DMARXREADY_Pos (20UL)       /*!< Position of DMARXREADY field.                                        */
  #define UARTE_INTENCLR_DMARXREADY_Msk (0x1UL << UARTE_INTENCLR_DMARXREADY_Pos) /*!< Bit mask of DMARXREADY field.            */
  #define UARTE_INTENCLR_DMARXREADY_Min (0x0UL)      /*!< Min enumerator value of DMARXREADY field.                            */
  #define UARTE_INTENCLR_DMARXREADY_Max (0x1UL)      /*!< Max enumerator value of DMARXREADY field.                            */
  #define UARTE_INTENCLR_DMARXREADY_Clear (0x1UL)    /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXREADY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_DMARXREADY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMARXBUSERROR @Bit 21 : Write '1' to disable interrupt for event DMARXBUSERROR */
  #define UARTE_INTENCLR_DMARXBUSERROR_Pos (21UL)    /*!< Position of DMARXBUSERROR field.                                     */
  #define UARTE_INTENCLR_DMARXBUSERROR_Msk (0x1UL << UARTE_INTENCLR_DMARXBUSERROR_Pos) /*!< Bit mask of DMARXBUSERROR field.   */
  #define UARTE_INTENCLR_DMARXBUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMARXBUSERROR field.                         */
  #define UARTE_INTENCLR_DMARXBUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMARXBUSERROR field.                         */
  #define UARTE_INTENCLR_DMARXBUSERROR_Clear (0x1UL) /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define UARTE_INTENCLR_DMARXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* DMARXMATCH0 @Bit 22 : Write '1' to disable interrupt for event DMARXMATCH[0] */
  #define UARTE_INTENCLR_DMARXMATCH0_Pos (22UL)      /*!< Position of DMARXMATCH0 field.                                       */
  #define UARTE_INTENCLR_DMARXMATCH0_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH0_Pos) /*!< Bit mask of DMARXMATCH0 field.         */
  #define UARTE_INTENCLR_DMARXMATCH0_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH0 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH0_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH0 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH0_Clear (0x1UL)   /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXMATCH0_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENCLR_DMARXMATCH0_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMARXMATCH1 @Bit 23 : Write '1' to disable interrupt for event DMARXMATCH[1] */
  #define UARTE_INTENCLR_DMARXMATCH1_Pos (23UL)      /*!< Position of DMARXMATCH1 field.                                       */
  #define UARTE_INTENCLR_DMARXMATCH1_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH1_Pos) /*!< Bit mask of DMARXMATCH1 field.         */
  #define UARTE_INTENCLR_DMARXMATCH1_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH1 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH1_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH1 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH1_Clear (0x1UL)   /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXMATCH1_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENCLR_DMARXMATCH1_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMARXMATCH2 @Bit 24 : Write '1' to disable interrupt for event DMARXMATCH[2] */
  #define UARTE_INTENCLR_DMARXMATCH2_Pos (24UL)      /*!< Position of DMARXMATCH2 field.                                       */
  #define UARTE_INTENCLR_DMARXMATCH2_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH2_Pos) /*!< Bit mask of DMARXMATCH2 field.         */
  #define UARTE_INTENCLR_DMARXMATCH2_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH2 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH2_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH2 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH2_Clear (0x1UL)   /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXMATCH2_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENCLR_DMARXMATCH2_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMARXMATCH3 @Bit 25 : Write '1' to disable interrupt for event DMARXMATCH[3] */
  #define UARTE_INTENCLR_DMARXMATCH3_Pos (25UL)      /*!< Position of DMARXMATCH3 field.                                       */
  #define UARTE_INTENCLR_DMARXMATCH3_Msk (0x1UL << UARTE_INTENCLR_DMARXMATCH3_Pos) /*!< Bit mask of DMARXMATCH3 field.         */
  #define UARTE_INTENCLR_DMARXMATCH3_Min (0x0UL)     /*!< Min enumerator value of DMARXMATCH3 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH3_Max (0x1UL)     /*!< Max enumerator value of DMARXMATCH3 field.                           */
  #define UARTE_INTENCLR_DMARXMATCH3_Clear (0x1UL)   /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMARXMATCH3_Disabled (0x0UL) /*!< Read: Disabled                                                      */
  #define UARTE_INTENCLR_DMARXMATCH3_Enabled (0x1UL) /*!< Read: Enabled                                                        */

/* DMATXEND @Bit 26 : Write '1' to disable interrupt for event DMATXEND */
  #define UARTE_INTENCLR_DMATXEND_Pos (26UL)         /*!< Position of DMATXEND field.                                          */
  #define UARTE_INTENCLR_DMATXEND_Msk (0x1UL << UARTE_INTENCLR_DMATXEND_Pos) /*!< Bit mask of DMATXEND field.                  */
  #define UARTE_INTENCLR_DMATXEND_Min (0x0UL)        /*!< Min enumerator value of DMATXEND field.                              */
  #define UARTE_INTENCLR_DMATXEND_Max (0x1UL)        /*!< Max enumerator value of DMATXEND field.                              */
  #define UARTE_INTENCLR_DMATXEND_Clear (0x1UL)      /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMATXEND_Disabled (0x0UL)   /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_DMATXEND_Enabled (0x1UL)    /*!< Read: Enabled                                                        */

/* DMATXREADY @Bit 27 : Write '1' to disable interrupt for event DMATXREADY */
  #define UARTE_INTENCLR_DMATXREADY_Pos (27UL)       /*!< Position of DMATXREADY field.                                        */
  #define UARTE_INTENCLR_DMATXREADY_Msk (0x1UL << UARTE_INTENCLR_DMATXREADY_Pos) /*!< Bit mask of DMATXREADY field.            */
  #define UARTE_INTENCLR_DMATXREADY_Min (0x0UL)      /*!< Min enumerator value of DMATXREADY field.                            */
  #define UARTE_INTENCLR_DMATXREADY_Max (0x1UL)      /*!< Max enumerator value of DMATXREADY field.                            */
  #define UARTE_INTENCLR_DMATXREADY_Clear (0x1UL)    /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMATXREADY_Disabled (0x0UL) /*!< Read: Disabled                                                       */
  #define UARTE_INTENCLR_DMATXREADY_Enabled (0x1UL)  /*!< Read: Enabled                                                        */

/* DMATXBUSERROR @Bit 28 : Write '1' to disable interrupt for event DMATXBUSERROR */
  #define UARTE_INTENCLR_DMATXBUSERROR_Pos (28UL)    /*!< Position of DMATXBUSERROR field.                                     */
  #define UARTE_INTENCLR_DMATXBUSERROR_Msk (0x1UL << UARTE_INTENCLR_DMATXBUSERROR_Pos) /*!< Bit mask of DMATXBUSERROR field.   */
  #define UARTE_INTENCLR_DMATXBUSERROR_Min (0x0UL)   /*!< Min enumerator value of DMATXBUSERROR field.                         */
  #define UARTE_INTENCLR_DMATXBUSERROR_Max (0x1UL)   /*!< Max enumerator value of DMATXBUSERROR field.                         */
  #define UARTE_INTENCLR_DMATXBUSERROR_Clear (0x1UL) /*!< Disable                                                              */
  #define UARTE_INTENCLR_DMATXBUSERROR_Disabled (0x0UL) /*!< Read: Disabled                                                    */
  #define UARTE_INTENCLR_DMATXBUSERROR_Enabled (0x1UL) /*!< Read: Enabled                                                      */

/* FRAMETIMEOUT @Bit 29 : Write '1' to disable interrupt for event FRAMETIMEOUT */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Pos (29UL)     /*!< Position of FRAMETIMEOUT field.                                      */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Msk (0x1UL << UARTE_INTENCLR_FRAMETIMEOUT_Pos) /*!< Bit mask of FRAMETIMEOUT field.      */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Min (0x0UL)    /*!< Min enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Max (0x1UL)    /*!< Max enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Clear (0x1UL)  /*!< Disable                                                              */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Disabled (0x0UL) /*!< Read: Disabled                                                     */
  #define UARTE_INTENCLR_FRAMETIMEOUT_Enabled (0x1UL) /*!< Read: Enabled                                                       */


/* UARTE_ERRORSRC: Error source */
  #define UARTE_ERRORSRC_ResetValue (0x00000000UL)   /*!< Reset value of ERRORSRC register.                                    */

/* OVERRUN @Bit 0 : Overrun error */
  #define UARTE_ERRORSRC_OVERRUN_Pos (0UL)           /*!< Position of OVERRUN field.                                           */
  #define UARTE_ERRORSRC_OVERRUN_Msk (0x1UL << UARTE_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field.                     */
  #define UARTE_ERRORSRC_OVERRUN_Min (0x0UL)         /*!< Min enumerator value of OVERRUN field.                               */
  #define UARTE_ERRORSRC_OVERRUN_Max (0x1UL)         /*!< Max enumerator value of OVERRUN field.                               */
  #define UARTE_ERRORSRC_OVERRUN_NotPresent (0x0UL)  /*!< Read: error not present                                              */
  #define UARTE_ERRORSRC_OVERRUN_Present (0x1UL)     /*!< Read: error present                                                  */

/* PARITY @Bit 1 : Parity error */
  #define UARTE_ERRORSRC_PARITY_Pos (1UL)            /*!< Position of PARITY field.                                            */
  #define UARTE_ERRORSRC_PARITY_Msk (0x1UL << UARTE_ERRORSRC_PARITY_Pos) /*!< Bit mask of PARITY field.                        */
  #define UARTE_ERRORSRC_PARITY_Min (0x0UL)          /*!< Min enumerator value of PARITY field.                                */
  #define UARTE_ERRORSRC_PARITY_Max (0x1UL)          /*!< Max enumerator value of PARITY field.                                */
  #define UARTE_ERRORSRC_PARITY_NotPresent (0x0UL)   /*!< Read: error not present                                              */
  #define UARTE_ERRORSRC_PARITY_Present (0x1UL)      /*!< Read: error present                                                  */

/* FRAMING @Bit 2 : Framing error occurred */
  #define UARTE_ERRORSRC_FRAMING_Pos (2UL)           /*!< Position of FRAMING field.                                           */
  #define UARTE_ERRORSRC_FRAMING_Msk (0x1UL << UARTE_ERRORSRC_FRAMING_Pos) /*!< Bit mask of FRAMING field.                     */
  #define UARTE_ERRORSRC_FRAMING_Min (0x0UL)         /*!< Min enumerator value of FRAMING field.                               */
  #define UARTE_ERRORSRC_FRAMING_Max (0x1UL)         /*!< Max enumerator value of FRAMING field.                               */
  #define UARTE_ERRORSRC_FRAMING_NotPresent (0x0UL)  /*!< Read: error not present                                              */
  #define UARTE_ERRORSRC_FRAMING_Present (0x1UL)     /*!< Read: error present                                                  */

/* BREAK @Bit 3 : Break condition */
  #define UARTE_ERRORSRC_BREAK_Pos (3UL)             /*!< Position of BREAK field.                                             */
  #define UARTE_ERRORSRC_BREAK_Msk (0x1UL << UARTE_ERRORSRC_BREAK_Pos) /*!< Bit mask of BREAK field.                           */
  #define UARTE_ERRORSRC_BREAK_Min (0x0UL)           /*!< Min enumerator value of BREAK field.                                 */
  #define UARTE_ERRORSRC_BREAK_Max (0x1UL)           /*!< Max enumerator value of BREAK field.                                 */
  #define UARTE_ERRORSRC_BREAK_NotPresent (0x0UL)    /*!< Read: error not present                                              */
  #define UARTE_ERRORSRC_BREAK_Present (0x1UL)       /*!< Read: error present                                                  */


/* UARTE_ENABLE: Enable UART */
  #define UARTE_ENABLE_ResetValue (0x00000000UL)     /*!< Reset value of ENABLE register.                                      */

/* ENABLE @Bits 0..3 : Enable or disable UARTE */
  #define UARTE_ENABLE_ENABLE_Pos (0UL)              /*!< Position of ENABLE field.                                            */
  #define UARTE_ENABLE_ENABLE_Msk (0xFUL << UARTE_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field.                            */
  #define UARTE_ENABLE_ENABLE_Min (0x0UL)            /*!< Min enumerator value of ENABLE field.                                */
  #define UARTE_ENABLE_ENABLE_Max (0x8UL)            /*!< Max enumerator value of ENABLE field.                                */
  #define UARTE_ENABLE_ENABLE_Disabled (0x0UL)       /*!< Disable UARTE                                                        */
  #define UARTE_ENABLE_ENABLE_Enabled (0x8UL)        /*!< Enable UARTE                                                         */


/* UARTE_BAUDRATE: Baud rate. Accuracy depends on the HFCLK source selected. */
  #define UARTE_BAUDRATE_ResetValue (0x04000000UL)   /*!< Reset value of BAUDRATE register.                                    */

/* BAUDRATE @Bits 0..31 : Baud rate */
  #define UARTE_BAUDRATE_BAUDRATE_Pos (0UL)          /*!< Position of BAUDRATE field.                                          */
  #define UARTE_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UARTE_BAUDRATE_BAUDRATE_Pos) /*!< Bit mask of BAUDRATE field.           */
  #define UARTE_BAUDRATE_BAUDRATE_Min (0x4F000UL)    /*!< Min enumerator value of BAUDRATE field.                              */
  #define UARTE_BAUDRATE_BAUDRATE_Max (0x10000000UL) /*!< Max enumerator value of BAUDRATE field.                              */
  #define UARTE_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) when UARTE has 16 MHz peripheral
                                                               clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud14400 (0x003AF000UL) /*!< 14400 baud (actual rate: 14401) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud28800 (0x0075C000UL) /*!< 28800 baud (actual rate: 28777) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud31250 (0x00800000UL) /*!< 31250 baud when UARTE has 16 MHz peripheral clock frequency    */
  #define UARTE_BAUDRATE_BAUDRATE_Baud38400 (0x009D0000UL) /*!< 38400 baud (actual rate: 38369) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud57600 (0x00EB0000UL) /*!< 57600 baud (actual rate: 57554) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) when UARTE has 16 MHz peripheral
                                                                clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud115200 (0x01D60000UL) /*!< 115200 baud (actual rate: 115108) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud230400 (0x03B00000UL) /*!< 230400 baud (actual rate: 231884) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL) /*!< 250000 baud when UARTE has 16 MHz peripheral clock frequency  */
  #define UARTE_BAUDRATE_BAUDRATE_Baud460800 (0x07400000UL) /*!< 460800 baud (actual rate: 457143) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud921600 (0x0F000000UL) /*!< 921600 baud (actual rate: 941176) when UARTE has 16 MHz
                                                                 peripheral clock frequency*/
  #define UARTE_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL) /*!< 1 megabaud when UARTE has 16 MHz peripheral clock frequency       */


/* UARTE_CONFIG: Configuration of parity, hardware flow control, framesize, and packet timeout. */
  #define UARTE_CONFIG_ResetValue (0x00001000UL)     /*!< Reset value of CONFIG register.                                      */

/* HWFC @Bit 0 : Hardware flow control */
  #define UARTE_CONFIG_HWFC_Pos (0UL)                /*!< Position of HWFC field.                                              */
  #define UARTE_CONFIG_HWFC_Msk (0x1UL << UARTE_CONFIG_HWFC_Pos) /*!< Bit mask of HWFC field.                                  */
  #define UARTE_CONFIG_HWFC_Min (0x0UL)              /*!< Min enumerator value of HWFC field.                                  */
  #define UARTE_CONFIG_HWFC_Max (0x1UL)              /*!< Max enumerator value of HWFC field.                                  */
  #define UARTE_CONFIG_HWFC_Disabled (0x0UL)         /*!< Disabled                                                             */
  #define UARTE_CONFIG_HWFC_Enabled (0x1UL)          /*!< Enabled                                                              */

/* PARITY @Bits 1..3 : Parity */
  #define UARTE_CONFIG_PARITY_Pos (1UL)              /*!< Position of PARITY field.                                            */
  #define UARTE_CONFIG_PARITY_Msk (0x7UL << UARTE_CONFIG_PARITY_Pos) /*!< Bit mask of PARITY field.                            */
  #define UARTE_CONFIG_PARITY_Min (0x0UL)            /*!< Min enumerator value of PARITY field.                                */
  #define UARTE_CONFIG_PARITY_Max (0x7UL)            /*!< Max enumerator value of PARITY field.                                */
  #define UARTE_CONFIG_PARITY_Excluded (0x0UL)       /*!< Exclude parity bit                                                   */
  #define UARTE_CONFIG_PARITY_Included (0x7UL)       /*!< Include parity bit                                                   */

/* STOP @Bit 4 : Stop bits */
  #define UARTE_CONFIG_STOP_Pos (4UL)                /*!< Position of STOP field.                                              */
  #define UARTE_CONFIG_STOP_Msk (0x1UL << UARTE_CONFIG_STOP_Pos) /*!< Bit mask of STOP field.                                  */
  #define UARTE_CONFIG_STOP_Min (0x0UL)              /*!< Min enumerator value of STOP field.                                  */
  #define UARTE_CONFIG_STOP_Max (0x1UL)              /*!< Max enumerator value of STOP field.                                  */
  #define UARTE_CONFIG_STOP_One (0x0UL)              /*!< One stop bit                                                         */
  #define UARTE_CONFIG_STOP_Two (0x1UL)              /*!< Two stop bits                                                        */

/* PARITYTYPE @Bit 8 : Even or odd parity type */
  #define UARTE_CONFIG_PARITYTYPE_Pos (8UL)          /*!< Position of PARITYTYPE field.                                        */
  #define UARTE_CONFIG_PARITYTYPE_Msk (0x1UL << UARTE_CONFIG_PARITYTYPE_Pos) /*!< Bit mask of PARITYTYPE field.                */
  #define UARTE_CONFIG_PARITYTYPE_Min (0x0UL)        /*!< Min enumerator value of PARITYTYPE field.                            */
  #define UARTE_CONFIG_PARITYTYPE_Max (0x1UL)        /*!< Max enumerator value of PARITYTYPE field.                            */
  #define UARTE_CONFIG_PARITYTYPE_Even (0x0UL)       /*!< Even parity                                                          */
  #define UARTE_CONFIG_PARITYTYPE_Odd (0x1UL)        /*!< Odd parity                                                           */

/* FRAMESIZE @Bits 9..12 : Set the data frame size */
  #define UARTE_CONFIG_FRAMESIZE_Pos (9UL)           /*!< Position of FRAMESIZE field.                                         */
  #define UARTE_CONFIG_FRAMESIZE_Msk (0xFUL << UARTE_CONFIG_FRAMESIZE_Pos) /*!< Bit mask of FRAMESIZE field.                   */
  #define UARTE_CONFIG_FRAMESIZE_Min (0x4UL)         /*!< Min enumerator value of FRAMESIZE field.                             */
  #define UARTE_CONFIG_FRAMESIZE_Max (0x9UL)         /*!< Max enumerator value of FRAMESIZE field.                             */
  #define UARTE_CONFIG_FRAMESIZE_9bit (0x9UL)        /*!< 9 bit data frame size. 9th bit is treated as address bit.            */
  #define UARTE_CONFIG_FRAMESIZE_8bit (0x8UL)        /*!< 8 bit data frame size.                                               */
  #define UARTE_CONFIG_FRAMESIZE_7bit (0x7UL)        /*!< 7 bit data frame size.                                               */
  #define UARTE_CONFIG_FRAMESIZE_6bit (0x6UL)        /*!< 6 bit data frame size.                                               */
  #define UARTE_CONFIG_FRAMESIZE_5bit (0x5UL)        /*!< 5 bit data frame size.                                               */
  #define UARTE_CONFIG_FRAMESIZE_4bit (0x4UL)        /*!< 4 bit data frame size.                                               */

/* ENDIAN @Bit 13 : Select if data is trimmed from MSB or LSB end when the data frame size is less than 8. */
  #define UARTE_CONFIG_ENDIAN_Pos (13UL)             /*!< Position of ENDIAN field.                                            */
  #define UARTE_CONFIG_ENDIAN_Msk (0x1UL << UARTE_CONFIG_ENDIAN_Pos) /*!< Bit mask of ENDIAN field.                            */
  #define UARTE_CONFIG_ENDIAN_Min (0x0UL)            /*!< Min enumerator value of ENDIAN field.                                */
  #define UARTE_CONFIG_ENDIAN_Max (0x1UL)            /*!< Max enumerator value of ENDIAN field.                                */
  #define UARTE_CONFIG_ENDIAN_MSB (0x0UL)            /*!< Data is trimmed from MSB end.                                        */
  #define UARTE_CONFIG_ENDIAN_LSB (0x1UL)            /*!< Data is trimmed from LSB end.                                        */

/* FRAMETIMEOUT @Bit 14 : Enable packet timeout. */
  #define UARTE_CONFIG_FRAMETIMEOUT_Pos (14UL)       /*!< Position of FRAMETIMEOUT field.                                      */
  #define UARTE_CONFIG_FRAMETIMEOUT_Msk (0x1UL << UARTE_CONFIG_FRAMETIMEOUT_Pos) /*!< Bit mask of FRAMETIMEOUT field.          */
  #define UARTE_CONFIG_FRAMETIMEOUT_Min (0x0UL)      /*!< Min enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_CONFIG_FRAMETIMEOUT_Max (0x1UL)      /*!< Max enumerator value of FRAMETIMEOUT field.                          */
  #define UARTE_CONFIG_FRAMETIMEOUT_DISABLED (0x0UL) /*!< Packet timeout is disabled.                                          */
  #define UARTE_CONFIG_FRAMETIMEOUT_ENABLED (0x1UL)  /*!< Packet timeout is enabled.                                           */
  #define UARTE_CONFIG_FRAMETIMEOUT_Disabled (0x0UL) /*!< Packet timeout is disabled.                                          */
  #define UARTE_CONFIG_FRAMETIMEOUT_Enabled (0x1UL)  /*!< Packet timeout is enabled.                                           */


/* UARTE_ADDRESS: Set the address of the UARTE for RX when used in 9 bit data frame mode. */
  #define UARTE_ADDRESS_ResetValue (0x00000000UL)    /*!< Reset value of ADDRESS register.                                     */

/* ADDRESS @Bits 0..7 : Set address */
  #define UARTE_ADDRESS_ADDRESS_Pos (0UL)            /*!< Position of ADDRESS field.                                           */
  #define UARTE_ADDRESS_ADDRESS_Msk (0xFFUL << UARTE_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field.                      */


/* UARTE_FRAMETIMEOUT: Set the number of UARTE bits to count before triggering packet timeout. */
  #define UARTE_FRAMETIMEOUT_ResetValue (0x00000010UL) /*!< Reset value of FRAMETIMEOUT register.                              */

/* COUNTERTOP @Bits 0..9 : Number of UARTE bits before timeout. */
  #define UARTE_FRAMETIMEOUT_COUNTERTOP_Pos (0UL)    /*!< Position of COUNTERTOP field.                                        */
  #define UARTE_FRAMETIMEOUT_COUNTERTOP_Msk (0x3FFUL << UARTE_FRAMETIMEOUT_COUNTERTOP_Pos) /*!< Bit mask of COUNTERTOP field.  */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                           UICR                                           ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */

/* ================================================== Struct UICR_APPROTECT ================================================== */
/**
  * @brief APPROTECT [UICR_APPROTECT] Access Port Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;                          /*!< (@ 0x00000000) Access port protection                                */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  PROTECT1;                          /*!< (@ 0x0000000C) Access port protection                                */
} NRF_UICR_APPROTECT_Type;                           /*!< Size = 16 (0x010)                                                    */
  #define UICR_APPROTECT_MaxCount (1UL)              /*!< Size of APPROTECT[1] array.                                          */
  #define UICR_APPROTECT_MaxIndex (0UL)              /*!< Max index of APPROTECT[1] array.                                     */
  #define UICR_APPROTECT_MinIndex (0UL)              /*!< Min index of APPROTECT[1] array.                                     */

/* UICR_APPROTECT_PROTECT0: Access port protection */
  #define UICR_APPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL) /*!< Reset value of PROTECT0 register.                             */

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_APPROTECT_PROTECT0_PALL_Pos (0UL)     /*!< Position of PALL field.                                              */
  #define UICR_APPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL field.     */
  #define UICR_APPROTECT_PROTECT0_PALL_Min (0xFFFFFFFFUL) /*!< Min enumerator value of PALL field.                             */
  #define UICR_APPROTECT_PROTECT0_PALL_Max (0xFFFFFFFFUL) /*!< Max enumerator value of PALL field.                             */
  #define UICR_APPROTECT_PROTECT0_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN DBGEN and NIDEN signal
                                                                       protectors unlocked and under CPU control.*/


/* UICR_APPROTECT_PROTECT1: Access port protection */
  #define UICR_APPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL) /*!< Reset value of PROTECT1 register.                             */

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_APPROTECT_PROTECT1_PALL_Pos (0UL)     /*!< Position of PALL field.                                              */
  #define UICR_APPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL field.     */
  #define UICR_APPROTECT_PROTECT1_PALL_Min (0xFFFFFFFFUL) /*!< Min enumerator value of PALL field.                             */
  #define UICR_APPROTECT_PROTECT1_PALL_Max (0xFFFFFFFFUL) /*!< Max enumerator value of PALL field.                             */
  #define UICR_APPROTECT_PROTECT1_PALL_Unprotected (0xFFFFFFFFUL) /*!< Leaves TAMPC PROTECT.DOMAIN DBGEN and NIDEN signal
                                                                       protectors unlocked and under CPU control.*/



/* ================================================ Struct UICR_ERASEPROTECT ================================================= */
/**
  * @brief ERASEPROTECT [UICR_ERASEPROTECT] Erase Protection Registers
  */
typedef struct {
  __IOM uint32_t  PROTECT0;                          /*!< (@ 0x00000000) Erase protection                                      */
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  PROTECT1;                          /*!< (@ 0x0000001C) Erase protection                                      */
} NRF_UICR_ERASEPROTECT_Type;                        /*!< Size = 32 (0x020)                                                    */
  #define UICR_ERASEPROTECT_MaxCount (1UL)           /*!< Size of ERASEPROTECT[1] array.                                       */
  #define UICR_ERASEPROTECT_MaxIndex (0UL)           /*!< Max index of ERASEPROTECT[1] array.                                  */
  #define UICR_ERASEPROTECT_MinIndex (0UL)           /*!< Min index of ERASEPROTECT[1] array.                                  */

/* UICR_ERASEPROTECT_PROTECT0: Erase protection */
  #define UICR_ERASEPROTECT_PROTECT0_ResetValue (0xFFFFFFFFUL) /*!< Reset value of PROTECT0 register.                          */

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Pos (0UL)  /*!< Position of PALL field.                                              */
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PROTECT0_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Min (0x50FA50FAUL) /*!< Min enumerator value of PALL field.                          */
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Max (0x50FA50FAUL) /*!< Max enumerator value of PALL field.                          */
  #define UICR_ERASEPROTECT_PROTECT0_PALL_Protected (0x50FA50FAUL) /*!< Erase protection is enabled and the signal protector is
                                                                        locked.*/


/* UICR_ERASEPROTECT_PROTECT1: Erase protection */
  #define UICR_ERASEPROTECT_PROTECT1_ResetValue (0xFFFFFFFFUL) /*!< Reset value of PROTECT1 register.                          */

/* PALL @Bits 0..31 : (unspecified) */
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Pos (0UL)  /*!< Position of PALL field.                                              */
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PROTECT1_PALL_Pos) /*!< Bit mask of PALL
                                                                            field.*/
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Min (0x50FA50FAUL) /*!< Min enumerator value of PALL field.                          */
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Max (0x50FA50FAUL) /*!< Max enumerator value of PALL field.                          */
  #define UICR_ERASEPROTECT_PROTECT1_PALL_Protected (0x50FA50FAUL) /*!< Erase protection is enabled and the signal protector is
                                                                        locked.*/



/* =============================================== Struct UICR_USER_ROT_PUBKEY =============================================== */
/**
  * @brief PUBKEY [UICR_USER_ROT_PUBKEY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIGEST[8];                         /*!< (@ 0x00000000) First 256 bits of SHA2-512 digest over RoT public key
                                                                         generation [n].*/
  __IOM uint32_t  REVOKE[3];                         /*!< (@ 0x00000020) Revocation status for RoT public key generation [n].  */
} NRF_UICR_USER_ROT_PUBKEY_Type;                     /*!< Size = 44 (0x02C)                                                    */
  #define UICR_USER_ROT_PUBKEY_MaxCount (4UL)        /*!< Size of PUBKEY[4] array.                                             */
  #define UICR_USER_ROT_PUBKEY_MaxIndex (3UL)        /*!< Max index of PUBKEY[4] array.                                        */
  #define UICR_USER_ROT_PUBKEY_MinIndex (0UL)        /*!< Min index of PUBKEY[4] array.                                        */

/* UICR_USER_ROT_PUBKEY_DIGEST: First 256 bits of SHA2-512 digest over RoT public key generation [n]. */
  #define UICR_USER_ROT_PUBKEY_DIGEST_MaxCount (8UL) /*!< Max size of DIGEST[8] array.                                         */
  #define UICR_USER_ROT_PUBKEY_DIGEST_MaxIndex (7UL) /*!< Max index of DIGEST[8] array.                                        */
  #define UICR_USER_ROT_PUBKEY_DIGEST_MinIndex (0UL) /*!< Min index of DIGEST[8] array.                                        */
  #define UICR_USER_ROT_PUBKEY_DIGEST_ResetValue (0xFFFFFFFFUL) /*!< Reset value of DIGEST[8] register.                        */

/* VALUE @Bits 0..31 : Value for word [o] in the key digest [n]. */
  #define UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Pos (0UL) /*!< Position of VALUE field.                                            */
  #define UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Msk (0xFFFFFFFFUL << UICR_USER_ROT_PUBKEY_DIGEST_VALUE_Pos) /*!< Bit mask of VALUE
                                                                            field.*/


/* UICR_USER_ROT_PUBKEY_REVOKE: Revocation status for RoT public key generation [n]. */
  #define UICR_USER_ROT_PUBKEY_REVOKE_MaxCount (3UL) /*!< Max size of REVOKE[3] array.                                         */
  #define UICR_USER_ROT_PUBKEY_REVOKE_MaxIndex (2UL) /*!< Max index of REVOKE[3] array.                                        */
  #define UICR_USER_ROT_PUBKEY_REVOKE_MinIndex (0UL) /*!< Min index of REVOKE[3] array.                                        */
  #define UICR_USER_ROT_PUBKEY_REVOKE_ResetValue (0xFFFFFFFFUL) /*!< Reset value of REVOKE[3] register.                        */

/* STATUS @Bits 0..31 : Revocation status. */
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Pos (0UL) /*!< Position of STATUS field.                                          */
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Msk (0xFFFFFFFFUL << UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Pos) /*!< Bit mask of
                                                                            STATUS field.*/
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Min (0xFFFFFFFFUL) /*!< Min enumerator value of STATUS field.                     */
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_Max (0xFFFFFFFFUL) /*!< Max enumerator value of STATUS field.                     */
  #define UICR_USER_ROT_PUBKEY_REVOKE_STATUS_NotRevoked (0xFFFFFFFFUL) /*!< Key not revoked.                                   */



/* ============================================= Struct UICR_USER_ROT_AUTHOPKEY ============================================== */
/**
  * @brief AUTHOPKEY [UICR_USER_ROT_AUTHOPKEY] (unspecified)
  */
typedef struct {
  __IOM uint32_t  DIGEST[8];                         /*!< (@ 0x00000000) First 256 bits of SHA2-512 digest over RoT
                                                                         authenticated operation public key generation [n].*/
  __IOM uint32_t  REVOKE[3];                         /*!< (@ 0x00000020) Revocation status for RoT authenticated operation
                                                                         public key generation [n].*/
} NRF_UICR_USER_ROT_AUTHOPKEY_Type;                  /*!< Size = 44 (0x02C)                                                    */
  #define UICR_USER_ROT_AUTHOPKEY_MaxCount (4UL)     /*!< Size of AUTHOPKEY[4] array.                                          */
  #define UICR_USER_ROT_AUTHOPKEY_MaxIndex (3UL)     /*!< Max index of AUTHOPKEY[4] array.                                     */
  #define UICR_USER_ROT_AUTHOPKEY_MinIndex (0UL)     /*!< Min index of AUTHOPKEY[4] array.                                     */

/* UICR_USER_ROT_AUTHOPKEY_DIGEST: First 256 bits of SHA2-512 digest over RoT authenticated operation public key generation [n].
                                    */

  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MaxCount (8UL) /*!< Max size of DIGEST[8] array.                                      */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MaxIndex (7UL) /*!< Max index of DIGEST[8] array.                                     */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_MinIndex (0UL) /*!< Min index of DIGEST[8] array.                                     */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_ResetValue (0xFFFFFFFFUL) /*!< Reset value of DIGEST[8] register.                     */

/* VALUE @Bits 0..31 : Value for word [o] in the key digest [n]. */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Pos (0UL) /*!< Position of VALUE field.                                         */
  #define UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Msk (0xFFFFFFFFUL << UICR_USER_ROT_AUTHOPKEY_DIGEST_VALUE_Pos) /*!< Bit mask of
                                                                            VALUE field.*/


/* UICR_USER_ROT_AUTHOPKEY_REVOKE: Revocation status for RoT authenticated operation public key generation [n]. */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MaxCount (3UL) /*!< Max size of REVOKE[3] array.                                      */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MaxIndex (2UL) /*!< Max index of REVOKE[3] array.                                     */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_MinIndex (0UL) /*!< Min index of REVOKE[3] array.                                     */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_ResetValue (0xFFFFFFFFUL) /*!< Reset value of REVOKE[3] register.                     */

/* STATUS @Bits 0..31 : Revocation status. */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Pos (0UL) /*!< Position of STATUS field.                                       */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Msk (0xFFFFFFFFUL << UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Pos) /*!< Bit mask of
                                                                            STATUS field.*/
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Min (0xFFFFFFFFUL) /*!< Min enumerator value of STATUS field.                  */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_Max (0xFFFFFFFFUL) /*!< Max enumerator value of STATUS field.                  */
  #define UICR_USER_ROT_AUTHOPKEY_REVOKE_STATUS_NotRevoked (0xFFFFFFFFUL) /*!< Key not revoked.                                */



/* ================================================== Struct UICR_USER_ROT =================================================== */
/**
  * @brief ROT [UICR_USER_ROT] Assets installed to establish initial Root of Trust in the device.
  */
typedef struct {
  __IOM NRF_UICR_USER_ROT_PUBKEY_Type PUBKEY[4];     /*!< (@ 0x00000000) (unspecified)                                         */
  __IOM NRF_UICR_USER_ROT_AUTHOPKEY_Type AUTHOPKEY[4]; /*!< (@ 0x000000B0) (unspecified)                                       */
} NRF_UICR_USER_ROT_Type;                            /*!< Size = 352 (0x160)                                                   */


/* ==================================================== Struct UICR_USER ===================================================== */
/**
  * @brief USER [UICR_USER] (unspecified)
  */
typedef struct {
  __IOM NRF_UICR_USER_ROT_Type ROT;                  /*!< (@ 0x00000000) Assets installed to establish initial Root of Trust in
                                                                         the device.*/
} NRF_UICR_USER_Type;                                /*!< Size = 352 (0x160)                                                   */

/* ======================================================= Struct UICR ======================================================= */
/**
  * @brief User Information Configuration Registers
  */
  typedef struct {                                   /*!< UICR Structure                                                       */
    __IOM NRF_UICR_APPROTECT_Type APPROTECT[1];      /*!< (@ 0x00000000) Access Port Protection Registers                      */
    __IM uint32_t RESERVED[20];
    __IOM NRF_UICR_ERASEPROTECT_Type ERASEPROTECT[1]; /*!< (@ 0x00000060) Erase Protection Registers                           */
    __IOM uint32_t BOOTCONF;                         /*!< (@ 0x00000080) Immutable boot region configuration.                  */
    __IM uint32_t RESERVED1[95];
    __IOM NRF_UICR_USER_Type USER;                   /*!< (@ 0x00000200) (unspecified)                                         */
    __IM uint32_t RESERVED2[104];
    __IOM uint32_t OTP[320];                         /*!< (@ 0x00000500) One time programmable memory                          */
  } NRF_UICR_Type;                                   /*!< Size = 2560 (0xA00)                                                  */

/* UICR_BOOTCONF: Immutable boot region configuration. */
  #define UICR_BOOTCONF_ResetValue (0xFFFFFFFFUL)    /*!< Reset value of BOOTCONF register.                                    */

/* READ @Bit 0 : Read access. Must be enabled in order for the Arm Cortex CPU to start executing from RRAM. */
  #define UICR_BOOTCONF_READ_Pos (0UL)               /*!< Position of READ field.                                              */
  #define UICR_BOOTCONF_READ_Msk (0x1UL << UICR_BOOTCONF_READ_Pos) /*!< Bit mask of READ field.                                */
  #define UICR_BOOTCONF_READ_Min (0x0UL)             /*!< Min enumerator value of READ field.                                  */
  #define UICR_BOOTCONF_READ_Max (0x1UL)             /*!< Max enumerator value of READ field.                                  */
  #define UICR_BOOTCONF_READ_NotAllowed (0x0UL)      /*!< Reading from the region is not allowed.                              */
  #define UICR_BOOTCONF_READ_Allowed (0x1UL)         /*!< Reading from the region is allowed                                   */

/* WRITE @Bit 1 : Write access */
  #define UICR_BOOTCONF_WRITE_Pos (1UL)              /*!< Position of WRITE field.                                             */
  #define UICR_BOOTCONF_WRITE_Msk (0x1UL << UICR_BOOTCONF_WRITE_Pos) /*!< Bit mask of WRITE field.                             */
  #define UICR_BOOTCONF_WRITE_Min (0x0UL)            /*!< Min enumerator value of WRITE field.                                 */
  #define UICR_BOOTCONF_WRITE_Max (0x1UL)            /*!< Max enumerator value of WRITE field.                                 */
  #define UICR_BOOTCONF_WRITE_NotAllowed (0x0UL)     /*!< Writing to the region is not allowed                                 */
  #define UICR_BOOTCONF_WRITE_Allowed (0x1UL)        /*!< Writing to the region is allowed                                     */

/* EXECUTE @Bit 2 : Execute access */
  #define UICR_BOOTCONF_EXECUTE_Pos (2UL)            /*!< Position of EXECUTE field.                                           */
  #define UICR_BOOTCONF_EXECUTE_Msk (0x1UL << UICR_BOOTCONF_EXECUTE_Pos) /*!< Bit mask of EXECUTE field.                       */
  #define UICR_BOOTCONF_EXECUTE_Min (0x0UL)          /*!< Min enumerator value of EXECUTE field.                               */
  #define UICR_BOOTCONF_EXECUTE_Max (0x1UL)          /*!< Max enumerator value of EXECUTE field.                               */
  #define UICR_BOOTCONF_EXECUTE_NotAllowed (0x0UL)   /*!< Executing code from the region is not allowed                        */
  #define UICR_BOOTCONF_EXECUTE_Allowed (0x1UL)      /*!< Executing code from the region is allowed                            */

/* SECURE @Bit 3 : Secure access */
  #define UICR_BOOTCONF_SECURE_Pos (3UL)             /*!< Position of SECURE field.                                            */
  #define UICR_BOOTCONF_SECURE_Msk (0x1UL << UICR_BOOTCONF_SECURE_Pos) /*!< Bit mask of SECURE field.                          */
  #define UICR_BOOTCONF_SECURE_Min (0x0UL)           /*!< Min enumerator value of SECURE field.                                */
  #define UICR_BOOTCONF_SECURE_Max (0x1UL)           /*!< Max enumerator value of SECURE field.                                */
  #define UICR_BOOTCONF_SECURE_NonSecure (0x0UL)     /*!< Both secure and non-secure access to region is allowed               */
  #define UICR_BOOTCONF_SECURE_Secure (0x1UL)        /*!< Only secure access to region is allowed                              */

/* WRITEONCE @Bit 12 : Write-once */
  #define UICR_BOOTCONF_WRITEONCE_Pos (12UL)         /*!< Position of WRITEONCE field.                                         */
  #define UICR_BOOTCONF_WRITEONCE_Msk (0x1UL << UICR_BOOTCONF_WRITEONCE_Pos) /*!< Bit mask of WRITEONCE field.                 */
  #define UICR_BOOTCONF_WRITEONCE_Min (0x0UL)        /*!< Min enumerator value of WRITEONCE field.                             */
  #define UICR_BOOTCONF_WRITEONCE_Max (0x1UL)        /*!< Max enumerator value of WRITEONCE field.                             */
  #define UICR_BOOTCONF_WRITEONCE_Disabled (0x0UL)   /*!< Write-once disabled                                                  */
  #define UICR_BOOTCONF_WRITEONCE_Enabled (0x1UL)    /*!< Write-once enabled                                                   */

/* LOCK @Bit 13 : Enable lock of configuration register */
  #define UICR_BOOTCONF_LOCK_Pos (13UL)              /*!< Position of LOCK field.                                              */
  #define UICR_BOOTCONF_LOCK_Msk (0x1UL << UICR_BOOTCONF_LOCK_Pos) /*!< Bit mask of LOCK field.                                */
  #define UICR_BOOTCONF_LOCK_Min (0x0UL)             /*!< Min enumerator value of LOCK field.                                  */
  #define UICR_BOOTCONF_LOCK_Max (0x1UL)             /*!< Max enumerator value of LOCK field.                                  */
  #define UICR_BOOTCONF_LOCK_Disabled (0x0UL)        /*!< Lock is disabled, and the RRAMC region configuration registers for the
                                                          immutable boot region are writable.*/
  #define UICR_BOOTCONF_LOCK_Enabled (0x1UL)         /*!< Lock is enabled, and the RRAMC configuration registers for the
                                                          immutable boot region are read-only.*/

/* SIZE @Bits 16..25 : Immutable boot region size */
  #define UICR_BOOTCONF_SIZE_Pos (16UL)              /*!< Position of SIZE field.                                              */
  #define UICR_BOOTCONF_SIZE_Msk (0x3FFUL << UICR_BOOTCONF_SIZE_Pos) /*!< Bit mask of SIZE field.                              */


/* UICR_OTP: One time programmable memory */
  #define UICR_OTP_MaxCount (320UL)                  /*!< Max size of OTP[320] array.                                          */
  #define UICR_OTP_MaxIndex (319UL)                  /*!< Max index of OTP[320] array.                                         */
  #define UICR_OTP_MinIndex (0UL)                    /*!< Min index of OTP[320] array.                                         */
  #define UICR_OTP_ResetValue (0xFFFFFFFFUL)         /*!< Reset value of OTP[320] register.                                    */

/* OTP @Bits 0..31 : OTP word */
  #define UICR_OTP_OTP_Pos (0UL)                     /*!< Position of OTP field.                                               */
  #define UICR_OTP_OTP_Msk (0xFFFFFFFFUL << UICR_OTP_OTP_Pos) /*!< Bit mask of OTP field.                                      */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                      VDMADESCRIPTOR                                      ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ================================================== Struct VDMADESCRIPTOR ================================================== */
/**
  * @brief Job descriptor for vector-based DMA.
  */
  typedef struct {                                   /*!< VDMADESCRIPTOR Structure                                             */
    __IOM uint32_t PTR;                              /*!< (@ 0x00000000) Pointer to data buffer.                               */
    __IOM uint32_t CONFIG;                           /*!< (@ 0x00000004) Job configuration. Configuration of attributes and
                                                                         buffer length.*/
  } NRF_VDMADESCRIPTOR_Type;                         /*!< Size = 8 (0x008)                                                     */

/* VDMADESCRIPTOR_PTR: Pointer to data buffer. */
  #define VDMADESCRIPTOR_PTR_ResetValue (0x00000000UL) /*!< Reset value of PTR register.                                       */

/* PTR @Bits 0..31 : Pointer to data buffer. */
  #define VDMADESCRIPTOR_PTR_PTR_Pos (0UL)           /*!< Position of PTR field.                                               */
  #define VDMADESCRIPTOR_PTR_PTR_Msk (0xFFFFFFFFUL << VDMADESCRIPTOR_PTR_PTR_Pos) /*!< Bit mask of PTR field.                  */


/* VDMADESCRIPTOR_CONFIG: Job configuration. Configuration of attributes and buffer length. */
  #define VDMADESCRIPTOR_CONFIG_ResetValue (0x00000000UL) /*!< Reset value of CONFIG register.                                 */

/* CNT @Bits 0..23 : Maximum number of bytes in data buffer. */
  #define VDMADESCRIPTOR_CONFIG_CNT_Pos (0UL)        /*!< Position of CNT field.                                               */
  #define VDMADESCRIPTOR_CONFIG_CNT_Msk (0xFFFFFFUL << VDMADESCRIPTOR_CONFIG_CNT_Pos) /*!< Bit mask of CNT field.              */

/* ATTRIBUTE @Bits 24..29 : Job attribute. */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Pos (24UL) /*!< Position of ATTRIBUTE field.                                         */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Msk (0x3FUL << VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Pos) /*!< Bit mask of ATTRIBUTE field.*/
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Min (0xBUL) /*!< Min enumerator value of ATTRIBUTE field.                            */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_Max (0xEUL) /*!< Max enumerator value of ATTRIBUTE field.                            */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarHash (0x0BUL) /*!< Hash attribute                                                 */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarPrand (0x0CUL) /*!< Prand attribute                                               */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_AarIrk (0x0DUL) /*!< Irk attribute                                                   */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmAlen (0x0BUL) /*!< Alen attribute                                                 */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmMlen (0x0CUL) /*!< Mlen attribute                                                 */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmAdata (0x0DUL) /*!< Adata attribute                                               */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_CcmMdata (0x0EUL) /*!< Mdata attribute                                               */
  #define VDMADESCRIPTOR_CONFIG_ATTRIBUTE_EcbData (0x0BUL) /*!< EcbData attribute                                              */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

#if !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__) /*!< Ignore C structs for assembly code.                                 */
/* ======================================================= Struct WDT ======================================================== */
/**
  * @brief Watchdog Timer
  */
  typedef struct {                                   /*!< WDT Structure                                                        */
    __OM uint32_t TASKS_START;                       /*!< (@ 0x00000000) Start WDT                                             */
    __OM uint32_t TASKS_STOP;                        /*!< (@ 0x00000004) Stop WDT                                              */
    __IM uint32_t RESERVED[30];
    __IOM uint32_t SUBSCRIBE_START;                  /*!< (@ 0x00000080) Subscribe configuration for task START                */
    __IOM uint32_t SUBSCRIBE_STOP;                   /*!< (@ 0x00000084) Subscribe configuration for task STOP                 */
    __IM uint32_t RESERVED1[30];
    __IOM uint32_t EVENTS_TIMEOUT;                   /*!< (@ 0x00000100) Watchdog timeout                                      */
    __IOM uint32_t EVENTS_STOPPED;                   /*!< (@ 0x00000104) Watchdog stopped                                      */
    __IM uint32_t RESERVED2[30];
    __IOM uint32_t PUBLISH_TIMEOUT;                  /*!< (@ 0x00000180) Publish configuration for event TIMEOUT               */
    __IOM uint32_t PUBLISH_STOPPED;                  /*!< (@ 0x00000184) Publish configuration for event STOPPED               */
    __IM uint32_t RESERVED3[95];
    __IOM uint32_t INTENSET;                         /*!< (@ 0x00000304) Enable interrupt                                      */
    __IOM uint32_t INTENCLR;                         /*!< (@ 0x00000308) Disable interrupt                                     */
    __IM uint32_t RESERVED4[6];
    __IOM uint32_t NMIENSET;                         /*!< (@ 0x00000324) Enable interrupt                                      */
    __IOM uint32_t NMIENCLR;                         /*!< (@ 0x00000328) Disable interrupt                                     */
    __IM uint32_t RESERVED5[53];
    __IM uint32_t RUNSTATUS;                         /*!< (@ 0x00000400) Run status                                            */
    __IM uint32_t REQSTATUS;                         /*!< (@ 0x00000404) Request status                                        */
    __IM uint32_t RESERVED6[63];
    __IOM uint32_t CRV;                              /*!< (@ 0x00000504) Counter reload value                                  */
    __IOM uint32_t RREN;                             /*!< (@ 0x00000508) Enable register for reload request registers          */
    __IOM uint32_t CONFIG;                           /*!< (@ 0x0000050C) Configuration register                                */
    __IM uint32_t RESERVED7[4];
    __OM uint32_t TSEN;                              /*!< (@ 0x00000520) Task stop enable                                      */
    __IM uint32_t RESERVED8[55];
    __OM uint32_t RR[8];                             /*!< (@ 0x00000600) Reload request n                                      */
  } NRF_WDT_Type;                                    /*!< Size = 1568 (0x620)                                                  */

/* WDT_TASKS_START: Start WDT */
  #define WDT_TASKS_START_ResetValue (0x00000000UL)  /*!< Reset value of TASKS_START register.                                 */

/* TASKS_START @Bit 0 : Start WDT */
  #define WDT_TASKS_START_TASKS_START_Pos (0UL)      /*!< Position of TASKS_START field.                                       */
  #define WDT_TASKS_START_TASKS_START_Msk (0x1UL << WDT_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field.       */
  #define WDT_TASKS_START_TASKS_START_Min (0x1UL)    /*!< Min enumerator value of TASKS_START field.                           */
  #define WDT_TASKS_START_TASKS_START_Max (0x1UL)    /*!< Max enumerator value of TASKS_START field.                           */
  #define WDT_TASKS_START_TASKS_START_Trigger (0x1UL) /*!< Trigger task                                                        */


/* WDT_TASKS_STOP: Stop WDT */
  #define WDT_TASKS_STOP_ResetValue (0x00000000UL)   /*!< Reset value of TASKS_STOP register.                                  */

/* TASKS_STOP @Bit 0 : Stop WDT */
  #define WDT_TASKS_STOP_TASKS_STOP_Pos (0UL)        /*!< Position of TASKS_STOP field.                                        */
  #define WDT_TASKS_STOP_TASKS_STOP_Msk (0x1UL << WDT_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field.            */
  #define WDT_TASKS_STOP_TASKS_STOP_Min (0x1UL)      /*!< Min enumerator value of TASKS_STOP field.                            */
  #define WDT_TASKS_STOP_TASKS_STOP_Max (0x1UL)      /*!< Max enumerator value of TASKS_STOP field.                            */
  #define WDT_TASKS_STOP_TASKS_STOP_Trigger (0x1UL)  /*!< Trigger task                                                         */


/* WDT_SUBSCRIBE_START: Subscribe configuration for task START */
  #define WDT_SUBSCRIBE_START_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_START register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that task START will subscribe to */
  #define WDT_SUBSCRIBE_START_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define WDT_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define WDT_SUBSCRIBE_START_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define WDT_SUBSCRIBE_START_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define WDT_SUBSCRIBE_START_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define WDT_SUBSCRIBE_START_EN_Msk (0x1UL << WDT_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field.                          */
  #define WDT_SUBSCRIBE_START_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define WDT_SUBSCRIBE_START_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define WDT_SUBSCRIBE_START_EN_Disabled (0x0UL)    /*!< Disable subscription                                                 */
  #define WDT_SUBSCRIBE_START_EN_Enabled (0x1UL)     /*!< Enable subscription                                                  */


/* WDT_SUBSCRIBE_STOP: Subscribe configuration for task STOP */
  #define WDT_SUBSCRIBE_STOP_ResetValue (0x00000000UL) /*!< Reset value of SUBSCRIBE_STOP register.                            */

/* CHIDX @Bits 0..7 : DPPI channel that task STOP will subscribe to */
  #define WDT_SUBSCRIBE_STOP_CHIDX_Pos (0UL)         /*!< Position of CHIDX field.                                             */
  #define WDT_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field.                  */
  #define WDT_SUBSCRIBE_STOP_CHIDX_Min (0x00UL)      /*!< Min value of CHIDX field.                                            */
  #define WDT_SUBSCRIBE_STOP_CHIDX_Max (0xFFUL)      /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define WDT_SUBSCRIBE_STOP_EN_Pos (31UL)           /*!< Position of EN field.                                                */
  #define WDT_SUBSCRIBE_STOP_EN_Msk (0x1UL << WDT_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field.                            */
  #define WDT_SUBSCRIBE_STOP_EN_Min (0x0UL)          /*!< Min enumerator value of EN field.                                    */
  #define WDT_SUBSCRIBE_STOP_EN_Max (0x1UL)          /*!< Max enumerator value of EN field.                                    */
  #define WDT_SUBSCRIBE_STOP_EN_Disabled (0x0UL)     /*!< Disable subscription                                                 */
  #define WDT_SUBSCRIBE_STOP_EN_Enabled (0x1UL)      /*!< Enable subscription                                                  */


/* WDT_EVENTS_TIMEOUT: Watchdog timeout */
  #define WDT_EVENTS_TIMEOUT_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_TIMEOUT register.                            */

/* EVENTS_TIMEOUT @Bit 0 : Watchdog timeout */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos (0UL) /*!< Position of EVENTS_TIMEOUT field.                                   */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Msk (0x1UL << WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos) /*!< Bit mask of EVENTS_TIMEOUT
                                                                            field.*/
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Min (0x0UL) /*!< Min enumerator value of EVENTS_TIMEOUT field.                     */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Max (0x1UL) /*!< Max enumerator value of EVENTS_TIMEOUT field.                     */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Generated (0x1UL) /*!< Event generated                                             */


/* WDT_EVENTS_STOPPED: Watchdog stopped */
  #define WDT_EVENTS_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of EVENTS_STOPPED register.                            */

/* EVENTS_STOPPED @Bit 0 : Watchdog stopped */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field.                                   */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED
                                                                            field.*/
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Min (0x0UL) /*!< Min enumerator value of EVENTS_STOPPED field.                     */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Max (0x1UL) /*!< Max enumerator value of EVENTS_STOPPED field.                     */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0x0UL) /*!< Event not generated                                      */
  #define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Generated (0x1UL) /*!< Event generated                                             */


/* WDT_PUBLISH_TIMEOUT: Publish configuration for event TIMEOUT */
  #define WDT_PUBLISH_TIMEOUT_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_TIMEOUT register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event TIMEOUT will publish to */
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Msk (0xFFUL << WDT_PUBLISH_TIMEOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define WDT_PUBLISH_TIMEOUT_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define WDT_PUBLISH_TIMEOUT_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define WDT_PUBLISH_TIMEOUT_EN_Msk (0x1UL << WDT_PUBLISH_TIMEOUT_EN_Pos) /*!< Bit mask of EN field.                          */
  #define WDT_PUBLISH_TIMEOUT_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define WDT_PUBLISH_TIMEOUT_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define WDT_PUBLISH_TIMEOUT_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define WDT_PUBLISH_TIMEOUT_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* WDT_PUBLISH_STOPPED: Publish configuration for event STOPPED */
  #define WDT_PUBLISH_STOPPED_ResetValue (0x00000000UL) /*!< Reset value of PUBLISH_STOPPED register.                          */

/* CHIDX @Bits 0..7 : DPPI channel that event STOPPED will publish to */
  #define WDT_PUBLISH_STOPPED_CHIDX_Pos (0UL)        /*!< Position of CHIDX field.                                             */
  #define WDT_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << WDT_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field.                */
  #define WDT_PUBLISH_STOPPED_CHIDX_Min (0x00UL)     /*!< Min value of CHIDX field.                                            */
  #define WDT_PUBLISH_STOPPED_CHIDX_Max (0xFFUL)     /*!< Max size of CHIDX field.                                             */

/* EN @Bit 31 : (unspecified) */
  #define WDT_PUBLISH_STOPPED_EN_Pos (31UL)          /*!< Position of EN field.                                                */
  #define WDT_PUBLISH_STOPPED_EN_Msk (0x1UL << WDT_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field.                          */
  #define WDT_PUBLISH_STOPPED_EN_Min (0x0UL)         /*!< Min enumerator value of EN field.                                    */
  #define WDT_PUBLISH_STOPPED_EN_Max (0x1UL)         /*!< Max enumerator value of EN field.                                    */
  #define WDT_PUBLISH_STOPPED_EN_Disabled (0x0UL)    /*!< Disable publishing                                                   */
  #define WDT_PUBLISH_STOPPED_EN_Enabled (0x1UL)     /*!< Enable publishing                                                    */


/* WDT_INTENSET: Enable interrupt */
  #define WDT_INTENSET_ResetValue (0x00000000UL)     /*!< Reset value of INTENSET register.                                    */

/* TIMEOUT @Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
  #define WDT_INTENSET_TIMEOUT_Pos (0UL)             /*!< Position of TIMEOUT field.                                           */
  #define WDT_INTENSET_TIMEOUT_Msk (0x1UL << WDT_INTENSET_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field.                         */
  #define WDT_INTENSET_TIMEOUT_Min (0x0UL)           /*!< Min enumerator value of TIMEOUT field.                               */
  #define WDT_INTENSET_TIMEOUT_Max (0x1UL)           /*!< Max enumerator value of TIMEOUT field.                               */
  #define WDT_INTENSET_TIMEOUT_Set (0x1UL)           /*!< Enable                                                               */
  #define WDT_INTENSET_TIMEOUT_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_INTENSET_TIMEOUT_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define WDT_INTENSET_STOPPED_Pos (1UL)             /*!< Position of STOPPED field.                                           */
  #define WDT_INTENSET_STOPPED_Msk (0x1UL << WDT_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                         */
  #define WDT_INTENSET_STOPPED_Min (0x0UL)           /*!< Min enumerator value of STOPPED field.                               */
  #define WDT_INTENSET_STOPPED_Max (0x1UL)           /*!< Max enumerator value of STOPPED field.                               */
  #define WDT_INTENSET_STOPPED_Set (0x1UL)           /*!< Enable                                                               */
  #define WDT_INTENSET_STOPPED_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_INTENSET_STOPPED_Enabled (0x1UL)       /*!< Read: Enabled                                                        */


/* WDT_INTENCLR: Disable interrupt */
  #define WDT_INTENCLR_ResetValue (0x00000000UL)     /*!< Reset value of INTENCLR register.                                    */

/* TIMEOUT @Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
  #define WDT_INTENCLR_TIMEOUT_Pos (0UL)             /*!< Position of TIMEOUT field.                                           */
  #define WDT_INTENCLR_TIMEOUT_Msk (0x1UL << WDT_INTENCLR_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field.                         */
  #define WDT_INTENCLR_TIMEOUT_Min (0x0UL)           /*!< Min enumerator value of TIMEOUT field.                               */
  #define WDT_INTENCLR_TIMEOUT_Max (0x1UL)           /*!< Max enumerator value of TIMEOUT field.                               */
  #define WDT_INTENCLR_TIMEOUT_Clear (0x1UL)         /*!< Disable                                                              */
  #define WDT_INTENCLR_TIMEOUT_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_INTENCLR_TIMEOUT_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define WDT_INTENCLR_STOPPED_Pos (1UL)             /*!< Position of STOPPED field.                                           */
  #define WDT_INTENCLR_STOPPED_Msk (0x1UL << WDT_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                         */
  #define WDT_INTENCLR_STOPPED_Min (0x0UL)           /*!< Min enumerator value of STOPPED field.                               */
  #define WDT_INTENCLR_STOPPED_Max (0x1UL)           /*!< Max enumerator value of STOPPED field.                               */
  #define WDT_INTENCLR_STOPPED_Clear (0x1UL)         /*!< Disable                                                              */
  #define WDT_INTENCLR_STOPPED_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_INTENCLR_STOPPED_Enabled (0x1UL)       /*!< Read: Enabled                                                        */


/* WDT_NMIENSET: Enable interrupt */
  #define WDT_NMIENSET_ResetValue (0x00000000UL)     /*!< Reset value of NMIENSET register.                                    */

/* TIMEOUT @Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
  #define WDT_NMIENSET_TIMEOUT_Pos (0UL)             /*!< Position of TIMEOUT field.                                           */
  #define WDT_NMIENSET_TIMEOUT_Msk (0x1UL << WDT_NMIENSET_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field.                         */
  #define WDT_NMIENSET_TIMEOUT_Min (0x0UL)           /*!< Min enumerator value of TIMEOUT field.                               */
  #define WDT_NMIENSET_TIMEOUT_Max (0x1UL)           /*!< Max enumerator value of TIMEOUT field.                               */
  #define WDT_NMIENSET_TIMEOUT_Set (0x1UL)           /*!< Enable                                                               */
  #define WDT_NMIENSET_TIMEOUT_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_NMIENSET_TIMEOUT_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* STOPPED @Bit 1 : Write '1' to enable interrupt for event STOPPED */
  #define WDT_NMIENSET_STOPPED_Pos (1UL)             /*!< Position of STOPPED field.                                           */
  #define WDT_NMIENSET_STOPPED_Msk (0x1UL << WDT_NMIENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field.                         */
  #define WDT_NMIENSET_STOPPED_Min (0x0UL)           /*!< Min enumerator value of STOPPED field.                               */
  #define WDT_NMIENSET_STOPPED_Max (0x1UL)           /*!< Max enumerator value of STOPPED field.                               */
  #define WDT_NMIENSET_STOPPED_Set (0x1UL)           /*!< Enable                                                               */
  #define WDT_NMIENSET_STOPPED_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_NMIENSET_STOPPED_Enabled (0x1UL)       /*!< Read: Enabled                                                        */


/* WDT_NMIENCLR: Disable interrupt */
  #define WDT_NMIENCLR_ResetValue (0x00000000UL)     /*!< Reset value of NMIENCLR register.                                    */

/* TIMEOUT @Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
  #define WDT_NMIENCLR_TIMEOUT_Pos (0UL)             /*!< Position of TIMEOUT field.                                           */
  #define WDT_NMIENCLR_TIMEOUT_Msk (0x1UL << WDT_NMIENCLR_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field.                         */
  #define WDT_NMIENCLR_TIMEOUT_Min (0x0UL)           /*!< Min enumerator value of TIMEOUT field.                               */
  #define WDT_NMIENCLR_TIMEOUT_Max (0x1UL)           /*!< Max enumerator value of TIMEOUT field.                               */
  #define WDT_NMIENCLR_TIMEOUT_Clear (0x1UL)         /*!< Disable                                                              */
  #define WDT_NMIENCLR_TIMEOUT_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_NMIENCLR_TIMEOUT_Enabled (0x1UL)       /*!< Read: Enabled                                                        */

/* STOPPED @Bit 1 : Write '1' to disable interrupt for event STOPPED */
  #define WDT_NMIENCLR_STOPPED_Pos (1UL)             /*!< Position of STOPPED field.                                           */
  #define WDT_NMIENCLR_STOPPED_Msk (0x1UL << WDT_NMIENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field.                         */
  #define WDT_NMIENCLR_STOPPED_Min (0x0UL)           /*!< Min enumerator value of STOPPED field.                               */
  #define WDT_NMIENCLR_STOPPED_Max (0x1UL)           /*!< Max enumerator value of STOPPED field.                               */
  #define WDT_NMIENCLR_STOPPED_Clear (0x1UL)         /*!< Disable                                                              */
  #define WDT_NMIENCLR_STOPPED_Disabled (0x0UL)      /*!< Read: Disabled                                                       */
  #define WDT_NMIENCLR_STOPPED_Enabled (0x1UL)       /*!< Read: Enabled                                                        */


/* WDT_RUNSTATUS: Run status */
  #define WDT_RUNSTATUS_ResetValue (0x00000000UL)    /*!< Reset value of RUNSTATUS register.                                   */

/* RUNSTATUSWDT @Bit 0 : Indicates whether or not WDT is running */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Pos (0UL)       /*!< Position of RUNSTATUSWDT field.                                      */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Msk (0x1UL << WDT_RUNSTATUS_RUNSTATUSWDT_Pos) /*!< Bit mask of RUNSTATUSWDT field.        */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Min (0x0UL)     /*!< Min enumerator value of RUNSTATUSWDT field.                          */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Max (0x1UL)     /*!< Max enumerator value of RUNSTATUSWDT field.                          */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_NotRunning (0x0UL) /*!< Watchdog is not running                                           */
  #define WDT_RUNSTATUS_RUNSTATUSWDT_Running (0x1UL) /*!< Watchdog is running                                                  */


/* WDT_REQSTATUS: Request status */
  #define WDT_REQSTATUS_ResetValue (0x00000001UL)    /*!< Reset value of REQSTATUS register.                                   */

/* RR0 @Bit 0 : Request status for RR[0] register */
  #define WDT_REQSTATUS_RR0_Pos (0UL)                /*!< Position of RR0 field.                                               */
  #define WDT_REQSTATUS_RR0_Msk (0x1UL << WDT_REQSTATUS_RR0_Pos) /*!< Bit mask of RR0 field.                                   */
  #define WDT_REQSTATUS_RR0_Min (0x0UL)              /*!< Min enumerator value of RR0 field.                                   */
  #define WDT_REQSTATUS_RR0_Max (0x1UL)              /*!< Max enumerator value of RR0 field.                                   */
  #define WDT_REQSTATUS_RR0_DisabledOrRequested (0x0UL) /*!< RR[0] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR0_EnabledAndUnrequested (0x1UL) /*!< RR[0] register is enabled, and are not yet requesting reload    */

/* RR1 @Bit 1 : Request status for RR[1] register */
  #define WDT_REQSTATUS_RR1_Pos (1UL)                /*!< Position of RR1 field.                                               */
  #define WDT_REQSTATUS_RR1_Msk (0x1UL << WDT_REQSTATUS_RR1_Pos) /*!< Bit mask of RR1 field.                                   */
  #define WDT_REQSTATUS_RR1_Min (0x0UL)              /*!< Min enumerator value of RR1 field.                                   */
  #define WDT_REQSTATUS_RR1_Max (0x1UL)              /*!< Max enumerator value of RR1 field.                                   */
  #define WDT_REQSTATUS_RR1_DisabledOrRequested (0x0UL) /*!< RR[1] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR1_EnabledAndUnrequested (0x1UL) /*!< RR[1] register is enabled, and are not yet requesting reload    */

/* RR2 @Bit 2 : Request status for RR[2] register */
  #define WDT_REQSTATUS_RR2_Pos (2UL)                /*!< Position of RR2 field.                                               */
  #define WDT_REQSTATUS_RR2_Msk (0x1UL << WDT_REQSTATUS_RR2_Pos) /*!< Bit mask of RR2 field.                                   */
  #define WDT_REQSTATUS_RR2_Min (0x0UL)              /*!< Min enumerator value of RR2 field.                                   */
  #define WDT_REQSTATUS_RR2_Max (0x1UL)              /*!< Max enumerator value of RR2 field.                                   */
  #define WDT_REQSTATUS_RR2_DisabledOrRequested (0x0UL) /*!< RR[2] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR2_EnabledAndUnrequested (0x1UL) /*!< RR[2] register is enabled, and are not yet requesting reload    */

/* RR3 @Bit 3 : Request status for RR[3] register */
  #define WDT_REQSTATUS_RR3_Pos (3UL)                /*!< Position of RR3 field.                                               */
  #define WDT_REQSTATUS_RR3_Msk (0x1UL << WDT_REQSTATUS_RR3_Pos) /*!< Bit mask of RR3 field.                                   */
  #define WDT_REQSTATUS_RR3_Min (0x0UL)              /*!< Min enumerator value of RR3 field.                                   */
  #define WDT_REQSTATUS_RR3_Max (0x1UL)              /*!< Max enumerator value of RR3 field.                                   */
  #define WDT_REQSTATUS_RR3_DisabledOrRequested (0x0UL) /*!< RR[3] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR3_EnabledAndUnrequested (0x1UL) /*!< RR[3] register is enabled, and are not yet requesting reload    */

/* RR4 @Bit 4 : Request status for RR[4] register */
  #define WDT_REQSTATUS_RR4_Pos (4UL)                /*!< Position of RR4 field.                                               */
  #define WDT_REQSTATUS_RR4_Msk (0x1UL << WDT_REQSTATUS_RR4_Pos) /*!< Bit mask of RR4 field.                                   */
  #define WDT_REQSTATUS_RR4_Min (0x0UL)              /*!< Min enumerator value of RR4 field.                                   */
  #define WDT_REQSTATUS_RR4_Max (0x1UL)              /*!< Max enumerator value of RR4 field.                                   */
  #define WDT_REQSTATUS_RR4_DisabledOrRequested (0x0UL) /*!< RR[4] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR4_EnabledAndUnrequested (0x1UL) /*!< RR[4] register is enabled, and are not yet requesting reload    */

/* RR5 @Bit 5 : Request status for RR[5] register */
  #define WDT_REQSTATUS_RR5_Pos (5UL)                /*!< Position of RR5 field.                                               */
  #define WDT_REQSTATUS_RR5_Msk (0x1UL << WDT_REQSTATUS_RR5_Pos) /*!< Bit mask of RR5 field.                                   */
  #define WDT_REQSTATUS_RR5_Min (0x0UL)              /*!< Min enumerator value of RR5 field.                                   */
  #define WDT_REQSTATUS_RR5_Max (0x1UL)              /*!< Max enumerator value of RR5 field.                                   */
  #define WDT_REQSTATUS_RR5_DisabledOrRequested (0x0UL) /*!< RR[5] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR5_EnabledAndUnrequested (0x1UL) /*!< RR[5] register is enabled, and are not yet requesting reload    */

/* RR6 @Bit 6 : Request status for RR[6] register */
  #define WDT_REQSTATUS_RR6_Pos (6UL)                /*!< Position of RR6 field.                                               */
  #define WDT_REQSTATUS_RR6_Msk (0x1UL << WDT_REQSTATUS_RR6_Pos) /*!< Bit mask of RR6 field.                                   */
  #define WDT_REQSTATUS_RR6_Min (0x0UL)              /*!< Min enumerator value of RR6 field.                                   */
  #define WDT_REQSTATUS_RR6_Max (0x1UL)              /*!< Max enumerator value of RR6 field.                                   */
  #define WDT_REQSTATUS_RR6_DisabledOrRequested (0x0UL) /*!< RR[6] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR6_EnabledAndUnrequested (0x1UL) /*!< RR[6] register is enabled, and are not yet requesting reload    */

/* RR7 @Bit 7 : Request status for RR[7] register */
  #define WDT_REQSTATUS_RR7_Pos (7UL)                /*!< Position of RR7 field.                                               */
  #define WDT_REQSTATUS_RR7_Msk (0x1UL << WDT_REQSTATUS_RR7_Pos) /*!< Bit mask of RR7 field.                                   */
  #define WDT_REQSTATUS_RR7_Min (0x0UL)              /*!< Min enumerator value of RR7 field.                                   */
  #define WDT_REQSTATUS_RR7_Max (0x1UL)              /*!< Max enumerator value of RR7 field.                                   */
  #define WDT_REQSTATUS_RR7_DisabledOrRequested (0x0UL) /*!< RR[7] register is not enabled, or are already requesting reload   */
  #define WDT_REQSTATUS_RR7_EnabledAndUnrequested (0x1UL) /*!< RR[7] register is enabled, and are not yet requesting reload    */


/* WDT_CRV: Counter reload value */
  #define WDT_CRV_ResetValue (0xFFFFFFFFUL)          /*!< Reset value of CRV register.                                         */

/* CRV @Bits 0..31 : Counter reload value in number of cycles of the 32.768 kHz clock */
  #define WDT_CRV_CRV_Pos (0UL)                      /*!< Position of CRV field.                                               */
  #define WDT_CRV_CRV_Msk (0xFFFFFFFFUL << WDT_CRV_CRV_Pos) /*!< Bit mask of CRV field.                                        */
  #define WDT_CRV_CRV_Min (0x0000000FUL)             /*!< Min value of CRV field.                                              */
  #define WDT_CRV_CRV_Max (0xFFFFFFFFUL)             /*!< Max size of CRV field.                                               */


/* WDT_RREN: Enable register for reload request registers */
  #define WDT_RREN_ResetValue (0x00000001UL)         /*!< Reset value of RREN register.                                        */

/* RR0 @Bit 0 : Enable or disable RR[0] register */
  #define WDT_RREN_RR0_Pos (0UL)                     /*!< Position of RR0 field.                                               */
  #define WDT_RREN_RR0_Msk (0x1UL << WDT_RREN_RR0_Pos) /*!< Bit mask of RR0 field.                                             */
  #define WDT_RREN_RR0_Min (0x0UL)                   /*!< Min enumerator value of RR0 field.                                   */
  #define WDT_RREN_RR0_Max (0x1UL)                   /*!< Max enumerator value of RR0 field.                                   */
  #define WDT_RREN_RR0_Disabled (0x0UL)              /*!< Disable RR[0] register                                               */
  #define WDT_RREN_RR0_Enabled (0x1UL)               /*!< Enable RR[0] register                                                */

/* RR1 @Bit 1 : Enable or disable RR[1] register */
  #define WDT_RREN_RR1_Pos (1UL)                     /*!< Position of RR1 field.                                               */
  #define WDT_RREN_RR1_Msk (0x1UL << WDT_RREN_RR1_Pos) /*!< Bit mask of RR1 field.                                             */
  #define WDT_RREN_RR1_Min (0x0UL)                   /*!< Min enumerator value of RR1 field.                                   */
  #define WDT_RREN_RR1_Max (0x1UL)                   /*!< Max enumerator value of RR1 field.                                   */
  #define WDT_RREN_RR1_Disabled (0x0UL)              /*!< Disable RR[1] register                                               */
  #define WDT_RREN_RR1_Enabled (0x1UL)               /*!< Enable RR[1] register                                                */

/* RR2 @Bit 2 : Enable or disable RR[2] register */
  #define WDT_RREN_RR2_Pos (2UL)                     /*!< Position of RR2 field.                                               */
  #define WDT_RREN_RR2_Msk (0x1UL << WDT_RREN_RR2_Pos) /*!< Bit mask of RR2 field.                                             */
  #define WDT_RREN_RR2_Min (0x0UL)                   /*!< Min enumerator value of RR2 field.                                   */
  #define WDT_RREN_RR2_Max (0x1UL)                   /*!< Max enumerator value of RR2 field.                                   */
  #define WDT_RREN_RR2_Disabled (0x0UL)              /*!< Disable RR[2] register                                               */
  #define WDT_RREN_RR2_Enabled (0x1UL)               /*!< Enable RR[2] register                                                */

/* RR3 @Bit 3 : Enable or disable RR[3] register */
  #define WDT_RREN_RR3_Pos (3UL)                     /*!< Position of RR3 field.                                               */
  #define WDT_RREN_RR3_Msk (0x1UL << WDT_RREN_RR3_Pos) /*!< Bit mask of RR3 field.                                             */
  #define WDT_RREN_RR3_Min (0x0UL)                   /*!< Min enumerator value of RR3 field.                                   */
  #define WDT_RREN_RR3_Max (0x1UL)                   /*!< Max enumerator value of RR3 field.                                   */
  #define WDT_RREN_RR3_Disabled (0x0UL)              /*!< Disable RR[3] register                                               */
  #define WDT_RREN_RR3_Enabled (0x1UL)               /*!< Enable RR[3] register                                                */

/* RR4 @Bit 4 : Enable or disable RR[4] register */
  #define WDT_RREN_RR4_Pos (4UL)                     /*!< Position of RR4 field.                                               */
  #define WDT_RREN_RR4_Msk (0x1UL << WDT_RREN_RR4_Pos) /*!< Bit mask of RR4 field.                                             */
  #define WDT_RREN_RR4_Min (0x0UL)                   /*!< Min enumerator value of RR4 field.                                   */
  #define WDT_RREN_RR4_Max (0x1UL)                   /*!< Max enumerator value of RR4 field.                                   */
  #define WDT_RREN_RR4_Disabled (0x0UL)              /*!< Disable RR[4] register                                               */
  #define WDT_RREN_RR4_Enabled (0x1UL)               /*!< Enable RR[4] register                                                */

/* RR5 @Bit 5 : Enable or disable RR[5] register */
  #define WDT_RREN_RR5_Pos (5UL)                     /*!< Position of RR5 field.                                               */
  #define WDT_RREN_RR5_Msk (0x1UL << WDT_RREN_RR5_Pos) /*!< Bit mask of RR5 field.                                             */
  #define WDT_RREN_RR5_Min (0x0UL)                   /*!< Min enumerator value of RR5 field.                                   */
  #define WDT_RREN_RR5_Max (0x1UL)                   /*!< Max enumerator value of RR5 field.                                   */
  #define WDT_RREN_RR5_Disabled (0x0UL)              /*!< Disable RR[5] register                                               */
  #define WDT_RREN_RR5_Enabled (0x1UL)               /*!< Enable RR[5] register                                                */

/* RR6 @Bit 6 : Enable or disable RR[6] register */
  #define WDT_RREN_RR6_Pos (6UL)                     /*!< Position of RR6 field.                                               */
  #define WDT_RREN_RR6_Msk (0x1UL << WDT_RREN_RR6_Pos) /*!< Bit mask of RR6 field.                                             */
  #define WDT_RREN_RR6_Min (0x0UL)                   /*!< Min enumerator value of RR6 field.                                   */
  #define WDT_RREN_RR6_Max (0x1UL)                   /*!< Max enumerator value of RR6 field.                                   */
  #define WDT_RREN_RR6_Disabled (0x0UL)              /*!< Disable RR[6] register                                               */
  #define WDT_RREN_RR6_Enabled (0x1UL)               /*!< Enable RR[6] register                                                */

/* RR7 @Bit 7 : Enable or disable RR[7] register */
  #define WDT_RREN_RR7_Pos (7UL)                     /*!< Position of RR7 field.                                               */
  #define WDT_RREN_RR7_Msk (0x1UL << WDT_RREN_RR7_Pos) /*!< Bit mask of RR7 field.                                             */
  #define WDT_RREN_RR7_Min (0x0UL)                   /*!< Min enumerator value of RR7 field.                                   */
  #define WDT_RREN_RR7_Max (0x1UL)                   /*!< Max enumerator value of RR7 field.                                   */
  #define WDT_RREN_RR7_Disabled (0x0UL)              /*!< Disable RR[7] register                                               */
  #define WDT_RREN_RR7_Enabled (0x1UL)               /*!< Enable RR[7] register                                                */


/* WDT_CONFIG: Configuration register */
  #define WDT_CONFIG_ResetValue (0x00000001UL)       /*!< Reset value of CONFIG register.                                      */

/* SLEEP @Bit 0 : Configure WDT to either be paused, or kept running, while the CPU is sleeping */
  #define WDT_CONFIG_SLEEP_Pos (0UL)                 /*!< Position of SLEEP field.                                             */
  #define WDT_CONFIG_SLEEP_Msk (0x1UL << WDT_CONFIG_SLEEP_Pos) /*!< Bit mask of SLEEP field.                                   */
  #define WDT_CONFIG_SLEEP_Min (0x0UL)               /*!< Min enumerator value of SLEEP field.                                 */
  #define WDT_CONFIG_SLEEP_Max (0x1UL)               /*!< Max enumerator value of SLEEP field.                                 */
  #define WDT_CONFIG_SLEEP_Pause (0x0UL)             /*!< Pause WDT while the CPU is sleeping                                  */
  #define WDT_CONFIG_SLEEP_Run (0x1UL)               /*!< Keep WDT running while the CPU is sleeping                           */

/* HALT @Bit 3 : Configure WDT to either be paused, or kept running, while the CPU is halted by the debugger */
  #define WDT_CONFIG_HALT_Pos (3UL)                  /*!< Position of HALT field.                                              */
  #define WDT_CONFIG_HALT_Msk (0x1UL << WDT_CONFIG_HALT_Pos) /*!< Bit mask of HALT field.                                      */
  #define WDT_CONFIG_HALT_Min (0x0UL)                /*!< Min enumerator value of HALT field.                                  */
  #define WDT_CONFIG_HALT_Max (0x1UL)                /*!< Max enumerator value of HALT field.                                  */
  #define WDT_CONFIG_HALT_Pause (0x0UL)              /*!< Pause WDT while the CPU is halted by the debugger                    */
  #define WDT_CONFIG_HALT_Run (0x1UL)                /*!< Keep WDT running while the CPU is halted by the debugger             */

/* STOPEN @Bit 6 : Allow stopping WDT */
  #define WDT_CONFIG_STOPEN_Pos (6UL)                /*!< Position of STOPEN field.                                            */
  #define WDT_CONFIG_STOPEN_Msk (0x1UL << WDT_CONFIG_STOPEN_Pos) /*!< Bit mask of STOPEN field.                                */
  #define WDT_CONFIG_STOPEN_Min (0x0UL)              /*!< Min enumerator value of STOPEN field.                                */
  #define WDT_CONFIG_STOPEN_Max (0x1UL)              /*!< Max enumerator value of STOPEN field.                                */
  #define WDT_CONFIG_STOPEN_Disable (0x0UL)          /*!< Do not allow stopping WDT                                            */
  #define WDT_CONFIG_STOPEN_Enable (0x1UL)           /*!< Allow stopping WDT                                                   */


/* WDT_TSEN: Task stop enable */
  #define WDT_TSEN_ResetValue (0x00000000UL)         /*!< Reset value of TSEN register.                                        */

/* TSEN @Bits 0..31 : Allow stopping WDT */
  #define WDT_TSEN_TSEN_Pos (0UL)                    /*!< Position of TSEN field.                                              */
  #define WDT_TSEN_TSEN_Msk (0xFFFFFFFFUL << WDT_TSEN_TSEN_Pos) /*!< Bit mask of TSEN field.                                   */
  #define WDT_TSEN_TSEN_Min (0x6E524635UL)           /*!< Min enumerator value of TSEN field.                                  */
  #define WDT_TSEN_TSEN_Max (0x6E524635UL)           /*!< Max enumerator value of TSEN field.                                  */
  #define WDT_TSEN_TSEN_Enable (0x6E524635UL)        /*!< Value to allow stopping WDT                                          */


/* WDT_RR: Reload request n */
  #define WDT_RR_MaxCount (8UL)                      /*!< Max size of RR[8] array.                                             */
  #define WDT_RR_MaxIndex (7UL)                      /*!< Max index of RR[8] array.                                            */
  #define WDT_RR_MinIndex (0UL)                      /*!< Min index of RR[8] array.                                            */
  #define WDT_RR_ResetValue (0x00000000UL)           /*!< Reset value of RR[8] register.                                       */

/* RR @Bits 0..31 : Reload request register */
  #define WDT_RR_RR_Pos (0UL)                        /*!< Position of RR field.                                                */
  #define WDT_RR_RR_Msk (0xFFFFFFFFUL << WDT_RR_RR_Pos) /*!< Bit mask of RR field.                                             */
  #define WDT_RR_RR_Min (0x6E524635UL)               /*!< Min enumerator value of RR field.                                    */
  #define WDT_RR_RR_Max (0x6E524635UL)               /*!< Max enumerator value of RR field.                                    */
  #define WDT_RR_RR_Reload (0x6E524635UL)            /*!< Value to request a reload of the watchdog timer                      */


#endif                                               /*!< !defined(__ASSEMBLER__) && !defined(__ASSEMBLY__)                    */

/* ========================================== End of section using anonymous unions ========================================== */

#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif
#endif /* NRF54LS05B_ENGA_TYPES_H */

